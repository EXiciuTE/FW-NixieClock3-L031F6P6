
FW-NixieClock3-L031F6P6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007040  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08007100  08007100  00017100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007134  08007134  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08007134  08007134  00017134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800713c  0800713c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800713c  0800713c  0001713c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007140  08007140  00017140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08007144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  20000034  08007178  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  08007178  000205b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b90  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003554  00000000  00000000  00031bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00035140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00036210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001393e  00000000  00000000  00037128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017220  00000000  00000000  0004aa66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069e37  00000000  00000000  00061c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cbabd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a8c  00000000  00000000  000cbb10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000034 	.word	0x20000034
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080070e8 	.word	0x080070e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000038 	.word	0x20000038
 8000104:	080070e8 	.word	0x080070e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <MX_DMA_Init+0x38>)
 80004b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <MX_DMA_Init+0x38>)
 80004b4:	2101      	movs	r1, #1
 80004b6:	430a      	orrs	r2, r1
 80004b8:	631a      	str	r2, [r3, #48]	; 0x30
 80004ba:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <MX_DMA_Init+0x38>)
 80004bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004be:	2201      	movs	r2, #1
 80004c0:	4013      	ands	r3, r2
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2100      	movs	r1, #0
 80004ca:	2009      	movs	r0, #9
 80004cc:	f002 ff06 	bl	80032dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004d0:	2009      	movs	r0, #9
 80004d2:	f002 ff18 	bl	8003306 <HAL_NVIC_EnableIRQ>

}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b002      	add	sp, #8
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	40021000 	.word	0x40021000

080004e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b089      	sub	sp, #36	; 0x24
 80004e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	240c      	movs	r4, #12
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	0018      	movs	r0, r3
 80004f0:	2314      	movs	r3, #20
 80004f2:	001a      	movs	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	f006 fdef 	bl	80070d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b2f      	ldr	r3, [pc, #188]	; (80005b8 <MX_GPIO_Init+0xd4>)
 80004fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004fe:	4b2e      	ldr	r3, [pc, #184]	; (80005b8 <MX_GPIO_Init+0xd4>)
 8000500:	2101      	movs	r1, #1
 8000502:	430a      	orrs	r2, r1
 8000504:	62da      	str	r2, [r3, #44]	; 0x2c
 8000506:	4b2c      	ldr	r3, [pc, #176]	; (80005b8 <MX_GPIO_Init+0xd4>)
 8000508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800050a:	2201      	movs	r2, #1
 800050c:	4013      	ands	r3, r2
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000512:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <MX_GPIO_Init+0xd4>)
 8000514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000516:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <MX_GPIO_Init+0xd4>)
 8000518:	2102      	movs	r1, #2
 800051a:	430a      	orrs	r2, r1
 800051c:	62da      	str	r2, [r3, #44]	; 0x2c
 800051e:	4b26      	ldr	r3, [pc, #152]	; (80005b8 <MX_GPIO_Init+0xd4>)
 8000520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000522:	2202      	movs	r2, #2
 8000524:	4013      	ands	r3, r2
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(sr_shift_output_GPIO_Port, sr_shift_output_Pin, GPIO_PIN_RESET);
 800052a:	23a0      	movs	r3, #160	; 0xa0
 800052c:	05db      	lsls	r3, r3, #23
 800052e:	2200      	movs	r2, #0
 8000530:	2140      	movs	r1, #64	; 0x40
 8000532:	0018      	movs	r0, r3
 8000534:	f003 fc33 	bl	8003d9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(enable_hv_GPIO_Port, enable_hv_Pin, GPIO_PIN_RESET);
 8000538:	4b20      	ldr	r3, [pc, #128]	; (80005bc <MX_GPIO_Init+0xd8>)
 800053a:	2200      	movs	r2, #0
 800053c:	2102      	movs	r1, #2
 800053e:	0018      	movs	r0, r3
 8000540:	f003 fc2d 	bl	8003d9e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = rot_b_Pin|rot_a_Pin|sens_size_Pin|rot_push_Pin;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	221b      	movs	r2, #27
 8000548:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800054a:	193b      	adds	r3, r7, r4
 800054c:	2200      	movs	r2, #0
 800054e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000550:	193b      	adds	r3, r7, r4
 8000552:	2202      	movs	r2, #2
 8000554:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	193a      	adds	r2, r7, r4
 8000558:	23a0      	movs	r3, #160	; 0xa0
 800055a:	05db      	lsls	r3, r3, #23
 800055c:	0011      	movs	r1, r2
 800055e:	0018      	movs	r0, r3
 8000560:	f003 fa92 	bl	8003a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = sr_shift_output_Pin;
 8000564:	193b      	adds	r3, r7, r4
 8000566:	2240      	movs	r2, #64	; 0x40
 8000568:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056a:	193b      	adds	r3, r7, r4
 800056c:	2201      	movs	r2, #1
 800056e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	193b      	adds	r3, r7, r4
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	193b      	adds	r3, r7, r4
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(sr_shift_output_GPIO_Port, &GPIO_InitStruct);
 800057c:	193a      	adds	r2, r7, r4
 800057e:	23a0      	movs	r3, #160	; 0xa0
 8000580:	05db      	lsls	r3, r3, #23
 8000582:	0011      	movs	r1, r2
 8000584:	0018      	movs	r0, r3
 8000586:	f003 fa7f 	bl	8003a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = enable_hv_Pin;
 800058a:	0021      	movs	r1, r4
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2202      	movs	r2, #2
 8000590:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2201      	movs	r2, #1
 8000596:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(enable_hv_GPIO_Port, &GPIO_InitStruct);
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <MX_GPIO_Init+0xd8>)
 80005a8:	0019      	movs	r1, r3
 80005aa:	0010      	movs	r0, r2
 80005ac:	f003 fa6c 	bl	8003a88 <HAL_GPIO_Init>

}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b009      	add	sp, #36	; 0x24
 80005b6:	bd90      	pop	{r4, r7, pc}
 80005b8:	40021000 	.word	0x40021000
 80005bc:	50000400 	.word	0x50000400

080005c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <MX_I2C1_Init+0x74>)
 80005c6:	4a1c      	ldr	r2, [pc, #112]	; (8000638 <MX_I2C1_Init+0x78>)
 80005c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <MX_I2C1_Init+0x74>)
 80005cc:	4a1b      	ldr	r2, [pc, #108]	; (800063c <MX_I2C1_Init+0x7c>)
 80005ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <MX_I2C1_Init+0x74>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_I2C1_Init+0x74>)
 80005d8:	2201      	movs	r2, #1
 80005da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <MX_I2C1_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_I2C1_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_I2C1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_I2C1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_I2C1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_I2C1_Init+0x74>)
 80005fc:	0018      	movs	r0, r3
 80005fe:	f003 fbeb 	bl	8003dd8 <HAL_I2C_Init>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000606:	f000 fcc1 	bl	8000f8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <MX_I2C1_Init+0x74>)
 800060c:	2100      	movs	r1, #0
 800060e:	0018      	movs	r0, r3
 8000610:	f004 f93e 	bl	8004890 <HAL_I2CEx_ConfigAnalogFilter>
 8000614:	1e03      	subs	r3, r0, #0
 8000616:	d001      	beq.n	800061c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000618:	f000 fcb8 	bl	8000f8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <MX_I2C1_Init+0x74>)
 800061e:	2100      	movs	r1, #0
 8000620:	0018      	movs	r0, r3
 8000622:	f004 f981 	bl	8004928 <HAL_I2CEx_ConfigDigitalFilter>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800062a:	f000 fcaf 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000050 	.word	0x20000050
 8000638:	40005400 	.word	0x40005400
 800063c:	0060112f 	.word	0x0060112f

08000640 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b089      	sub	sp, #36	; 0x24
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	240c      	movs	r4, #12
 800064a:	193b      	adds	r3, r7, r4
 800064c:	0018      	movs	r0, r3
 800064e:	2314      	movs	r3, #20
 8000650:	001a      	movs	r2, r3
 8000652:	2100      	movs	r1, #0
 8000654:	f006 fd40 	bl	80070d8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a18      	ldr	r2, [pc, #96]	; (80006c0 <HAL_I2C_MspInit+0x80>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d12a      	bne.n	80006b8 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <HAL_I2C_MspInit+0x84>)
 8000664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_I2C_MspInit+0x84>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	62da      	str	r2, [r3, #44]	; 0x2c
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_I2C_MspInit+0x84>)
 8000670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800067a:	193b      	adds	r3, r7, r4
 800067c:	22c0      	movs	r2, #192	; 0xc0
 800067e:	00d2      	lsls	r2, r2, #3
 8000680:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000682:	0021      	movs	r1, r4
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2212      	movs	r2, #18
 8000688:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2203      	movs	r2, #3
 8000694:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2201      	movs	r2, #1
 800069a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	187a      	adds	r2, r7, r1
 800069e:	23a0      	movs	r3, #160	; 0xa0
 80006a0:	05db      	lsls	r3, r3, #23
 80006a2:	0011      	movs	r1, r2
 80006a4:	0018      	movs	r0, r3
 80006a6:	f003 f9ef 	bl	8003a88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_I2C_MspInit+0x84>)
 80006ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <HAL_I2C_MspInit+0x84>)
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	0389      	lsls	r1, r1, #14
 80006b4:	430a      	orrs	r2, r1
 80006b6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b009      	add	sp, #36	; 0x24
 80006be:	bd90      	pop	{r4, r7, pc}
 80006c0:	40005400 	.word	0x40005400
 80006c4:	40021000 	.word	0x40021000

080006c8 <_Z17run_input_handlerv>:
 * 	b0 HIGH: decoder turned right one click
 * 	b1 HIGH: decoder turned left one click
 * 	b2 HIGH: push button short pushed and released	>50ms
 * 	b3 HIGH: push button long pushed and NOT released >2000ms
 */
uint8_t run_input_handler(void){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
	static uint8_t test_byte=0;
	uint8_t calculated_input_byte=0;
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
	static uint8_t input_data=0;
	input_data=debouncer();											//debouncing
 80006d4:	f000 f844 	bl	8000760 <_Z9debouncerv>
 80006d8:	0003      	movs	r3, r0
 80006da:	001a      	movs	r2, r3
 80006dc:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <_Z17run_input_handlerv+0x90>)
 80006de:	701a      	strb	r2, [r3, #0]
	calculated_input_byte |= decoder(input_data&DECODE_FILTER);		//rotary decoding
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <_Z17run_input_handlerv+0x90>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2203      	movs	r2, #3
 80006e6:	4013      	ands	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 f8ec 	bl	80008c8 <_Z7decoderh>
 80006f0:	0003      	movs	r3, r0
 80006f2:	0019      	movs	r1, r3
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	1dfa      	adds	r2, r7, #7
 80006f8:	7812      	ldrb	r2, [r2, #0]
 80006fa:	430a      	orrs	r2, r1
 80006fc:	701a      	strb	r2, [r3, #0]
	calculated_input_byte |= push_handler(input_data&PUSH_FILTER);	//handling long press for push button
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <_Z17run_input_handlerv+0x90>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	220c      	movs	r2, #12
 8000704:	4013      	ands	r3, r2
 8000706:	b2db      	uxtb	r3, r3
 8000708:	0018      	movs	r0, r3
 800070a:	f000 f943 	bl	8000994 <_Z12push_handlerh>
 800070e:	0003      	movs	r3, r0
 8000710:	0019      	movs	r1, r3
 8000712:	1dfb      	adds	r3, r7, #7
 8000714:	1dfa      	adds	r2, r7, #7
 8000716:	7812      	ldrb	r2, [r2, #0]
 8000718:	430a      	orrs	r2, r1
 800071a:	701a      	strb	r2, [r3, #0]

	if((calculated_input_byte&DECODE_FILTER) == DECODER_CW){
 800071c:	1dfb      	adds	r3, r7, #7
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2203      	movs	r2, #3
 8000722:	4013      	ands	r3, r2
 8000724:	2b01      	cmp	r3, #1
 8000726:	d105      	bne.n	8000734 <_Z17run_input_handlerv+0x6c>
		test_byte++;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <_Z17run_input_handlerv+0x94>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <_Z17run_input_handlerv+0x94>)
 8000732:	701a      	strb	r2, [r3, #0]
	}
	if((calculated_input_byte&DECODE_FILTER) == DECODER_CCW){
 8000734:	1dfb      	adds	r3, r7, #7
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2203      	movs	r2, #3
 800073a:	4013      	ands	r3, r2
 800073c:	2b02      	cmp	r3, #2
 800073e:	d105      	bne.n	800074c <_Z17run_input_handlerv+0x84>
		test_byte--;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <_Z17run_input_handlerv+0x94>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	3b01      	subs	r3, #1
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <_Z17run_input_handlerv+0x94>)
 800074a:	701a      	strb	r2, [r3, #0]
	}

	return calculated_input_byte;
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	781b      	ldrb	r3, [r3, #0]
}
 8000750:	0018      	movs	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	b002      	add	sp, #8
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200000a5 	.word	0x200000a5
 800075c:	200000a4 	.word	0x200000a4

08000760 <_Z9debouncerv>:
 * @return debounced input states in one byte
 * 	b0: HIGH: rotary_a high
 * 	b1: HIGH: rotary_b high
 * 	b2: HIGH: rotary_push high
 */
uint8_t debouncer(void){
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	static uint8_t debounced_data=0;
	static input_debounce_timer debounce_timer;
	//let's debounce some inputs
	if(HAL_GPIO_ReadPin(rot_a_GPIO_Port, rot_a_Pin)==true){
 8000764:	23a0      	movs	r3, #160	; 0xa0
 8000766:	05db      	lsls	r3, r3, #23
 8000768:	2102      	movs	r1, #2
 800076a:	0018      	movs	r0, r3
 800076c:	f003 fafa 	bl	8003d64 <HAL_GPIO_ReadPin>
 8000770:	0003      	movs	r3, r0
 8000772:	3b01      	subs	r3, #1
 8000774:	425a      	negs	r2, r3
 8000776:	4153      	adcs	r3, r2
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d00a      	beq.n	8000794 <_Z9debouncerv+0x34>
		if(debounce_timer.rotary_a<DEBOUNCE_TIME)
 800077e:	4b50      	ldr	r3, [pc, #320]	; (80008c0 <_Z9debouncerv+0x160>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b04      	cmp	r3, #4
 8000784:	d810      	bhi.n	80007a8 <_Z9debouncerv+0x48>
			debounce_timer.rotary_a++;
 8000786:	4b4e      	ldr	r3, [pc, #312]	; (80008c0 <_Z9debouncerv+0x160>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b4c      	ldr	r3, [pc, #304]	; (80008c0 <_Z9debouncerv+0x160>)
 8000790:	701a      	strb	r2, [r3, #0]
 8000792:	e009      	b.n	80007a8 <_Z9debouncerv+0x48>
	}
	else{
		if(debounce_timer.rotary_a!=0)
 8000794:	4b4a      	ldr	r3, [pc, #296]	; (80008c0 <_Z9debouncerv+0x160>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d005      	beq.n	80007a8 <_Z9debouncerv+0x48>
			debounce_timer.rotary_a--;
 800079c:	4b48      	ldr	r3, [pc, #288]	; (80008c0 <_Z9debouncerv+0x160>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	3b01      	subs	r3, #1
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b46      	ldr	r3, [pc, #280]	; (80008c0 <_Z9debouncerv+0x160>)
 80007a6:	701a      	strb	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(rot_b_GPIO_Port, rot_b_Pin)==true){
 80007a8:	23a0      	movs	r3, #160	; 0xa0
 80007aa:	05db      	lsls	r3, r3, #23
 80007ac:	2101      	movs	r1, #1
 80007ae:	0018      	movs	r0, r3
 80007b0:	f003 fad8 	bl	8003d64 <HAL_GPIO_ReadPin>
 80007b4:	0003      	movs	r3, r0
 80007b6:	3b01      	subs	r3, #1
 80007b8:	425a      	negs	r2, r3
 80007ba:	4153      	adcs	r3, r2
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d00a      	beq.n	80007d8 <_Z9debouncerv+0x78>
		if(debounce_timer.rotary_b<DEBOUNCE_TIME)
 80007c2:	4b3f      	ldr	r3, [pc, #252]	; (80008c0 <_Z9debouncerv+0x160>)
 80007c4:	785b      	ldrb	r3, [r3, #1]
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	d810      	bhi.n	80007ec <_Z9debouncerv+0x8c>
			debounce_timer.rotary_b++;
 80007ca:	4b3d      	ldr	r3, [pc, #244]	; (80008c0 <_Z9debouncerv+0x160>)
 80007cc:	785b      	ldrb	r3, [r3, #1]
 80007ce:	3301      	adds	r3, #1
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b3b      	ldr	r3, [pc, #236]	; (80008c0 <_Z9debouncerv+0x160>)
 80007d4:	705a      	strb	r2, [r3, #1]
 80007d6:	e009      	b.n	80007ec <_Z9debouncerv+0x8c>
	}
	else{
		if(debounce_timer.rotary_b!=0)
 80007d8:	4b39      	ldr	r3, [pc, #228]	; (80008c0 <_Z9debouncerv+0x160>)
 80007da:	785b      	ldrb	r3, [r3, #1]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d005      	beq.n	80007ec <_Z9debouncerv+0x8c>
			debounce_timer.rotary_b--;
 80007e0:	4b37      	ldr	r3, [pc, #220]	; (80008c0 <_Z9debouncerv+0x160>)
 80007e2:	785b      	ldrb	r3, [r3, #1]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b35      	ldr	r3, [pc, #212]	; (80008c0 <_Z9debouncerv+0x160>)
 80007ea:	705a      	strb	r2, [r3, #1]
	}
	if(HAL_GPIO_ReadPin(rot_push_GPIO_Port, rot_push_Pin)==true){
 80007ec:	23a0      	movs	r3, #160	; 0xa0
 80007ee:	05db      	lsls	r3, r3, #23
 80007f0:	2110      	movs	r1, #16
 80007f2:	0018      	movs	r0, r3
 80007f4:	f003 fab6 	bl	8003d64 <HAL_GPIO_ReadPin>
 80007f8:	0003      	movs	r3, r0
 80007fa:	3b01      	subs	r3, #1
 80007fc:	425a      	negs	r2, r3
 80007fe:	4153      	adcs	r3, r2
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b00      	cmp	r3, #0
 8000804:	d00a      	beq.n	800081c <_Z9debouncerv+0xbc>
		if(debounce_timer.rotary_push<DEBOUNCE_TIME)
 8000806:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <_Z9debouncerv+0x160>)
 8000808:	789b      	ldrb	r3, [r3, #2]
 800080a:	2b04      	cmp	r3, #4
 800080c:	d810      	bhi.n	8000830 <_Z9debouncerv+0xd0>
			debounce_timer.rotary_push++;
 800080e:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <_Z9debouncerv+0x160>)
 8000810:	789b      	ldrb	r3, [r3, #2]
 8000812:	3301      	adds	r3, #1
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <_Z9debouncerv+0x160>)
 8000818:	709a      	strb	r2, [r3, #2]
 800081a:	e009      	b.n	8000830 <_Z9debouncerv+0xd0>
	}
	else{
		if(debounce_timer.rotary_push!=0)
 800081c:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <_Z9debouncerv+0x160>)
 800081e:	789b      	ldrb	r3, [r3, #2]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d005      	beq.n	8000830 <_Z9debouncerv+0xd0>
			debounce_timer.rotary_push--;
 8000824:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <_Z9debouncerv+0x160>)
 8000826:	789b      	ldrb	r3, [r3, #2]
 8000828:	3b01      	subs	r3, #1
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <_Z9debouncerv+0x160>)
 800082e:	709a      	strb	r2, [r3, #2]
	}

	//now lets check the inputs
	if(debounce_timer.rotary_a==DEBOUNCE_TIME)
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <_Z9debouncerv+0x160>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b05      	cmp	r3, #5
 8000836:	d106      	bne.n	8000846 <_Z9debouncerv+0xe6>
		debounced_data |= 0x1;
 8000838:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <_Z9debouncerv+0x164>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2201      	movs	r2, #1
 800083e:	4313      	orrs	r3, r2
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <_Z9debouncerv+0x164>)
 8000844:	701a      	strb	r2, [r3, #0]
	if(debounce_timer.rotary_a==0)
 8000846:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <_Z9debouncerv+0x160>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d106      	bne.n	800085c <_Z9debouncerv+0xfc>
		debounced_data &= ~0x1;
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <_Z9debouncerv+0x164>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2201      	movs	r2, #1
 8000854:	4393      	bics	r3, r2
 8000856:	b2da      	uxtb	r2, r3
 8000858:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <_Z9debouncerv+0x164>)
 800085a:	701a      	strb	r2, [r3, #0]
	if(debounce_timer.rotary_b==DEBOUNCE_TIME)
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <_Z9debouncerv+0x160>)
 800085e:	785b      	ldrb	r3, [r3, #1]
 8000860:	2b05      	cmp	r3, #5
 8000862:	d106      	bne.n	8000872 <_Z9debouncerv+0x112>
		debounced_data |= 0x2;
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <_Z9debouncerv+0x164>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2202      	movs	r2, #2
 800086a:	4313      	orrs	r3, r2
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <_Z9debouncerv+0x164>)
 8000870:	701a      	strb	r2, [r3, #0]
	if(debounce_timer.rotary_b==0)
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <_Z9debouncerv+0x160>)
 8000874:	785b      	ldrb	r3, [r3, #1]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d106      	bne.n	8000888 <_Z9debouncerv+0x128>
		debounced_data &= ~0x2;
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <_Z9debouncerv+0x164>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2202      	movs	r2, #2
 8000880:	4393      	bics	r3, r2
 8000882:	b2da      	uxtb	r2, r3
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <_Z9debouncerv+0x164>)
 8000886:	701a      	strb	r2, [r3, #0]
	if(debounce_timer.rotary_push==DEBOUNCE_TIME)
 8000888:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <_Z9debouncerv+0x160>)
 800088a:	789b      	ldrb	r3, [r3, #2]
 800088c:	2b05      	cmp	r3, #5
 800088e:	d106      	bne.n	800089e <_Z9debouncerv+0x13e>
		debounced_data |= 0x4;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <_Z9debouncerv+0x164>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2204      	movs	r2, #4
 8000896:	4313      	orrs	r3, r2
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <_Z9debouncerv+0x164>)
 800089c:	701a      	strb	r2, [r3, #0]
	if(debounce_timer.rotary_push==0)
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <_Z9debouncerv+0x160>)
 80008a0:	789b      	ldrb	r3, [r3, #2]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d106      	bne.n	80008b4 <_Z9debouncerv+0x154>
		debounced_data &= ~0x4;
 80008a6:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <_Z9debouncerv+0x164>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2204      	movs	r2, #4
 80008ac:	4393      	bics	r3, r2
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <_Z9debouncerv+0x164>)
 80008b2:	701a      	strb	r2, [r3, #0]
	return debounced_data;
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <_Z9debouncerv+0x164>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
}
 80008b8:	0018      	movs	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	200000a8 	.word	0x200000a8
 80008c4:	200000a6 	.word	0x200000a6

080008c8 <_Z7decoderh>:
 * @param input debounced data - see debouncer() [0b = a; b1 = b]
 * @return information, if decoder turned left, right or not
 *  b0 HIGH: did turn right - CW
 *  b1 HIGH: did turn left - CCW
 */
uint8_t decoder(uint8_t new_state){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	0002      	movs	r2, r0
 80008d0:	1dfb      	adds	r3, r7, #7
 80008d2:	701a      	strb	r2, [r3, #0]
	static uint8_t last_state=0;
	uint8_t decoded_data=0;
 80008d4:	210f      	movs	r1, #15
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
	if(last_state == 0x00){
 80008dc:	4b2c      	ldr	r3, [pc, #176]	; (8000990 <_Z7decoderh+0xc8>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d10e      	bne.n	8000902 <_Z7decoderh+0x3a>
		if(new_state==0x01)
 80008e4:	1dfb      	adds	r3, r7, #7
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d102      	bne.n	80008f2 <_Z7decoderh+0x2a>
			decoded_data =DECODER_CW;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2201      	movs	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]
		if(new_state==0x10)
 80008f2:	1dfb      	adds	r3, r7, #7
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b10      	cmp	r3, #16
 80008f8:	d103      	bne.n	8000902 <_Z7decoderh+0x3a>
			decoded_data =DECODER_CCW;
 80008fa:	230f      	movs	r3, #15
 80008fc:	18fb      	adds	r3, r7, r3
 80008fe:	2202      	movs	r2, #2
 8000900:	701a      	strb	r2, [r3, #0]
	}
	if(last_state == 0x01){
 8000902:	4b23      	ldr	r3, [pc, #140]	; (8000990 <_Z7decoderh+0xc8>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d10f      	bne.n	800092a <_Z7decoderh+0x62>
		if(new_state==0x11)
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b11      	cmp	r3, #17
 8000910:	d103      	bne.n	800091a <_Z7decoderh+0x52>
			decoded_data =DECODER_CW;
 8000912:	230f      	movs	r3, #15
 8000914:	18fb      	adds	r3, r7, r3
 8000916:	2201      	movs	r2, #1
 8000918:	701a      	strb	r2, [r3, #0]
		if(new_state==0x00)
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d103      	bne.n	800092a <_Z7decoderh+0x62>
			decoded_data =DECODER_CCW;
 8000922:	230f      	movs	r3, #15
 8000924:	18fb      	adds	r3, r7, r3
 8000926:	2202      	movs	r2, #2
 8000928:	701a      	strb	r2, [r3, #0]
	}
	if(last_state == 0x11){
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <_Z7decoderh+0xc8>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b11      	cmp	r3, #17
 8000930:	d10f      	bne.n	8000952 <_Z7decoderh+0x8a>
		if(new_state==0x10)
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b10      	cmp	r3, #16
 8000938:	d103      	bne.n	8000942 <_Z7decoderh+0x7a>
			decoded_data =DECODER_CW;
 800093a:	230f      	movs	r3, #15
 800093c:	18fb      	adds	r3, r7, r3
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
		if(new_state==0x01)
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d103      	bne.n	8000952 <_Z7decoderh+0x8a>
			decoded_data =DECODER_CCW;
 800094a:	230f      	movs	r3, #15
 800094c:	18fb      	adds	r3, r7, r3
 800094e:	2202      	movs	r2, #2
 8000950:	701a      	strb	r2, [r3, #0]
	}
	if(last_state == 0x10){
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <_Z7decoderh+0xc8>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b10      	cmp	r3, #16
 8000958:	d10f      	bne.n	800097a <_Z7decoderh+0xb2>
		if(new_state==0x00)
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d103      	bne.n	800096a <_Z7decoderh+0xa2>
			decoded_data =DECODER_CW;
 8000962:	230f      	movs	r3, #15
 8000964:	18fb      	adds	r3, r7, r3
 8000966:	2201      	movs	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]
		if(new_state==0x11)
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b11      	cmp	r3, #17
 8000970:	d103      	bne.n	800097a <_Z7decoderh+0xb2>
			decoded_data =DECODER_CCW;
 8000972:	230f      	movs	r3, #15
 8000974:	18fb      	adds	r3, r7, r3
 8000976:	2202      	movs	r2, #2
 8000978:	701a      	strb	r2, [r3, #0]
	}
	last_state = new_state;
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <_Z7decoderh+0xc8>)
 800097c:	1dfa      	adds	r2, r7, #7
 800097e:	7812      	ldrb	r2, [r2, #0]
 8000980:	701a      	strb	r2, [r3, #0]
	return decoded_data;
 8000982:	230f      	movs	r3, #15
 8000984:	18fb      	adds	r3, r7, r3
 8000986:	781b      	ldrb	r3, [r3, #0]
}
 8000988:	0018      	movs	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	b004      	add	sp, #16
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000ab 	.word	0x200000ab

08000994 <_Z12push_handlerh>:
 * @param input debounced data - see debouncer()
 * @return wether input was pressed short, long or not at all
 * 	b2 HIGH: push button short pushed and released	>50ms
 * 	b3 HIGH: push button long pushed and NOT released >2000ms
 */
uint8_t push_handler(uint8_t push_button){
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	0002      	movs	r2, r0
 800099c:	1dfb      	adds	r3, r7, #7
 800099e:	701a      	strb	r2, [r3, #0]
	push_button = push_button >> 2;
 80009a0:	1dfb      	adds	r3, r7, #7
 80009a2:	1dfa      	adds	r2, r7, #7
 80009a4:	7812      	ldrb	r2, [r2, #0]
 80009a6:	0892      	lsrs	r2, r2, #2
 80009a8:	701a      	strb	r2, [r3, #0]
	static uint16_t input_hold_timer=0;
	uint8_t push_state=0;
 80009aa:	230f      	movs	r3, #15
 80009ac:	18fb      	adds	r3, r7, r3
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]

	if(push_button == true && input_hold_timer<=LONG_PUSH_TIME+2){
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d10a      	bne.n	80009d0 <_Z12push_handlerh+0x3c>
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <_Z12push_handlerh+0x88>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	4a18      	ldr	r2, [pc, #96]	; (8000a20 <_Z12push_handlerh+0x8c>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d805      	bhi.n	80009d0 <_Z12push_handlerh+0x3c>
		input_hold_timer++;
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <_Z12push_handlerh+0x88>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <_Z12push_handlerh+0x88>)
 80009ce:	801a      	strh	r2, [r3, #0]
	}

	if(push_button == false){
 80009d0:	1dfb      	adds	r3, r7, #7
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d110      	bne.n	80009fa <_Z12push_handlerh+0x66>
		if(input_hold_timer>=SHORT_PUSH_TIME && input_hold_timer<=LONG_PUSH_TIME)
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <_Z12push_handlerh+0x88>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	2b31      	cmp	r3, #49	; 0x31
 80009de:	d909      	bls.n	80009f4 <_Z12push_handlerh+0x60>
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <_Z12push_handlerh+0x88>)
 80009e2:	881a      	ldrh	r2, [r3, #0]
 80009e4:	23fa      	movs	r3, #250	; 0xfa
 80009e6:	00db      	lsls	r3, r3, #3
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d803      	bhi.n	80009f4 <_Z12push_handlerh+0x60>
			push_state = SHORT_PUSH;
 80009ec:	230f      	movs	r3, #15
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	2204      	movs	r2, #4
 80009f2:	701a      	strb	r2, [r3, #0]
		input_hold_timer=0;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <_Z12push_handlerh+0x88>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	801a      	strh	r2, [r3, #0]
	}

	if(input_hold_timer==LONG_PUSH_TIME){
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <_Z12push_handlerh+0x88>)
 80009fc:	881a      	ldrh	r2, [r3, #0]
 80009fe:	23fa      	movs	r3, #250	; 0xfa
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d103      	bne.n	8000a0e <_Z12push_handlerh+0x7a>
		push_state = LONG_PUSH;
 8000a06:	230f      	movs	r3, #15
 8000a08:	18fb      	adds	r3, r7, r3
 8000a0a:	2208      	movs	r2, #8
 8000a0c:	701a      	strb	r2, [r3, #0]
	}
	return push_state;
 8000a0e:	230f      	movs	r3, #15
 8000a10:	18fb      	adds	r3, r7, r3
 8000a12:	781b      	ldrb	r3, [r3, #0]
}
 8000a14:	0018      	movs	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b004      	add	sp, #16
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200000ac 	.word	0x200000ac
 8000a20:	000007d2 	.word	0x000007d2

08000a24 <_Z9set_colorhmh>:
 * @brief function to write new color to output queue
 * @param led_number number to which led the color should be applied [0-5]
 * @param hex_code	enter RGB Hex code of color or use predefined values
 * @param brightness choose brightness level between 1 and 100 - brightness cannot turn led off
 */
void set_color(uint8_t led_number, uint32_t hex_code, uint8_t brightness){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6039      	str	r1, [r7, #0]
 8000a2c:	0011      	movs	r1, r2
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	1c02      	adds	r2, r0, #0
 8000a32:	701a      	strb	r2, [r3, #0]
 8000a34:	1dbb      	adds	r3, r7, #6
 8000a36:	1c0a      	adds	r2, r1, #0
 8000a38:	701a      	strb	r2, [r3, #0]
	brightness_controller = 0;
 8000a3a:	4b3c      	ldr	r3, [pc, #240]	; (8000b2c <_Z9set_colorhmh+0x108>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
	if(led_number>=MAX_LED)
 8000a40:	1dfb      	adds	r3, r7, #7
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b05      	cmp	r3, #5
 8000a46:	d902      	bls.n	8000a4e <_Z9set_colorhmh+0x2a>
		led_number=MAX_LED-1;
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	2205      	movs	r2, #5
 8000a4c:	701a      	strb	r2, [r3, #0]
	led_data[led_number]=0;
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781a      	ldrb	r2, [r3, #0]
 8000a52:	4b37      	ldr	r3, [pc, #220]	; (8000b30 <_Z9set_colorhmh+0x10c>)
 8000a54:	0092      	lsls	r2, r2, #2
 8000a56:	2100      	movs	r1, #0
 8000a58:	50d1      	str	r1, [r2, r3]
	if(brightness>100)
 8000a5a:	1dbb      	adds	r3, r7, #6
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b64      	cmp	r3, #100	; 0x64
 8000a60:	d902      	bls.n	8000a68 <_Z9set_colorhmh+0x44>
		brightness = 100;
 8000a62:	1dbb      	adds	r3, r7, #6
 8000a64:	2264      	movs	r2, #100	; 0x64
 8000a66:	701a      	strb	r2, [r3, #0]
	if(brightness<1)
 8000a68:	1dbb      	adds	r3, r7, #6
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_Z9set_colorhmh+0x52>
		brightness = 1;
 8000a70:	1dbb      	adds	r3, r7, #6
 8000a72:	2201      	movs	r2, #1
 8000a74:	701a      	strb	r2, [r3, #0]
	//apply brightness to each color segment and reshuffle bits as required by the LED: green-red-blue
	//red
	brightness_controller = (uint32_t)((hex_code&0xff0000) >> 16)*brightness/100;
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	0c1b      	lsrs	r3, r3, #16
 8000a7a:	22ff      	movs	r2, #255	; 0xff
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	1dba      	adds	r2, r7, #6
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	4353      	muls	r3, r2
 8000a84:	2164      	movs	r1, #100	; 0x64
 8000a86:	0018      	movs	r0, r3
 8000a88:	f7ff fb3e 	bl	8000108 <__udivsi3>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <_Z9set_colorhmh+0x108>)
 8000a92:	701a      	strb	r2, [r3, #0]
	led_data[led_number] |= (uint32_t)brightness_controller << 8;
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	781a      	ldrb	r2, [r3, #0]
 8000a98:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <_Z9set_colorhmh+0x10c>)
 8000a9a:	0092      	lsls	r2, r2, #2
 8000a9c:	58d1      	ldr	r1, [r2, r3]
 8000a9e:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <_Z9set_colorhmh+0x108>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	1dfa      	adds	r2, r7, #7
 8000aa6:	7812      	ldrb	r2, [r2, #0]
 8000aa8:	4319      	orrs	r1, r3
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <_Z9set_colorhmh+0x10c>)
 8000aac:	0092      	lsls	r2, r2, #2
 8000aae:	50d1      	str	r1, [r2, r3]
	//green
	brightness_controller = (uint32_t)((hex_code&0xff00) >> 8)*brightness/100;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	0a1b      	lsrs	r3, r3, #8
 8000ab4:	22ff      	movs	r2, #255	; 0xff
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	1dba      	adds	r2, r7, #6
 8000aba:	7812      	ldrb	r2, [r2, #0]
 8000abc:	4353      	muls	r3, r2
 8000abe:	2164      	movs	r1, #100	; 0x64
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f7ff fb21 	bl	8000108 <__udivsi3>
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <_Z9set_colorhmh+0x108>)
 8000acc:	701a      	strb	r2, [r3, #0]
	led_data[led_number] |= (uint32_t)brightness_controller << 16;
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781a      	ldrb	r2, [r3, #0]
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <_Z9set_colorhmh+0x10c>)
 8000ad4:	0092      	lsls	r2, r2, #2
 8000ad6:	58d1      	ldr	r1, [r2, r3]
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <_Z9set_colorhmh+0x108>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	041b      	lsls	r3, r3, #16
 8000ade:	1dfa      	adds	r2, r7, #7
 8000ae0:	7812      	ldrb	r2, [r2, #0]
 8000ae2:	4319      	orrs	r1, r3
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <_Z9set_colorhmh+0x10c>)
 8000ae6:	0092      	lsls	r2, r2, #2
 8000ae8:	50d1      	str	r1, [r2, r3]
	//blue
	brightness_controller = (uint32_t)(hex_code&0xff)*brightness/100;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	22ff      	movs	r2, #255	; 0xff
 8000aee:	4013      	ands	r3, r2
 8000af0:	1dba      	adds	r2, r7, #6
 8000af2:	7812      	ldrb	r2, [r2, #0]
 8000af4:	4353      	muls	r3, r2
 8000af6:	2164      	movs	r1, #100	; 0x64
 8000af8:	0018      	movs	r0, r3
 8000afa:	f7ff fb05 	bl	8000108 <__udivsi3>
 8000afe:	0003      	movs	r3, r0
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <_Z9set_colorhmh+0x108>)
 8000b04:	701a      	strb	r2, [r3, #0]
	led_data[led_number] |= brightness_controller;
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	781a      	ldrb	r2, [r3, #0]
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <_Z9set_colorhmh+0x10c>)
 8000b0c:	0092      	lsls	r2, r2, #2
 8000b0e:	58d3      	ldr	r3, [r2, r3]
 8000b10:	4a06      	ldr	r2, [pc, #24]	; (8000b2c <_Z9set_colorhmh+0x108>)
 8000b12:	7812      	ldrb	r2, [r2, #0]
 8000b14:	0011      	movs	r1, r2
 8000b16:	1dfa      	adds	r2, r7, #7
 8000b18:	7812      	ldrb	r2, [r2, #0]
 8000b1a:	4319      	orrs	r1, r3
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <_Z9set_colorhmh+0x10c>)
 8000b1e:	0092      	lsls	r2, r2, #2
 8000b20:	50d1      	str	r1, [r2, r3]
}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b002      	add	sp, #8
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	200000ae 	.word	0x200000ae
 8000b30:	200000b4 	.word	0x200000b4

08000b34 <_Z9send_datab>:
/*
 * @brief: calling this command will prepare the data and perform a dma request to output the Data
 * also used to turn led on or off
 * @param state true: actual data is send to led; false: 0 is send to turn LED off
 */
void send_data(bool state){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	0002      	movs	r2, r0
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	701a      	strb	r2, [r3, #0]
//T0L = 580ns~1us
//T1L = 220ns~420ns
//RES = >280us
// 1 period = 40 cycles = 1,25us = 800kHz

	index = 0;
 8000b40:	4b40      	ldr	r3, [pc, #256]	; (8000c44 <_Z9send_datab+0x110>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<MAX_LED;i++){
 8000b46:	230f      	movs	r3, #15
 8000b48:	18fb      	adds	r3, r7, r3
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	230f      	movs	r3, #15
 8000b50:	18fb      	adds	r3, r7, r3
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b05      	cmp	r3, #5
 8000b56:	d846      	bhi.n	8000be6 <_Z9send_datab+0xb2>
		for(uint8_t j = NUM_BITS;j>0; j--){
 8000b58:	230e      	movs	r3, #14
 8000b5a:	18fb      	adds	r3, r7, r3
 8000b5c:	2218      	movs	r2, #24
 8000b5e:	701a      	strb	r2, [r3, #0]
 8000b60:	230e      	movs	r3, #14
 8000b62:	18fb      	adds	r3, r7, r3
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d036      	beq.n	8000bd8 <_Z9send_datab+0xa4>
			if(state == false){
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d107      	bne.n	8000b82 <_Z9send_datab+0x4e>
				pwm_data[index] = LOW_CLOCKS;
 8000b72:	4b34      	ldr	r3, [pc, #208]	; (8000c44 <_Z9send_datab+0x110>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	001a      	movs	r2, r3
 8000b78:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <_Z9send_datab+0x114>)
 8000b7a:	0052      	lsls	r2, r2, #1
 8000b7c:	210d      	movs	r1, #13
 8000b7e:	52d1      	strh	r1, [r2, r3]
 8000b80:	e01d      	b.n	8000bbe <_Z9send_datab+0x8a>
			}
			else{
				if(led_data[i]&(1<<(j-1)))
 8000b82:	230f      	movs	r3, #15
 8000b84:	18fb      	adds	r3, r7, r3
 8000b86:	781a      	ldrb	r2, [r3, #0]
 8000b88:	4b30      	ldr	r3, [pc, #192]	; (8000c4c <_Z9send_datab+0x118>)
 8000b8a:	0092      	lsls	r2, r2, #2
 8000b8c:	58d3      	ldr	r3, [r2, r3]
 8000b8e:	220e      	movs	r2, #14
 8000b90:	18ba      	adds	r2, r7, r2
 8000b92:	7812      	ldrb	r2, [r2, #0]
 8000b94:	3a01      	subs	r2, #1
 8000b96:	2101      	movs	r1, #1
 8000b98:	4091      	lsls	r1, r2
 8000b9a:	000a      	movs	r2, r1
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	d007      	beq.n	8000bb0 <_Z9send_datab+0x7c>
					pwm_data[index] = HIGH_CLOCKS;	//one period = 40 --> High bit = 70%
 8000ba0:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <_Z9send_datab+0x110>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <_Z9send_datab+0x114>)
 8000ba8:	0052      	lsls	r2, r2, #1
 8000baa:	211b      	movs	r1, #27
 8000bac:	52d1      	strh	r1, [r2, r3]
 8000bae:	e006      	b.n	8000bbe <_Z9send_datab+0x8a>
				else
					pwm_data[index] = LOW_CLOCKS;	//one period = 40 --> High bit = 30%
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <_Z9send_datab+0x110>)
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <_Z9send_datab+0x114>)
 8000bb8:	0052      	lsls	r2, r2, #1
 8000bba:	210d      	movs	r1, #13
 8000bbc:	52d1      	strh	r1, [r2, r3]
			}
			index++;
 8000bbe:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <_Z9send_datab+0x110>)
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <_Z9send_datab+0x110>)
 8000bc8:	801a      	strh	r2, [r3, #0]
		for(uint8_t j = NUM_BITS;j>0; j--){
 8000bca:	210e      	movs	r1, #14
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	781a      	ldrb	r2, [r3, #0]
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	3a01      	subs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
 8000bd6:	e7c3      	b.n	8000b60 <_Z9send_datab+0x2c>
	for(uint8_t i=0;i<MAX_LED;i++){
 8000bd8:	210f      	movs	r1, #15
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	781a      	ldrb	r2, [r3, #0]
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	3201      	adds	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
 8000be4:	e7b3      	b.n	8000b4e <_Z9send_datab+0x1a>
		}
	}
	for(uint8_t i = 0; i<LED_RESET; i++){
 8000be6:	230d      	movs	r3, #13
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
 8000bee:	200d      	movs	r0, #13
 8000bf0:	183b      	adds	r3, r7, r0
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2bef      	cmp	r3, #239	; 0xef
 8000bf6:	d812      	bhi.n	8000c1e <_Z9send_datab+0xea>
		pwm_data[index]=0;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <_Z9send_datab+0x110>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	001a      	movs	r2, r3
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <_Z9send_datab+0x114>)
 8000c00:	0052      	lsls	r2, r2, #1
 8000c02:	2100      	movs	r1, #0
 8000c04:	52d1      	strh	r1, [r2, r3]
		index++;
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <_Z9send_datab+0x110>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <_Z9send_datab+0x110>)
 8000c10:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i<LED_RESET; i++){
 8000c12:	183b      	adds	r3, r7, r0
 8000c14:	781a      	ldrb	r2, [r3, #0]
 8000c16:	183b      	adds	r3, r7, r0
 8000c18:	3201      	adds	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	e7e7      	b.n	8000bee <_Z9send_datab+0xba>
	}
	if(dma_running==false){
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <_Z9send_datab+0x11c>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d109      	bne.n	8000c3a <_Z9send_datab+0x106>
		HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, (uint32_t*)pwm_data, (MAX_LED*NUM_BITS)+LED_RESET);
 8000c26:	23c0      	movs	r3, #192	; 0xc0
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <_Z9send_datab+0x114>)
 8000c2c:	4809      	ldr	r0, [pc, #36]	; (8000c54 <_Z9send_datab+0x120>)
 8000c2e:	2108      	movs	r1, #8
 8000c30:	f005 f9b8 	bl	8005fa4 <HAL_TIM_PWM_Start_DMA>
		dma_running=true;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <_Z9send_datab+0x11c>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
	}
}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b004      	add	sp, #16
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	200000b0 	.word	0x200000b0
 8000c48:	200000cc 	.word	0x200000cc
 8000c4c:	200000b4 	.word	0x200000b4
 8000c50:	200003cc 	.word	0x200003cc
 8000c54:	200004cc 	.word	0x200004cc

08000c58 <HAL_TIM_PWM_PulseFinishedCallback>:

/*
 * @brief: callback function when transfer is finished to stop the DMA
 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_3);
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000c62:	2108      	movs	r1, #8
 8000c64:	0018      	movs	r0, r3
 8000c66:	f005 fb27 	bl	80062b8 <HAL_TIM_PWM_Stop_DMA>
	dma_running=false;
 8000c6a:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
}
 8000c70:	46c0      	nop			; (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b002      	add	sp, #8
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200004cc 	.word	0x200004cc
 8000c7c:	200003cc 	.word	0x200003cc

08000c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c82:	b091      	sub	sp, #68	; 0x44
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c86:	f002 fa0d 	bl	80030a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8a:	f000 f8d1 	bl	8000e30 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c8e:	f7ff fc29 	bl	80004e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c92:	f7ff fc09 	bl	80004a8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000c96:	f7ff fc93 	bl	80005c0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000c9a:	f001 fd47 	bl	800272c <MX_TIM2_Init>
  MX_TIM21_Init();
 8000c9e:	f001 fdc3 	bl	8002828 <MX_TIM21_Init>
  MX_SPI1_Init();
 8000ca2:	f001 fc7b 	bl	800259c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // start hardware timer for 1ms timer
  HAL_TIM_OC_Start_IT(&htim21, TIM_CHANNEL_1);
 8000ca6:	4b5c      	ldr	r3, [pc, #368]	; (8000e18 <main+0x198>)
 8000ca8:	2100      	movs	r1, #0
 8000caa:	0018      	movs	r0, r3
 8000cac:	f005 f860 	bl	8005d70 <HAL_TIM_OC_Start_IT>

  // check the size of the board
  board_size = 4;
 8000cb0:	4b5a      	ldr	r3, [pc, #360]	; (8000e1c <main+0x19c>)
 8000cb2:	2204      	movs	r2, #4
 8000cb4:	701a      	strb	r2, [r3, #0]
  if(HAL_GPIO_ReadPin(sens_size_GPIO_Port, sens_size_Pin)==true){
 8000cb6:	23a0      	movs	r3, #160	; 0xa0
 8000cb8:	05db      	lsls	r3, r3, #23
 8000cba:	2108      	movs	r1, #8
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f003 f851 	bl	8003d64 <HAL_GPIO_ReadPin>
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	425a      	negs	r2, r3
 8000cc8:	4153      	adcs	r3, r2
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <main+0x56>
	  board_size = 6;
 8000cd0:	4b52      	ldr	r3, [pc, #328]	; (8000e1c <main+0x19c>)
 8000cd2:	2206      	movs	r2, #6
 8000cd4:	701a      	strb	r2, [r3, #0]
  }

  // read flash - load time zones, LED an point config
  uint32_t *RDAddr = (uint32_t *) UP_FLASH_ADDR;
 8000cd6:	4b52      	ldr	r3, [pc, #328]	; (8000e20 <main+0x1a0>)
 8000cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t rx8[WORDS_IN_FLASH*4];

  for(uint8_t i=0; i<WORDS_IN_FLASH; i++){
 8000cda:	233b      	movs	r3, #59	; 0x3b
 8000cdc:	18fb      	adds	r3, r7, r3
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	203b      	movs	r0, #59	; 0x3b
 8000ce4:	183b      	adds	r3, r7, r0
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b0c      	cmp	r3, #12
 8000cea:	d82d      	bhi.n	8000d48 <main+0xc8>
	  uint32_t rx32 = *(__IO uint32_t *)RDAddr;
 8000cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	637b      	str	r3, [r7, #52]	; 0x34
	  RDAddr++;
 8000cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  rx8[i*4+0]=(uint8_t)(rx32&0xff);
 8000cf8:	183b      	adds	r3, r7, r0
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d00:	b2d1      	uxtb	r1, r2
 8000d02:	003a      	movs	r2, r7
 8000d04:	54d1      	strb	r1, [r2, r3]
	  rx8[i*4+1]=(uint8_t)(rx32 >> 8) &0xff;
 8000d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d08:	0a1a      	lsrs	r2, r3, #8
 8000d0a:	183b      	adds	r3, r7, r0
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	3301      	adds	r3, #1
 8000d12:	b2d1      	uxtb	r1, r2
 8000d14:	003a      	movs	r2, r7
 8000d16:	54d1      	strb	r1, [r2, r3]
	  rx8[i*4+2]=(uint8_t)(rx32 >> 16)&0xff;
 8000d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d1a:	0c1a      	lsrs	r2, r3, #16
 8000d1c:	183b      	adds	r3, r7, r0
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	3302      	adds	r3, #2
 8000d24:	b2d1      	uxtb	r1, r2
 8000d26:	003a      	movs	r2, r7
 8000d28:	54d1      	strb	r1, [r2, r3]
	  rx8[i*4+3]=(uint8_t)(rx32 >> 24);
 8000d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d2c:	0e1a      	lsrs	r2, r3, #24
 8000d2e:	183b      	adds	r3, r7, r0
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	3303      	adds	r3, #3
 8000d36:	b2d1      	uxtb	r1, r2
 8000d38:	003a      	movs	r2, r7
 8000d3a:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i=0; i<WORDS_IN_FLASH; i++){
 8000d3c:	183b      	adds	r3, r7, r0
 8000d3e:	781a      	ldrb	r2, [r3, #0]
 8000d40:	183b      	adds	r3, r7, r0
 8000d42:	3201      	adds	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
 8000d46:	e7cc      	b.n	8000ce2 <main+0x62>
  }

  uint8_t index = 0;
 8000d48:	233a      	movs	r3, #58	; 0x3a
 8000d4a:	18fb      	adds	r3, r7, r3
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0;i<8;i++){
 8000d50:	2339      	movs	r3, #57	; 0x39
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
 8000d58:	2339      	movs	r3, #57	; 0x39
 8000d5a:	18fb      	adds	r3, r7, r3
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b07      	cmp	r3, #7
 8000d60:	d82c      	bhi.n	8000dbc <main+0x13c>
	  for(uint8_t j=0;j<6;j++){
 8000d62:	2338      	movs	r3, #56	; 0x38
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	2538      	movs	r5, #56	; 0x38
 8000d6c:	197b      	adds	r3, r7, r5
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b05      	cmp	r3, #5
 8000d72:	d81c      	bhi.n	8000dae <main+0x12e>
		  on_time[i][j] = rx8[index];
 8000d74:	263a      	movs	r6, #58	; 0x3a
 8000d76:	19bb      	adds	r3, r7, r6
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2239      	movs	r2, #57	; 0x39
 8000d7c:	18ba      	adds	r2, r7, r2
 8000d7e:	7812      	ldrb	r2, [r2, #0]
 8000d80:	1979      	adds	r1, r7, r5
 8000d82:	7809      	ldrb	r1, [r1, #0]
 8000d84:	0038      	movs	r0, r7
 8000d86:	5cc4      	ldrb	r4, [r0, r3]
 8000d88:	4826      	ldr	r0, [pc, #152]	; (8000e24 <main+0x1a4>)
 8000d8a:	0013      	movs	r3, r2
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	189b      	adds	r3, r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	18c3      	adds	r3, r0, r3
 8000d94:	1c22      	adds	r2, r4, #0
 8000d96:	545a      	strb	r2, [r3, r1]
		  index++;
 8000d98:	19bb      	adds	r3, r7, r6
 8000d9a:	781a      	ldrb	r2, [r3, #0]
 8000d9c:	19bb      	adds	r3, r7, r6
 8000d9e:	3201      	adds	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]
	  for(uint8_t j=0;j<6;j++){
 8000da2:	197b      	adds	r3, r7, r5
 8000da4:	781a      	ldrb	r2, [r3, #0]
 8000da6:	197b      	adds	r3, r7, r5
 8000da8:	3201      	adds	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
 8000dac:	e7dd      	b.n	8000d6a <main+0xea>
  for(uint8_t i=0;i<8;i++){
 8000dae:	2139      	movs	r1, #57	; 0x39
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	781a      	ldrb	r2, [r3, #0]
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	3201      	adds	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
 8000dba:	e7cd      	b.n	8000d58 <main+0xd8>
	  }
  }
  misc_setting[index-48] = rx8[index]; index++;
 8000dbc:	203a      	movs	r0, #58	; 0x3a
 8000dbe:	183b      	adds	r3, r7, r0
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	183b      	adds	r3, r7, r0
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	3b30      	subs	r3, #48	; 0x30
 8000dc8:	0039      	movs	r1, r7
 8000dca:	5c89      	ldrb	r1, [r1, r2]
 8000dcc:	4a16      	ldr	r2, [pc, #88]	; (8000e28 <main+0x1a8>)
 8000dce:	54d1      	strb	r1, [r2, r3]
 8000dd0:	183b      	adds	r3, r7, r0
 8000dd2:	781a      	ldrb	r2, [r3, #0]
 8000dd4:	183b      	adds	r3, r7, r0
 8000dd6:	3201      	adds	r2, #1
 8000dd8:	701a      	strb	r2, [r3, #0]
  misc_setting[index-48] = rx8[index];
 8000dda:	183b      	adds	r3, r7, r0
 8000ddc:	781a      	ldrb	r2, [r3, #0]
 8000dde:	183b      	adds	r3, r7, r0
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	3b30      	subs	r3, #48	; 0x30
 8000de4:	0039      	movs	r1, r7
 8000de6:	5c89      	ldrb	r1, [r1, r2]
 8000de8:	4a0f      	ldr	r2, [pc, #60]	; (8000e28 <main+0x1a8>)
 8000dea:	54d1      	strb	r1, [r2, r3]
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  if(timeout(main_timer)){
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <main+0x1ac>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	0018      	movs	r0, r3
 8000df2:	f000 f8b9 	bl	8000f68 <timeout>
 8000df6:	1e03      	subs	r3, r0, #0
 8000df8:	d0f8      	beq.n	8000dec <main+0x16c>
		  main_timer = start_timer_ms(MAIN_TIMER);
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f000 f8a4 	bl	8000f48 <start_timer_ms>
 8000e00:	0002      	movs	r2, r0
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <main+0x1ac>)
 8000e04:	601a      	str	r2, [r3, #0]
		  run_time_handler();
 8000e06:	f001 fe2b 	bl	8002a60 <_Z16run_time_handlerv>

		  run_output_mixer(run_input_handler());
 8000e0a:	f7ff fc5d 	bl	80006c8 <_Z17run_input_handlerv>
 8000e0e:	0003      	movs	r3, r0
 8000e10:	0018      	movs	r0, r3
 8000e12:	f000 fa31 	bl	8001278 <_Z16run_output_mixerh>
	  if(timeout(main_timer)){
 8000e16:	e7e9      	b.n	8000dec <main+0x16c>
 8000e18:	2000050c 	.word	0x2000050c
 8000e1c:	200003d8 	.word	0x200003d8
 8000e20:	08080000 	.word	0x08080000
 8000e24:	200003dc 	.word	0x200003dc
 8000e28:	2000040c 	.word	0x2000040c
 8000e2c:	200003d0 	.word	0x200003d0

08000e30 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b099      	sub	sp, #100	; 0x64
 8000e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e36:	242c      	movs	r4, #44	; 0x2c
 8000e38:	193b      	adds	r3, r7, r4
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	2334      	movs	r3, #52	; 0x34
 8000e3e:	001a      	movs	r2, r3
 8000e40:	2100      	movs	r1, #0
 8000e42:	f006 f949 	bl	80070d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e46:	2318      	movs	r3, #24
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	2314      	movs	r3, #20
 8000e4e:	001a      	movs	r2, r3
 8000e50:	2100      	movs	r1, #0
 8000e52:	f006 f941 	bl	80070d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e56:	003b      	movs	r3, r7
 8000e58:	0018      	movs	r0, r3
 8000e5a:	2318      	movs	r3, #24
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	2100      	movs	r1, #0
 8000e60:	f006 f93a 	bl	80070d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e64:	4b30      	ldr	r3, [pc, #192]	; (8000f28 <_Z18SystemClock_Configv+0xf8>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a30      	ldr	r2, [pc, #192]	; (8000f2c <_Z18SystemClock_Configv+0xfc>)
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	4b2e      	ldr	r3, [pc, #184]	; (8000f28 <_Z18SystemClock_Configv+0xf8>)
 8000e6e:	2180      	movs	r1, #128	; 0x80
 8000e70:	0109      	lsls	r1, r1, #4
 8000e72:	430a      	orrs	r2, r1
 8000e74:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e76:	0021      	movs	r1, r4
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	2201      	movs	r2, #1
 8000e82:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2210      	movs	r2, #16
 8000e88:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	2200      	movs	r2, #0
 8000e94:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	2280      	movs	r2, #128	; 0x80
 8000e9a:	02d2      	lsls	r2, r2, #11
 8000e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2280      	movs	r2, #128	; 0x80
 8000ea2:	03d2      	lsls	r2, r2, #15
 8000ea4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f003 fd89 	bl	80049c0 <HAL_RCC_OscConfig>
 8000eae:	0003      	movs	r3, r0
 8000eb0:	1e5a      	subs	r2, r3, #1
 8000eb2:	4193      	sbcs	r3, r2
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8000eba:	f000 f867 	bl	8000f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ebe:	2118      	movs	r1, #24
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	220f      	movs	r2, #15
 8000ec4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	00d2      	lsls	r2, r2, #3
 8000ede:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f004 f8e7 	bl	80050b8 <HAL_RCC_ClockConfig>
 8000eea:	0003      	movs	r3, r0
 8000eec:	1e5a      	subs	r2, r3, #1
 8000eee:	4193      	sbcs	r3, r2
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 8000ef6:	f000 f849 	bl	8000f8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000efa:	003b      	movs	r3, r7
 8000efc:	2208      	movs	r2, #8
 8000efe:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f00:	003b      	movs	r3, r7
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f06:	003b      	movs	r3, r7
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f004 fac3 	bl	8005494 <HAL_RCCEx_PeriphCLKConfig>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	1e5a      	subs	r2, r3, #1
 8000f12:	4193      	sbcs	r3, r2
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <_Z18SystemClock_Configv+0xee>
  {
    Error_Handler();
 8000f1a:	f000 f837 	bl	8000f8c <Error_Handler>
  }
}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b019      	add	sp, #100	; 0x64
 8000f24:	bd90      	pop	{r4, r7, pc}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	40007000 	.word	0x40007000
 8000f2c:	ffffe7ff 	.word	0xffffe7ff

08000f30 <counter_update_it>:

//variables for runtime functions
/**
 * @brief: funcitons updates counter for 1ms time base - triggered by timer hardware module
 */
void counter_update_it(){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	sys_counter++;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <counter_update_it+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	4b02      	ldr	r3, [pc, #8]	; (8000f44 <counter_update_it+0x14>)
 8000f3c:	601a      	str	r2, [r3, #0]
}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200003d4 	.word	0x200003d4

08000f48 <start_timer_ms>:
 * @brief function to calculate end-time of timer event
 * @param ms: amount of time, the timer should run
 * @return systemtick value, at which the timer run out
 * @usage: call function and insert return value into timeout() function, to check if timeout occured
 */
uint32_t start_timer_ms(uint32_t new_timer_value){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	return new_timer_value += sys_counter;
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <start_timer_ms+0x1c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	18d3      	adds	r3, r2, r3
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
}
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b002      	add	sp, #8
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200003d4 	.word	0x200003d4

08000f68 <timeout>:
/**
 * @brief checks if the timer set by start_timer_ms for a given class is expired
 * @return if present tick counter is higher then timer value set by start_timer_ms
 * the timer is expired and the function returns true
 */
bool timeout(uint32_t end_time){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	if(end_time>sys_counter)
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <timeout+0x20>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d901      	bls.n	8000f7e <timeout+0x16>
		return false;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e000      	b.n	8000f80 <timeout+0x18>
	else
		return true;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	0018      	movs	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b002      	add	sp, #8
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200003d4 	.word	0x200003d4

08000f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <Error_Handler+0x8>
	...

08000f98 <_Z9spi_writev>:
//////////////// SPI-Subroutine ////////////////
//MSB first
/*
 * @brief: function to handle write commands via SPI - calls HAL
 */
void spi_write(void){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(sr_shift_output_GPIO_Port, sr_shift_output_Pin, GPIO_PIN_RESET);
 8000f9c:	23a0      	movs	r3, #160	; 0xa0
 8000f9e:	05db      	lsls	r3, r3, #23
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2140      	movs	r1, #64	; 0x40
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f002 fefa 	bl	8003d9e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, spi_data, 4, 100);
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <_Z9spi_writev+0x34>)
 8000fac:	4808      	ldr	r0, [pc, #32]	; (8000fd0 <_Z9spi_writev+0x38>)
 8000fae:	2364      	movs	r3, #100	; 0x64
 8000fb0:	2204      	movs	r2, #4
 8000fb2:	f004 fc24 	bl	80057fe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(sr_shift_output_GPIO_Port, sr_shift_output_Pin, GPIO_PIN_SET);
 8000fb6:	23a0      	movs	r3, #160	; 0xa0
 8000fb8:	05db      	lsls	r3, r3, #23
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2140      	movs	r1, #64	; 0x40
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f002 feed 	bl	8003d9e <HAL_GPIO_WritePin>
}
 8000fc4:	46c0      	nop			; (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	20000414 	.word	0x20000414
 8000fd0:	20000474 	.word	0x20000474

08000fd4 <_Z10set_numberhh>:
 * @brief writes a value to the register of the specified number
 * @param tube_number is the selected tube. 0 is the left tube, 5 the most right one (if 6 tubes are installed)
 * @param value is the value to be displayed - values other than 0 to 9 will turn the tube off
 * @note: values are stored in their variables so that they can easily be copied into the spi_data
 */
void set_number(uint8_t tube_number, uint8_t value){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	0002      	movs	r2, r0
 8000fdc:	1dfb      	adds	r3, r7, #7
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	1dbb      	adds	r3, r7, #6
 8000fe2:	1c0a      	adds	r2, r1, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
	uint8_t temp = 0;
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]

	if(value>0xf)
 8000fee:	1dbb      	adds	r3, r7, #6
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b0f      	cmp	r3, #15
 8000ff4:	d902      	bls.n	8000ffc <_Z10set_numberhh+0x28>
		value=0xf;
 8000ff6:	1dbb      	adds	r3, r7, #6
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	701a      	strb	r2, [r3, #0]

	if(tube_number%2 == 1)
 8000ffc:	1dfb      	adds	r3, r7, #7
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2201      	movs	r2, #1
 8001002:	4013      	ands	r3, r2
 8001004:	d004      	beq.n	8001010 <_Z10set_numberhh+0x3c>
		value = (value << 4) & 0xff;
 8001006:	1dbb      	adds	r3, r7, #6
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	011a      	lsls	r2, r3, #4
 800100c:	1dbb      	adds	r3, r7, #6
 800100e:	701a      	strb	r2, [r3, #0]

	//spi_data [0] = seconds; [2] = minutes; [3] = hours

	switch(tube_number){
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b05      	cmp	r3, #5
 8001016:	d86a      	bhi.n	80010ee <_Z10set_numberhh+0x11a>
 8001018:	009a      	lsls	r2, r3, #2
 800101a:	4b37      	ldr	r3, [pc, #220]	; (80010f8 <_Z10set_numberhh+0x124>)
 800101c:	18d3      	adds	r3, r2, r3
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	469f      	mov	pc, r3
		case 0: temp = spi_data[3]; spi_data[3] = (temp & 0xf0) | value; break;
 8001022:	210f      	movs	r1, #15
 8001024:	187b      	adds	r3, r7, r1
 8001026:	4a35      	ldr	r2, [pc, #212]	; (80010fc <_Z10set_numberhh+0x128>)
 8001028:	78d2      	ldrb	r2, [r2, #3]
 800102a:	701a      	strb	r2, [r3, #0]
 800102c:	187b      	adds	r3, r7, r1
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	220f      	movs	r2, #15
 8001032:	4393      	bics	r3, r2
 8001034:	b2da      	uxtb	r2, r3
 8001036:	1dbb      	adds	r3, r7, #6
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	4313      	orrs	r3, r2
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <_Z10set_numberhh+0x128>)
 8001040:	70da      	strb	r2, [r3, #3]
 8001042:	e055      	b.n	80010f0 <_Z10set_numberhh+0x11c>
		case 1: temp = spi_data[3]; spi_data[3] = (temp & 0x0f) | value; break;	//number already shifted 4 bites
 8001044:	210f      	movs	r1, #15
 8001046:	187b      	adds	r3, r7, r1
 8001048:	4a2c      	ldr	r2, [pc, #176]	; (80010fc <_Z10set_numberhh+0x128>)
 800104a:	78d2      	ldrb	r2, [r2, #3]
 800104c:	701a      	strb	r2, [r3, #0]
 800104e:	187b      	adds	r3, r7, r1
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	220f      	movs	r2, #15
 8001054:	4013      	ands	r3, r2
 8001056:	b2da      	uxtb	r2, r3
 8001058:	1dbb      	adds	r3, r7, #6
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4313      	orrs	r3, r2
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4b26      	ldr	r3, [pc, #152]	; (80010fc <_Z10set_numberhh+0x128>)
 8001062:	70da      	strb	r2, [r3, #3]
 8001064:	e044      	b.n	80010f0 <_Z10set_numberhh+0x11c>
		case 2: temp = spi_data[2]; spi_data[2] = (temp & 0xf0) | value; break;
 8001066:	210f      	movs	r1, #15
 8001068:	187b      	adds	r3, r7, r1
 800106a:	4a24      	ldr	r2, [pc, #144]	; (80010fc <_Z10set_numberhh+0x128>)
 800106c:	7892      	ldrb	r2, [r2, #2]
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	187b      	adds	r3, r7, r1
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	220f      	movs	r2, #15
 8001076:	4393      	bics	r3, r2
 8001078:	b2da      	uxtb	r2, r3
 800107a:	1dbb      	adds	r3, r7, #6
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4313      	orrs	r3, r2
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <_Z10set_numberhh+0x128>)
 8001084:	709a      	strb	r2, [r3, #2]
 8001086:	e033      	b.n	80010f0 <_Z10set_numberhh+0x11c>
		case 3: temp = spi_data[2]; spi_data[2] = (temp & 0x0f) | value; break;
 8001088:	210f      	movs	r1, #15
 800108a:	187b      	adds	r3, r7, r1
 800108c:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <_Z10set_numberhh+0x128>)
 800108e:	7892      	ldrb	r2, [r2, #2]
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	187b      	adds	r3, r7, r1
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	220f      	movs	r2, #15
 8001098:	4013      	ands	r3, r2
 800109a:	b2da      	uxtb	r2, r3
 800109c:	1dbb      	adds	r3, r7, #6
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <_Z10set_numberhh+0x128>)
 80010a6:	709a      	strb	r2, [r3, #2]
 80010a8:	e022      	b.n	80010f0 <_Z10set_numberhh+0x11c>
		case 4: temp = spi_data[0]; spi_data[0] = (temp & 0xf0) | value; break;
 80010aa:	210f      	movs	r1, #15
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	4a13      	ldr	r2, [pc, #76]	; (80010fc <_Z10set_numberhh+0x128>)
 80010b0:	7812      	ldrb	r2, [r2, #0]
 80010b2:	701a      	strb	r2, [r3, #0]
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	220f      	movs	r2, #15
 80010ba:	4393      	bics	r3, r2
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	1dbb      	adds	r3, r7, #6
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <_Z10set_numberhh+0x128>)
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	e011      	b.n	80010f0 <_Z10set_numberhh+0x11c>
		case 5: temp = spi_data[0]; spi_data[0] = (temp & 0x0f) | value; break;
 80010cc:	210f      	movs	r1, #15
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <_Z10set_numberhh+0x128>)
 80010d2:	7812      	ldrb	r2, [r2, #0]
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	220f      	movs	r2, #15
 80010dc:	4013      	ands	r3, r2
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	1dbb      	adds	r3, r7, #6
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <_Z10set_numberhh+0x128>)
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	e000      	b.n	80010f0 <_Z10set_numberhh+0x11c>
		default: break;
 80010ee:	46c0      	nop			; (mov r8, r8)
	}
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b004      	add	sp, #16
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	08007100 	.word	0x08007100
 80010fc:	20000414 	.word	0x20000414

08001100 <_Z9set_pointhb>:
/**
 * @brief turns a specific point on or off
 * @param point_number is the selected point starting from left - 0: lh, 1: ll, 2: rh, 3: rl
 * @param state true -> point is on; false -> point is off
 */
void set_point(uint8_t point_number, bool state){
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	0002      	movs	r2, r0
 8001108:	1dfb      	adds	r3, r7, #7
 800110a:	701a      	strb	r2, [r3, #0]
 800110c:	1dbb      	adds	r3, r7, #6
 800110e:	1c0a      	adds	r2, r1, #0
 8001110:	701a      	strb	r2, [r3, #0]
	switch(point_number){
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d044      	beq.n	80011a4 <_Z9set_pointhb+0xa4>
 800111a:	dc57      	bgt.n	80011cc <_Z9set_pointhb+0xcc>
 800111c:	2b02      	cmp	r3, #2
 800111e:	d02d      	beq.n	800117c <_Z9set_pointhb+0x7c>
 8001120:	dc54      	bgt.n	80011cc <_Z9set_pointhb+0xcc>
 8001122:	2b00      	cmp	r3, #0
 8001124:	d002      	beq.n	800112c <_Z9set_pointhb+0x2c>
 8001126:	2b01      	cmp	r3, #1
 8001128:	d014      	beq.n	8001154 <_Z9set_pointhb+0x54>
		case 0: if(state == true) spi_data[1] |= 0x1; else spi_data[1] &= ~0x1; break;
		case 1: if(state == true) spi_data[1] |= 0x2; else spi_data[1] &= ~0x2; break;
		case 2: if(state == true) spi_data[1] |= 0x4; else spi_data[1] &= ~0x4; break;
		case 3: if(state == true) spi_data[1] |= 0x8; else spi_data[1] &= ~0x8; break;
		default: break;
 800112a:	e04f      	b.n	80011cc <_Z9set_pointhb+0xcc>
		case 0: if(state == true) spi_data[1] |= 0x1; else spi_data[1] &= ~0x1; break;
 800112c:	1dbb      	adds	r3, r7, #6
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d107      	bne.n	8001144 <_Z9set_pointhb+0x44>
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <_Z9set_pointhb+0xd8>)
 8001136:	785b      	ldrb	r3, [r3, #1]
 8001138:	2201      	movs	r2, #1
 800113a:	4313      	orrs	r3, r2
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <_Z9set_pointhb+0xd8>)
 8001140:	705a      	strb	r2, [r3, #1]
 8001142:	e044      	b.n	80011ce <_Z9set_pointhb+0xce>
 8001144:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <_Z9set_pointhb+0xd8>)
 8001146:	785b      	ldrb	r3, [r3, #1]
 8001148:	2201      	movs	r2, #1
 800114a:	4393      	bics	r3, r2
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <_Z9set_pointhb+0xd8>)
 8001150:	705a      	strb	r2, [r3, #1]
 8001152:	e03c      	b.n	80011ce <_Z9set_pointhb+0xce>
		case 1: if(state == true) spi_data[1] |= 0x2; else spi_data[1] &= ~0x2; break;
 8001154:	1dbb      	adds	r3, r7, #6
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d107      	bne.n	800116c <_Z9set_pointhb+0x6c>
 800115c:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <_Z9set_pointhb+0xd8>)
 800115e:	785b      	ldrb	r3, [r3, #1]
 8001160:	2202      	movs	r2, #2
 8001162:	4313      	orrs	r3, r2
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <_Z9set_pointhb+0xd8>)
 8001168:	705a      	strb	r2, [r3, #1]
 800116a:	e030      	b.n	80011ce <_Z9set_pointhb+0xce>
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <_Z9set_pointhb+0xd8>)
 800116e:	785b      	ldrb	r3, [r3, #1]
 8001170:	2202      	movs	r2, #2
 8001172:	4393      	bics	r3, r2
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <_Z9set_pointhb+0xd8>)
 8001178:	705a      	strb	r2, [r3, #1]
 800117a:	e028      	b.n	80011ce <_Z9set_pointhb+0xce>
		case 2: if(state == true) spi_data[1] |= 0x4; else spi_data[1] &= ~0x4; break;
 800117c:	1dbb      	adds	r3, r7, #6
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d107      	bne.n	8001194 <_Z9set_pointhb+0x94>
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <_Z9set_pointhb+0xd8>)
 8001186:	785b      	ldrb	r3, [r3, #1]
 8001188:	2204      	movs	r2, #4
 800118a:	4313      	orrs	r3, r2
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <_Z9set_pointhb+0xd8>)
 8001190:	705a      	strb	r2, [r3, #1]
 8001192:	e01c      	b.n	80011ce <_Z9set_pointhb+0xce>
 8001194:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <_Z9set_pointhb+0xd8>)
 8001196:	785b      	ldrb	r3, [r3, #1]
 8001198:	2204      	movs	r2, #4
 800119a:	4393      	bics	r3, r2
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <_Z9set_pointhb+0xd8>)
 80011a0:	705a      	strb	r2, [r3, #1]
 80011a2:	e014      	b.n	80011ce <_Z9set_pointhb+0xce>
		case 3: if(state == true) spi_data[1] |= 0x8; else spi_data[1] &= ~0x8; break;
 80011a4:	1dbb      	adds	r3, r7, #6
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d107      	bne.n	80011bc <_Z9set_pointhb+0xbc>
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <_Z9set_pointhb+0xd8>)
 80011ae:	785b      	ldrb	r3, [r3, #1]
 80011b0:	2208      	movs	r2, #8
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <_Z9set_pointhb+0xd8>)
 80011b8:	705a      	strb	r2, [r3, #1]
 80011ba:	e008      	b.n	80011ce <_Z9set_pointhb+0xce>
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <_Z9set_pointhb+0xd8>)
 80011be:	785b      	ldrb	r3, [r3, #1]
 80011c0:	2208      	movs	r2, #8
 80011c2:	4393      	bics	r3, r2
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <_Z9set_pointhb+0xd8>)
 80011c8:	705a      	strb	r2, [r3, #1]
 80011ca:	e000      	b.n	80011ce <_Z9set_pointhb+0xce>
		default: break;
 80011cc:	46c0      	nop			; (mov r8, r8)
	}
}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b002      	add	sp, #8
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	20000414 	.word	0x20000414

080011dc <_Z10set_outputv>:

/**
 * @brief function to send data to output
 */
void set_output(void){
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	if(board_size != 6)
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <_Z10set_outputv+0x1c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b06      	cmp	r3, #6
 80011e6:	d002      	beq.n	80011ee <_Z10set_outputv+0x12>
		spi_data[0] = 0x00;
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <_Z10set_outputv+0x20>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
	spi_write();
 80011ee:	f7ff fed3 	bl	8000f98 <_Z9spi_writev>
}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200003d8 	.word	0x200003d8
 80011fc:	20000414 	.word	0x20000414

08001200 <_Z17set_flyback_stateb>:
 * @return states how the output is set - use to check if function is not in cooldown mode where new values are discarded
 *
 * @info if a new param is written, a cooldown of 500ms is applied, before the converter can get a new state
 * the written value is discarded if the cooldown is still acitve. If the return value
 */
bool set_flyback_state(bool new_state){
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	0002      	movs	r2, r0
 8001208:	1dfb      	adds	r3, r7, #7
 800120a:	701a      	strb	r2, [r3, #0]
	if(flyback_state!=new_state){
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <_Z17set_flyback_stateb+0x6c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	1dfa      	adds	r2, r7, #7
 8001212:	7812      	ldrb	r2, [r2, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d023      	beq.n	8001260 <_Z17set_flyback_stateb+0x60>
		if(timeout(flyback_timer)){
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <_Z17set_flyback_stateb+0x70>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	0018      	movs	r0, r3
 800121e:	f7ff fea3 	bl	8000f68 <timeout>
 8001222:	1e03      	subs	r3, r0, #0
 8001224:	d01c      	beq.n	8001260 <_Z17set_flyback_stateb+0x60>
			flyback_state = new_state;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <_Z17set_flyback_stateb+0x6c>)
 8001228:	1dfa      	adds	r2, r7, #7
 800122a:	7812      	ldrb	r2, [r2, #0]
 800122c:	701a      	strb	r2, [r3, #0]
			flyback_timer = start_timer_ms(FLYBACK_COOLDOWN);						//new value gets applied
 800122e:	23fa      	movs	r3, #250	; 0xfa
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	0018      	movs	r0, r3
 8001234:	f7ff fe88 	bl	8000f48 <start_timer_ms>
 8001238:	0002      	movs	r2, r0
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <_Z17set_flyback_stateb+0x70>)
 800123c:	601a      	str	r2, [r3, #0]
			if(flyback_state == true)
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <_Z17set_flyback_stateb+0x6c>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d106      	bne.n	8001254 <_Z17set_flyback_stateb+0x54>
				HAL_GPIO_WritePin(enable_hv_GPIO_Port, enable_hv_Pin, GPIO_PIN_SET);
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <_Z17set_flyback_stateb+0x74>)
 8001248:	2201      	movs	r2, #1
 800124a:	2102      	movs	r1, #2
 800124c:	0018      	movs	r0, r3
 800124e:	f002 fda6 	bl	8003d9e <HAL_GPIO_WritePin>
 8001252:	e005      	b.n	8001260 <_Z17set_flyback_stateb+0x60>
			else
				HAL_GPIO_WritePin(enable_hv_GPIO_Port, enable_hv_Pin, GPIO_PIN_RESET);
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <_Z17set_flyback_stateb+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	2102      	movs	r1, #2
 800125a:	0018      	movs	r0, r3
 800125c:	f002 fd9f 	bl	8003d9e <HAL_GPIO_WritePin>
		}
	}
	return flyback_state;
 8001260:	4b02      	ldr	r3, [pc, #8]	; (800126c <_Z17set_flyback_stateb+0x6c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
}
 8001264:	0018      	movs	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	b002      	add	sp, #8
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000040e 	.word	0x2000040e
 8001270:	20000410 	.word	0x20000410
 8001274:	50000400 	.word	0x50000400

08001278 <_Z16run_output_mixerh>:
 * @brief Processes all data and generates commands for Output Handler and LED driver
 *
 * gets called every ms
 * gets data directly from respective .hpp files
 */
void run_output_mixer(uint8_t input){
 8001278:	b5b0      	push	{r4, r5, r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	0002      	movs	r2, r0
 8001280:	1dfb      	adds	r3, r7, #7
 8001282:	701a      	strb	r2, [r3, #0]
	 * 	minutes blink, change
	 * press - safe time
	 */

	//reset all outputs
	for(uint8_t i = 0; i<6; i++){
 8001284:	230f      	movs	r3, #15
 8001286:	18fb      	adds	r3, r7, r3
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
 800128c:	220f      	movs	r2, #15
 800128e:	18bb      	adds	r3, r7, r2
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b05      	cmp	r3, #5
 8001294:	d81a      	bhi.n	80012cc <_Z16run_output_mixerh+0x54>
		set_point(i, false);
 8001296:	0014      	movs	r4, r2
 8001298:	193b      	adds	r3, r7, r4
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2100      	movs	r1, #0
 800129e:	0018      	movs	r0, r3
 80012a0:	f7ff ff2e 	bl	8001100 <_Z9set_pointhb>
		set_number(i, 0xA);
 80012a4:	193b      	adds	r3, r7, r4
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	210a      	movs	r1, #10
 80012aa:	0018      	movs	r0, r3
 80012ac:	f7ff fe92 	bl	8000fd4 <_Z10set_numberhh>
		set_color(i, OFF, 25);
 80012b0:	193b      	adds	r3, r7, r4
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2219      	movs	r2, #25
 80012b6:	2100      	movs	r1, #0
 80012b8:	0018      	movs	r0, r3
 80012ba:	f7ff fbb3 	bl	8000a24 <_Z9set_colorhmh>
	for(uint8_t i = 0; i<6; i++){
 80012be:	0021      	movs	r1, r4
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	781a      	ldrb	r2, [r3, #0]
 80012c4:	187b      	adds	r3, r7, r1
 80012c6:	3201      	adds	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	e7df      	b.n	800128c <_Z16run_output_mixerh+0x14>

	//menu system: 	default = 0 --> clock
	//				menu_select = 9 --> page to select menu 1-x ; 0=return to clock

	//enter menu
	if((current_menu == 0) && (input == 4) && (flyback_status==true)){
 80012cc:	4bd2      	ldr	r3, [pc, #840]	; (8001618 <_Z16run_output_mixerh+0x3a0>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d110      	bne.n	80012f6 <_Z16run_output_mixerh+0x7e>
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d10c      	bne.n	80012f6 <_Z16run_output_mixerh+0x7e>
 80012dc:	4bcf      	ldr	r3, [pc, #828]	; (800161c <_Z16run_output_mixerh+0x3a4>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d108      	bne.n	80012f6 <_Z16run_output_mixerh+0x7e>
		input=0;
 80012e4:	1dfb      	adds	r3, r7, #7
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
		current_menu = 9;
 80012ea:	4bcb      	ldr	r3, [pc, #812]	; (8001618 <_Z16run_output_mixerh+0x3a0>)
 80012ec:	2209      	movs	r2, #9
 80012ee:	701a      	strb	r2, [r3, #0]
		selected_menu = 1;
 80012f0:	4bcb      	ldr	r3, [pc, #812]	; (8001620 <_Z16run_output_mixerh+0x3a8>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
	}
	//leave menu - without saving for menu 1 & 2
	if((input == 0x8) && (current_menu!=0) && (current_menu!=3)){
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d110      	bne.n	8001320 <_Z16run_output_mixerh+0xa8>
 80012fe:	4bc6      	ldr	r3, [pc, #792]	; (8001618 <_Z16run_output_mixerh+0x3a0>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00c      	beq.n	8001320 <_Z16run_output_mixerh+0xa8>
 8001306:	4bc4      	ldr	r3, [pc, #784]	; (8001618 <_Z16run_output_mixerh+0x3a0>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b03      	cmp	r3, #3
 800130c:	d008      	beq.n	8001320 <_Z16run_output_mixerh+0xa8>
		current_menu = 0;
 800130e:	4bc2      	ldr	r3, [pc, #776]	; (8001618 <_Z16run_output_mixerh+0x3a0>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
//		current_state = 0;
		old_state = 0;
 8001314:	4bc3      	ldr	r3, [pc, #780]	; (8001624 <_Z16run_output_mixerh+0x3ac>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
		input = 0;
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
	}

	//"menu" standard clock
	if(current_menu == 0){
 8001320:	4bbd      	ldr	r3, [pc, #756]	; (8001618 <_Z16run_output_mixerh+0x3a0>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d101      	bne.n	800132c <_Z16run_output_mixerh+0xb4>
		submenu_0_display_time();
 8001328:	f000 fa0e 	bl	8001748 <_Z22submenu_0_display_timev>
	}

	//menu time set
	if(current_menu == 1){
 800132c:	4bba      	ldr	r3, [pc, #744]	; (8001618 <_Z16run_output_mixerh+0x3a0>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d10d      	bne.n	8001350 <_Z16run_output_mixerh+0xd8>
		submenu_1_set_time(input, new_selected_menu);
 8001334:	4bbc      	ldr	r3, [pc, #752]	; (8001628 <_Z16run_output_mixerh+0x3b0>)
 8001336:	781a      	ldrb	r2, [r3, #0]
 8001338:	1dfb      	adds	r3, r7, #7
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	0011      	movs	r1, r2
 800133e:	0018      	movs	r0, r3
 8001340:	f000 fa6e 	bl	8001820 <_Z18submenu_1_set_timehb>
		new_selected_menu = false;
 8001344:	4bb8      	ldr	r3, [pc, #736]	; (8001628 <_Z16run_output_mixerh+0x3b0>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
		input=0;
 800134a:	1dfb      	adds	r3, r7, #7
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
	}

	//menu date set
	if(current_menu == 2){
 8001350:	4bb1      	ldr	r3, [pc, #708]	; (8001618 <_Z16run_output_mixerh+0x3a0>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d10d      	bne.n	8001374 <_Z16run_output_mixerh+0xfc>
		submenu_2_set_date(input, new_selected_menu);
 8001358:	4bb3      	ldr	r3, [pc, #716]	; (8001628 <_Z16run_output_mixerh+0x3b0>)
 800135a:	781a      	ldrb	r2, [r3, #0]
 800135c:	1dfb      	adds	r3, r7, #7
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	0011      	movs	r1, r2
 8001362:	0018      	movs	r0, r3
 8001364:	f000 fbd2 	bl	8001b0c <_Z18submenu_2_set_datehb>
		new_selected_menu = false;
 8001368:	4baf      	ldr	r3, [pc, #700]	; (8001628 <_Z16run_output_mixerh+0x3b0>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
		input=0;
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
	}

	if(current_menu == 3){
 8001374:	4ba8      	ldr	r3, [pc, #672]	; (8001618 <_Z16run_output_mixerh+0x3a0>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b03      	cmp	r3, #3
 800137a:	d10d      	bne.n	8001398 <_Z16run_output_mixerh+0x120>
		submenu_3_set_onoff(input, new_selected_menu);
 800137c:	4baa      	ldr	r3, [pc, #680]	; (8001628 <_Z16run_output_mixerh+0x3b0>)
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	1dfb      	adds	r3, r7, #7
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	0011      	movs	r1, r2
 8001386:	0018      	movs	r0, r3
 8001388:	f000 fdac 	bl	8001ee4 <_Z19submenu_3_set_onoffhb>
		new_selected_menu = false;
 800138c:	4ba6      	ldr	r3, [pc, #664]	; (8001628 <_Z16run_output_mixerh+0x3b0>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
		input=0;
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
	}

	//menu menu ;)
	if(current_menu == 9){
 8001398:	4b9f      	ldr	r3, [pc, #636]	; (8001618 <_Z16run_output_mixerh+0x3a0>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b09      	cmp	r3, #9
 800139e:	d10b      	bne.n	80013b8 <_Z16run_output_mixerh+0x140>
		new_selected_menu = submenu_9_menu_select(input);
 80013a0:	1dfb      	adds	r3, r7, #7
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f001 f847 	bl	8002438 <_Z21submenu_9_menu_selecth>
 80013aa:	0003      	movs	r3, r0
 80013ac:	001a      	movs	r2, r3
 80013ae:	4b9e      	ldr	r3, [pc, #632]	; (8001628 <_Z16run_output_mixerh+0x3b0>)
 80013b0:	701a      	strb	r2, [r3, #0]
		input=0;
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
//		set_number(board_size-2, (brightness/10)%10);
//		set_number(board_size-1, brightness % 10);
//	}

	//############################ write data to flash ############################
	if(flash_write == true){
 80013b8:	4b9c      	ldr	r3, [pc, #624]	; (800162c <_Z16run_output_mixerh+0x3b4>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d10c      	bne.n	80013da <_Z16run_output_mixerh+0x162>
		bool temp = write_flash_new_data();
 80013c0:	250c      	movs	r5, #12
 80013c2:	197c      	adds	r4, r7, r5
 80013c4:	f001 f87a 	bl	80024bc <_Z20write_flash_new_datav>
 80013c8:	0003      	movs	r3, r0
 80013ca:	7023      	strb	r3, [r4, #0]
		if(temp == 0)
 80013cc:	197b      	adds	r3, r7, r5
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <_Z16run_output_mixerh+0x162>
			flash_write = false;
 80013d4:	4b95      	ldr	r3, [pc, #596]	; (800162c <_Z16run_output_mixerh+0x3b4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
	//############################ run Output Handler  ############################

	static bool hv_on = false;
	static bool area_entered = false;	// variable only changes if area is entered/left - does occur once per area
	static bool area_left = false;
	bool inside_area = false;
 80013da:	230e      	movs	r3, #14
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]

	if(current_menu == 0){	//only check for time area, when not in the menu
 80013e2:	4b8d      	ldr	r3, [pc, #564]	; (8001618 <_Z16run_output_mixerh+0x3a0>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d000      	beq.n	80013ec <_Z16run_output_mixerh+0x174>
 80013ea:	e146      	b.n	800167a <_Z16run_output_mixerh+0x402>
		// switch HV-enable when time-area is entered/left
		// manual long press overwrites state until the next area is entered/left
		for(uint8_t i=0;i<8;i++){
 80013ec:	230d      	movs	r3, #13
 80013ee:	18fb      	adds	r3, r7, r3
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
 80013f4:	240d      	movs	r4, #13
 80013f6:	193b      	adds	r3, r7, r4
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b07      	cmp	r3, #7
 80013fc:	d900      	bls.n	8001400 <_Z16run_output_mixerh+0x188>
 80013fe:	e121      	b.n	8001644 <_Z16run_output_mixerh+0x3cc>
			//if current day inside selected days for each time area
			if(data_from_RTC.day >= on_time[i][0] && data_from_RTC.day <= on_time[i][1]){
 8001400:	4b8b      	ldr	r3, [pc, #556]	; (8001630 <_Z16run_output_mixerh+0x3b8>)
 8001402:	78d9      	ldrb	r1, [r3, #3]
 8001404:	193b      	adds	r3, r7, r4
 8001406:	781a      	ldrb	r2, [r3, #0]
 8001408:	488a      	ldr	r0, [pc, #552]	; (8001634 <_Z16run_output_mixerh+0x3bc>)
 800140a:	0013      	movs	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	189b      	adds	r3, r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	5c1b      	ldrb	r3, [r3, r0]
 8001414:	4299      	cmp	r1, r3
 8001416:	d200      	bcs.n	800141a <_Z16run_output_mixerh+0x1a2>
 8001418:	e0f2      	b.n	8001600 <_Z16run_output_mixerh+0x388>
 800141a:	4b85      	ldr	r3, [pc, #532]	; (8001630 <_Z16run_output_mixerh+0x3b8>)
 800141c:	78d9      	ldrb	r1, [r3, #3]
 800141e:	193b      	adds	r3, r7, r4
 8001420:	781a      	ldrb	r2, [r3, #0]
 8001422:	4884      	ldr	r0, [pc, #528]	; (8001634 <_Z16run_output_mixerh+0x3bc>)
 8001424:	0013      	movs	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	189b      	adds	r3, r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	18c3      	adds	r3, r0, r3
 800142e:	3301      	adds	r3, #1
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4299      	cmp	r1, r3
 8001434:	d900      	bls.n	8001438 <_Z16run_output_mixerh+0x1c0>
 8001436:	e0e3      	b.n	8001600 <_Z16run_output_mixerh+0x388>
				if(	(data_from_RTC.hours == on_time[i][2] && data_from_RTC.minutes >= on_time[i][3] && on_time[i][2] != on_time[i][4]) ||
 8001438:	4b7d      	ldr	r3, [pc, #500]	; (8001630 <_Z16run_output_mixerh+0x3b8>)
 800143a:	7899      	ldrb	r1, [r3, #2]
 800143c:	193b      	adds	r3, r7, r4
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	487c      	ldr	r0, [pc, #496]	; (8001634 <_Z16run_output_mixerh+0x3bc>)
 8001442:	0013      	movs	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	189b      	adds	r3, r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	18c3      	adds	r3, r0, r3
 800144c:	3302      	adds	r3, #2
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4299      	cmp	r1, r3
 8001452:	d124      	bne.n	800149e <_Z16run_output_mixerh+0x226>
 8001454:	4b76      	ldr	r3, [pc, #472]	; (8001630 <_Z16run_output_mixerh+0x3b8>)
 8001456:	7859      	ldrb	r1, [r3, #1]
 8001458:	193b      	adds	r3, r7, r4
 800145a:	781a      	ldrb	r2, [r3, #0]
 800145c:	4875      	ldr	r0, [pc, #468]	; (8001634 <_Z16run_output_mixerh+0x3bc>)
 800145e:	0013      	movs	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	189b      	adds	r3, r3, r2
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	18c3      	adds	r3, r0, r3
 8001468:	3303      	adds	r3, #3
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4299      	cmp	r1, r3
 800146e:	d316      	bcc.n	800149e <_Z16run_output_mixerh+0x226>
 8001470:	193b      	adds	r3, r7, r4
 8001472:	781a      	ldrb	r2, [r3, #0]
 8001474:	496f      	ldr	r1, [pc, #444]	; (8001634 <_Z16run_output_mixerh+0x3bc>)
 8001476:	0013      	movs	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	189b      	adds	r3, r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	18cb      	adds	r3, r1, r3
 8001480:	3302      	adds	r3, #2
 8001482:	7819      	ldrb	r1, [r3, #0]
 8001484:	193b      	adds	r3, r7, r4
 8001486:	781a      	ldrb	r2, [r3, #0]
 8001488:	486a      	ldr	r0, [pc, #424]	; (8001634 <_Z16run_output_mixerh+0x3bc>)
 800148a:	0013      	movs	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	189b      	adds	r3, r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	18c3      	adds	r3, r0, r3
 8001494:	3304      	adds	r3, #4
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4299      	cmp	r1, r3
 800149a:	d000      	beq.n	800149e <_Z16run_output_mixerh+0x226>
 800149c:	e090      	b.n	80015c0 <_Z16run_output_mixerh+0x348>
					(data_from_RTC.hours == on_time[i][4] && data_from_RTC.minutes <= on_time[i][5] && on_time[i][2] != on_time[i][4]) ||
 800149e:	4b64      	ldr	r3, [pc, #400]	; (8001630 <_Z16run_output_mixerh+0x3b8>)
 80014a0:	7899      	ldrb	r1, [r3, #2]
 80014a2:	240d      	movs	r4, #13
 80014a4:	193b      	adds	r3, r7, r4
 80014a6:	781a      	ldrb	r2, [r3, #0]
 80014a8:	4862      	ldr	r0, [pc, #392]	; (8001634 <_Z16run_output_mixerh+0x3bc>)
 80014aa:	0013      	movs	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	189b      	adds	r3, r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	18c3      	adds	r3, r0, r3
 80014b4:	3304      	adds	r3, #4
 80014b6:	781b      	ldrb	r3, [r3, #0]
				if(	(data_from_RTC.hours == on_time[i][2] && data_from_RTC.minutes >= on_time[i][3] && on_time[i][2] != on_time[i][4]) ||
 80014b8:	4299      	cmp	r1, r3
 80014ba:	d123      	bne.n	8001504 <_Z16run_output_mixerh+0x28c>
					(data_from_RTC.hours == on_time[i][4] && data_from_RTC.minutes <= on_time[i][5] && on_time[i][2] != on_time[i][4]) ||
 80014bc:	4b5c      	ldr	r3, [pc, #368]	; (8001630 <_Z16run_output_mixerh+0x3b8>)
 80014be:	7859      	ldrb	r1, [r3, #1]
 80014c0:	193b      	adds	r3, r7, r4
 80014c2:	781a      	ldrb	r2, [r3, #0]
 80014c4:	485b      	ldr	r0, [pc, #364]	; (8001634 <_Z16run_output_mixerh+0x3bc>)
 80014c6:	0013      	movs	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	189b      	adds	r3, r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	18c3      	adds	r3, r0, r3
 80014d0:	3305      	adds	r3, #5
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4299      	cmp	r1, r3
 80014d6:	d815      	bhi.n	8001504 <_Z16run_output_mixerh+0x28c>
 80014d8:	193b      	adds	r3, r7, r4
 80014da:	781a      	ldrb	r2, [r3, #0]
 80014dc:	4955      	ldr	r1, [pc, #340]	; (8001634 <_Z16run_output_mixerh+0x3bc>)
 80014de:	0013      	movs	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	189b      	adds	r3, r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	18cb      	adds	r3, r1, r3
 80014e8:	3302      	adds	r3, #2
 80014ea:	7819      	ldrb	r1, [r3, #0]
 80014ec:	193b      	adds	r3, r7, r4
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	4850      	ldr	r0, [pc, #320]	; (8001634 <_Z16run_output_mixerh+0x3bc>)
 80014f2:	0013      	movs	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	189b      	adds	r3, r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	18c3      	adds	r3, r0, r3
 80014fc:	3304      	adds	r3, #4
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4299      	cmp	r1, r3
 8001502:	d15d      	bne.n	80015c0 <_Z16run_output_mixerh+0x348>
					(on_time[i][2] == on_time[i][4] && data_from_RTC.hours == on_time[i][2] && data_from_RTC.minutes >= on_time[i][3] && data_from_RTC.minutes <= on_time[i][5]) ||
 8001504:	240d      	movs	r4, #13
 8001506:	193b      	adds	r3, r7, r4
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	494a      	ldr	r1, [pc, #296]	; (8001634 <_Z16run_output_mixerh+0x3bc>)
 800150c:	0013      	movs	r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	189b      	adds	r3, r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	18cb      	adds	r3, r1, r3
 8001516:	3302      	adds	r3, #2
 8001518:	7819      	ldrb	r1, [r3, #0]
 800151a:	193b      	adds	r3, r7, r4
 800151c:	781a      	ldrb	r2, [r3, #0]
 800151e:	4845      	ldr	r0, [pc, #276]	; (8001634 <_Z16run_output_mixerh+0x3bc>)
 8001520:	0013      	movs	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	189b      	adds	r3, r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	18c3      	adds	r3, r0, r3
 800152a:	3304      	adds	r3, #4
 800152c:	781b      	ldrb	r3, [r3, #0]
					(data_from_RTC.hours == on_time[i][4] && data_from_RTC.minutes <= on_time[i][5] && on_time[i][2] != on_time[i][4]) ||
 800152e:	4299      	cmp	r1, r3
 8001530:	d129      	bne.n	8001586 <_Z16run_output_mixerh+0x30e>
					(on_time[i][2] == on_time[i][4] && data_from_RTC.hours == on_time[i][2] && data_from_RTC.minutes >= on_time[i][3] && data_from_RTC.minutes <= on_time[i][5]) ||
 8001532:	4b3f      	ldr	r3, [pc, #252]	; (8001630 <_Z16run_output_mixerh+0x3b8>)
 8001534:	7899      	ldrb	r1, [r3, #2]
 8001536:	193b      	adds	r3, r7, r4
 8001538:	781a      	ldrb	r2, [r3, #0]
 800153a:	483e      	ldr	r0, [pc, #248]	; (8001634 <_Z16run_output_mixerh+0x3bc>)
 800153c:	0013      	movs	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	189b      	adds	r3, r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	18c3      	adds	r3, r0, r3
 8001546:	3302      	adds	r3, #2
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	4299      	cmp	r1, r3
 800154c:	d11b      	bne.n	8001586 <_Z16run_output_mixerh+0x30e>
 800154e:	4b38      	ldr	r3, [pc, #224]	; (8001630 <_Z16run_output_mixerh+0x3b8>)
 8001550:	7859      	ldrb	r1, [r3, #1]
 8001552:	193b      	adds	r3, r7, r4
 8001554:	781a      	ldrb	r2, [r3, #0]
 8001556:	4837      	ldr	r0, [pc, #220]	; (8001634 <_Z16run_output_mixerh+0x3bc>)
 8001558:	0013      	movs	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	189b      	adds	r3, r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	18c3      	adds	r3, r0, r3
 8001562:	3303      	adds	r3, #3
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	4299      	cmp	r1, r3
 8001568:	d30d      	bcc.n	8001586 <_Z16run_output_mixerh+0x30e>
 800156a:	4b31      	ldr	r3, [pc, #196]	; (8001630 <_Z16run_output_mixerh+0x3b8>)
 800156c:	7859      	ldrb	r1, [r3, #1]
 800156e:	193b      	adds	r3, r7, r4
 8001570:	781a      	ldrb	r2, [r3, #0]
 8001572:	4830      	ldr	r0, [pc, #192]	; (8001634 <_Z16run_output_mixerh+0x3bc>)
 8001574:	0013      	movs	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	189b      	adds	r3, r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	18c3      	adds	r3, r0, r3
 800157e:	3305      	adds	r3, #5
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	4299      	cmp	r1, r3
 8001584:	d91c      	bls.n	80015c0 <_Z16run_output_mixerh+0x348>
					(data_from_RTC.hours > on_time[i][2] && data_from_RTC.hours < on_time[i][4])){
 8001586:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <_Z16run_output_mixerh+0x3b8>)
 8001588:	7899      	ldrb	r1, [r3, #2]
 800158a:	240d      	movs	r4, #13
 800158c:	193b      	adds	r3, r7, r4
 800158e:	781a      	ldrb	r2, [r3, #0]
 8001590:	4828      	ldr	r0, [pc, #160]	; (8001634 <_Z16run_output_mixerh+0x3bc>)
 8001592:	0013      	movs	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	189b      	adds	r3, r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	18c3      	adds	r3, r0, r3
 800159c:	3302      	adds	r3, #2
 800159e:	781b      	ldrb	r3, [r3, #0]
					(on_time[i][2] == on_time[i][4] && data_from_RTC.hours == on_time[i][2] && data_from_RTC.minutes >= on_time[i][3] && data_from_RTC.minutes <= on_time[i][5]) ||
 80015a0:	4299      	cmp	r1, r3
 80015a2:	d928      	bls.n	80015f6 <_Z16run_output_mixerh+0x37e>
					(data_from_RTC.hours > on_time[i][2] && data_from_RTC.hours < on_time[i][4])){
 80015a4:	4b22      	ldr	r3, [pc, #136]	; (8001630 <_Z16run_output_mixerh+0x3b8>)
 80015a6:	7899      	ldrb	r1, [r3, #2]
 80015a8:	193b      	adds	r3, r7, r4
 80015aa:	781a      	ldrb	r2, [r3, #0]
 80015ac:	4821      	ldr	r0, [pc, #132]	; (8001634 <_Z16run_output_mixerh+0x3bc>)
 80015ae:	0013      	movs	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	189b      	adds	r3, r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	18c3      	adds	r3, r0, r3
 80015b8:	3304      	adds	r3, #4
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4299      	cmp	r1, r3
 80015be:	d21a      	bcs.n	80015f6 <_Z16run_output_mixerh+0x37e>
						//currently inside of active time area
						if(area_entered == false){
 80015c0:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <_Z16run_output_mixerh+0x3c0>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d111      	bne.n	80015ec <_Z16run_output_mixerh+0x374>
							area_entered = true;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <_Z16run_output_mixerh+0x3c0>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
							area_left = false;
 80015ce:	4b1b      	ldr	r3, [pc, #108]	; (800163c <_Z16run_output_mixerh+0x3c4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
							flyback_status = true;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <_Z16run_output_mixerh+0x3a4>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
							hv_on = set_flyback_state(flyback_status);
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <_Z16run_output_mixerh+0x3a4>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	0018      	movs	r0, r3
 80015e0:	f7ff fe0e 	bl	8001200 <_Z17set_flyback_stateb>
 80015e4:	0003      	movs	r3, r0
 80015e6:	001a      	movs	r2, r3
 80015e8:	4b15      	ldr	r3, [pc, #84]	; (8001640 <_Z16run_output_mixerh+0x3c8>)
 80015ea:	701a      	strb	r2, [r3, #0]
						}
						inside_area = true;
 80015ec:	230e      	movs	r3, #14
 80015ee:	18fb      	adds	r3, r7, r3
 80015f0:	2201      	movs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]
						break;
 80015f4:	e026      	b.n	8001644 <_Z16run_output_mixerh+0x3cc>
				}
				inside_area = false;
 80015f6:	230e      	movs	r3, #14
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
 80015fe:	e003      	b.n	8001608 <_Z16run_output_mixerh+0x390>
			}
			else
				inside_area = false;
 8001600:	230e      	movs	r3, #14
 8001602:	18fb      	adds	r3, r7, r3
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<8;i++){
 8001608:	210d      	movs	r1, #13
 800160a:	187b      	adds	r3, r7, r1
 800160c:	781a      	ldrb	r2, [r3, #0]
 800160e:	187b      	adds	r3, r7, r1
 8001610:	3201      	adds	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
 8001614:	e6ee      	b.n	80013f4 <_Z16run_output_mixerh+0x17c>
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	20000420 	.word	0x20000420
 800161c:	20000425 	.word	0x20000425
 8001620:	20000421 	.word	0x20000421
 8001624:	20000423 	.word	0x20000423
 8001628:	20000422 	.word	0x20000422
 800162c:	20000424 	.word	0x20000424
 8001630:	20000014 	.word	0x20000014
 8001634:	200003dc 	.word	0x200003dc
 8001638:	20000427 	.word	0x20000427
 800163c:	20000428 	.word	0x20000428
 8001640:	20000426 	.word	0x20000426

		}
		//check if we have to switch the hv off
		if(inside_area == false && area_left == false){
 8001644:	230e      	movs	r3, #14
 8001646:	18fb      	adds	r3, r7, r3
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d115      	bne.n	800167a <_Z16run_output_mixerh+0x402>
 800164e:	4b37      	ldr	r3, [pc, #220]	; (800172c <_Z16run_output_mixerh+0x4b4>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d111      	bne.n	800167a <_Z16run_output_mixerh+0x402>
			area_entered = false;
 8001656:	4b36      	ldr	r3, [pc, #216]	; (8001730 <_Z16run_output_mixerh+0x4b8>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
			area_left = true;
 800165c:	4b33      	ldr	r3, [pc, #204]	; (800172c <_Z16run_output_mixerh+0x4b4>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
			flyback_status = false;
 8001662:	4b34      	ldr	r3, [pc, #208]	; (8001734 <_Z16run_output_mixerh+0x4bc>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
			hv_on = set_flyback_state(flyback_status);
 8001668:	4b32      	ldr	r3, [pc, #200]	; (8001734 <_Z16run_output_mixerh+0x4bc>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	0018      	movs	r0, r3
 800166e:	f7ff fdc7 	bl	8001200 <_Z17set_flyback_stateb>
 8001672:	0003      	movs	r3, r0
 8001674:	001a      	movs	r2, r3
 8001676:	4b30      	ldr	r3, [pc, #192]	; (8001738 <_Z16run_output_mixerh+0x4c0>)
 8001678:	701a      	strb	r2, [r3, #0]
		}
	}
	if(inside_area == true)
 800167a:	230e      	movs	r3, #14
 800167c:	18fb      	adds	r3, r7, r3
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d107      	bne.n	8001694 <_Z16run_output_mixerh+0x41c>
		set_color(5, GREEN,10);
 8001684:	23ff      	movs	r3, #255	; 0xff
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	220a      	movs	r2, #10
 800168a:	0019      	movs	r1, r3
 800168c:	2005      	movs	r0, #5
 800168e:	f7ff f9c9 	bl	8000a24 <_Z9set_colorhmh>
 8001692:	e006      	b.n	80016a2 <_Z16run_output_mixerh+0x42a>
	else
		set_color(5, RED,10);
 8001694:	23ff      	movs	r3, #255	; 0xff
 8001696:	041b      	lsls	r3, r3, #16
 8001698:	220a      	movs	r2, #10
 800169a:	0019      	movs	r1, r3
 800169c:	2005      	movs	r0, #5
 800169e:	f7ff f9c1 	bl	8000a24 <_Z9set_colorhmh>

	// switch HV-enable pin by long press of button - change led to indicate state (RED = OFF, dark = ON)
	if(input==0x8){		//Long Press
 80016a2:	1dfb      	adds	r3, r7, #7
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d10f      	bne.n	80016ca <_Z16run_output_mixerh+0x452>
		flyback_status = !flyback_status;
 80016aa:	4b22      	ldr	r3, [pc, #136]	; (8001734 <_Z16run_output_mixerh+0x4bc>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2201      	movs	r2, #1
 80016b0:	4053      	eors	r3, r2
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <_Z16run_output_mixerh+0x4bc>)
 80016b6:	701a      	strb	r2, [r3, #0]
		hv_on = set_flyback_state(flyback_status);
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <_Z16run_output_mixerh+0x4bc>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	0018      	movs	r0, r3
 80016be:	f7ff fd9f 	bl	8001200 <_Z17set_flyback_stateb>
 80016c2:	0003      	movs	r3, r0
 80016c4:	001a      	movs	r2, r3
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <_Z16run_output_mixerh+0x4c0>)
 80016c8:	701a      	strb	r2, [r3, #0]
	}
	if(hv_on != true)
 80016ca:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <_Z16run_output_mixerh+0x4c0>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d005      	beq.n	80016de <_Z16run_output_mixerh+0x466>
		set_color(1, CYAN , 10);
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <_Z16run_output_mixerh+0x4c4>)
 80016d4:	220a      	movs	r2, #10
 80016d6:	0019      	movs	r1, r3
 80016d8:	2001      	movs	r0, #1
 80016da:	f7ff f9a3 	bl	8000a24 <_Z9set_colorhmh>

	set_point(1, true);	//DEBUG
 80016de:	2101      	movs	r1, #1
 80016e0:	2001      	movs	r0, #1
 80016e2:	f7ff fd0d 	bl	8001100 <_Z9set_pointhb>
	// Tube Output-Data
	if(timeout(output_mixer_tube_timer)){
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <_Z16run_output_mixerh+0x4c8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	0018      	movs	r0, r3
 80016ec:	f7ff fc3c 	bl	8000f68 <timeout>
 80016f0:	1e03      	subs	r3, r0, #0
 80016f2:	d007      	beq.n	8001704 <_Z16run_output_mixerh+0x48c>
		output_mixer_tube_timer = start_timer_ms(TUBE_REFRESH_RATE_MS);
 80016f4:	2021      	movs	r0, #33	; 0x21
 80016f6:	f7ff fc27 	bl	8000f48 <start_timer_ms>
 80016fa:	0002      	movs	r2, r0
 80016fc:	4b10      	ldr	r3, [pc, #64]	; (8001740 <_Z16run_output_mixerh+0x4c8>)
 80016fe:	601a      	str	r2, [r3, #0]
		set_output();
 8001700:	f7ff fd6c 	bl	80011dc <_Z10set_outputv>
	}

	//	Time LED-Output
	if(timeout(output_mixer_led_timer)){
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <_Z16run_output_mixerh+0x4cc>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	0018      	movs	r0, r3
 800170a:	f7ff fc2d 	bl	8000f68 <timeout>
 800170e:	1e03      	subs	r3, r0, #0
 8001710:	d008      	beq.n	8001724 <_Z16run_output_mixerh+0x4ac>
		output_mixer_led_timer = start_timer_ms(LED_REFRESH_RATE_MS);
 8001712:	2021      	movs	r0, #33	; 0x21
 8001714:	f7ff fc18 	bl	8000f48 <start_timer_ms>
 8001718:	0002      	movs	r2, r0
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <_Z16run_output_mixerh+0x4cc>)
 800171c:	601a      	str	r2, [r3, #0]
		send_data(true);
 800171e:	2001      	movs	r0, #1
 8001720:	f7ff fa08 	bl	8000b34 <_Z9send_datab>
	}
}
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	b004      	add	sp, #16
 800172a:	bdb0      	pop	{r4, r5, r7, pc}
 800172c:	20000428 	.word	0x20000428
 8001730:	20000427 	.word	0x20000427
 8001734:	20000425 	.word	0x20000425
 8001738:	20000426 	.word	0x20000426
 800173c:	0000ffff 	.word	0x0000ffff
 8001740:	2000041c 	.word	0x2000041c
 8001744:	20000418 	.word	0x20000418

08001748 <_Z22submenu_0_display_timev>:

/**
 * @brief: default "menu" where the actual time from the RTC is displayed
 */
void submenu_0_display_time(void){
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
//	for(uint8_t i=0; i<6; i++){
//		set_color(i,OFF,25);	//hotfix für Papa
//	}
	if(data_to_RTC.new_data!=true){				//do not refresh tube with data from RTC before new data is written to RTC
 800174c:	4b32      	ldr	r3, [pc, #200]	; (8001818 <_Z22submenu_0_display_timev+0xd0>)
 800174e:	7a9b      	ldrb	r3, [r3, #10]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d05e      	beq.n	8001812 <_Z22submenu_0_display_timev+0xca>
												//without this, the old time will shine for a splitsecond when writing new time
		set_number(0, data_from_RTC.hours/10);
 8001754:	4b31      	ldr	r3, [pc, #196]	; (800181c <_Z22submenu_0_display_timev+0xd4>)
 8001756:	789b      	ldrb	r3, [r3, #2]
 8001758:	210a      	movs	r1, #10
 800175a:	0018      	movs	r0, r3
 800175c:	f7fe fcd4 	bl	8000108 <__udivsi3>
 8001760:	0003      	movs	r3, r0
 8001762:	b2db      	uxtb	r3, r3
 8001764:	0019      	movs	r1, r3
 8001766:	2000      	movs	r0, #0
 8001768:	f7ff fc34 	bl	8000fd4 <_Z10set_numberhh>
		set_number(1, data_from_RTC.hours%10);
 800176c:	4b2b      	ldr	r3, [pc, #172]	; (800181c <_Z22submenu_0_display_timev+0xd4>)
 800176e:	789b      	ldrb	r3, [r3, #2]
 8001770:	210a      	movs	r1, #10
 8001772:	0018      	movs	r0, r3
 8001774:	f7fe fd4e 	bl	8000214 <__aeabi_uidivmod>
 8001778:	000b      	movs	r3, r1
 800177a:	b2db      	uxtb	r3, r3
 800177c:	0019      	movs	r1, r3
 800177e:	2001      	movs	r0, #1
 8001780:	f7ff fc28 	bl	8000fd4 <_Z10set_numberhh>
		set_number(2, data_from_RTC.minutes/10);
 8001784:	4b25      	ldr	r3, [pc, #148]	; (800181c <_Z22submenu_0_display_timev+0xd4>)
 8001786:	785b      	ldrb	r3, [r3, #1]
 8001788:	210a      	movs	r1, #10
 800178a:	0018      	movs	r0, r3
 800178c:	f7fe fcbc 	bl	8000108 <__udivsi3>
 8001790:	0003      	movs	r3, r0
 8001792:	b2db      	uxtb	r3, r3
 8001794:	0019      	movs	r1, r3
 8001796:	2002      	movs	r0, #2
 8001798:	f7ff fc1c 	bl	8000fd4 <_Z10set_numberhh>
		set_number(3, data_from_RTC.minutes%10);
 800179c:	4b1f      	ldr	r3, [pc, #124]	; (800181c <_Z22submenu_0_display_timev+0xd4>)
 800179e:	785b      	ldrb	r3, [r3, #1]
 80017a0:	210a      	movs	r1, #10
 80017a2:	0018      	movs	r0, r3
 80017a4:	f7fe fd36 	bl	8000214 <__aeabi_uidivmod>
 80017a8:	000b      	movs	r3, r1
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	0019      	movs	r1, r3
 80017ae:	2003      	movs	r0, #3
 80017b0:	f7ff fc10 	bl	8000fd4 <_Z10set_numberhh>
		set_number(4, data_from_RTC.seconds/10);
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <_Z22submenu_0_display_timev+0xd4>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	210a      	movs	r1, #10
 80017ba:	0018      	movs	r0, r3
 80017bc:	f7fe fca4 	bl	8000108 <__udivsi3>
 80017c0:	0003      	movs	r3, r0
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	0019      	movs	r1, r3
 80017c6:	2004      	movs	r0, #4
 80017c8:	f7ff fc04 	bl	8000fd4 <_Z10set_numberhh>
		set_number(5, data_from_RTC.seconds%10);
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <_Z22submenu_0_display_timev+0xd4>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	210a      	movs	r1, #10
 80017d2:	0018      	movs	r0, r3
 80017d4:	f7fe fd1e 	bl	8000214 <__aeabi_uidivmod>
 80017d8:	000b      	movs	r3, r1
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	0019      	movs	r1, r3
 80017de:	2005      	movs	r0, #5
 80017e0:	f7ff fbf8 	bl	8000fd4 <_Z10set_numberhh>
		if((data_from_RTC.seconds %2) ==true){
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <_Z22submenu_0_display_timev+0xd4>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	001a      	movs	r2, r3
 80017ea:	2301      	movs	r3, #1
 80017ec:	4013      	ands	r3, r2
 80017ee:	d008      	beq.n	8001802 <_Z22submenu_0_display_timev+0xba>
			set_point(1, false);
 80017f0:	2100      	movs	r1, #0
 80017f2:	2001      	movs	r0, #1
 80017f4:	f7ff fc84 	bl	8001100 <_Z9set_pointhb>
			set_point(3, true);
 80017f8:	2101      	movs	r1, #1
 80017fa:	2003      	movs	r0, #3
 80017fc:	f7ff fc80 	bl	8001100 <_Z9set_pointhb>
		else{
			set_point(1, true);
			set_point(3, false);
		}
	}
}
 8001800:	e007      	b.n	8001812 <_Z22submenu_0_display_timev+0xca>
			set_point(1, true);
 8001802:	2101      	movs	r1, #1
 8001804:	2001      	movs	r0, #1
 8001806:	f7ff fc7b 	bl	8001100 <_Z9set_pointhb>
			set_point(3, false);
 800180a:	2100      	movs	r1, #0
 800180c:	2003      	movs	r0, #3
 800180e:	f7ff fc77 	bl	8001100 <_Z9set_pointhb>
}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000020 	.word	0x20000020
 800181c:	20000014 	.word	0x20000014

08001820 <_Z18submenu_1_set_timehb>:
/**
 * @brief function to enter new time data - copies the current time, displays it, change it and tell the time handler to safe it to rtc
 * @param: enter input info 0x1=left; 0x2=right; 0x4=press; 0x8=long press
 * @param: new_entry set true, when menu is entered through menu select
 */
void submenu_1_set_time(uint8_t local_input, bool new_entry){
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	0002      	movs	r2, r0
 8001828:	1dfb      	adds	r3, r7, #7
 800182a:	701a      	strb	r2, [r3, #0]
 800182c:	1dbb      	adds	r3, r7, #6
 800182e:	1c0a      	adds	r2, r1, #0
 8001830:	701a      	strb	r2, [r3, #0]
	uint8_t number_value = 0;
 8001832:	230f      	movs	r3, #15
 8001834:	18fb      	adds	r3, r7, r3
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
	static bool blink_state = false;
	static uint32_t blink_timer = 0;
	static uint8_t current_state = 0;

	if(new_entry == true){
 800183a:	1dbb      	adds	r3, r7, #6
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d111      	bne.n	8001866 <_Z18submenu_1_set_timehb+0x46>
		current_state = 1;
 8001842:	4bab      	ldr	r3, [pc, #684]	; (8001af0 <_Z18submenu_1_set_timehb+0x2d0>)
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
		data_to_RTC.seconds = data_from_RTC.seconds;
 8001848:	4baa      	ldr	r3, [pc, #680]	; (8001af4 <_Z18submenu_1_set_timehb+0x2d4>)
 800184a:	781a      	ldrb	r2, [r3, #0]
 800184c:	4baa      	ldr	r3, [pc, #680]	; (8001af8 <_Z18submenu_1_set_timehb+0x2d8>)
 800184e:	701a      	strb	r2, [r3, #0]
		data_to_RTC.minutes = data_from_RTC.minutes;
 8001850:	4ba8      	ldr	r3, [pc, #672]	; (8001af4 <_Z18submenu_1_set_timehb+0x2d4>)
 8001852:	785a      	ldrb	r2, [r3, #1]
 8001854:	4ba8      	ldr	r3, [pc, #672]	; (8001af8 <_Z18submenu_1_set_timehb+0x2d8>)
 8001856:	705a      	strb	r2, [r3, #1]
		data_to_RTC.hours = data_from_RTC.hours;
 8001858:	4ba6      	ldr	r3, [pc, #664]	; (8001af4 <_Z18submenu_1_set_timehb+0x2d4>)
 800185a:	789a      	ldrb	r2, [r3, #2]
 800185c:	4ba6      	ldr	r3, [pc, #664]	; (8001af8 <_Z18submenu_1_set_timehb+0x2d8>)
 800185e:	709a      	strb	r2, [r3, #2]
		blink_state = false;
 8001860:	4ba6      	ldr	r3, [pc, #664]	; (8001afc <_Z18submenu_1_set_timehb+0x2dc>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
	}

	//skip setting for seconds, they can't be shown anyway
	if(local_input==0x4){
 8001866:	1dfb      	adds	r3, r7, #7
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b04      	cmp	r3, #4
 800186c:	d10b      	bne.n	8001886 <_Z18submenu_1_set_timehb+0x66>
		current_state++;
 800186e:	4ba0      	ldr	r3, [pc, #640]	; (8001af0 <_Z18submenu_1_set_timehb+0x2d0>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	3301      	adds	r3, #1
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4b9e      	ldr	r3, [pc, #632]	; (8001af0 <_Z18submenu_1_set_timehb+0x2d0>)
 8001878:	701a      	strb	r2, [r3, #0]
		local_input=0;
 800187a:	1dfb      	adds	r3, r7, #7
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
		blink_state = false;
 8001880:	4b9e      	ldr	r3, [pc, #632]	; (8001afc <_Z18submenu_1_set_timehb+0x2dc>)
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
	}

	if(current_state == 3 && board_size==4){
 8001886:	4b9a      	ldr	r3, [pc, #616]	; (8001af0 <_Z18submenu_1_set_timehb+0x2d0>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b03      	cmp	r3, #3
 800188c:	d10c      	bne.n	80018a8 <_Z18submenu_1_set_timehb+0x88>
 800188e:	4b9c      	ldr	r3, [pc, #624]	; (8001b00 <_Z18submenu_1_set_timehb+0x2e0>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b04      	cmp	r3, #4
 8001894:	d108      	bne.n	80018a8 <_Z18submenu_1_set_timehb+0x88>
		current_state++;
 8001896:	4b96      	ldr	r3, [pc, #600]	; (8001af0 <_Z18submenu_1_set_timehb+0x2d0>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4b94      	ldr	r3, [pc, #592]	; (8001af0 <_Z18submenu_1_set_timehb+0x2d0>)
 80018a0:	701a      	strb	r2, [r3, #0]
		data_to_RTC.seconds = 0;
 80018a2:	4b95      	ldr	r3, [pc, #596]	; (8001af8 <_Z18submenu_1_set_timehb+0x2d8>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
	}

	//leave setting and safe changes - go back to menu selection
	if(current_state == 4){
 80018a8:	4b91      	ldr	r3, [pc, #580]	; (8001af0 <_Z18submenu_1_set_timehb+0x2d0>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d105      	bne.n	80018bc <_Z18submenu_1_set_timehb+0x9c>
		current_menu = 9;
 80018b0:	4b94      	ldr	r3, [pc, #592]	; (8001b04 <_Z18submenu_1_set_timehb+0x2e4>)
 80018b2:	2209      	movs	r2, #9
 80018b4:	701a      	strb	r2, [r3, #0]
		data_to_RTC.new_data = 1;	//1 means new time data
 80018b6:	4b90      	ldr	r3, [pc, #576]	; (8001af8 <_Z18submenu_1_set_timehb+0x2d8>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	729a      	strb	r2, [r3, #10]
		//TODO: add animation for safed data
	}

	//blink active digits
	if(blink_state==true){
 80018bc:	4b8f      	ldr	r3, [pc, #572]	; (8001afc <_Z18submenu_1_set_timehb+0x2dc>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d116      	bne.n	80018f2 <_Z18submenu_1_set_timehb+0xd2>
		set_color((current_state*2)-1,OFF,25);
 80018c4:	4b8a      	ldr	r3, [pc, #552]	; (8001af0 <_Z18submenu_1_set_timehb+0x2d0>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	18db      	adds	r3, r3, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	3b01      	subs	r3, #1
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2219      	movs	r2, #25
 80018d2:	2100      	movs	r1, #0
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7ff f8a5 	bl	8000a24 <_Z9set_colorhmh>
		set_color((current_state*2)-2,OFF,25);
 80018da:	4b85      	ldr	r3, [pc, #532]	; (8001af0 <_Z18submenu_1_set_timehb+0x2d0>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	3b01      	subs	r3, #1
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	18db      	adds	r3, r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2219      	movs	r2, #25
 80018e8:	2100      	movs	r1, #0
 80018ea:	0018      	movs	r0, r3
 80018ec:	f7ff f89a 	bl	8000a24 <_Z9set_colorhmh>
 80018f0:	e017      	b.n	8001922 <_Z18submenu_1_set_timehb+0x102>
	}
	else{
		set_color((current_state*2)-1,GREEN,25);
 80018f2:	4b7f      	ldr	r3, [pc, #508]	; (8001af0 <_Z18submenu_1_set_timehb+0x2d0>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	18db      	adds	r3, r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	22ff      	movs	r2, #255	; 0xff
 8001900:	0211      	lsls	r1, r2, #8
 8001902:	2219      	movs	r2, #25
 8001904:	0018      	movs	r0, r3
 8001906:	f7ff f88d 	bl	8000a24 <_Z9set_colorhmh>
		set_color((current_state*2)-2,GREEN,25);
 800190a:	4b79      	ldr	r3, [pc, #484]	; (8001af0 <_Z18submenu_1_set_timehb+0x2d0>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	3b01      	subs	r3, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	18db      	adds	r3, r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	22ff      	movs	r2, #255	; 0xff
 8001918:	0211      	lsls	r1, r2, #8
 800191a:	2219      	movs	r2, #25
 800191c:	0018      	movs	r0, r3
 800191e:	f7ff f881 	bl	8000a24 <_Z9set_colorhmh>
	}
	if(timeout(blink_timer)==true){	//500ms loop
 8001922:	4b79      	ldr	r3, [pc, #484]	; (8001b08 <_Z18submenu_1_set_timehb+0x2e8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	0018      	movs	r0, r3
 8001928:	f7ff fb1e 	bl	8000f68 <timeout>
 800192c:	0003      	movs	r3, r0
 800192e:	3b01      	subs	r3, #1
 8001930:	425a      	negs	r2, r3
 8001932:	4153      	adcs	r3, r2
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00e      	beq.n	8001958 <_Z18submenu_1_set_timehb+0x138>
		blink_timer = start_timer_ms(500);
 800193a:	23fa      	movs	r3, #250	; 0xfa
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	0018      	movs	r0, r3
 8001940:	f7ff fb02 	bl	8000f48 <start_timer_ms>
 8001944:	0002      	movs	r2, r0
 8001946:	4b70      	ldr	r3, [pc, #448]	; (8001b08 <_Z18submenu_1_set_timehb+0x2e8>)
 8001948:	601a      	str	r2, [r3, #0]
		blink_state = !blink_state;
 800194a:	4b6c      	ldr	r3, [pc, #432]	; (8001afc <_Z18submenu_1_set_timehb+0x2dc>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2201      	movs	r2, #1
 8001950:	4053      	eors	r3, r2
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b69      	ldr	r3, [pc, #420]	; (8001afc <_Z18submenu_1_set_timehb+0x2dc>)
 8001956:	701a      	strb	r2, [r3, #0]
	}

	//copy time info into local variable for manipulation and checks
	switch(current_state){
 8001958:	4b65      	ldr	r3, [pc, #404]	; (8001af0 <_Z18submenu_1_set_timehb+0x2d0>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d011      	beq.n	8001984 <_Z18submenu_1_set_timehb+0x164>
 8001960:	dc16      	bgt.n	8001990 <_Z18submenu_1_set_timehb+0x170>
 8001962:	2b01      	cmp	r3, #1
 8001964:	d002      	beq.n	800196c <_Z18submenu_1_set_timehb+0x14c>
 8001966:	2b02      	cmp	r3, #2
 8001968:	d006      	beq.n	8001978 <_Z18submenu_1_set_timehb+0x158>
		case 0x1: number_value = data_to_RTC.hours; break;
		case 0x2: number_value = data_to_RTC.minutes; break;
		case 0x3: number_value = data_to_RTC.seconds; break;
		default: break;
 800196a:	e011      	b.n	8001990 <_Z18submenu_1_set_timehb+0x170>
		case 0x1: number_value = data_to_RTC.hours; break;
 800196c:	230f      	movs	r3, #15
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	4a61      	ldr	r2, [pc, #388]	; (8001af8 <_Z18submenu_1_set_timehb+0x2d8>)
 8001972:	7892      	ldrb	r2, [r2, #2]
 8001974:	701a      	strb	r2, [r3, #0]
 8001976:	e00c      	b.n	8001992 <_Z18submenu_1_set_timehb+0x172>
		case 0x2: number_value = data_to_RTC.minutes; break;
 8001978:	230f      	movs	r3, #15
 800197a:	18fb      	adds	r3, r7, r3
 800197c:	4a5e      	ldr	r2, [pc, #376]	; (8001af8 <_Z18submenu_1_set_timehb+0x2d8>)
 800197e:	7852      	ldrb	r2, [r2, #1]
 8001980:	701a      	strb	r2, [r3, #0]
 8001982:	e006      	b.n	8001992 <_Z18submenu_1_set_timehb+0x172>
		case 0x3: number_value = data_to_RTC.seconds; break;
 8001984:	230f      	movs	r3, #15
 8001986:	18fb      	adds	r3, r7, r3
 8001988:	4a5b      	ldr	r2, [pc, #364]	; (8001af8 <_Z18submenu_1_set_timehb+0x2d8>)
 800198a:	7812      	ldrb	r2, [r2, #0]
 800198c:	701a      	strb	r2, [r3, #0]
 800198e:	e000      	b.n	8001992 <_Z18submenu_1_set_timehb+0x172>
		default: break;
 8001990:	46c0      	nop			; (mov r8, r8)
	}

	//change data according to input
	switch(local_input){
 8001992:	1dfb      	adds	r3, r7, #7
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d002      	beq.n	80019a0 <_Z18submenu_1_set_timehb+0x180>
 800199a:	2b02      	cmp	r3, #2
 800199c:	d007      	beq.n	80019ae <_Z18submenu_1_set_timehb+0x18e>
		case 0x1:	number_value++;	break;
		case 0x2:	number_value--;	break;
		default: break;
 800199e:	e00d      	b.n	80019bc <_Z18submenu_1_set_timehb+0x19c>
		case 0x1:	number_value++;	break;
 80019a0:	210f      	movs	r1, #15
 80019a2:	187b      	adds	r3, r7, r1
 80019a4:	781a      	ldrb	r2, [r3, #0]
 80019a6:	187b      	adds	r3, r7, r1
 80019a8:	3201      	adds	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
 80019ac:	e006      	b.n	80019bc <_Z18submenu_1_set_timehb+0x19c>
		case 0x2:	number_value--;	break;
 80019ae:	210f      	movs	r1, #15
 80019b0:	187b      	adds	r3, r7, r1
 80019b2:	781a      	ldrb	r2, [r3, #0]
 80019b4:	187b      	adds	r3, r7, r1
 80019b6:	3a01      	subs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
 80019ba:	46c0      	nop			; (mov r8, r8)
	}

	//correction for overrunning of valid value area
	if(((number_value==60) && ((current_state==3) || (current_state==2))) || (number_value==24 && current_state==1))
 80019bc:	230f      	movs	r3, #15
 80019be:	18fb      	adds	r3, r7, r3
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b3c      	cmp	r3, #60	; 0x3c
 80019c4:	d107      	bne.n	80019d6 <_Z18submenu_1_set_timehb+0x1b6>
 80019c6:	4b4a      	ldr	r3, [pc, #296]	; (8001af0 <_Z18submenu_1_set_timehb+0x2d0>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d00c      	beq.n	80019e8 <_Z18submenu_1_set_timehb+0x1c8>
 80019ce:	4b48      	ldr	r3, [pc, #288]	; (8001af0 <_Z18submenu_1_set_timehb+0x2d0>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d008      	beq.n	80019e8 <_Z18submenu_1_set_timehb+0x1c8>
 80019d6:	230f      	movs	r3, #15
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b18      	cmp	r3, #24
 80019de:	d107      	bne.n	80019f0 <_Z18submenu_1_set_timehb+0x1d0>
 80019e0:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <_Z18submenu_1_set_timehb+0x2d0>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d103      	bne.n	80019f0 <_Z18submenu_1_set_timehb+0x1d0>
		number_value = 0;
 80019e8:	230f      	movs	r3, #15
 80019ea:	18fb      	adds	r3, r7, r3
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
	if(number_value==255){
 80019f0:	230f      	movs	r3, #15
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2bff      	cmp	r3, #255	; 0xff
 80019f8:	d110      	bne.n	8001a1c <_Z18submenu_1_set_timehb+0x1fc>
		if(current_state==3 || current_state==2)
 80019fa:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <_Z18submenu_1_set_timehb+0x2d0>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d003      	beq.n	8001a0a <_Z18submenu_1_set_timehb+0x1ea>
 8001a02:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <_Z18submenu_1_set_timehb+0x2d0>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d104      	bne.n	8001a14 <_Z18submenu_1_set_timehb+0x1f4>
			number_value = 59;
 8001a0a:	230f      	movs	r3, #15
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	223b      	movs	r2, #59	; 0x3b
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	e003      	b.n	8001a1c <_Z18submenu_1_set_timehb+0x1fc>
		else
			number_value = 23;
 8001a14:	230f      	movs	r3, #15
 8001a16:	18fb      	adds	r3, r7, r3
 8001a18:	2217      	movs	r2, #23
 8001a1a:	701a      	strb	r2, [r3, #0]
	}

	//write manipulated value back to time struct
	switch(current_state){
 8001a1c:	4b34      	ldr	r3, [pc, #208]	; (8001af0 <_Z18submenu_1_set_timehb+0x2d0>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d011      	beq.n	8001a48 <_Z18submenu_1_set_timehb+0x228>
 8001a24:	dc16      	bgt.n	8001a54 <_Z18submenu_1_set_timehb+0x234>
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d002      	beq.n	8001a30 <_Z18submenu_1_set_timehb+0x210>
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d006      	beq.n	8001a3c <_Z18submenu_1_set_timehb+0x21c>
		case 0x1: data_to_RTC.hours = number_value; break;
		case 0x2: data_to_RTC.minutes = number_value; break;
		case 0x3: data_to_RTC.seconds = number_value; break;
		default: break;
 8001a2e:	e011      	b.n	8001a54 <_Z18submenu_1_set_timehb+0x234>
		case 0x1: data_to_RTC.hours = number_value; break;
 8001a30:	4b31      	ldr	r3, [pc, #196]	; (8001af8 <_Z18submenu_1_set_timehb+0x2d8>)
 8001a32:	220f      	movs	r2, #15
 8001a34:	18ba      	adds	r2, r7, r2
 8001a36:	7812      	ldrb	r2, [r2, #0]
 8001a38:	709a      	strb	r2, [r3, #2]
 8001a3a:	e00c      	b.n	8001a56 <_Z18submenu_1_set_timehb+0x236>
		case 0x2: data_to_RTC.minutes = number_value; break;
 8001a3c:	4b2e      	ldr	r3, [pc, #184]	; (8001af8 <_Z18submenu_1_set_timehb+0x2d8>)
 8001a3e:	220f      	movs	r2, #15
 8001a40:	18ba      	adds	r2, r7, r2
 8001a42:	7812      	ldrb	r2, [r2, #0]
 8001a44:	705a      	strb	r2, [r3, #1]
 8001a46:	e006      	b.n	8001a56 <_Z18submenu_1_set_timehb+0x236>
		case 0x3: data_to_RTC.seconds = number_value; break;
 8001a48:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <_Z18submenu_1_set_timehb+0x2d8>)
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	18ba      	adds	r2, r7, r2
 8001a4e:	7812      	ldrb	r2, [r2, #0]
 8001a50:	701a      	strb	r2, [r3, #0]
 8001a52:	e000      	b.n	8001a56 <_Z18submenu_1_set_timehb+0x236>
		default: break;
 8001a54:	46c0      	nop			; (mov r8, r8)
	}

	//display output
	set_number(0, data_to_RTC.hours/10);
 8001a56:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <_Z18submenu_1_set_timehb+0x2d8>)
 8001a58:	789b      	ldrb	r3, [r3, #2]
 8001a5a:	210a      	movs	r1, #10
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7fe fb53 	bl	8000108 <__udivsi3>
 8001a62:	0003      	movs	r3, r0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	0019      	movs	r1, r3
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7ff fab3 	bl	8000fd4 <_Z10set_numberhh>
	set_number(1, data_to_RTC.hours%10);
 8001a6e:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <_Z18submenu_1_set_timehb+0x2d8>)
 8001a70:	789b      	ldrb	r3, [r3, #2]
 8001a72:	210a      	movs	r1, #10
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7fe fbcd 	bl	8000214 <__aeabi_uidivmod>
 8001a7a:	000b      	movs	r3, r1
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	0019      	movs	r1, r3
 8001a80:	2001      	movs	r0, #1
 8001a82:	f7ff faa7 	bl	8000fd4 <_Z10set_numberhh>
	set_number(2, data_to_RTC.minutes/10);
 8001a86:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <_Z18submenu_1_set_timehb+0x2d8>)
 8001a88:	785b      	ldrb	r3, [r3, #1]
 8001a8a:	210a      	movs	r1, #10
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f7fe fb3b 	bl	8000108 <__udivsi3>
 8001a92:	0003      	movs	r3, r0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	0019      	movs	r1, r3
 8001a98:	2002      	movs	r0, #2
 8001a9a:	f7ff fa9b 	bl	8000fd4 <_Z10set_numberhh>
	set_number(3, data_to_RTC.minutes%10);
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <_Z18submenu_1_set_timehb+0x2d8>)
 8001aa0:	785b      	ldrb	r3, [r3, #1]
 8001aa2:	210a      	movs	r1, #10
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f7fe fbb5 	bl	8000214 <__aeabi_uidivmod>
 8001aaa:	000b      	movs	r3, r1
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	0019      	movs	r1, r3
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	f7ff fa8f 	bl	8000fd4 <_Z10set_numberhh>
	set_number(4, data_to_RTC.seconds/10);
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <_Z18submenu_1_set_timehb+0x2d8>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	210a      	movs	r1, #10
 8001abc:	0018      	movs	r0, r3
 8001abe:	f7fe fb23 	bl	8000108 <__udivsi3>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	2004      	movs	r0, #4
 8001aca:	f7ff fa83 	bl	8000fd4 <_Z10set_numberhh>
	set_number(5, data_to_RTC.seconds%10);
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <_Z18submenu_1_set_timehb+0x2d8>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	210a      	movs	r1, #10
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7fe fb9d 	bl	8000214 <__aeabi_uidivmod>
 8001ada:	000b      	movs	r3, r1
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	0019      	movs	r1, r3
 8001ae0:	2005      	movs	r0, #5
 8001ae2:	f7ff fa77 	bl	8000fd4 <_Z10set_numberhh>
}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b004      	add	sp, #16
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	20000430 	.word	0x20000430
 8001af4:	20000014 	.word	0x20000014
 8001af8:	20000020 	.word	0x20000020
 8001afc:	20000429 	.word	0x20000429
 8001b00:	200003d8 	.word	0x200003d8
 8001b04:	20000420 	.word	0x20000420
 8001b08:	2000042c 	.word	0x2000042c

08001b0c <_Z18submenu_2_set_datehb>:
/**
 * @brief: function to set new date to RTC | day | date+month | year
 * @param: enter input info 0x1=left; 0x2=right; 0x4=press; 0x8=long press
 * @param: new_entry set true, when menu is entered through menu select
 */
void submenu_2_set_date(uint8_t local_input, bool new_entry){
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	0002      	movs	r2, r0
 8001b14:	1dfb      	adds	r3, r7, #7
 8001b16:	701a      	strb	r2, [r3, #0]
 8001b18:	1dbb      	adds	r3, r7, #6
 8001b1a:	1c0a      	adds	r2, r1, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
	uint16_t value = 0;
 8001b1e:	230e      	movs	r3, #14
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	2200      	movs	r2, #0
 8001b24:	801a      	strh	r2, [r3, #0]
	static uint32_t blink_timer = 0;
	static uint8_t current_state = 0;
	static uint16_t val_min[4]={0,0,0,1899};
	static uint16_t val_max[4]={8,32,13,2101};

	if(new_entry == true){
 8001b26:	1dbb      	adds	r3, r7, #6
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d115      	bne.n	8001b5a <_Z18submenu_2_set_datehb+0x4e>
		current_state = 1;
 8001b2e:	4b9c      	ldr	r3, [pc, #624]	; (8001da0 <_Z18submenu_2_set_datehb+0x294>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
		data_to_RTC.day = data_from_RTC.day;
 8001b34:	4b9b      	ldr	r3, [pc, #620]	; (8001da4 <_Z18submenu_2_set_datehb+0x298>)
 8001b36:	78da      	ldrb	r2, [r3, #3]
 8001b38:	4b9b      	ldr	r3, [pc, #620]	; (8001da8 <_Z18submenu_2_set_datehb+0x29c>)
 8001b3a:	70da      	strb	r2, [r3, #3]
		data_to_RTC.date = data_from_RTC.date;
 8001b3c:	4b99      	ldr	r3, [pc, #612]	; (8001da4 <_Z18submenu_2_set_datehb+0x298>)
 8001b3e:	791a      	ldrb	r2, [r3, #4]
 8001b40:	4b99      	ldr	r3, [pc, #612]	; (8001da8 <_Z18submenu_2_set_datehb+0x29c>)
 8001b42:	711a      	strb	r2, [r3, #4]
		data_to_RTC.month = data_from_RTC.month;
 8001b44:	4b97      	ldr	r3, [pc, #604]	; (8001da4 <_Z18submenu_2_set_datehb+0x298>)
 8001b46:	795a      	ldrb	r2, [r3, #5]
 8001b48:	4b97      	ldr	r3, [pc, #604]	; (8001da8 <_Z18submenu_2_set_datehb+0x29c>)
 8001b4a:	715a      	strb	r2, [r3, #5]
		data_to_RTC.year = data_from_RTC.year;
 8001b4c:	4b95      	ldr	r3, [pc, #596]	; (8001da4 <_Z18submenu_2_set_datehb+0x298>)
 8001b4e:	88da      	ldrh	r2, [r3, #6]
 8001b50:	4b95      	ldr	r3, [pc, #596]	; (8001da8 <_Z18submenu_2_set_datehb+0x29c>)
 8001b52:	80da      	strh	r2, [r3, #6]
		blink_state = false;
 8001b54:	4b95      	ldr	r3, [pc, #596]	; (8001dac <_Z18submenu_2_set_datehb+0x2a0>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
	}

	//skip setting for seconds, they can't be shown anyway
	if(local_input==0x4){
 8001b5a:	1dfb      	adds	r3, r7, #7
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d10b      	bne.n	8001b7a <_Z18submenu_2_set_datehb+0x6e>
		current_state++;
 8001b62:	4b8f      	ldr	r3, [pc, #572]	; (8001da0 <_Z18submenu_2_set_datehb+0x294>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4b8d      	ldr	r3, [pc, #564]	; (8001da0 <_Z18submenu_2_set_datehb+0x294>)
 8001b6c:	701a      	strb	r2, [r3, #0]
		local_input=0;
 8001b6e:	1dfb      	adds	r3, r7, #7
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
		blink_state = false;
 8001b74:	4b8d      	ldr	r3, [pc, #564]	; (8001dac <_Z18submenu_2_set_datehb+0x2a0>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
	}

	//leave setting and safe changes - go back to menu selection
	if(current_state == 5){
 8001b7a:	4b89      	ldr	r3, [pc, #548]	; (8001da0 <_Z18submenu_2_set_datehb+0x294>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b05      	cmp	r3, #5
 8001b80:	d105      	bne.n	8001b8e <_Z18submenu_2_set_datehb+0x82>
		current_menu = 9;
 8001b82:	4b8b      	ldr	r3, [pc, #556]	; (8001db0 <_Z18submenu_2_set_datehb+0x2a4>)
 8001b84:	2209      	movs	r2, #9
 8001b86:	701a      	strb	r2, [r3, #0]
		data_to_RTC.new_data = 2;	//2 means new date data
 8001b88:	4b87      	ldr	r3, [pc, #540]	; (8001da8 <_Z18submenu_2_set_datehb+0x29c>)
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	729a      	strb	r2, [r3, #10]
		//TODO: add animation for safed data
	}

	//blink active digits
	uint16_t blink_color = 0;
 8001b8e:	210c      	movs	r1, #12
 8001b90:	187b      	adds	r3, r7, r1
 8001b92:	2200      	movs	r2, #0
 8001b94:	801a      	strh	r2, [r3, #0]
	if(blink_state==true)
 8001b96:	4b85      	ldr	r3, [pc, #532]	; (8001dac <_Z18submenu_2_set_datehb+0x2a0>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d103      	bne.n	8001ba6 <_Z18submenu_2_set_datehb+0x9a>
		blink_color = GREEN;
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	4a84      	ldr	r2, [pc, #528]	; (8001db4 <_Z18submenu_2_set_datehb+0x2a8>)
 8001ba2:	801a      	strh	r2, [r3, #0]
 8001ba4:	e003      	b.n	8001bae <_Z18submenu_2_set_datehb+0xa2>
	else
		blink_color = 0;
 8001ba6:	230c      	movs	r3, #12
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	2200      	movs	r2, #0
 8001bac:	801a      	strh	r2, [r3, #0]

	if(current_state==1)
 8001bae:	4b7c      	ldr	r3, [pc, #496]	; (8001da0 <_Z18submenu_2_set_datehb+0x294>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d107      	bne.n	8001bc6 <_Z18submenu_2_set_datehb+0xba>
		set_color(1,blink_color,25);
 8001bb6:	230c      	movs	r3, #12
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	2219      	movs	r2, #25
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f7fe ff2f 	bl	8000a24 <_Z9set_colorhmh>
	if(current_state==2){
 8001bc6:	4b76      	ldr	r3, [pc, #472]	; (8001da0 <_Z18submenu_2_set_datehb+0x294>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d10e      	bne.n	8001bec <_Z18submenu_2_set_datehb+0xe0>
		set_color(0,blink_color,25);
 8001bce:	240c      	movs	r4, #12
 8001bd0:	193b      	adds	r3, r7, r4
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	2219      	movs	r2, #25
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f7fe ff23 	bl	8000a24 <_Z9set_colorhmh>
		set_color(1,blink_color,25);
 8001bde:	193b      	adds	r3, r7, r4
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	2219      	movs	r2, #25
 8001be4:	0019      	movs	r1, r3
 8001be6:	2001      	movs	r0, #1
 8001be8:	f7fe ff1c 	bl	8000a24 <_Z9set_colorhmh>
	}
	if(current_state==3){
 8001bec:	4b6c      	ldr	r3, [pc, #432]	; (8001da0 <_Z18submenu_2_set_datehb+0x294>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d10e      	bne.n	8001c12 <_Z18submenu_2_set_datehb+0x106>
		set_color(2,blink_color,25);
 8001bf4:	240c      	movs	r4, #12
 8001bf6:	193b      	adds	r3, r7, r4
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	2219      	movs	r2, #25
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	2002      	movs	r0, #2
 8001c00:	f7fe ff10 	bl	8000a24 <_Z9set_colorhmh>
		set_color(3,blink_color,25);
 8001c04:	193b      	adds	r3, r7, r4
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	2219      	movs	r2, #25
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f7fe ff09 	bl	8000a24 <_Z9set_colorhmh>
	}
	if(current_state==4){
 8001c12:	4b63      	ldr	r3, [pc, #396]	; (8001da0 <_Z18submenu_2_set_datehb+0x294>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d11c      	bne.n	8001c54 <_Z18submenu_2_set_datehb+0x148>
		set_color(0,blink_color,25);
 8001c1a:	240c      	movs	r4, #12
 8001c1c:	193b      	adds	r3, r7, r4
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	2219      	movs	r2, #25
 8001c22:	0019      	movs	r1, r3
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7fe fefd 	bl	8000a24 <_Z9set_colorhmh>
		set_color(1,blink_color,25);
 8001c2a:	193b      	adds	r3, r7, r4
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	2219      	movs	r2, #25
 8001c30:	0019      	movs	r1, r3
 8001c32:	2001      	movs	r0, #1
 8001c34:	f7fe fef6 	bl	8000a24 <_Z9set_colorhmh>
		set_color(2,blink_color,25);
 8001c38:	193b      	adds	r3, r7, r4
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	2219      	movs	r2, #25
 8001c3e:	0019      	movs	r1, r3
 8001c40:	2002      	movs	r0, #2
 8001c42:	f7fe feef 	bl	8000a24 <_Z9set_colorhmh>
		set_color(3,blink_color,25);
 8001c46:	193b      	adds	r3, r7, r4
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	2219      	movs	r2, #25
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	2003      	movs	r0, #3
 8001c50:	f7fe fee8 	bl	8000a24 <_Z9set_colorhmh>
	}

	if(timeout(blink_timer)==true){	//500ms loop
 8001c54:	4b58      	ldr	r3, [pc, #352]	; (8001db8 <_Z18submenu_2_set_datehb+0x2ac>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f7ff f985 	bl	8000f68 <timeout>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	3b01      	subs	r3, #1
 8001c62:	425a      	negs	r2, r3
 8001c64:	4153      	adcs	r3, r2
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00e      	beq.n	8001c8a <_Z18submenu_2_set_datehb+0x17e>
		blink_timer = start_timer_ms(500);
 8001c6c:	23fa      	movs	r3, #250	; 0xfa
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	0018      	movs	r0, r3
 8001c72:	f7ff f969 	bl	8000f48 <start_timer_ms>
 8001c76:	0002      	movs	r2, r0
 8001c78:	4b4f      	ldr	r3, [pc, #316]	; (8001db8 <_Z18submenu_2_set_datehb+0x2ac>)
 8001c7a:	601a      	str	r2, [r3, #0]
		blink_state = !blink_state;
 8001c7c:	4b4b      	ldr	r3, [pc, #300]	; (8001dac <_Z18submenu_2_set_datehb+0x2a0>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2201      	movs	r2, #1
 8001c82:	4053      	eors	r3, r2
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4b49      	ldr	r3, [pc, #292]	; (8001dac <_Z18submenu_2_set_datehb+0x2a0>)
 8001c88:	701a      	strb	r2, [r3, #0]
	}

	//copy time info into local variable for manipulation and checks
	switch(current_state){
 8001c8a:	4b45      	ldr	r3, [pc, #276]	; (8001da0 <_Z18submenu_2_set_datehb+0x294>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d01a      	beq.n	8001cc8 <_Z18submenu_2_set_datehb+0x1bc>
 8001c92:	dc1f      	bgt.n	8001cd4 <_Z18submenu_2_set_datehb+0x1c8>
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d011      	beq.n	8001cbc <_Z18submenu_2_set_datehb+0x1b0>
 8001c98:	dc1c      	bgt.n	8001cd4 <_Z18submenu_2_set_datehb+0x1c8>
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d002      	beq.n	8001ca4 <_Z18submenu_2_set_datehb+0x198>
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d006      	beq.n	8001cb0 <_Z18submenu_2_set_datehb+0x1a4>
		case 0x1: value = data_to_RTC.day; break;
		case 0x2: value = data_to_RTC.date; break;
		case 0x3: value = data_to_RTC.month; break;
		case 0x4: value = data_to_RTC.year; break;
		default: break;
 8001ca2:	e017      	b.n	8001cd4 <_Z18submenu_2_set_datehb+0x1c8>
		case 0x1: value = data_to_RTC.day; break;
 8001ca4:	4b40      	ldr	r3, [pc, #256]	; (8001da8 <_Z18submenu_2_set_datehb+0x29c>)
 8001ca6:	78da      	ldrb	r2, [r3, #3]
 8001ca8:	230e      	movs	r3, #14
 8001caa:	18fb      	adds	r3, r7, r3
 8001cac:	801a      	strh	r2, [r3, #0]
 8001cae:	e012      	b.n	8001cd6 <_Z18submenu_2_set_datehb+0x1ca>
		case 0x2: value = data_to_RTC.date; break;
 8001cb0:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <_Z18submenu_2_set_datehb+0x29c>)
 8001cb2:	791a      	ldrb	r2, [r3, #4]
 8001cb4:	230e      	movs	r3, #14
 8001cb6:	18fb      	adds	r3, r7, r3
 8001cb8:	801a      	strh	r2, [r3, #0]
 8001cba:	e00c      	b.n	8001cd6 <_Z18submenu_2_set_datehb+0x1ca>
		case 0x3: value = data_to_RTC.month; break;
 8001cbc:	4b3a      	ldr	r3, [pc, #232]	; (8001da8 <_Z18submenu_2_set_datehb+0x29c>)
 8001cbe:	795a      	ldrb	r2, [r3, #5]
 8001cc0:	230e      	movs	r3, #14
 8001cc2:	18fb      	adds	r3, r7, r3
 8001cc4:	801a      	strh	r2, [r3, #0]
 8001cc6:	e006      	b.n	8001cd6 <_Z18submenu_2_set_datehb+0x1ca>
		case 0x4: value = data_to_RTC.year; break;
 8001cc8:	230e      	movs	r3, #14
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	4a36      	ldr	r2, [pc, #216]	; (8001da8 <_Z18submenu_2_set_datehb+0x29c>)
 8001cce:	88d2      	ldrh	r2, [r2, #6]
 8001cd0:	801a      	strh	r2, [r3, #0]
 8001cd2:	e000      	b.n	8001cd6 <_Z18submenu_2_set_datehb+0x1ca>
		default: break;
 8001cd4:	46c0      	nop			; (mov r8, r8)
	}

	//change data according to input
	switch(local_input){
 8001cd6:	1dfb      	adds	r3, r7, #7
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d002      	beq.n	8001ce4 <_Z18submenu_2_set_datehb+0x1d8>
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d007      	beq.n	8001cf2 <_Z18submenu_2_set_datehb+0x1e6>
		case 0x1:	value++;	break;
		case 0x2:	value--;	break;
		default: break;
 8001ce2:	e00d      	b.n	8001d00 <_Z18submenu_2_set_datehb+0x1f4>
		case 0x1:	value++;	break;
 8001ce4:	210e      	movs	r1, #14
 8001ce6:	187b      	adds	r3, r7, r1
 8001ce8:	881a      	ldrh	r2, [r3, #0]
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	3201      	adds	r2, #1
 8001cee:	801a      	strh	r2, [r3, #0]
 8001cf0:	e006      	b.n	8001d00 <_Z18submenu_2_set_datehb+0x1f4>
		case 0x2:	value--;	break;
 8001cf2:	210e      	movs	r1, #14
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	881a      	ldrh	r2, [r3, #0]
 8001cf8:	187b      	adds	r3, r7, r1
 8001cfa:	3a01      	subs	r2, #1
 8001cfc:	801a      	strh	r2, [r3, #0]
 8001cfe:	46c0      	nop			; (mov r8, r8)
	}

	//correction for overrunning of valid value area
	if(value==val_max[current_state-1])
 8001d00:	4b27      	ldr	r3, [pc, #156]	; (8001da0 <_Z18submenu_2_set_datehb+0x294>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	1e5a      	subs	r2, r3, #1
 8001d06:	4b2d      	ldr	r3, [pc, #180]	; (8001dbc <_Z18submenu_2_set_datehb+0x2b0>)
 8001d08:	0052      	lsls	r2, r2, #1
 8001d0a:	5ad3      	ldrh	r3, [r2, r3]
 8001d0c:	210e      	movs	r1, #14
 8001d0e:	187a      	adds	r2, r7, r1
 8001d10:	8812      	ldrh	r2, [r2, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d108      	bne.n	8001d28 <_Z18submenu_2_set_datehb+0x21c>
		value = val_min[current_state-1]+1;
 8001d16:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <_Z18submenu_2_set_datehb+0x294>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	1e5a      	subs	r2, r3, #1
 8001d1c:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <_Z18submenu_2_set_datehb+0x2b4>)
 8001d1e:	0052      	lsls	r2, r2, #1
 8001d20:	5ad2      	ldrh	r2, [r2, r3]
 8001d22:	187b      	adds	r3, r7, r1
 8001d24:	3201      	adds	r2, #1
 8001d26:	801a      	strh	r2, [r3, #0]
	if(value==val_min[current_state-1])
 8001d28:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <_Z18submenu_2_set_datehb+0x294>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	1e5a      	subs	r2, r3, #1
 8001d2e:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <_Z18submenu_2_set_datehb+0x2b4>)
 8001d30:	0052      	lsls	r2, r2, #1
 8001d32:	5ad3      	ldrh	r3, [r2, r3]
 8001d34:	210e      	movs	r1, #14
 8001d36:	187a      	adds	r2, r7, r1
 8001d38:	8812      	ldrh	r2, [r2, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d108      	bne.n	8001d50 <_Z18submenu_2_set_datehb+0x244>
		value = val_max[current_state-1]-1;
 8001d3e:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <_Z18submenu_2_set_datehb+0x294>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	1e5a      	subs	r2, r3, #1
 8001d44:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <_Z18submenu_2_set_datehb+0x2b0>)
 8001d46:	0052      	lsls	r2, r2, #1
 8001d48:	5ad2      	ldrh	r2, [r2, r3]
 8001d4a:	187b      	adds	r3, r7, r1
 8001d4c:	3a01      	subs	r2, #1
 8001d4e:	801a      	strh	r2, [r3, #0]

	//write manipulated value back to time struct
	switch(current_state){
 8001d50:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <_Z18submenu_2_set_datehb+0x294>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d01d      	beq.n	8001d94 <_Z18submenu_2_set_datehb+0x288>
 8001d58:	dc34      	bgt.n	8001dc4 <_Z18submenu_2_set_datehb+0x2b8>
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d013      	beq.n	8001d86 <_Z18submenu_2_set_datehb+0x27a>
 8001d5e:	dc31      	bgt.n	8001dc4 <_Z18submenu_2_set_datehb+0x2b8>
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d002      	beq.n	8001d6a <_Z18submenu_2_set_datehb+0x25e>
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d007      	beq.n	8001d78 <_Z18submenu_2_set_datehb+0x26c>
		case 0x1: data_to_RTC.day = value; break;
		case 0x2: data_to_RTC.date = value; break;
		case 0x3: data_to_RTC.month = value; break;
		case 0x4: data_to_RTC.year = value; break;
		default: break;
 8001d68:	e02c      	b.n	8001dc4 <_Z18submenu_2_set_datehb+0x2b8>
		case 0x1: data_to_RTC.day = value; break;
 8001d6a:	230e      	movs	r3, #14
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <_Z18submenu_2_set_datehb+0x29c>)
 8001d74:	70da      	strb	r2, [r3, #3]
 8001d76:	e026      	b.n	8001dc6 <_Z18submenu_2_set_datehb+0x2ba>
		case 0x2: data_to_RTC.date = value; break;
 8001d78:	230e      	movs	r3, #14
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <_Z18submenu_2_set_datehb+0x29c>)
 8001d82:	711a      	strb	r2, [r3, #4]
 8001d84:	e01f      	b.n	8001dc6 <_Z18submenu_2_set_datehb+0x2ba>
		case 0x3: data_to_RTC.month = value; break;
 8001d86:	230e      	movs	r3, #14
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <_Z18submenu_2_set_datehb+0x29c>)
 8001d90:	715a      	strb	r2, [r3, #5]
 8001d92:	e018      	b.n	8001dc6 <_Z18submenu_2_set_datehb+0x2ba>
		case 0x4: data_to_RTC.year = value; break;
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <_Z18submenu_2_set_datehb+0x29c>)
 8001d96:	220e      	movs	r2, #14
 8001d98:	18ba      	adds	r2, r7, r2
 8001d9a:	8812      	ldrh	r2, [r2, #0]
 8001d9c:	80da      	strh	r2, [r3, #6]
 8001d9e:	e012      	b.n	8001dc6 <_Z18submenu_2_set_datehb+0x2ba>
 8001da0:	20000438 	.word	0x20000438
 8001da4:	20000014 	.word	0x20000014
 8001da8:	20000020 	.word	0x20000020
 8001dac:	20000431 	.word	0x20000431
 8001db0:	20000420 	.word	0x20000420
 8001db4:	ffffff00 	.word	0xffffff00
 8001db8:	20000434 	.word	0x20000434
 8001dbc:	20000008 	.word	0x20000008
 8001dc0:	20000000 	.word	0x20000000
		default: break;
 8001dc4:	46c0      	nop			; (mov r8, r8)
	}

	//display output
	if(current_state == 1){	//day
 8001dc6:	4b45      	ldr	r3, [pc, #276]	; (8001edc <_Z18submenu_2_set_datehb+0x3d0>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d105      	bne.n	8001dda <_Z18submenu_2_set_datehb+0x2ce>
		set_number(1,data_to_RTC.day);
 8001dce:	4b44      	ldr	r3, [pc, #272]	; (8001ee0 <_Z18submenu_2_set_datehb+0x3d4>)
 8001dd0:	78db      	ldrb	r3, [r3, #3]
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f7ff f8fd 	bl	8000fd4 <_Z10set_numberhh>
	}
	if(current_state == 2 || current_state == 3){	//date+month
 8001dda:	4b40      	ldr	r3, [pc, #256]	; (8001edc <_Z18submenu_2_set_datehb+0x3d0>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d003      	beq.n	8001dea <_Z18submenu_2_set_datehb+0x2de>
 8001de2:	4b3e      	ldr	r3, [pc, #248]	; (8001edc <_Z18submenu_2_set_datehb+0x3d0>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d12f      	bne.n	8001e4a <_Z18submenu_2_set_datehb+0x33e>
		set_number(0,data_to_RTC.date/10);
 8001dea:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <_Z18submenu_2_set_datehb+0x3d4>)
 8001dec:	791b      	ldrb	r3, [r3, #4]
 8001dee:	210a      	movs	r1, #10
 8001df0:	0018      	movs	r0, r3
 8001df2:	f7fe f989 	bl	8000108 <__udivsi3>
 8001df6:	0003      	movs	r3, r0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f7ff f8e9 	bl	8000fd4 <_Z10set_numberhh>
		set_number(1,data_to_RTC.date%10);
 8001e02:	4b37      	ldr	r3, [pc, #220]	; (8001ee0 <_Z18submenu_2_set_datehb+0x3d4>)
 8001e04:	791b      	ldrb	r3, [r3, #4]
 8001e06:	210a      	movs	r1, #10
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f7fe fa03 	bl	8000214 <__aeabi_uidivmod>
 8001e0e:	000b      	movs	r3, r1
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	0019      	movs	r1, r3
 8001e14:	2001      	movs	r0, #1
 8001e16:	f7ff f8dd 	bl	8000fd4 <_Z10set_numberhh>
		set_number(2,data_to_RTC.month/10);
 8001e1a:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <_Z18submenu_2_set_datehb+0x3d4>)
 8001e1c:	795b      	ldrb	r3, [r3, #5]
 8001e1e:	210a      	movs	r1, #10
 8001e20:	0018      	movs	r0, r3
 8001e22:	f7fe f971 	bl	8000108 <__udivsi3>
 8001e26:	0003      	movs	r3, r0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	2002      	movs	r0, #2
 8001e2e:	f7ff f8d1 	bl	8000fd4 <_Z10set_numberhh>
		set_number(3,data_to_RTC.month%10);
 8001e32:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <_Z18submenu_2_set_datehb+0x3d4>)
 8001e34:	795b      	ldrb	r3, [r3, #5]
 8001e36:	210a      	movs	r1, #10
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f7fe f9eb 	bl	8000214 <__aeabi_uidivmod>
 8001e3e:	000b      	movs	r3, r1
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	0019      	movs	r1, r3
 8001e44:	2003      	movs	r0, #3
 8001e46:	f7ff f8c5 	bl	8000fd4 <_Z10set_numberhh>
	}
	if(current_state == 4){	//year
 8001e4a:	4b24      	ldr	r3, [pc, #144]	; (8001edc <_Z18submenu_2_set_datehb+0x3d0>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d140      	bne.n	8001ed4 <_Z18submenu_2_set_datehb+0x3c8>
		set_number(0,data_to_RTC.year/1000);
 8001e52:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <_Z18submenu_2_set_datehb+0x3d4>)
 8001e54:	88db      	ldrh	r3, [r3, #6]
 8001e56:	22fa      	movs	r2, #250	; 0xfa
 8001e58:	0091      	lsls	r1, r2, #2
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f7fe f954 	bl	8000108 <__udivsi3>
 8001e60:	0003      	movs	r3, r0
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	0019      	movs	r1, r3
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7ff f8b3 	bl	8000fd4 <_Z10set_numberhh>
		set_number(1,(data_to_RTC.year/100)%10);
 8001e6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <_Z18submenu_2_set_datehb+0x3d4>)
 8001e70:	88db      	ldrh	r3, [r3, #6]
 8001e72:	2164      	movs	r1, #100	; 0x64
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7fe f947 	bl	8000108 <__udivsi3>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	210a      	movs	r1, #10
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7fe f9c7 	bl	8000214 <__aeabi_uidivmod>
 8001e86:	000b      	movs	r3, r1
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	2001      	movs	r0, #1
 8001e90:	f7ff f8a0 	bl	8000fd4 <_Z10set_numberhh>
		set_number(2,(data_to_RTC.year/10)%10);
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <_Z18submenu_2_set_datehb+0x3d4>)
 8001e96:	88db      	ldrh	r3, [r3, #6]
 8001e98:	210a      	movs	r1, #10
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f7fe f934 	bl	8000108 <__udivsi3>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	210a      	movs	r1, #10
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f7fe f9b4 	bl	8000214 <__aeabi_uidivmod>
 8001eac:	000b      	movs	r3, r1
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	2002      	movs	r0, #2
 8001eb6:	f7ff f88d 	bl	8000fd4 <_Z10set_numberhh>
		set_number(3,data_to_RTC.year%10);
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <_Z18submenu_2_set_datehb+0x3d4>)
 8001ebc:	88db      	ldrh	r3, [r3, #6]
 8001ebe:	210a      	movs	r1, #10
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f7fe f9a7 	bl	8000214 <__aeabi_uidivmod>
 8001ec6:	000b      	movs	r3, r1
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	0019      	movs	r1, r3
 8001ece:	2003      	movs	r0, #3
 8001ed0:	f7ff f880 	bl	8000fd4 <_Z10set_numberhh>
	}
}
 8001ed4:	46c0      	nop			; (mov r8, r8)
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b005      	add	sp, #20
 8001eda:	bd90      	pop	{r4, r7, pc}
 8001edc:	20000438 	.word	0x20000438
 8001ee0:	20000020 	.word	0x20000020

08001ee4 <_Z19submenu_3_set_onoffhb>:
/**
 * @brief function to set different time-zones when the clock should be acitve
 * @param: enter input info 0x1=left; 0x2=right; 0x4=press; 0x8=long press
 * @param: new_entry set true, when menu is entered through menu select
 */
void submenu_3_set_onoff(uint8_t local_input, bool new_entry){
 8001ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	0002      	movs	r2, r0
 8001eec:	1dfb      	adds	r3, r7, #7
 8001eee:	701a      	strb	r2, [r3, #0]
 8001ef0:	1dbb      	adds	r3, r7, #6
 8001ef2:	1c0a      	adds	r2, r1, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
	uint8_t number_value = 0;
 8001ef6:	2317      	movs	r3, #23
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	2200      	movs	r2, #0
 8001efc:	701a      	strb	r2, [r3, #0]
	static uint8_t current_substate = 0;
	static uint8_t otc[8][6] = {0};	//on time copy

	//current state: 0 - 8; each state contains 6 substates: start day, end day, start time hours/minutes, endtime hours/minutes

	if(new_entry == true){
 8001efe:	1dbb      	adds	r3, r7, #6
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d13f      	bne.n	8001f86 <_Z19submenu_3_set_onoffhb+0xa2>
		current_state = 0;
 8001f06:	4ba8      	ldr	r3, [pc, #672]	; (80021a8 <_Z19submenu_3_set_onoffhb+0x2c4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
		current_substate = 0;
 8001f0c:	4ba7      	ldr	r3, [pc, #668]	; (80021ac <_Z19submenu_3_set_onoffhb+0x2c8>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
		blink_state = false;
 8001f12:	4ba7      	ldr	r3, [pc, #668]	; (80021b0 <_Z19submenu_3_set_onoffhb+0x2cc>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<8;i++){		//copy on_time to temporary register
 8001f18:	2316      	movs	r3, #22
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
 8001f20:	2316      	movs	r3, #22
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b07      	cmp	r3, #7
 8001f28:	d82d      	bhi.n	8001f86 <_Z19submenu_3_set_onoffhb+0xa2>
			for(uint8_t j = 0; j<6; j++){
 8001f2a:	2315      	movs	r3, #21
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	2615      	movs	r6, #21
 8001f34:	19bb      	adds	r3, r7, r6
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b05      	cmp	r3, #5
 8001f3a:	d81d      	bhi.n	8001f78 <_Z19submenu_3_set_onoffhb+0x94>
				otc[i][j] = on_time[i][j];
 8001f3c:	2216      	movs	r2, #22
 8001f3e:	18bb      	adds	r3, r7, r2
 8001f40:	7819      	ldrb	r1, [r3, #0]
 8001f42:	19bb      	adds	r3, r7, r6
 8001f44:	781c      	ldrb	r4, [r3, #0]
 8001f46:	18bb      	adds	r3, r7, r2
 8001f48:	781a      	ldrb	r2, [r3, #0]
 8001f4a:	19bb      	adds	r3, r7, r6
 8001f4c:	7818      	ldrb	r0, [r3, #0]
 8001f4e:	4d99      	ldr	r5, [pc, #612]	; (80021b4 <_Z19submenu_3_set_onoffhb+0x2d0>)
 8001f50:	000b      	movs	r3, r1
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	185b      	adds	r3, r3, r1
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	18eb      	adds	r3, r5, r3
 8001f5a:	5d1c      	ldrb	r4, [r3, r4]
 8001f5c:	4996      	ldr	r1, [pc, #600]	; (80021b8 <_Z19submenu_3_set_onoffhb+0x2d4>)
 8001f5e:	0013      	movs	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	189b      	adds	r3, r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	18cb      	adds	r3, r1, r3
 8001f68:	1c22      	adds	r2, r4, #0
 8001f6a:	541a      	strb	r2, [r3, r0]
			for(uint8_t j = 0; j<6; j++){
 8001f6c:	19bb      	adds	r3, r7, r6
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	19bb      	adds	r3, r7, r6
 8001f72:	3201      	adds	r2, #1
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	e7dc      	b.n	8001f32 <_Z19submenu_3_set_onoffhb+0x4e>
		for(uint8_t i=0;i<8;i++){		//copy on_time to temporary register
 8001f78:	2116      	movs	r1, #22
 8001f7a:	187b      	adds	r3, r7, r1
 8001f7c:	781a      	ldrb	r2, [r3, #0]
 8001f7e:	187b      	adds	r3, r7, r1
 8001f80:	3201      	adds	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]
 8001f84:	e7cc      	b.n	8001f20 <_Z19submenu_3_set_onoffhb+0x3c>
			}
		}
	}

	//handle menu control
	if(local_input == 0x4){
 8001f86:	1dfb      	adds	r3, r7, #7
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d14f      	bne.n	800202e <_Z19submenu_3_set_onoffhb+0x14a>
		current_substate++;
 8001f8e:	4b87      	ldr	r3, [pc, #540]	; (80021ac <_Z19submenu_3_set_onoffhb+0x2c8>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	3301      	adds	r3, #1
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4b85      	ldr	r3, [pc, #532]	; (80021ac <_Z19submenu_3_set_onoffhb+0x2c8>)
 8001f98:	701a      	strb	r2, [r3, #0]
		if(current_substate==6){
 8001f9a:	4b84      	ldr	r3, [pc, #528]	; (80021ac <_Z19submenu_3_set_onoffhb+0x2c8>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b06      	cmp	r3, #6
 8001fa0:	d13f      	bne.n	8002022 <_Z19submenu_3_set_onoffhb+0x13e>
			current_state++;
 8001fa2:	4b81      	ldr	r3, [pc, #516]	; (80021a8 <_Z19submenu_3_set_onoffhb+0x2c4>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4b7f      	ldr	r3, [pc, #508]	; (80021a8 <_Z19submenu_3_set_onoffhb+0x2c4>)
 8001fac:	701a      	strb	r2, [r3, #0]
			current_substate = 0;
 8001fae:	4b7f      	ldr	r3, [pc, #508]	; (80021ac <_Z19submenu_3_set_onoffhb+0x2c8>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0;i<8;i++){		//copy temporary data back to on_time with every time profile changed
 8001fb4:	2314      	movs	r3, #20
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
 8001fbc:	2314      	movs	r3, #20
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b07      	cmp	r3, #7
 8001fc4:	d82d      	bhi.n	8002022 <_Z19submenu_3_set_onoffhb+0x13e>
				for(uint8_t j = 0; j<6; j++){
 8001fc6:	2313      	movs	r3, #19
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	2200      	movs	r2, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
 8001fce:	2613      	movs	r6, #19
 8001fd0:	19bb      	adds	r3, r7, r6
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	d81d      	bhi.n	8002014 <_Z19submenu_3_set_onoffhb+0x130>
					on_time[i][j] = otc[i][j];
 8001fd8:	2214      	movs	r2, #20
 8001fda:	18bb      	adds	r3, r7, r2
 8001fdc:	7819      	ldrb	r1, [r3, #0]
 8001fde:	19bb      	adds	r3, r7, r6
 8001fe0:	781c      	ldrb	r4, [r3, #0]
 8001fe2:	18bb      	adds	r3, r7, r2
 8001fe4:	781a      	ldrb	r2, [r3, #0]
 8001fe6:	19bb      	adds	r3, r7, r6
 8001fe8:	7818      	ldrb	r0, [r3, #0]
 8001fea:	4d73      	ldr	r5, [pc, #460]	; (80021b8 <_Z19submenu_3_set_onoffhb+0x2d4>)
 8001fec:	000b      	movs	r3, r1
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	185b      	adds	r3, r3, r1
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	18eb      	adds	r3, r5, r3
 8001ff6:	5d1c      	ldrb	r4, [r3, r4]
 8001ff8:	496e      	ldr	r1, [pc, #440]	; (80021b4 <_Z19submenu_3_set_onoffhb+0x2d0>)
 8001ffa:	0013      	movs	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	189b      	adds	r3, r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	18cb      	adds	r3, r1, r3
 8002004:	1c22      	adds	r2, r4, #0
 8002006:	541a      	strb	r2, [r3, r0]
				for(uint8_t j = 0; j<6; j++){
 8002008:	19bb      	adds	r3, r7, r6
 800200a:	781a      	ldrb	r2, [r3, #0]
 800200c:	19bb      	adds	r3, r7, r6
 800200e:	3201      	adds	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
 8002012:	e7dc      	b.n	8001fce <_Z19submenu_3_set_onoffhb+0xea>
			for(uint8_t i=0;i<8;i++){		//copy temporary data back to on_time with every time profile changed
 8002014:	2114      	movs	r1, #20
 8002016:	187b      	adds	r3, r7, r1
 8002018:	781a      	ldrb	r2, [r3, #0]
 800201a:	187b      	adds	r3, r7, r1
 800201c:	3201      	adds	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
 8002020:	e7cc      	b.n	8001fbc <_Z19submenu_3_set_onoffhb+0xd8>
				}
			}
		}
		local_input=0;
 8002022:	1dfb      	adds	r3, r7, #7
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
		blink_state = false;
 8002028:	4b61      	ldr	r3, [pc, #388]	; (80021b0 <_Z19submenu_3_set_onoffhb+0x2cc>)
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
	}

	if(local_input == 0x8){	//safe made changes and leave
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b08      	cmp	r3, #8
 8002034:	d105      	bne.n	8002042 <_Z19submenu_3_set_onoffhb+0x15e>
		current_menu = 9;
 8002036:	4b61      	ldr	r3, [pc, #388]	; (80021bc <_Z19submenu_3_set_onoffhb+0x2d8>)
 8002038:	2209      	movs	r2, #9
 800203a:	701a      	strb	r2, [r3, #0]
		flash_write = true;
 800203c:	4b60      	ldr	r3, [pc, #384]	; (80021c0 <_Z19submenu_3_set_onoffhb+0x2dc>)
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
	}

	if(current_state == 8){
 8002042:	4b59      	ldr	r3, [pc, #356]	; (80021a8 <_Z19submenu_3_set_onoffhb+0x2c4>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b08      	cmp	r3, #8
 8002048:	d108      	bne.n	800205c <_Z19submenu_3_set_onoffhb+0x178>
		current_state = 7;	//set state back to legal value to prevent writing in illegal memory space
 800204a:	4b57      	ldr	r3, [pc, #348]	; (80021a8 <_Z19submenu_3_set_onoffhb+0x2c4>)
 800204c:	2207      	movs	r2, #7
 800204e:	701a      	strb	r2, [r3, #0]
		current_menu = 9;
 8002050:	4b5a      	ldr	r3, [pc, #360]	; (80021bc <_Z19submenu_3_set_onoffhb+0x2d8>)
 8002052:	2209      	movs	r2, #9
 8002054:	701a      	strb	r2, [r3, #0]
		flash_write = true;
 8002056:	4b5a      	ldr	r3, [pc, #360]	; (80021c0 <_Z19submenu_3_set_onoffhb+0x2dc>)
 8002058:	2201      	movs	r2, #1
 800205a:	701a      	strb	r2, [r3, #0]
	}

	//menu function
	number_value = otc[current_state][current_substate];
 800205c:	4b52      	ldr	r3, [pc, #328]	; (80021a8 <_Z19submenu_3_set_onoffhb+0x2c4>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	0018      	movs	r0, r3
 8002062:	4b52      	ldr	r3, [pc, #328]	; (80021ac <_Z19submenu_3_set_onoffhb+0x2c8>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	001c      	movs	r4, r3
 8002068:	2317      	movs	r3, #23
 800206a:	18fa      	adds	r2, r7, r3
 800206c:	4952      	ldr	r1, [pc, #328]	; (80021b8 <_Z19submenu_3_set_onoffhb+0x2d4>)
 800206e:	0003      	movs	r3, r0
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	181b      	adds	r3, r3, r0
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	18cb      	adds	r3, r1, r3
 8002078:	5d1b      	ldrb	r3, [r3, r4]
 800207a:	7013      	strb	r3, [r2, #0]

	//blink active digits
	uint32_t blink_color = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
	uint32_t static_color = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]

	if(current_substate == 0){
 8002084:	4b49      	ldr	r3, [pc, #292]	; (80021ac <_Z19submenu_3_set_onoffhb+0x2c8>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d105      	bne.n	8002098 <_Z19submenu_3_set_onoffhb+0x1b4>
		static_color = RED;
 800208c:	23ff      	movs	r3, #255	; 0xff
 800208e:	041b      	lsls	r3, r3, #16
 8002090:	60bb      	str	r3, [r7, #8]
		blink_color = GREEN;
 8002092:	23ff      	movs	r3, #255	; 0xff
 8002094:	021b      	lsls	r3, r3, #8
 8002096:	60fb      	str	r3, [r7, #12]
	}
	if(current_substate == 1){
 8002098:	4b44      	ldr	r3, [pc, #272]	; (80021ac <_Z19submenu_3_set_onoffhb+0x2c8>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d106      	bne.n	80020ae <_Z19submenu_3_set_onoffhb+0x1ca>
		static_color = GREEN;
 80020a0:	23ff      	movs	r3, #255	; 0xff
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	60bb      	str	r3, [r7, #8]
		blink_color = RED;
 80020a6:	23ff      	movs	r3, #255	; 0xff
 80020a8:	041b      	lsls	r3, r3, #16
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	e016      	b.n	80020dc <_Z19submenu_3_set_onoffhb+0x1f8>
	}
	else if(current_substate == 2 || current_substate == 3){
 80020ae:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <_Z19submenu_3_set_onoffhb+0x2c8>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d003      	beq.n	80020be <_Z19submenu_3_set_onoffhb+0x1da>
 80020b6:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <_Z19submenu_3_set_onoffhb+0x2c8>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d105      	bne.n	80020ca <_Z19submenu_3_set_onoffhb+0x1e6>
		static_color = blink_color = GREEN;
 80020be:	23ff      	movs	r3, #255	; 0xff
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	e008      	b.n	80020dc <_Z19submenu_3_set_onoffhb+0x1f8>
	}
	else if(current_substate > 3){	// current_substate == 4 || == 5
 80020ca:	4b38      	ldr	r3, [pc, #224]	; (80021ac <_Z19submenu_3_set_onoffhb+0x2c8>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d904      	bls.n	80020dc <_Z19submenu_3_set_onoffhb+0x1f8>
		static_color = blink_color = RED;
 80020d2:	23ff      	movs	r3, #255	; 0xff
 80020d4:	041b      	lsls	r3, r3, #16
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	60bb      	str	r3, [r7, #8]
	}

	if(blink_state==!true)
 80020dc:	4b34      	ldr	r3, [pc, #208]	; (80021b0 <_Z19submenu_3_set_onoffhb+0x2cc>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <_Z19submenu_3_set_onoffhb+0x204>
		blink_color = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]

	if(current_substate%2 == 0){	//when first two tubes display changed number
 80020e8:	4b30      	ldr	r3, [pc, #192]	; (80021ac <_Z19submenu_3_set_onoffhb+0x2c8>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	001a      	movs	r2, r3
 80020ee:	2301      	movs	r3, #1
 80020f0:	4013      	ands	r3, r2
 80020f2:	d118      	bne.n	8002126 <_Z19submenu_3_set_onoffhb+0x242>
		set_color(0,blink_color,25);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2219      	movs	r2, #25
 80020f8:	0019      	movs	r1, r3
 80020fa:	2000      	movs	r0, #0
 80020fc:	f7fe fc92 	bl	8000a24 <_Z9set_colorhmh>
		set_color(1,blink_color,25);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2219      	movs	r2, #25
 8002104:	0019      	movs	r1, r3
 8002106:	2001      	movs	r0, #1
 8002108:	f7fe fc8c 	bl	8000a24 <_Z9set_colorhmh>
		set_color(2,static_color,25);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2219      	movs	r2, #25
 8002110:	0019      	movs	r1, r3
 8002112:	2002      	movs	r0, #2
 8002114:	f7fe fc86 	bl	8000a24 <_Z9set_colorhmh>
		set_color(3,static_color,25);
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2219      	movs	r2, #25
 800211c:	0019      	movs	r1, r3
 800211e:	2003      	movs	r0, #3
 8002120:	f7fe fc80 	bl	8000a24 <_Z9set_colorhmh>
 8002124:	e017      	b.n	8002156 <_Z19submenu_3_set_onoffhb+0x272>
	}else{
		set_color(0,static_color,25);
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2219      	movs	r2, #25
 800212a:	0019      	movs	r1, r3
 800212c:	2000      	movs	r0, #0
 800212e:	f7fe fc79 	bl	8000a24 <_Z9set_colorhmh>
		set_color(1,static_color,25);
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2219      	movs	r2, #25
 8002136:	0019      	movs	r1, r3
 8002138:	2001      	movs	r0, #1
 800213a:	f7fe fc73 	bl	8000a24 <_Z9set_colorhmh>
		set_color(2,blink_color,25);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2219      	movs	r2, #25
 8002142:	0019      	movs	r1, r3
 8002144:	2002      	movs	r0, #2
 8002146:	f7fe fc6d 	bl	8000a24 <_Z9set_colorhmh>
		set_color(3,blink_color,25);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2219      	movs	r2, #25
 800214e:	0019      	movs	r1, r3
 8002150:	2003      	movs	r0, #3
 8002152:	f7fe fc67 	bl	8000a24 <_Z9set_colorhmh>
	}

	if(timeout(blink_timer)==true){	//500ms loop
 8002156:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <_Z19submenu_3_set_onoffhb+0x2e0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	0018      	movs	r0, r3
 800215c:	f7fe ff04 	bl	8000f68 <timeout>
 8002160:	0003      	movs	r3, r0
 8002162:	3b01      	subs	r3, #1
 8002164:	425a      	negs	r2, r3
 8002166:	4153      	adcs	r3, r2
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00e      	beq.n	800218c <_Z19submenu_3_set_onoffhb+0x2a8>
		blink_timer = start_timer_ms(500);
 800216e:	23fa      	movs	r3, #250	; 0xfa
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	0018      	movs	r0, r3
 8002174:	f7fe fee8 	bl	8000f48 <start_timer_ms>
 8002178:	0002      	movs	r2, r0
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <_Z19submenu_3_set_onoffhb+0x2e0>)
 800217c:	601a      	str	r2, [r3, #0]
		blink_state = !blink_state;
 800217e:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <_Z19submenu_3_set_onoffhb+0x2cc>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2201      	movs	r2, #1
 8002184:	4053      	eors	r3, r2
 8002186:	b2da      	uxtb	r2, r3
 8002188:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <_Z19submenu_3_set_onoffhb+0x2cc>)
 800218a:	701a      	strb	r2, [r3, #0]
	}

	//change data according to input
	switch(local_input){
 800218c:	1dfb      	adds	r3, r7, #7
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d002      	beq.n	800219a <_Z19submenu_3_set_onoffhb+0x2b6>
 8002194:	2b02      	cmp	r3, #2
 8002196:	d017      	beq.n	80021c8 <_Z19submenu_3_set_onoffhb+0x2e4>
		case 0x1:	number_value++;	break;
		case 0x2:	number_value--;	break;
		default: break;
 8002198:	e01d      	b.n	80021d6 <_Z19submenu_3_set_onoffhb+0x2f2>
		case 0x1:	number_value++;	break;
 800219a:	2117      	movs	r1, #23
 800219c:	187b      	adds	r3, r7, r1
 800219e:	781a      	ldrb	r2, [r3, #0]
 80021a0:	187b      	adds	r3, r7, r1
 80021a2:	3201      	adds	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]
 80021a6:	e016      	b.n	80021d6 <_Z19submenu_3_set_onoffhb+0x2f2>
 80021a8:	20000440 	.word	0x20000440
 80021ac:	20000441 	.word	0x20000441
 80021b0:	20000439 	.word	0x20000439
 80021b4:	200003dc 	.word	0x200003dc
 80021b8:	20000444 	.word	0x20000444
 80021bc:	20000420 	.word	0x20000420
 80021c0:	20000424 	.word	0x20000424
 80021c4:	2000043c 	.word	0x2000043c
		case 0x2:	number_value--;	break;
 80021c8:	2117      	movs	r1, #23
 80021ca:	187b      	adds	r3, r7, r1
 80021cc:	781a      	ldrb	r2, [r3, #0]
 80021ce:	187b      	adds	r3, r7, r1
 80021d0:	3a01      	subs	r2, #1
 80021d2:	701a      	strb	r2, [r3, #0]
 80021d4:	46c0      	nop			; (mov r8, r8)
	}

	if(current_substate == 0 || current_substate == 1){	//days
 80021d6:	4b95      	ldr	r3, [pc, #596]	; (800242c <_Z19submenu_3_set_onoffhb+0x548>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <_Z19submenu_3_set_onoffhb+0x302>
 80021de:	4b93      	ldr	r3, [pc, #588]	; (800242c <_Z19submenu_3_set_onoffhb+0x548>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d10f      	bne.n	8002206 <_Z19submenu_3_set_onoffhb+0x322>
		if(number_value == 0)
 80021e6:	2217      	movs	r2, #23
 80021e8:	18bb      	adds	r3, r7, r2
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <_Z19submenu_3_set_onoffhb+0x312>
			number_value = 7;
 80021f0:	18bb      	adds	r3, r7, r2
 80021f2:	2207      	movs	r2, #7
 80021f4:	701a      	strb	r2, [r3, #0]
		if(number_value == 8)
 80021f6:	2217      	movs	r2, #23
 80021f8:	18bb      	adds	r3, r7, r2
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d102      	bne.n	8002206 <_Z19submenu_3_set_onoffhb+0x322>
			number_value = 1;
 8002200:	18bb      	adds	r3, r7, r2
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
	}
	if(current_substate == 2 || current_substate == 4){ //hours
 8002206:	4b89      	ldr	r3, [pc, #548]	; (800242c <_Z19submenu_3_set_onoffhb+0x548>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d003      	beq.n	8002216 <_Z19submenu_3_set_onoffhb+0x332>
 800220e:	4b87      	ldr	r3, [pc, #540]	; (800242c <_Z19submenu_3_set_onoffhb+0x548>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b04      	cmp	r3, #4
 8002214:	d10f      	bne.n	8002236 <_Z19submenu_3_set_onoffhb+0x352>
		if(number_value == 255)
 8002216:	2217      	movs	r2, #23
 8002218:	18bb      	adds	r3, r7, r2
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2bff      	cmp	r3, #255	; 0xff
 800221e:	d102      	bne.n	8002226 <_Z19submenu_3_set_onoffhb+0x342>
			number_value = 23;
 8002220:	18bb      	adds	r3, r7, r2
 8002222:	2217      	movs	r2, #23
 8002224:	701a      	strb	r2, [r3, #0]
		if(number_value == 24)
 8002226:	2217      	movs	r2, #23
 8002228:	18bb      	adds	r3, r7, r2
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b18      	cmp	r3, #24
 800222e:	d102      	bne.n	8002236 <_Z19submenu_3_set_onoffhb+0x352>
			number_value = 0;
 8002230:	18bb      	adds	r3, r7, r2
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
	}
	if(current_substate == 3 || current_substate == 5){ //minutes
 8002236:	4b7d      	ldr	r3, [pc, #500]	; (800242c <_Z19submenu_3_set_onoffhb+0x548>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b03      	cmp	r3, #3
 800223c:	d003      	beq.n	8002246 <_Z19submenu_3_set_onoffhb+0x362>
 800223e:	4b7b      	ldr	r3, [pc, #492]	; (800242c <_Z19submenu_3_set_onoffhb+0x548>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b05      	cmp	r3, #5
 8002244:	d10f      	bne.n	8002266 <_Z19submenu_3_set_onoffhb+0x382>
		if(number_value == 255)
 8002246:	2217      	movs	r2, #23
 8002248:	18bb      	adds	r3, r7, r2
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2bff      	cmp	r3, #255	; 0xff
 800224e:	d102      	bne.n	8002256 <_Z19submenu_3_set_onoffhb+0x372>
			number_value = 59;
 8002250:	18bb      	adds	r3, r7, r2
 8002252:	223b      	movs	r2, #59	; 0x3b
 8002254:	701a      	strb	r2, [r3, #0]
		if(number_value == 60)
 8002256:	2217      	movs	r2, #23
 8002258:	18bb      	adds	r3, r7, r2
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b3c      	cmp	r3, #60	; 0x3c
 800225e:	d102      	bne.n	8002266 <_Z19submenu_3_set_onoffhb+0x382>
			number_value = 0;
 8002260:	18bb      	adds	r3, r7, r2
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
	}

	otc[current_state][current_substate] = number_value;
 8002266:	4b72      	ldr	r3, [pc, #456]	; (8002430 <_Z19submenu_3_set_onoffhb+0x54c>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	0019      	movs	r1, r3
 800226c:	4b6f      	ldr	r3, [pc, #444]	; (800242c <_Z19submenu_3_set_onoffhb+0x548>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	0018      	movs	r0, r3
 8002272:	4a70      	ldr	r2, [pc, #448]	; (8002434 <_Z19submenu_3_set_onoffhb+0x550>)
 8002274:	000b      	movs	r3, r1
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	185b      	adds	r3, r3, r1
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	18d3      	adds	r3, r2, r3
 800227e:	2117      	movs	r1, #23
 8002280:	187a      	adds	r2, r7, r1
 8002282:	7812      	ldrb	r2, [r2, #0]
 8002284:	541a      	strb	r2, [r3, r0]

	//display output
	if(current_substate == 0){
 8002286:	4b69      	ldr	r3, [pc, #420]	; (800242c <_Z19submenu_3_set_onoffhb+0x548>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d114      	bne.n	80022b8 <_Z19submenu_3_set_onoffhb+0x3d4>
		set_number(1, number_value);
 800228e:	187b      	adds	r3, r7, r1
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	0019      	movs	r1, r3
 8002294:	2001      	movs	r0, #1
 8002296:	f7fe fe9d 	bl	8000fd4 <_Z10set_numberhh>
		set_number(3, otc[current_state][1]);
 800229a:	4b65      	ldr	r3, [pc, #404]	; (8002430 <_Z19submenu_3_set_onoffhb+0x54c>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	0019      	movs	r1, r3
 80022a0:	4a64      	ldr	r2, [pc, #400]	; (8002434 <_Z19submenu_3_set_onoffhb+0x550>)
 80022a2:	000b      	movs	r3, r1
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	185b      	adds	r3, r3, r1
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	18d3      	adds	r3, r2, r3
 80022ac:	3301      	adds	r3, #1
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	0019      	movs	r1, r3
 80022b2:	2003      	movs	r0, #3
 80022b4:	f7fe fe8e 	bl	8000fd4 <_Z10set_numberhh>
	}
	if(current_substate == 1){
 80022b8:	4b5c      	ldr	r3, [pc, #368]	; (800242c <_Z19submenu_3_set_onoffhb+0x548>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d113      	bne.n	80022e8 <_Z19submenu_3_set_onoffhb+0x404>
		set_number(1, otc[current_state][0]);
 80022c0:	4b5b      	ldr	r3, [pc, #364]	; (8002430 <_Z19submenu_3_set_onoffhb+0x54c>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	0019      	movs	r1, r3
 80022c6:	4a5b      	ldr	r2, [pc, #364]	; (8002434 <_Z19submenu_3_set_onoffhb+0x550>)
 80022c8:	000b      	movs	r3, r1
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	185b      	adds	r3, r3, r1
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	5c9b      	ldrb	r3, [r3, r2]
 80022d2:	0019      	movs	r1, r3
 80022d4:	2001      	movs	r0, #1
 80022d6:	f7fe fe7d 	bl	8000fd4 <_Z10set_numberhh>
		set_number(3, number_value);
 80022da:	2317      	movs	r3, #23
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	0019      	movs	r1, r3
 80022e2:	2003      	movs	r0, #3
 80022e4:	f7fe fe76 	bl	8000fd4 <_Z10set_numberhh>
	}
	if(current_substate == 2 || current_substate == 4){
 80022e8:	4b50      	ldr	r3, [pc, #320]	; (800242c <_Z19submenu_3_set_onoffhb+0x548>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d003      	beq.n	80022f8 <_Z19submenu_3_set_onoffhb+0x414>
 80022f0:	4b4e      	ldr	r3, [pc, #312]	; (800242c <_Z19submenu_3_set_onoffhb+0x548>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d146      	bne.n	8002386 <_Z19submenu_3_set_onoffhb+0x4a2>
		set_number(0, number_value/10);
 80022f8:	2417      	movs	r4, #23
 80022fa:	193b      	adds	r3, r7, r4
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	210a      	movs	r1, #10
 8002300:	0018      	movs	r0, r3
 8002302:	f7fd ff01 	bl	8000108 <__udivsi3>
 8002306:	0003      	movs	r3, r0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	0019      	movs	r1, r3
 800230c:	2000      	movs	r0, #0
 800230e:	f7fe fe61 	bl	8000fd4 <_Z10set_numberhh>
		set_number(1, number_value%10);
 8002312:	193b      	adds	r3, r7, r4
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	210a      	movs	r1, #10
 8002318:	0018      	movs	r0, r3
 800231a:	f7fd ff7b 	bl	8000214 <__aeabi_uidivmod>
 800231e:	000b      	movs	r3, r1
 8002320:	b2db      	uxtb	r3, r3
 8002322:	0019      	movs	r1, r3
 8002324:	2001      	movs	r0, #1
 8002326:	f7fe fe55 	bl	8000fd4 <_Z10set_numberhh>
		set_number(2, otc[current_state][current_substate+1]/10);
 800232a:	4b41      	ldr	r3, [pc, #260]	; (8002430 <_Z19submenu_3_set_onoffhb+0x54c>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	0018      	movs	r0, r3
 8002330:	4b3e      	ldr	r3, [pc, #248]	; (800242c <_Z19submenu_3_set_onoffhb+0x548>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	493f      	ldr	r1, [pc, #252]	; (8002434 <_Z19submenu_3_set_onoffhb+0x550>)
 8002338:	0003      	movs	r3, r0
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	181b      	adds	r3, r3, r0
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	18cb      	adds	r3, r1, r3
 8002342:	5c9b      	ldrb	r3, [r3, r2]
 8002344:	210a      	movs	r1, #10
 8002346:	0018      	movs	r0, r3
 8002348:	f7fd fede 	bl	8000108 <__udivsi3>
 800234c:	0003      	movs	r3, r0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	0019      	movs	r1, r3
 8002352:	2002      	movs	r0, #2
 8002354:	f7fe fe3e 	bl	8000fd4 <_Z10set_numberhh>
		set_number(3, otc[current_state][current_substate+1]%10);
 8002358:	4b35      	ldr	r3, [pc, #212]	; (8002430 <_Z19submenu_3_set_onoffhb+0x54c>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	0018      	movs	r0, r3
 800235e:	4b33      	ldr	r3, [pc, #204]	; (800242c <_Z19submenu_3_set_onoffhb+0x548>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	4933      	ldr	r1, [pc, #204]	; (8002434 <_Z19submenu_3_set_onoffhb+0x550>)
 8002366:	0003      	movs	r3, r0
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	181b      	adds	r3, r3, r0
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	18cb      	adds	r3, r1, r3
 8002370:	5c9b      	ldrb	r3, [r3, r2]
 8002372:	210a      	movs	r1, #10
 8002374:	0018      	movs	r0, r3
 8002376:	f7fd ff4d 	bl	8000214 <__aeabi_uidivmod>
 800237a:	000b      	movs	r3, r1
 800237c:	b2db      	uxtb	r3, r3
 800237e:	0019      	movs	r1, r3
 8002380:	2003      	movs	r0, #3
 8002382:	f7fe fe27 	bl	8000fd4 <_Z10set_numberhh>

	}
	if(current_substate == 3 || current_substate == 5){
 8002386:	4b29      	ldr	r3, [pc, #164]	; (800242c <_Z19submenu_3_set_onoffhb+0x548>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b03      	cmp	r3, #3
 800238c:	d003      	beq.n	8002396 <_Z19submenu_3_set_onoffhb+0x4b2>
 800238e:	4b27      	ldr	r3, [pc, #156]	; (800242c <_Z19submenu_3_set_onoffhb+0x548>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b05      	cmp	r3, #5
 8002394:	d146      	bne.n	8002424 <_Z19submenu_3_set_onoffhb+0x540>
		set_number(0, otc[current_state][current_substate-1]/10);
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <_Z19submenu_3_set_onoffhb+0x54c>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	0018      	movs	r0, r3
 800239c:	4b23      	ldr	r3, [pc, #140]	; (800242c <_Z19submenu_3_set_onoffhb+0x548>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	1e5a      	subs	r2, r3, #1
 80023a2:	4924      	ldr	r1, [pc, #144]	; (8002434 <_Z19submenu_3_set_onoffhb+0x550>)
 80023a4:	0003      	movs	r3, r0
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	181b      	adds	r3, r3, r0
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	18cb      	adds	r3, r1, r3
 80023ae:	5c9b      	ldrb	r3, [r3, r2]
 80023b0:	210a      	movs	r1, #10
 80023b2:	0018      	movs	r0, r3
 80023b4:	f7fd fea8 	bl	8000108 <__udivsi3>
 80023b8:	0003      	movs	r3, r0
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	0019      	movs	r1, r3
 80023be:	2000      	movs	r0, #0
 80023c0:	f7fe fe08 	bl	8000fd4 <_Z10set_numberhh>
		set_number(1, otc[current_state][current_substate-1]%10);
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <_Z19submenu_3_set_onoffhb+0x54c>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	0018      	movs	r0, r3
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <_Z19submenu_3_set_onoffhb+0x548>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	1e5a      	subs	r2, r3, #1
 80023d0:	4918      	ldr	r1, [pc, #96]	; (8002434 <_Z19submenu_3_set_onoffhb+0x550>)
 80023d2:	0003      	movs	r3, r0
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	181b      	adds	r3, r3, r0
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	18cb      	adds	r3, r1, r3
 80023dc:	5c9b      	ldrb	r3, [r3, r2]
 80023de:	210a      	movs	r1, #10
 80023e0:	0018      	movs	r0, r3
 80023e2:	f7fd ff17 	bl	8000214 <__aeabi_uidivmod>
 80023e6:	000b      	movs	r3, r1
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	0019      	movs	r1, r3
 80023ec:	2001      	movs	r0, #1
 80023ee:	f7fe fdf1 	bl	8000fd4 <_Z10set_numberhh>
		set_number(2, number_value/10);
 80023f2:	2417      	movs	r4, #23
 80023f4:	193b      	adds	r3, r7, r4
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	210a      	movs	r1, #10
 80023fa:	0018      	movs	r0, r3
 80023fc:	f7fd fe84 	bl	8000108 <__udivsi3>
 8002400:	0003      	movs	r3, r0
 8002402:	b2db      	uxtb	r3, r3
 8002404:	0019      	movs	r1, r3
 8002406:	2002      	movs	r0, #2
 8002408:	f7fe fde4 	bl	8000fd4 <_Z10set_numberhh>
		set_number(3, number_value%10);
 800240c:	193b      	adds	r3, r7, r4
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	210a      	movs	r1, #10
 8002412:	0018      	movs	r0, r3
 8002414:	f7fd fefe 	bl	8000214 <__aeabi_uidivmod>
 8002418:	000b      	movs	r3, r1
 800241a:	b2db      	uxtb	r3, r3
 800241c:	0019      	movs	r1, r3
 800241e:	2003      	movs	r0, #3
 8002420:	f7fe fdd8 	bl	8000fd4 <_Z10set_numberhh>
	}
}
 8002424:	46c0      	nop			; (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b007      	add	sp, #28
 800242a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800242c:	20000441 	.word	0x20000441
 8002430:	20000440 	.word	0x20000440
 8002434:	20000444 	.word	0x20000444

08002438 <_Z21submenu_9_menu_selecth>:

/**
 * @brief: function to select new setting option
 * @param: enter input info 0x1=left; 0x2=right; 0x4=press; 0x8=long press
 */
bool submenu_9_menu_select(uint8_t local_input){
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	0002      	movs	r2, r0
 8002440:	1dfb      	adds	r3, r7, #7
 8002442:	701a      	strb	r2, [r3, #0]
	if(local_input == 0x1)
 8002444:	1dfb      	adds	r3, r7, #7
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d105      	bne.n	8002458 <_Z21submenu_9_menu_selecth+0x20>
		selected_menu++;
 800244c:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <_Z21submenu_9_menu_selecth+0x7c>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	3301      	adds	r3, #1
 8002452:	b2da      	uxtb	r2, r3
 8002454:	4b17      	ldr	r3, [pc, #92]	; (80024b4 <_Z21submenu_9_menu_selecth+0x7c>)
 8002456:	701a      	strb	r2, [r3, #0]
	if(local_input == 0x2)
 8002458:	1dfb      	adds	r3, r7, #7
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d105      	bne.n	800246c <_Z21submenu_9_menu_selecth+0x34>
		selected_menu--;
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <_Z21submenu_9_menu_selecth+0x7c>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	3b01      	subs	r3, #1
 8002466:	b2da      	uxtb	r2, r3
 8002468:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <_Z21submenu_9_menu_selecth+0x7c>)
 800246a:	701a      	strb	r2, [r3, #0]
	if(selected_menu == 255)
 800246c:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <_Z21submenu_9_menu_selecth+0x7c>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2bff      	cmp	r3, #255	; 0xff
 8002472:	d102      	bne.n	800247a <_Z21submenu_9_menu_selecth+0x42>
		selected_menu = 6;
 8002474:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <_Z21submenu_9_menu_selecth+0x7c>)
 8002476:	2206      	movs	r2, #6
 8002478:	701a      	strb	r2, [r3, #0]
	if(selected_menu == 7)
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <_Z21submenu_9_menu_selecth+0x7c>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b07      	cmp	r3, #7
 8002480:	d102      	bne.n	8002488 <_Z21submenu_9_menu_selecth+0x50>
		selected_menu = 0;
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <_Z21submenu_9_menu_selecth+0x7c>)
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
	set_number(0, selected_menu);
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <_Z21submenu_9_menu_selecth+0x7c>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	0019      	movs	r1, r3
 800248e:	2000      	movs	r0, #0
 8002490:	f7fe fda0 	bl	8000fd4 <_Z10set_numberhh>
	if(local_input == 0x4){
 8002494:	1dfb      	adds	r3, r7, #7
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b04      	cmp	r3, #4
 800249a:	d105      	bne.n	80024a8 <_Z21submenu_9_menu_selecth+0x70>
		current_menu = selected_menu;
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <_Z21submenu_9_menu_selecth+0x7c>)
 800249e:	781a      	ldrb	r2, [r3, #0]
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <_Z21submenu_9_menu_selecth+0x80>)
 80024a2:	701a      	strb	r2, [r3, #0]
		return true;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <_Z21submenu_9_menu_selecth+0x72>
		//TODO: move current state to separat subfunctions
		//		current_state=0;	//reset state when entering new menu
	}
	else
		return false;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	0018      	movs	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b002      	add	sp, #8
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	20000421 	.word	0x20000421
 80024b8:	20000420 	.word	0x20000420

080024bc <_Z20write_flash_new_datav>:

/**
 * @brief function to write new settings to flash, when input is complete
 * @return returns 0 if write was successful, else return 1
 */
bool write_flash_new_data(void){
 80024bc:	b5b0      	push	{r4, r5, r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
	uint8_t temp = 1;
 80024c2:	210f      	movs	r1, #15
 80024c4:	187b      	adds	r3, r7, r1
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
	uint8_t data = 0;
 80024ca:	230e      	movs	r3, #14
 80024cc:	18fb      	adds	r3, r7, r3
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
	uint32_t addr = UP_FLASH_ADDR;
 80024d2:	4b2f      	ldr	r3, [pc, #188]	; (8002590 <_Z20write_flash_new_datav+0xd4>)
 80024d4:	60bb      	str	r3, [r7, #8]

	temp = HAL_FLASHEx_DATAEEPROM_Unlock();
 80024d6:	000d      	movs	r5, r1
 80024d8:	187c      	adds	r4, r7, r1
 80024da:	f001 fa41 	bl	8003960 <HAL_FLASHEx_DATAEEPROM_Unlock>
 80024de:	0003      	movs	r3, r0
 80024e0:	7023      	strb	r3, [r4, #0]

	if(temp == 0){
 80024e2:	197b      	adds	r3, r7, r5
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d145      	bne.n	8002576 <_Z20write_flash_new_datav+0xba>
		for(uint8_t i=0; i<50; i++){	//50 bytes to write in flash (8*6 time area; 2 led+points)
 80024ea:	1dfb      	adds	r3, r7, #7
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
 80024f0:	1dfb      	adds	r3, r7, #7
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b31      	cmp	r3, #49	; 0x31
 80024f6:	d83e      	bhi.n	8002576 <_Z20write_flash_new_datav+0xba>
			if(i<48)
 80024f8:	1dfb      	adds	r3, r7, #7
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b2f      	cmp	r3, #47	; 0x2f
 80024fe:	d81c      	bhi.n	800253a <_Z20write_flash_new_datav+0x7e>
				data = on_time[i/6][i%6];
 8002500:	1dfb      	adds	r3, r7, #7
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2106      	movs	r1, #6
 8002506:	0018      	movs	r0, r3
 8002508:	f7fd fdfe 	bl	8000108 <__udivsi3>
 800250c:	0003      	movs	r3, r0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	001c      	movs	r4, r3
 8002512:	1dfb      	adds	r3, r7, #7
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2106      	movs	r1, #6
 8002518:	0018      	movs	r0, r3
 800251a:	f7fd fe7b 	bl	8000214 <__aeabi_uidivmod>
 800251e:	000b      	movs	r3, r1
 8002520:	b2db      	uxtb	r3, r3
 8002522:	0018      	movs	r0, r3
 8002524:	230e      	movs	r3, #14
 8002526:	18fa      	adds	r2, r7, r3
 8002528:	491a      	ldr	r1, [pc, #104]	; (8002594 <_Z20write_flash_new_datav+0xd8>)
 800252a:	0023      	movs	r3, r4
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	191b      	adds	r3, r3, r4
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	18cb      	adds	r3, r1, r3
 8002534:	5c1b      	ldrb	r3, [r3, r0]
 8002536:	7013      	strb	r3, [r2, #0]
 8002538:	e008      	b.n	800254c <_Z20write_flash_new_datav+0x90>
			else
				data = misc_setting[i-48];
 800253a:	1dfb      	adds	r3, r7, #7
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	3b30      	subs	r3, #48	; 0x30
 8002540:	001a      	movs	r2, r3
 8002542:	230e      	movs	r3, #14
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	4914      	ldr	r1, [pc, #80]	; (8002598 <_Z20write_flash_new_datav+0xdc>)
 8002548:	5c8a      	ldrb	r2, [r1, r2]
 800254a:	701a      	strb	r2, [r3, #0]
			temp = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data);
 800254c:	230e      	movs	r3, #14
 800254e:	18fb      	adds	r3, r7, r3
 8002550:	781a      	ldrb	r2, [r3, #0]
 8002552:	230f      	movs	r3, #15
 8002554:	18fc      	adds	r4, r7, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	0019      	movs	r1, r3
 800255a:	2000      	movs	r0, #0
 800255c:	f001 fa3c 	bl	80039d8 <HAL_FLASHEx_DATAEEPROM_Program>
 8002560:	0003      	movs	r3, r0
 8002562:	7023      	strb	r3, [r4, #0]
			addr++;
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	3301      	adds	r3, #1
 8002568:	60bb      	str	r3, [r7, #8]
		for(uint8_t i=0; i<50; i++){	//50 bytes to write in flash (8*6 time area; 2 led+points)
 800256a:	1dfb      	adds	r3, r7, #7
 800256c:	781a      	ldrb	r2, [r3, #0]
 800256e:	1dfb      	adds	r3, r7, #7
 8002570:	3201      	adds	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
 8002574:	e7bc      	b.n	80024f0 <_Z20write_flash_new_datav+0x34>
		}
	}
	HAL_FLASHEx_DATAEEPROM_Lock();
 8002576:	f001 fa21 	bl	80039bc <HAL_FLASHEx_DATAEEPROM_Lock>
	return temp;
 800257a:	230f      	movs	r3, #15
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	1e5a      	subs	r2, r3, #1
 8002582:	4193      	sbcs	r3, r2
 8002584:	b2db      	uxtb	r3, r3
}
 8002586:	0018      	movs	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	b004      	add	sp, #16
 800258c:	bdb0      	pop	{r4, r5, r7, pc}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	08080000 	.word	0x08080000
 8002594:	200003dc 	.word	0x200003dc
 8002598:	2000040c 	.word	0x2000040c

0800259c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80025a0:	4b18      	ldr	r3, [pc, #96]	; (8002604 <MX_SPI1_Init+0x68>)
 80025a2:	4a19      	ldr	r2, [pc, #100]	; (8002608 <MX_SPI1_Init+0x6c>)
 80025a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025a6:	4b17      	ldr	r3, [pc, #92]	; (8002604 <MX_SPI1_Init+0x68>)
 80025a8:	2282      	movs	r2, #130	; 0x82
 80025aa:	0052      	lsls	r2, r2, #1
 80025ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <MX_SPI1_Init+0x68>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025b4:	4b13      	ldr	r3, [pc, #76]	; (8002604 <MX_SPI1_Init+0x68>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ba:	4b12      	ldr	r3, [pc, #72]	; (8002604 <MX_SPI1_Init+0x68>)
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025c0:	4b10      	ldr	r3, [pc, #64]	; (8002604 <MX_SPI1_Init+0x68>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025c6:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <MX_SPI1_Init+0x68>)
 80025c8:	2280      	movs	r2, #128	; 0x80
 80025ca:	0092      	lsls	r2, r2, #2
 80025cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80025ce:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <MX_SPI1_Init+0x68>)
 80025d0:	2208      	movs	r2, #8
 80025d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <MX_SPI1_Init+0x68>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <MX_SPI1_Init+0x68>)
 80025dc:	2200      	movs	r2, #0
 80025de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <MX_SPI1_Init+0x68>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80025e6:	4b07      	ldr	r3, [pc, #28]	; (8002604 <MX_SPI1_Init+0x68>)
 80025e8:	2207      	movs	r2, #7
 80025ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <MX_SPI1_Init+0x68>)
 80025ee:	0018      	movs	r0, r3
 80025f0:	f003 f87c 	bl	80056ec <HAL_SPI_Init>
 80025f4:	1e03      	subs	r3, r0, #0
 80025f6:	d001      	beq.n	80025fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80025f8:	f7fe fcc8 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025fc:	46c0      	nop			; (mov r8, r8)
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	20000474 	.word	0x20000474
 8002608:	40013000 	.word	0x40013000

0800260c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b089      	sub	sp, #36	; 0x24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	240c      	movs	r4, #12
 8002616:	193b      	adds	r3, r7, r4
 8002618:	0018      	movs	r0, r3
 800261a:	2314      	movs	r3, #20
 800261c:	001a      	movs	r2, r3
 800261e:	2100      	movs	r1, #0
 8002620:	f004 fd5a 	bl	80070d8 <memset>
  if(spiHandle->Instance==SPI1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a18      	ldr	r2, [pc, #96]	; (800268c <HAL_SPI_MspInit+0x80>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d129      	bne.n	8002682 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800262e:	4b18      	ldr	r3, [pc, #96]	; (8002690 <HAL_SPI_MspInit+0x84>)
 8002630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002632:	4b17      	ldr	r3, [pc, #92]	; (8002690 <HAL_SPI_MspInit+0x84>)
 8002634:	2180      	movs	r1, #128	; 0x80
 8002636:	0149      	lsls	r1, r1, #5
 8002638:	430a      	orrs	r2, r1
 800263a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263c:	4b14      	ldr	r3, [pc, #80]	; (8002690 <HAL_SPI_MspInit+0x84>)
 800263e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <HAL_SPI_MspInit+0x84>)
 8002642:	2101      	movs	r1, #1
 8002644:	430a      	orrs	r2, r1
 8002646:	62da      	str	r2, [r3, #44]	; 0x2c
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <HAL_SPI_MspInit+0x84>)
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	2201      	movs	r2, #1
 800264e:	4013      	ands	r3, r2
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002654:	0021      	movs	r1, r4
 8002656:	187b      	adds	r3, r7, r1
 8002658:	22a0      	movs	r2, #160	; 0xa0
 800265a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265c:	187b      	adds	r3, r7, r1
 800265e:	2202      	movs	r2, #2
 8002660:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	187b      	adds	r3, r7, r1
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002668:	187b      	adds	r3, r7, r1
 800266a:	2203      	movs	r2, #3
 800266c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800266e:	187b      	adds	r3, r7, r1
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002674:	187a      	adds	r2, r7, r1
 8002676:	23a0      	movs	r3, #160	; 0xa0
 8002678:	05db      	lsls	r3, r3, #23
 800267a:	0011      	movs	r1, r2
 800267c:	0018      	movs	r0, r3
 800267e:	f001 fa03 	bl	8003a88 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	46bd      	mov	sp, r7
 8002686:	b009      	add	sp, #36	; 0x24
 8002688:	bd90      	pop	{r4, r7, pc}
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	40013000 	.word	0x40013000
 8002690:	40021000 	.word	0x40021000

08002694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002698:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <HAL_MspInit+0x24>)
 800269a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <HAL_MspInit+0x24>)
 800269e:	2101      	movs	r1, #1
 80026a0:	430a      	orrs	r2, r1
 80026a2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <HAL_MspInit+0x24>)
 80026a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026a8:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <HAL_MspInit+0x24>)
 80026aa:	2180      	movs	r1, #128	; 0x80
 80026ac:	0549      	lsls	r1, r1, #21
 80026ae:	430a      	orrs	r2, r1
 80026b0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000

080026bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026c0:	e7fe      	b.n	80026c0 <NMI_Handler+0x4>

080026c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026c6:	e7fe      	b.n	80026c6 <HardFault_Handler+0x4>

080026c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026e0:	f000 fd34 	bl	800314c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026e4:	46c0      	nop			; (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <DMA1_Channel1_IRQHandler+0x14>)
 80026f2:	0018      	movs	r0, r3
 80026f4:	f000 ff49 	bl	800358a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80026f8:	46c0      	nop			; (mov r8, r8)
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	2000054c 	.word	0x2000054c

08002704 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */
	counter_update_it();
 8002708:	f7fe fc12 	bl	8000f30 <counter_update_it>
  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <TIM21_IRQHandler+0x18>)
 800270e:	0018      	movs	r0, r3
 8002710:	f003 fe72 	bl	80063f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8002714:	46c0      	nop			; (mov r8, r8)
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	2000050c 	.word	0x2000050c

08002720 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002724:	46c0      	nop			; (mov r8, r8)
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <MX_TIM2_Init>:
TIM_HandleTypeDef htim21;
DMA_HandleTypeDef hdma_tim2_ch3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08a      	sub	sp, #40	; 0x28
 8002730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002732:	2318      	movs	r3, #24
 8002734:	18fb      	adds	r3, r7, r3
 8002736:	0018      	movs	r0, r3
 8002738:	2310      	movs	r3, #16
 800273a:	001a      	movs	r2, r3
 800273c:	2100      	movs	r1, #0
 800273e:	f004 fccb 	bl	80070d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002742:	2310      	movs	r3, #16
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	0018      	movs	r0, r3
 8002748:	2308      	movs	r3, #8
 800274a:	001a      	movs	r2, r3
 800274c:	2100      	movs	r1, #0
 800274e:	f004 fcc3 	bl	80070d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002752:	003b      	movs	r3, r7
 8002754:	0018      	movs	r0, r3
 8002756:	2310      	movs	r3, #16
 8002758:	001a      	movs	r2, r3
 800275a:	2100      	movs	r1, #0
 800275c:	f004 fcbc 	bl	80070d8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002760:	4b30      	ldr	r3, [pc, #192]	; (8002824 <MX_TIM2_Init+0xf8>)
 8002762:	2280      	movs	r2, #128	; 0x80
 8002764:	05d2      	lsls	r2, r2, #23
 8002766:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002768:	4b2e      	ldr	r3, [pc, #184]	; (8002824 <MX_TIM2_Init+0xf8>)
 800276a:	2200      	movs	r2, #0
 800276c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800276e:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <MX_TIM2_Init+0xf8>)
 8002770:	2200      	movs	r2, #0
 8002772:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40-1;
 8002774:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <MX_TIM2_Init+0xf8>)
 8002776:	2227      	movs	r2, #39	; 0x27
 8002778:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800277a:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <MX_TIM2_Init+0xf8>)
 800277c:	2200      	movs	r2, #0
 800277e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002780:	4b28      	ldr	r3, [pc, #160]	; (8002824 <MX_TIM2_Init+0xf8>)
 8002782:	2200      	movs	r2, #0
 8002784:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002786:	4b27      	ldr	r3, [pc, #156]	; (8002824 <MX_TIM2_Init+0xf8>)
 8002788:	0018      	movs	r0, r3
 800278a:	f003 fa69 	bl	8005c60 <HAL_TIM_Base_Init>
 800278e:	1e03      	subs	r3, r0, #0
 8002790:	d001      	beq.n	8002796 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002792:	f7fe fbfb 	bl	8000f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002796:	2118      	movs	r1, #24
 8002798:	187b      	adds	r3, r7, r1
 800279a:	2280      	movs	r2, #128	; 0x80
 800279c:	0152      	lsls	r2, r2, #5
 800279e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027a0:	187a      	adds	r2, r7, r1
 80027a2:	4b20      	ldr	r3, [pc, #128]	; (8002824 <MX_TIM2_Init+0xf8>)
 80027a4:	0011      	movs	r1, r2
 80027a6:	0018      	movs	r0, r3
 80027a8:	f004 f82c 	bl	8006804 <HAL_TIM_ConfigClockSource>
 80027ac:	1e03      	subs	r3, r0, #0
 80027ae:	d001      	beq.n	80027b4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80027b0:	f7fe fbec 	bl	8000f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027b4:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <MX_TIM2_Init+0xf8>)
 80027b6:	0018      	movs	r0, r3
 80027b8:	f003 fbac 	bl	8005f14 <HAL_TIM_PWM_Init>
 80027bc:	1e03      	subs	r3, r0, #0
 80027be:	d001      	beq.n	80027c4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80027c0:	f7fe fbe4 	bl	8000f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c4:	2110      	movs	r1, #16
 80027c6:	187b      	adds	r3, r7, r1
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027cc:	187b      	adds	r3, r7, r1
 80027ce:	2200      	movs	r2, #0
 80027d0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027d2:	187a      	adds	r2, r7, r1
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <MX_TIM2_Init+0xf8>)
 80027d6:	0011      	movs	r1, r2
 80027d8:	0018      	movs	r0, r3
 80027da:	f004 fc01 	bl	8006fe0 <HAL_TIMEx_MasterConfigSynchronization>
 80027de:	1e03      	subs	r3, r0, #0
 80027e0:	d001      	beq.n	80027e6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80027e2:	f7fe fbd3 	bl	8000f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027e6:	003b      	movs	r3, r7
 80027e8:	2260      	movs	r2, #96	; 0x60
 80027ea:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80027ec:	003b      	movs	r3, r7
 80027ee:	2200      	movs	r2, #0
 80027f0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027f2:	003b      	movs	r3, r7
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027f8:	003b      	movs	r3, r7
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80027fe:	0039      	movs	r1, r7
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <MX_TIM2_Init+0xf8>)
 8002802:	2208      	movs	r2, #8
 8002804:	0018      	movs	r0, r3
 8002806:	f003 ff37 	bl	8006678 <HAL_TIM_PWM_ConfigChannel>
 800280a:	1e03      	subs	r3, r0, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800280e:	f7fe fbbd 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002812:	4b04      	ldr	r3, [pc, #16]	; (8002824 <MX_TIM2_Init+0xf8>)
 8002814:	0018      	movs	r0, r3
 8002816:	f000 f8e7 	bl	80029e8 <HAL_TIM_MspPostInit>

}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	46bd      	mov	sp, r7
 800281e:	b00a      	add	sp, #40	; 0x28
 8002820:	bd80      	pop	{r7, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	200004cc 	.word	0x200004cc

08002828 <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800282e:	2318      	movs	r3, #24
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	0018      	movs	r0, r3
 8002834:	2310      	movs	r3, #16
 8002836:	001a      	movs	r2, r3
 8002838:	2100      	movs	r1, #0
 800283a:	f004 fc4d 	bl	80070d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800283e:	2310      	movs	r3, #16
 8002840:	18fb      	adds	r3, r7, r3
 8002842:	0018      	movs	r0, r3
 8002844:	2308      	movs	r3, #8
 8002846:	001a      	movs	r2, r3
 8002848:	2100      	movs	r1, #0
 800284a:	f004 fc45 	bl	80070d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800284e:	003b      	movs	r3, r7
 8002850:	0018      	movs	r0, r3
 8002852:	2310      	movs	r3, #16
 8002854:	001a      	movs	r2, r3
 8002856:	2100      	movs	r1, #0
 8002858:	f004 fc3e 	bl	80070d8 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 800285c:	4b31      	ldr	r3, [pc, #196]	; (8002924 <MX_TIM21_Init+0xfc>)
 800285e:	4a32      	ldr	r2, [pc, #200]	; (8002928 <MX_TIM21_Init+0x100>)
 8002860:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 32-1;
 8002862:	4b30      	ldr	r3, [pc, #192]	; (8002924 <MX_TIM21_Init+0xfc>)
 8002864:	221f      	movs	r2, #31
 8002866:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002868:	4b2e      	ldr	r3, [pc, #184]	; (8002924 <MX_TIM21_Init+0xfc>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 1000-1;
 800286e:	4b2d      	ldr	r3, [pc, #180]	; (8002924 <MX_TIM21_Init+0xfc>)
 8002870:	4a2e      	ldr	r2, [pc, #184]	; (800292c <MX_TIM21_Init+0x104>)
 8002872:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002874:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <MX_TIM21_Init+0xfc>)
 8002876:	2200      	movs	r2, #0
 8002878:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800287a:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <MX_TIM21_Init+0xfc>)
 800287c:	2280      	movs	r2, #128	; 0x80
 800287e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8002880:	4b28      	ldr	r3, [pc, #160]	; (8002924 <MX_TIM21_Init+0xfc>)
 8002882:	0018      	movs	r0, r3
 8002884:	f003 f9ec 	bl	8005c60 <HAL_TIM_Base_Init>
 8002888:	1e03      	subs	r3, r0, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 800288c:	f7fe fb7e 	bl	8000f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002890:	2118      	movs	r1, #24
 8002892:	187b      	adds	r3, r7, r1
 8002894:	2280      	movs	r2, #128	; 0x80
 8002896:	0152      	lsls	r2, r2, #5
 8002898:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800289a:	187a      	adds	r2, r7, r1
 800289c:	4b21      	ldr	r3, [pc, #132]	; (8002924 <MX_TIM21_Init+0xfc>)
 800289e:	0011      	movs	r1, r2
 80028a0:	0018      	movs	r0, r3
 80028a2:	f003 ffaf 	bl	8006804 <HAL_TIM_ConfigClockSource>
 80028a6:	1e03      	subs	r3, r0, #0
 80028a8:	d001      	beq.n	80028ae <MX_TIM21_Init+0x86>
  {
    Error_Handler();
 80028aa:	f7fe fb6f 	bl	8000f8c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 80028ae:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <MX_TIM21_Init+0xfc>)
 80028b0:	0018      	movs	r0, r3
 80028b2:	f003 fa15 	bl	8005ce0 <HAL_TIM_OC_Init>
 80028b6:	1e03      	subs	r3, r0, #0
 80028b8:	d001      	beq.n	80028be <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 80028ba:	f7fe fb67 	bl	8000f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028be:	2110      	movs	r1, #16
 80028c0:	187b      	adds	r3, r7, r1
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028c6:	187b      	adds	r3, r7, r1
 80028c8:	2200      	movs	r2, #0
 80028ca:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80028cc:	187a      	adds	r2, r7, r1
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <MX_TIM21_Init+0xfc>)
 80028d0:	0011      	movs	r1, r2
 80028d2:	0018      	movs	r0, r3
 80028d4:	f004 fb84 	bl	8006fe0 <HAL_TIMEx_MasterConfigSynchronization>
 80028d8:	1e03      	subs	r3, r0, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM21_Init+0xb8>
  {
    Error_Handler();
 80028dc:	f7fe fb56 	bl	8000f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80028e0:	003b      	movs	r3, r7
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80028e6:	003b      	movs	r3, r7
 80028e8:	2200      	movs	r2, #0
 80028ea:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028ec:	003b      	movs	r3, r7
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028f2:	003b      	movs	r3, r7
 80028f4:	2200      	movs	r2, #0
 80028f6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028f8:	0039      	movs	r1, r7
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <MX_TIM21_Init+0xfc>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	0018      	movs	r0, r3
 8002900:	f003 fe62 	bl	80065c8 <HAL_TIM_OC_ConfigChannel>
 8002904:	1e03      	subs	r3, r0, #0
 8002906:	d001      	beq.n	800290c <MX_TIM21_Init+0xe4>
  {
    Error_Handler();
 8002908:	f7fe fb40 	bl	8000f8c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim21, TIM_CHANNEL_1);
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <MX_TIM21_Init+0xfc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	4b04      	ldr	r3, [pc, #16]	; (8002924 <MX_TIM21_Init+0xfc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2108      	movs	r1, #8
 8002918:	430a      	orrs	r2, r1
 800291a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	b00a      	add	sp, #40	; 0x28
 8002922:	bd80      	pop	{r7, pc}
 8002924:	2000050c 	.word	0x2000050c
 8002928:	40010800 	.word	0x40010800
 800292c:	000003e7 	.word	0x000003e7

08002930 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	05db      	lsls	r3, r3, #23
 8002940:	429a      	cmp	r2, r3
 8002942:	d132      	bne.n	80029aa <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002944:	4b24      	ldr	r3, [pc, #144]	; (80029d8 <HAL_TIM_Base_MspInit+0xa8>)
 8002946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002948:	4b23      	ldr	r3, [pc, #140]	; (80029d8 <HAL_TIM_Base_MspInit+0xa8>)
 800294a:	2101      	movs	r1, #1
 800294c:	430a      	orrs	r2, r1
 800294e:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8002950:	4b22      	ldr	r3, [pc, #136]	; (80029dc <HAL_TIM_Base_MspInit+0xac>)
 8002952:	4a23      	ldr	r2, [pc, #140]	; (80029e0 <HAL_TIM_Base_MspInit+0xb0>)
 8002954:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
 8002956:	4b21      	ldr	r3, [pc, #132]	; (80029dc <HAL_TIM_Base_MspInit+0xac>)
 8002958:	2208      	movs	r2, #8
 800295a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800295c:	4b1f      	ldr	r3, [pc, #124]	; (80029dc <HAL_TIM_Base_MspInit+0xac>)
 800295e:	2210      	movs	r2, #16
 8002960:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002962:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <HAL_TIM_Base_MspInit+0xac>)
 8002964:	2200      	movs	r2, #0
 8002966:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002968:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <HAL_TIM_Base_MspInit+0xac>)
 800296a:	2280      	movs	r2, #128	; 0x80
 800296c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800296e:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <HAL_TIM_Base_MspInit+0xac>)
 8002970:	2280      	movs	r2, #128	; 0x80
 8002972:	0052      	lsls	r2, r2, #1
 8002974:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002976:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_TIM_Base_MspInit+0xac>)
 8002978:	2280      	movs	r2, #128	; 0x80
 800297a:	00d2      	lsls	r2, r2, #3
 800297c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <HAL_TIM_Base_MspInit+0xac>)
 8002980:	2200      	movs	r2, #0
 8002982:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002984:	4b15      	ldr	r3, [pc, #84]	; (80029dc <HAL_TIM_Base_MspInit+0xac>)
 8002986:	2280      	movs	r2, #128	; 0x80
 8002988:	0152      	lsls	r2, r2, #5
 800298a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 800298c:	4b13      	ldr	r3, [pc, #76]	; (80029dc <HAL_TIM_Base_MspInit+0xac>)
 800298e:	0018      	movs	r0, r3
 8002990:	f000 fcd6 	bl	8003340 <HAL_DMA_Init>
 8002994:	1e03      	subs	r3, r0, #0
 8002996:	d001      	beq.n	800299c <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 8002998:	f7fe faf8 	bl	8000f8c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a0f      	ldr	r2, [pc, #60]	; (80029dc <HAL_TIM_Base_MspInit+0xac>)
 80029a0:	629a      	str	r2, [r3, #40]	; 0x28
 80029a2:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <HAL_TIM_Base_MspInit+0xac>)
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 80029a8:	e012      	b.n	80029d0 <HAL_TIM_Base_MspInit+0xa0>
  else if(tim_baseHandle->Instance==TIM21)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a0d      	ldr	r2, [pc, #52]	; (80029e4 <HAL_TIM_Base_MspInit+0xb4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d10d      	bne.n	80029d0 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM21_CLK_ENABLE();
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <HAL_TIM_Base_MspInit+0xa8>)
 80029b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b8:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <HAL_TIM_Base_MspInit+0xa8>)
 80029ba:	2104      	movs	r1, #4
 80029bc:	430a      	orrs	r2, r1
 80029be:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80029c0:	2200      	movs	r2, #0
 80029c2:	2100      	movs	r1, #0
 80029c4:	2014      	movs	r0, #20
 80029c6:	f000 fc89 	bl	80032dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80029ca:	2014      	movs	r0, #20
 80029cc:	f000 fc9b 	bl	8003306 <HAL_NVIC_EnableIRQ>
}
 80029d0:	46c0      	nop			; (mov r8, r8)
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b002      	add	sp, #8
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40021000 	.word	0x40021000
 80029dc:	2000054c 	.word	0x2000054c
 80029e0:	40020008 	.word	0x40020008
 80029e4:	40010800 	.word	0x40010800

080029e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b089      	sub	sp, #36	; 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	240c      	movs	r4, #12
 80029f2:	193b      	adds	r3, r7, r4
 80029f4:	0018      	movs	r0, r3
 80029f6:	2314      	movs	r3, #20
 80029f8:	001a      	movs	r2, r3
 80029fa:	2100      	movs	r1, #0
 80029fc:	f004 fb6c 	bl	80070d8 <memset>
  if(timHandle->Instance==TIM2)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	05db      	lsls	r3, r3, #23
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d122      	bne.n	8002a52 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0c:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <HAL_TIM_MspPostInit+0x74>)
 8002a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_TIM_MspPostInit+0x74>)
 8002a12:	2101      	movs	r1, #1
 8002a14:	430a      	orrs	r2, r1
 8002a16:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a18:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <HAL_TIM_MspPostInit+0x74>)
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	4013      	ands	r3, r2
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a24:	0021      	movs	r1, r4
 8002a26:	187b      	adds	r3, r7, r1
 8002a28:	2204      	movs	r2, #4
 8002a2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	187b      	adds	r3, r7, r1
 8002a2e:	2202      	movs	r2, #2
 8002a30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a32:	187b      	adds	r3, r7, r1
 8002a34:	2202      	movs	r2, #2
 8002a36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a38:	187b      	adds	r3, r7, r1
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002a3e:	187b      	adds	r3, r7, r1
 8002a40:	2202      	movs	r2, #2
 8002a42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a44:	187a      	adds	r2, r7, r1
 8002a46:	23a0      	movs	r3, #160	; 0xa0
 8002a48:	05db      	lsls	r3, r3, #23
 8002a4a:	0011      	movs	r1, r2
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f001 f81b 	bl	8003a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b009      	add	sp, #36	; 0x24
 8002a58:	bd90      	pop	{r4, r7, pc}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	40021000 	.word	0x40021000

08002a60 <_Z16run_time_handlerv>:
struct time_struct data_to_RTC;

/**
 * @brief function is constantly called to get fresh time data from rtc - get time every 500ms
 */
void run_time_handler(void){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
	static bool dls_flag_only = false;
	if(data_to_RTC.new_data==2){
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <_Z16run_time_handlerv+0x6c>)
 8002a66:	7a9b      	ldrb	r3, [r3, #10]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d107      	bne.n	8002a7c <_Z16run_time_handlerv+0x1c>
		data_to_RTC.new_data = 0;
 8002a6c:	4b17      	ldr	r3, [pc, #92]	; (8002acc <_Z16run_time_handlerv+0x6c>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	729a      	strb	r2, [r3, #10]
		write_date_i2c();
 8002a72:	f000 f967 	bl	8002d44 <_Z14write_date_i2cv>
		dls_flag_only = true;	//enable change flag only for next Daylight safe check
 8002a76:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <_Z16run_time_handlerv+0x70>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	701a      	strb	r2, [r3, #0]
	}
	if(data_to_RTC.new_data==1){
 8002a7c:	4b13      	ldr	r3, [pc, #76]	; (8002acc <_Z16run_time_handlerv+0x6c>)
 8002a7e:	7a9b      	ldrb	r3, [r3, #10]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d107      	bne.n	8002a94 <_Z16run_time_handlerv+0x34>
		data_to_RTC.new_data = 0;
 8002a84:	4b11      	ldr	r3, [pc, #68]	; (8002acc <_Z16run_time_handlerv+0x6c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	729a      	strb	r2, [r3, #10]
		write_time_i2c();
 8002a8a:	f000 f87d 	bl	8002b88 <_Z14write_time_i2cv>
		dls_flag_only = true;
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <_Z16run_time_handlerv+0x70>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]


	//TODO: add summertime
	//TODO: add plausibility check when safing date

	if(timeout(time_handler_timer)){
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <_Z16run_time_handlerv+0x74>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f7fe fa65 	bl	8000f68 <timeout>
 8002a9e:	1e03      	subs	r3, r0, #0
 8002aa0:	d011      	beq.n	8002ac6 <_Z16run_time_handlerv+0x66>
		time_handler_timer = start_timer_ms(TIME_UPDATE_MS);
 8002aa2:	2064      	movs	r0, #100	; 0x64
 8002aa4:	f7fe fa50 	bl	8000f48 <start_timer_ms>
 8002aa8:	0002      	movs	r2, r0
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <_Z16run_time_handlerv+0x74>)
 8002aac:	601a      	str	r2, [r3, #0]

		read_date_i2c();
 8002aae:	f000 f8c9 	bl	8002c44 <_Z13read_date_i2cv>
		read_time_i2c();
 8002ab2:	f000 f811 	bl	8002ad8 <_Z13read_time_i2cv>
		dls_check(dls_flag_only);	//check for daylight saving + apply
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <_Z16run_time_handlerv+0x70>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	0018      	movs	r0, r3
 8002abc:	f000 f9bc 	bl	8002e38 <_Z9dls_checkb>
		dls_flag_only = false;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <_Z16run_time_handlerv+0x70>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
	}
}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000020 	.word	0x20000020
 8002ad0:	20000598 	.word	0x20000598
 8002ad4:	20000594 	.word	0x20000594

08002ad8 <_Z13read_time_i2cv>:

/**
 * @brief function to read time information from RTC info RAM
 * store read data in time_struct data_from_RTC
 */
void read_time_i2c(void){
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af02      	add	r7, sp, #8
	uint8_t temp[3];
	temp[0] = ADDR_SECONDS;	//start address for read operation
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&hi2c1, DS3231_MASTER_ADDRESS, (uint8_t *)temp, 1, 10);
 8002ae4:	1d3a      	adds	r2, r7, #4
 8002ae6:	4826      	ldr	r0, [pc, #152]	; (8002b80 <_Z13read_time_i2cv+0xa8>)
 8002ae8:	230a      	movs	r3, #10
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	2301      	movs	r3, #1
 8002aee:	21d1      	movs	r1, #209	; 0xd1
 8002af0:	f001 fa08 	bl	8003f04 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, DS3231_SLAVE_ADDRESS, (uint8_t *)temp, 3, 10);
 8002af4:	1d3a      	adds	r2, r7, #4
 8002af6:	4822      	ldr	r0, [pc, #136]	; (8002b80 <_Z13read_time_i2cv+0xa8>)
 8002af8:	230a      	movs	r3, #10
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	2303      	movs	r3, #3
 8002afe:	21d0      	movs	r1, #208	; 0xd0
 8002b00:	f001 fb08 	bl	8004114 <HAL_I2C_Master_Receive>

	data_from_RTC.seconds = ((temp[0]&0xf0)>>4)*10 + (temp[0]&0x0f);	//conversion from hex to dec
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	1c1a      	adds	r2, r3, #0
 8002b0e:	0092      	lsls	r2, r2, #2
 8002b10:	18d3      	adds	r3, r2, r3
 8002b12:	18db      	adds	r3, r3, r3
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	1d3b      	adds	r3, r7, #4
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	210f      	movs	r1, #15
 8002b1c:	400b      	ands	r3, r1
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	18d3      	adds	r3, r2, r3
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <_Z13read_time_i2cv+0xac>)
 8002b26:	701a      	strb	r2, [r3, #0]
	data_from_RTC.minutes = ((temp[1]&0xf0)>>4)*10 + (temp[1]&0x0f);
 8002b28:	1d3b      	adds	r3, r7, #4
 8002b2a:	785b      	ldrb	r3, [r3, #1]
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	1c1a      	adds	r2, r3, #0
 8002b32:	0092      	lsls	r2, r2, #2
 8002b34:	18d3      	adds	r3, r2, r3
 8002b36:	18db      	adds	r3, r3, r3
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	1d3b      	adds	r3, r7, #4
 8002b3c:	785b      	ldrb	r3, [r3, #1]
 8002b3e:	210f      	movs	r1, #15
 8002b40:	400b      	ands	r3, r1
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	18d3      	adds	r3, r2, r3
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <_Z13read_time_i2cv+0xac>)
 8002b4a:	705a      	strb	r2, [r3, #1]
	data_from_RTC.hours = ((temp[2]&0x30)>>4)*10 + (temp[2]&0x0f);
 8002b4c:	1d3b      	adds	r3, r7, #4
 8002b4e:	789b      	ldrb	r3, [r3, #2]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2203      	movs	r2, #3
 8002b56:	4013      	ands	r3, r2
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	1c1a      	adds	r2, r3, #0
 8002b5c:	0092      	lsls	r2, r2, #2
 8002b5e:	18d3      	adds	r3, r2, r3
 8002b60:	18db      	adds	r3, r3, r3
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	789b      	ldrb	r3, [r3, #2]
 8002b68:	210f      	movs	r1, #15
 8002b6a:	400b      	ands	r3, r1
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	18d3      	adds	r3, r2, r3
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <_Z13read_time_i2cv+0xac>)
 8002b74:	709a      	strb	r2, [r3, #2]

	//check for summer time

}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b002      	add	sp, #8
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	20000050 	.word	0x20000050
 8002b84:	20000014 	.word	0x20000014

08002b88 <_Z14write_time_i2cv>:

/**
 * @brief function to write time information from RAM into RTC
 * read data from data_to_RTC and transfer to RTC
 */
void write_time_i2c(void){
 8002b88:	b590      	push	{r4, r7, lr}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af02      	add	r7, sp, #8
	uint8_t temp[4];

	//convert from summer time

	temp[0] = ADDR_SECONDS;	//start address for write operation
 8002b8e:	1d3b      	adds	r3, r7, #4
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
	temp[1] = ((data_to_RTC.seconds/10)<<4)|data_to_RTC.seconds%10;
 8002b94:	4b29      	ldr	r3, [pc, #164]	; (8002c3c <_Z14write_time_i2cv+0xb4>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	210a      	movs	r1, #10
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f7fd fab4 	bl	8000108 <__udivsi3>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	b25c      	sxtb	r4, r3
 8002ba8:	4b24      	ldr	r3, [pc, #144]	; (8002c3c <_Z14write_time_i2cv+0xb4>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	210a      	movs	r1, #10
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f7fd fb30 	bl	8000214 <__aeabi_uidivmod>
 8002bb4:	000b      	movs	r3, r1
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	b25b      	sxtb	r3, r3
 8002bba:	4323      	orrs	r3, r4
 8002bbc:	b25b      	sxtb	r3, r3
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	1d3b      	adds	r3, r7, #4
 8002bc2:	705a      	strb	r2, [r3, #1]
	temp[2] = ((data_to_RTC.minutes/10)<<4)|data_to_RTC.minutes%10;
 8002bc4:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <_Z14write_time_i2cv+0xb4>)
 8002bc6:	785b      	ldrb	r3, [r3, #1]
 8002bc8:	210a      	movs	r1, #10
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f7fd fa9c 	bl	8000108 <__udivsi3>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	b25c      	sxtb	r4, r3
 8002bd8:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <_Z14write_time_i2cv+0xb4>)
 8002bda:	785b      	ldrb	r3, [r3, #1]
 8002bdc:	210a      	movs	r1, #10
 8002bde:	0018      	movs	r0, r3
 8002be0:	f7fd fb18 	bl	8000214 <__aeabi_uidivmod>
 8002be4:	000b      	movs	r3, r1
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	b25b      	sxtb	r3, r3
 8002bea:	4323      	orrs	r3, r4
 8002bec:	b25b      	sxtb	r3, r3
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	1d3b      	adds	r3, r7, #4
 8002bf2:	709a      	strb	r2, [r3, #2]
	temp[3] = ((data_to_RTC.hours/10)<<4)|data_to_RTC.hours%10;
 8002bf4:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <_Z14write_time_i2cv+0xb4>)
 8002bf6:	789b      	ldrb	r3, [r3, #2]
 8002bf8:	210a      	movs	r1, #10
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f7fd fa84 	bl	8000108 <__udivsi3>
 8002c00:	0003      	movs	r3, r0
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	b25c      	sxtb	r4, r3
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <_Z14write_time_i2cv+0xb4>)
 8002c0a:	789b      	ldrb	r3, [r3, #2]
 8002c0c:	210a      	movs	r1, #10
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f7fd fb00 	bl	8000214 <__aeabi_uidivmod>
 8002c14:	000b      	movs	r3, r1
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	b25b      	sxtb	r3, r3
 8002c1a:	4323      	orrs	r3, r4
 8002c1c:	b25b      	sxtb	r3, r3
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	1d3b      	adds	r3, r7, #4
 8002c22:	70da      	strb	r2, [r3, #3]

	HAL_I2C_Master_Transmit(&hi2c1, DS3231_MASTER_ADDRESS,(uint8_t *)temp, 4, 10);
 8002c24:	1d3a      	adds	r2, r7, #4
 8002c26:	4806      	ldr	r0, [pc, #24]	; (8002c40 <_Z14write_time_i2cv+0xb8>)
 8002c28:	230a      	movs	r3, #10
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	21d1      	movs	r1, #209	; 0xd1
 8002c30:	f001 f968 	bl	8003f04 <HAL_I2C_Master_Transmit>
}
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b003      	add	sp, #12
 8002c3a:	bd90      	pop	{r4, r7, pc}
 8002c3c:	20000020 	.word	0x20000020
 8002c40:	20000050 	.word	0x20000050

08002c44 <_Z13read_date_i2cv>:

/**
 * @brief function to read date information from RTC info RAM
 * store read date in time_struct data_from_RTC
 */
void read_date_i2c(void){
 8002c44:	b590      	push	{r4, r7, lr}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af02      	add	r7, sp, #8
	uint8_t temp[4];
	temp[0] = ADDR_DAY;	//start address of read operation
 8002c4a:	1d3b      	adds	r3, r7, #4
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&hi2c1, DS3231_MASTER_ADDRESS, (uint8_t *)temp, 1, 10);
 8002c50:	1d3a      	adds	r2, r7, #4
 8002c52:	4839      	ldr	r0, [pc, #228]	; (8002d38 <_Z13read_date_i2cv+0xf4>)
 8002c54:	230a      	movs	r3, #10
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	2301      	movs	r3, #1
 8002c5a:	21d1      	movs	r1, #209	; 0xd1
 8002c5c:	f001 f952 	bl	8003f04 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, DS3231_SLAVE_ADDRESS, (uint8_t *)temp, 4, 10);
 8002c60:	1d3a      	adds	r2, r7, #4
 8002c62:	4835      	ldr	r0, [pc, #212]	; (8002d38 <_Z13read_date_i2cv+0xf4>)
 8002c64:	230a      	movs	r3, #10
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	2304      	movs	r3, #4
 8002c6a:	21d0      	movs	r1, #208	; 0xd0
 8002c6c:	f001 fa52 	bl	8004114 <HAL_I2C_Master_Receive>

	data_from_RTC.day = temp[0];
 8002c70:	1d3b      	adds	r3, r7, #4
 8002c72:	781a      	ldrb	r2, [r3, #0]
 8002c74:	4b31      	ldr	r3, [pc, #196]	; (8002d3c <_Z13read_date_i2cv+0xf8>)
 8002c76:	70da      	strb	r2, [r3, #3]
	data_from_RTC.date = ((temp[1]&0x30)>>4)*10 + (temp[1]&0x0f);
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	785b      	ldrb	r3, [r3, #1]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2203      	movs	r2, #3
 8002c82:	4013      	ands	r3, r2
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	1c1a      	adds	r2, r3, #0
 8002c88:	0092      	lsls	r2, r2, #2
 8002c8a:	18d3      	adds	r3, r2, r3
 8002c8c:	18db      	adds	r3, r3, r3
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	1d3b      	adds	r3, r7, #4
 8002c92:	785b      	ldrb	r3, [r3, #1]
 8002c94:	210f      	movs	r1, #15
 8002c96:	400b      	ands	r3, r1
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	18d3      	adds	r3, r2, r3
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	4b27      	ldr	r3, [pc, #156]	; (8002d3c <_Z13read_date_i2cv+0xf8>)
 8002ca0:	711a      	strb	r2, [r3, #4]
	data_from_RTC.month = ((temp[2]&0x10)>>4)*10 + (temp[2]&0x0f);
 8002ca2:	1d3b      	adds	r3, r7, #4
 8002ca4:	789b      	ldrb	r3, [r3, #2]
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2201      	movs	r2, #1
 8002cac:	4013      	ands	r3, r2
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	1c1a      	adds	r2, r3, #0
 8002cb2:	0092      	lsls	r2, r2, #2
 8002cb4:	18d3      	adds	r3, r2, r3
 8002cb6:	18db      	adds	r3, r3, r3
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	1d3b      	adds	r3, r7, #4
 8002cbc:	789b      	ldrb	r3, [r3, #2]
 8002cbe:	210f      	movs	r1, #15
 8002cc0:	400b      	ands	r3, r1
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	18d3      	adds	r3, r2, r3
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <_Z13read_date_i2cv+0xf8>)
 8002cca:	715a      	strb	r2, [r3, #5]
	data_from_RTC.century = (temp[2] & 0x80) >> 7;	//if century == 1 --> year is bigger that 2000
 8002ccc:	1d3b      	adds	r3, r7, #4
 8002cce:	789b      	ldrb	r3, [r3, #2]
 8002cd0:	b25b      	sxtb	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	09db      	lsrs	r3, r3, #7
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <_Z13read_date_i2cv+0xf8>)
 8002cda:	721a      	strb	r2, [r3, #8]
	data_from_RTC.year = 1900 + (data_from_RTC.century * 100);
 8002cdc:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <_Z13read_date_i2cv+0xf8>)
 8002cde:	7a1b      	ldrb	r3, [r3, #8]
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2264      	movs	r2, #100	; 0x64
 8002ce4:	4353      	muls	r3, r2
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	4a15      	ldr	r2, [pc, #84]	; (8002d40 <_Z13read_date_i2cv+0xfc>)
 8002cea:	4694      	mov	ip, r2
 8002cec:	4463      	add	r3, ip
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <_Z13read_date_i2cv+0xf8>)
 8002cf2:	80da      	strh	r2, [r3, #6]
	data_from_RTC.year = data_from_RTC.year + (((temp[3]&0xf0)>>4)*10) + ((temp[3]&0x0f)%10);
 8002cf4:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <_Z13read_date_i2cv+0xf8>)
 8002cf6:	88da      	ldrh	r2, [r3, #6]
 8002cf8:	1d3b      	adds	r3, r7, #4
 8002cfa:	78db      	ldrb	r3, [r3, #3]
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	1c19      	adds	r1, r3, #0
 8002d04:	0089      	lsls	r1, r1, #2
 8002d06:	18cb      	adds	r3, r1, r3
 8002d08:	18db      	adds	r3, r3, r3
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	18d3      	adds	r3, r2, r3
 8002d0e:	b29c      	uxth	r4, r3
 8002d10:	1d3b      	adds	r3, r7, #4
 8002d12:	78db      	ldrb	r3, [r3, #3]
 8002d14:	220f      	movs	r2, #15
 8002d16:	4013      	ands	r3, r2
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	210a      	movs	r1, #10
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f7fd fa79 	bl	8000214 <__aeabi_uidivmod>
 8002d22:	000b      	movs	r3, r1
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	18e3      	adds	r3, r4, r3
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	4b03      	ldr	r3, [pc, #12]	; (8002d3c <_Z13read_date_i2cv+0xf8>)
 8002d2e:	80da      	strh	r2, [r3, #6]

	//check for summer time
}
 8002d30:	46c0      	nop			; (mov r8, r8)
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b003      	add	sp, #12
 8002d36:	bd90      	pop	{r4, r7, pc}
 8002d38:	20000050 	.word	0x20000050
 8002d3c:	20000014 	.word	0x20000014
 8002d40:	0000076c 	.word	0x0000076c

08002d44 <_Z14write_date_i2cv>:

/**
 * @brief function to write date information from RAM into RTC
 * read data from data_to_RTC and transfer to RTC
 */
void write_date_i2c(void){
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af02      	add	r7, sp, #8
	uint8_t temp[5]={0};
 8002d4a:	003b      	movs	r3, r7
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	2200      	movs	r2, #0
 8002d52:	711a      	strb	r2, [r3, #4]

	//convert from summer time

	temp[0] = ADDR_DAY;	//start address for write operation
 8002d54:	003b      	movs	r3, r7
 8002d56:	2203      	movs	r2, #3
 8002d58:	701a      	strb	r2, [r3, #0]
	temp[1] = data_to_RTC.day;
 8002d5a:	4b35      	ldr	r3, [pc, #212]	; (8002e30 <_Z14write_date_i2cv+0xec>)
 8002d5c:	78da      	ldrb	r2, [r3, #3]
 8002d5e:	003b      	movs	r3, r7
 8002d60:	705a      	strb	r2, [r3, #1]
	temp[2] = ((data_to_RTC.date/10)<<4)|data_to_RTC.date%10;
 8002d62:	4b33      	ldr	r3, [pc, #204]	; (8002e30 <_Z14write_date_i2cv+0xec>)
 8002d64:	791b      	ldrb	r3, [r3, #4]
 8002d66:	210a      	movs	r1, #10
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f7fd f9cd 	bl	8000108 <__udivsi3>
 8002d6e:	0003      	movs	r3, r0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	b25c      	sxtb	r4, r3
 8002d76:	4b2e      	ldr	r3, [pc, #184]	; (8002e30 <_Z14write_date_i2cv+0xec>)
 8002d78:	791b      	ldrb	r3, [r3, #4]
 8002d7a:	210a      	movs	r1, #10
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f7fd fa49 	bl	8000214 <__aeabi_uidivmod>
 8002d82:	000b      	movs	r3, r1
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	b25b      	sxtb	r3, r3
 8002d88:	4323      	orrs	r3, r4
 8002d8a:	b25b      	sxtb	r3, r3
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	003b      	movs	r3, r7
 8002d90:	709a      	strb	r2, [r3, #2]
	temp[3] = ((data_to_RTC.month/10)<<4)|data_to_RTC.month%10 | (data_to_RTC.year/2000)<<7;
 8002d92:	4b27      	ldr	r3, [pc, #156]	; (8002e30 <_Z14write_date_i2cv+0xec>)
 8002d94:	795b      	ldrb	r3, [r3, #5]
 8002d96:	210a      	movs	r1, #10
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f7fd f9b5 	bl	8000108 <__udivsi3>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	b25c      	sxtb	r4, r3
 8002da6:	4b22      	ldr	r3, [pc, #136]	; (8002e30 <_Z14write_date_i2cv+0xec>)
 8002da8:	795b      	ldrb	r3, [r3, #5]
 8002daa:	210a      	movs	r1, #10
 8002dac:	0018      	movs	r0, r3
 8002dae:	f7fd fa31 	bl	8000214 <__aeabi_uidivmod>
 8002db2:	000b      	movs	r3, r1
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	b25b      	sxtb	r3, r3
 8002db8:	4323      	orrs	r3, r4
 8002dba:	b25c      	sxtb	r4, r3
 8002dbc:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <_Z14write_date_i2cv+0xec>)
 8002dbe:	88db      	ldrh	r3, [r3, #6]
 8002dc0:	22fa      	movs	r2, #250	; 0xfa
 8002dc2:	00d1      	lsls	r1, r2, #3
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f7fd f99f 	bl	8000108 <__udivsi3>
 8002dca:	0003      	movs	r3, r0
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	01db      	lsls	r3, r3, #7
 8002dd0:	b25b      	sxtb	r3, r3
 8002dd2:	4323      	orrs	r3, r4
 8002dd4:	b25b      	sxtb	r3, r3
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	003b      	movs	r3, r7
 8002dda:	70da      	strb	r2, [r3, #3]
	temp[4] = ((data_to_RTC.year %100) / 10)<<4 | data_to_RTC.year%10;
 8002ddc:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <_Z14write_date_i2cv+0xec>)
 8002dde:	88db      	ldrh	r3, [r3, #6]
 8002de0:	2164      	movs	r1, #100	; 0x64
 8002de2:	0018      	movs	r0, r3
 8002de4:	f7fd fa16 	bl	8000214 <__aeabi_uidivmod>
 8002de8:	000b      	movs	r3, r1
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	210a      	movs	r1, #10
 8002dee:	0018      	movs	r0, r3
 8002df0:	f7fd f98a 	bl	8000108 <__udivsi3>
 8002df4:	0003      	movs	r3, r0
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	b25c      	sxtb	r4, r3
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <_Z14write_date_i2cv+0xec>)
 8002dfe:	88db      	ldrh	r3, [r3, #6]
 8002e00:	210a      	movs	r1, #10
 8002e02:	0018      	movs	r0, r3
 8002e04:	f7fd fa06 	bl	8000214 <__aeabi_uidivmod>
 8002e08:	000b      	movs	r3, r1
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	b25b      	sxtb	r3, r3
 8002e0e:	4323      	orrs	r3, r4
 8002e10:	b25b      	sxtb	r3, r3
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	003b      	movs	r3, r7
 8002e16:	711a      	strb	r2, [r3, #4]

	HAL_I2C_Master_Transmit(&hi2c1, DS3231_MASTER_ADDRESS, (uint8_t *)temp, 5, 10);
 8002e18:	003a      	movs	r2, r7
 8002e1a:	4806      	ldr	r0, [pc, #24]	; (8002e34 <_Z14write_date_i2cv+0xf0>)
 8002e1c:	230a      	movs	r3, #10
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	2305      	movs	r3, #5
 8002e22:	21d1      	movs	r1, #209	; 0xd1
 8002e24:	f001 f86e 	bl	8003f04 <HAL_I2C_Master_Transmit>
}
 8002e28:	46c0      	nop			; (mov r8, r8)
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b003      	add	sp, #12
 8002e2e:	bd90      	pop	{r4, r7, pc}
 8002e30:	20000020 	.word	0x20000020
 8002e34:	20000050 	.word	0x20000050

08002e38 <_Z9dls_checkb>:
 *  @brief function checks Flag, if day light saving is applied, applies if necessary, re/sets Flag if necessary
 *  @param flag_only: functions only alters the flag and not the actual time value inside the RTC
 *  @info: If DLS applies, the hour byte in the RTC is increased by one and the change is signalized by turning the
 *  ALARM 1 SECONDS Byte to 1 - this bit is used for the DLS FLAG (1 = DLS is applied, 0 = DLS is not applied)
 */
void dls_check(bool flag_only){
 8002e38:	b590      	push	{r4, r7, lr}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	0002      	movs	r2, r0
 8002e40:	1dfb      	adds	r3, r7, #7
 8002e42:	701a      	strb	r2, [r3, #0]
	static bool dls_needed = false;
	static bool dls_active = false;
	uint8_t offset = 0;			//add hysterese behaviour for fall, when clock switches from 03:00 to 02:00 - code will reactivate dls, since dls is deactivated altough it should be activated based on time+date
 8002e44:	240f      	movs	r4, #15
 8002e46:	193b      	adds	r3, r7, r4
 8002e48:	2200      	movs	r2, #0
 8002e4a:	701a      	strb	r2, [r3, #0]

	//read DLS bit
	dls_active = read_i2c_single(ADDR_A1SECONDS);
 8002e4c:	2007      	movs	r0, #7
 8002e4e:	f000 f8db 	bl	8003008 <_Z15read_i2c_singleh>
 8002e52:	0003      	movs	r3, r0
 8002e54:	1e5a      	subs	r2, r3, #1
 8002e56:	4193      	sbcs	r3, r2
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	4b58      	ldr	r3, [pc, #352]	; (8002fbc <_Z9dls_checkb+0x184>)
 8002e5c:	701a      	strb	r2, [r3, #0]
	if(dls_active==0x1){
 8002e5e:	4b57      	ldr	r3, [pc, #348]	; (8002fbc <_Z9dls_checkb+0x184>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d106      	bne.n	8002e74 <_Z9dls_checkb+0x3c>
		offset = 1;
 8002e66:	193b      	adds	r3, r7, r4
 8002e68:	2201      	movs	r2, #1
 8002e6a:	701a      	strb	r2, [r3, #0]
		data_from_RTC.summer_time = true;
 8002e6c:	4b54      	ldr	r3, [pc, #336]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	725a      	strb	r2, [r3, #9]
 8002e72:	e006      	b.n	8002e82 <_Z9dls_checkb+0x4a>
	}
	else{
		offset = 0;
 8002e74:	230f      	movs	r3, #15
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
		data_from_RTC.summer_time = false;
 8002e7c:	4b50      	ldr	r3, [pc, #320]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	725a      	strb	r2, [r3, #9]
	}
	//check date + time: Should DLS be active?
	if((data_from_RTC.month == 3 && data_from_RTC.date>=25 && data_from_RTC.day==7 && data_from_RTC.hours>=2 )	//March, last sunday, later than 02:00
 8002e82:	4b4f      	ldr	r3, [pc, #316]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002e84:	795b      	ldrb	r3, [r3, #5]
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d10b      	bne.n	8002ea2 <_Z9dls_checkb+0x6a>
 8002e8a:	4b4d      	ldr	r3, [pc, #308]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002e8c:	791b      	ldrb	r3, [r3, #4]
 8002e8e:	2b18      	cmp	r3, #24
 8002e90:	d907      	bls.n	8002ea2 <_Z9dls_checkb+0x6a>
 8002e92:	4b4b      	ldr	r3, [pc, #300]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002e94:	78db      	ldrb	r3, [r3, #3]
 8002e96:	2b07      	cmp	r3, #7
 8002e98:	d103      	bne.n	8002ea2 <_Z9dls_checkb+0x6a>
 8002e9a:	4b49      	ldr	r3, [pc, #292]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002e9c:	789b      	ldrb	r3, [r3, #2]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d844      	bhi.n	8002f2c <_Z9dls_checkb+0xf4>
	 || (data_from_RTC.month == 3 && data_from_RTC.day<=6 && (data_from_RTC.date-data_from_RTC.day)>=25 )		//March after last sunday
 8002ea2:	4b47      	ldr	r3, [pc, #284]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002ea4:	795b      	ldrb	r3, [r3, #5]
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d10b      	bne.n	8002ec2 <_Z9dls_checkb+0x8a>
 8002eaa:	4b45      	ldr	r3, [pc, #276]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002eac:	78db      	ldrb	r3, [r3, #3]
 8002eae:	2b06      	cmp	r3, #6
 8002eb0:	d807      	bhi.n	8002ec2 <_Z9dls_checkb+0x8a>
 8002eb2:	4b43      	ldr	r3, [pc, #268]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002eb4:	791b      	ldrb	r3, [r3, #4]
 8002eb6:	001a      	movs	r2, r3
 8002eb8:	4b41      	ldr	r3, [pc, #260]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002eba:	78db      	ldrb	r3, [r3, #3]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b18      	cmp	r3, #24
 8002ec0:	dc34      	bgt.n	8002f2c <_Z9dls_checkb+0xf4>
	 || (data_from_RTC.month >= 4 && data_from_RTC.month <=9)													//April - September
 8002ec2:	4b3f      	ldr	r3, [pc, #252]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002ec4:	795b      	ldrb	r3, [r3, #5]
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d903      	bls.n	8002ed2 <_Z9dls_checkb+0x9a>
 8002eca:	4b3d      	ldr	r3, [pc, #244]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002ecc:	795b      	ldrb	r3, [r3, #5]
 8002ece:	2b09      	cmp	r3, #9
 8002ed0:	d92c      	bls.n	8002f2c <_Z9dls_checkb+0xf4>
	 || (data_from_RTC.month == 10 && ( (((data_from_RTC.date-data_from_RTC.day)<=24)&& data_from_RTC.day<=6) || (data_from_RTC.day==7 && data_from_RTC.date<=24)))
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002ed4:	795b      	ldrb	r3, [r3, #5]
 8002ed6:	2b0a      	cmp	r3, #10
 8002ed8:	d113      	bne.n	8002f02 <_Z9dls_checkb+0xca>
 8002eda:	4b39      	ldr	r3, [pc, #228]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002edc:	791b      	ldrb	r3, [r3, #4]
 8002ede:	001a      	movs	r2, r3
 8002ee0:	4b37      	ldr	r3, [pc, #220]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002ee2:	78db      	ldrb	r3, [r3, #3]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b18      	cmp	r3, #24
 8002ee8:	dc03      	bgt.n	8002ef2 <_Z9dls_checkb+0xba>
 8002eea:	4b35      	ldr	r3, [pc, #212]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002eec:	78db      	ldrb	r3, [r3, #3]
 8002eee:	2b06      	cmp	r3, #6
 8002ef0:	d91c      	bls.n	8002f2c <_Z9dls_checkb+0xf4>
 8002ef2:	4b33      	ldr	r3, [pc, #204]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002ef4:	78db      	ldrb	r3, [r3, #3]
 8002ef6:	2b07      	cmp	r3, #7
 8002ef8:	d103      	bne.n	8002f02 <_Z9dls_checkb+0xca>
 8002efa:	4b31      	ldr	r3, [pc, #196]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002efc:	791b      	ldrb	r3, [r3, #4]
 8002efe:	2b18      	cmp	r3, #24
 8002f00:	d914      	bls.n	8002f2c <_Z9dls_checkb+0xf4>
	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	//October till saturday befor last sunday
	 || (data_from_RTC.month == 10 && data_from_RTC.day == 7 && data_from_RTC.date >=25 && data_from_RTC.hours<=(1+offset))){
 8002f02:	4b2f      	ldr	r3, [pc, #188]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002f04:	795b      	ldrb	r3, [r3, #5]
 8002f06:	2b0a      	cmp	r3, #10
 8002f08:	d114      	bne.n	8002f34 <_Z9dls_checkb+0xfc>
 8002f0a:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002f0c:	78db      	ldrb	r3, [r3, #3]
 8002f0e:	2b07      	cmp	r3, #7
 8002f10:	d110      	bne.n	8002f34 <_Z9dls_checkb+0xfc>
 8002f12:	4b2b      	ldr	r3, [pc, #172]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002f14:	791b      	ldrb	r3, [r3, #4]
 8002f16:	2b18      	cmp	r3, #24
 8002f18:	d90c      	bls.n	8002f34 <_Z9dls_checkb+0xfc>
 8002f1a:	4b29      	ldr	r3, [pc, #164]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002f1c:	789b      	ldrb	r3, [r3, #2]
 8002f1e:	001a      	movs	r2, r3
 8002f20:	230f      	movs	r3, #15
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	3301      	adds	r3, #1
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	dc03      	bgt.n	8002f34 <_Z9dls_checkb+0xfc>
	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	//October last sunday till 02:00
		dls_needed = true;
 8002f2c:	4b25      	ldr	r3, [pc, #148]	; (8002fc4 <_Z9dls_checkb+0x18c>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	701a      	strb	r2, [r3, #0]
 8002f32:	e002      	b.n	8002f3a <_Z9dls_checkb+0x102>
	}
	else{
		dls_needed = false;
 8002f34:	4b23      	ldr	r3, [pc, #140]	; (8002fc4 <_Z9dls_checkb+0x18c>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	701a      	strb	r2, [r3, #0]
	}

	//check if DLS bit should be applied: is DLS active?
	if(dls_active == false && dls_needed == true){
 8002f3a:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <_Z9dls_checkb+0x184>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d119      	bne.n	8002f76 <_Z9dls_checkb+0x13e>
 8002f42:	4b20      	ldr	r3, [pc, #128]	; (8002fc4 <_Z9dls_checkb+0x18c>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d115      	bne.n	8002f76 <_Z9dls_checkb+0x13e>
		if(flag_only==false){
 8002f4a:	1dfb      	adds	r3, r7, #7
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10d      	bne.n	8002f6e <_Z9dls_checkb+0x136>
			write_i2c_single(ADDR_HOURS, data_from_RTC.hours+1);
 8002f52:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002f54:	789b      	ldrb	r3, [r3, #2]
 8002f56:	3301      	adds	r3, #1
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	0019      	movs	r1, r3
 8002f5c:	2002      	movs	r0, #2
 8002f5e:	f000 f833 	bl	8002fc8 <_Z16write_i2c_singlehh>
			data_from_RTC.hours++;		//alter local variable, so no new read is required before new value is displayed
 8002f62:	4b17      	ldr	r3, [pc, #92]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002f64:	789b      	ldrb	r3, [r3, #2]
 8002f66:	3301      	adds	r3, #1
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002f6c:	709a      	strb	r2, [r3, #2]
			//increase RTC by one hour - should only happen when summer is reached, not through time set
		}
		write_i2c_single(ADDR_A1SECONDS, 0x1);	//set DLS FLAG
 8002f6e:	2101      	movs	r1, #1
 8002f70:	2007      	movs	r0, #7
 8002f72:	f000 f829 	bl	8002fc8 <_Z16write_i2c_singlehh>
	}
	if(dls_active == true && dls_needed == false){
 8002f76:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <_Z9dls_checkb+0x184>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d119      	bne.n	8002fb2 <_Z9dls_checkb+0x17a>
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <_Z9dls_checkb+0x18c>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d115      	bne.n	8002fb2 <_Z9dls_checkb+0x17a>
		if(flag_only == false){
 8002f86:	1dfb      	adds	r3, r7, #7
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10d      	bne.n	8002faa <_Z9dls_checkb+0x172>
			write_i2c_single(ADDR_HOURS, data_from_RTC.hours-1);
 8002f8e:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002f90:	789b      	ldrb	r3, [r3, #2]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	0019      	movs	r1, r3
 8002f98:	2002      	movs	r0, #2
 8002f9a:	f000 f815 	bl	8002fc8 <_Z16write_i2c_singlehh>
			data_from_RTC.hours--;
 8002f9e:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002fa0:	789b      	ldrb	r3, [r3, #2]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <_Z9dls_checkb+0x188>)
 8002fa8:	709a      	strb	r2, [r3, #2]
			//decrease RTC by one hour - should only happen when winter is reached, not through time set
		}
		write_i2c_single(ADDR_A1SECONDS, 0x0);	//reset DLS FLAG
 8002faa:	2100      	movs	r1, #0
 8002fac:	2007      	movs	r0, #7
 8002fae:	f000 f80b 	bl	8002fc8 <_Z16write_i2c_singlehh>
	}
}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b005      	add	sp, #20
 8002fb8:	bd90      	pop	{r4, r7, pc}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	2000059a 	.word	0x2000059a
 8002fc0:	20000014 	.word	0x20000014
 8002fc4:	20000599 	.word	0x20000599

08002fc8 <_Z16write_i2c_singlehh>:
/**
 * @brief write single register
 * @param cmd: register address to which the data should be written
 * @param data: 8bit data which should be written to the register
 */
void write_i2c_single(uint8_t cmd, uint8_t data){
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	0002      	movs	r2, r0
 8002fd0:	1dfb      	adds	r3, r7, #7
 8002fd2:	701a      	strb	r2, [r3, #0]
 8002fd4:	1dbb      	adds	r3, r7, #6
 8002fd6:	1c0a      	adds	r2, r1, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
	uint8_t data_t[2];
	data_t[0] = cmd;
 8002fda:	210c      	movs	r1, #12
 8002fdc:	187b      	adds	r3, r7, r1
 8002fde:	1dfa      	adds	r2, r7, #7
 8002fe0:	7812      	ldrb	r2, [r2, #0]
 8002fe2:	701a      	strb	r2, [r3, #0]
	data_t[1] = data;
 8002fe4:	187b      	adds	r3, r7, r1
 8002fe6:	1dba      	adds	r2, r7, #6
 8002fe8:	7812      	ldrb	r2, [r2, #0]
 8002fea:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_MASTER_ADDRESS, (uint8_t *)data_t, 2, 100);
 8002fec:	187a      	adds	r2, r7, r1
 8002fee:	4805      	ldr	r0, [pc, #20]	; (8003004 <_Z16write_i2c_singlehh+0x3c>)
 8002ff0:	2364      	movs	r3, #100	; 0x64
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	21d1      	movs	r1, #209	; 0xd1
 8002ff8:	f000 ff84 	bl	8003f04 <HAL_I2C_Master_Transmit>
}
 8002ffc:	46c0      	nop			; (mov r8, r8)
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b004      	add	sp, #16
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000050 	.word	0x20000050

08003008 <_Z15read_i2c_singleh>:
/**
 * @brief function to read one byte of data from specified register
 * @param cmd address which content should be read
 * @return data which is read from the specified register
 */
uint8_t read_i2c_single(uint8_t cmd){
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b087      	sub	sp, #28
 800300c:	af02      	add	r7, sp, #8
 800300e:	0002      	movs	r2, r0
 8003010:	1dfb      	adds	r3, r7, #7
 8003012:	701a      	strb	r2, [r3, #0]
	uint8_t data_t[1];
	data_t[0] = cmd;
 8003014:	210c      	movs	r1, #12
 8003016:	187b      	adds	r3, r7, r1
 8003018:	1dfa      	adds	r2, r7, #7
 800301a:	7812      	ldrb	r2, [r2, #0]
 800301c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_MASTER_ADDRESS, (uint8_t *)data_t, 1, 10);
 800301e:	000c      	movs	r4, r1
 8003020:	193a      	adds	r2, r7, r4
 8003022:	480a      	ldr	r0, [pc, #40]	; (800304c <_Z15read_i2c_singleh+0x44>)
 8003024:	230a      	movs	r3, #10
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	2301      	movs	r3, #1
 800302a:	21d1      	movs	r1, #209	; 0xd1
 800302c:	f000 ff6a 	bl	8003f04 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, DS3231_SLAVE_ADDRESS, (uint8_t *)data_t, 1, 10);
 8003030:	193a      	adds	r2, r7, r4
 8003032:	4806      	ldr	r0, [pc, #24]	; (800304c <_Z15read_i2c_singleh+0x44>)
 8003034:	230a      	movs	r3, #10
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	2301      	movs	r3, #1
 800303a:	21d0      	movs	r1, #208	; 0xd0
 800303c:	f001 f86a 	bl	8004114 <HAL_I2C_Master_Receive>
	return data_t[0];
 8003040:	193b      	adds	r3, r7, r4
 8003042:	781b      	ldrb	r3, [r3, #0]
}
 8003044:	0018      	movs	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	b005      	add	sp, #20
 800304a:	bd90      	pop	{r4, r7, pc}
 800304c:	20000050 	.word	0x20000050

08003050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003050:	480d      	ldr	r0, [pc, #52]	; (8003088 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003052:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003054:	f7ff fb64 	bl	8002720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003058:	480c      	ldr	r0, [pc, #48]	; (800308c <LoopForever+0x6>)
  ldr r1, =_edata
 800305a:	490d      	ldr	r1, [pc, #52]	; (8003090 <LoopForever+0xa>)
  ldr r2, =_sidata
 800305c:	4a0d      	ldr	r2, [pc, #52]	; (8003094 <LoopForever+0xe>)
  movs r3, #0
 800305e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003060:	e002      	b.n	8003068 <LoopCopyDataInit>

08003062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003066:	3304      	adds	r3, #4

08003068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800306a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800306c:	d3f9      	bcc.n	8003062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800306e:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003070:	4c0a      	ldr	r4, [pc, #40]	; (800309c <LoopForever+0x16>)
  movs r3, #0
 8003072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003074:	e001      	b.n	800307a <LoopFillZerobss>

08003076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003078:	3204      	adds	r2, #4

0800307a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800307a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800307c:	d3fb      	bcc.n	8003076 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800307e:	f004 f807 	bl	8007090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003082:	f7fd fdfd 	bl	8000c80 <main>

08003086 <LoopForever>:

LoopForever:
    b LoopForever
 8003086:	e7fe      	b.n	8003086 <LoopForever>
   ldr   r0, =_estack
 8003088:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800308c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003090:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8003094:	08007144 	.word	0x08007144
  ldr r2, =_sbss
 8003098:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 800309c:	200005b8 	.word	0x200005b8

080030a0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030a0:	e7fe      	b.n	80030a0 <ADC1_COMP_IRQHandler>
	...

080030a4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030aa:	1dfb      	adds	r3, r7, #7
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_Init+0x3c>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <HAL_Init+0x3c>)
 80030b6:	2140      	movs	r1, #64	; 0x40
 80030b8:	430a      	orrs	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030bc:	2003      	movs	r0, #3
 80030be:	f000 f811 	bl	80030e4 <HAL_InitTick>
 80030c2:	1e03      	subs	r3, r0, #0
 80030c4:	d003      	beq.n	80030ce <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80030c6:	1dfb      	adds	r3, r7, #7
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
 80030cc:	e001      	b.n	80030d2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030ce:	f7ff fae1 	bl	8002694 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030d2:	1dfb      	adds	r3, r7, #7
 80030d4:	781b      	ldrb	r3, [r3, #0]
}
 80030d6:	0018      	movs	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	b002      	add	sp, #8
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	40022000 	.word	0x40022000

080030e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e4:	b590      	push	{r4, r7, lr}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030ec:	4b14      	ldr	r3, [pc, #80]	; (8003140 <HAL_InitTick+0x5c>)
 80030ee:	681c      	ldr	r4, [r3, #0]
 80030f0:	4b14      	ldr	r3, [pc, #80]	; (8003144 <HAL_InitTick+0x60>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	0019      	movs	r1, r3
 80030f6:	23fa      	movs	r3, #250	; 0xfa
 80030f8:	0098      	lsls	r0, r3, #2
 80030fa:	f7fd f805 	bl	8000108 <__udivsi3>
 80030fe:	0003      	movs	r3, r0
 8003100:	0019      	movs	r1, r3
 8003102:	0020      	movs	r0, r4
 8003104:	f7fd f800 	bl	8000108 <__udivsi3>
 8003108:	0003      	movs	r3, r0
 800310a:	0018      	movs	r0, r3
 800310c:	f000 f90b 	bl	8003326 <HAL_SYSTICK_Config>
 8003110:	1e03      	subs	r3, r0, #0
 8003112:	d001      	beq.n	8003118 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e00f      	b.n	8003138 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b03      	cmp	r3, #3
 800311c:	d80b      	bhi.n	8003136 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	2301      	movs	r3, #1
 8003122:	425b      	negs	r3, r3
 8003124:	2200      	movs	r2, #0
 8003126:	0018      	movs	r0, r3
 8003128:	f000 f8d8 	bl	80032dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800312c:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_InitTick+0x64>)
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	e000      	b.n	8003138 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
}
 8003138:	0018      	movs	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	b003      	add	sp, #12
 800313e:	bd90      	pop	{r4, r7, pc}
 8003140:	20000010 	.word	0x20000010
 8003144:	20000030 	.word	0x20000030
 8003148:	2000002c 	.word	0x2000002c

0800314c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_IncTick+0x1c>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	001a      	movs	r2, r3
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <HAL_IncTick+0x20>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	18d2      	adds	r2, r2, r3
 800315c:	4b03      	ldr	r3, [pc, #12]	; (800316c <HAL_IncTick+0x20>)
 800315e:	601a      	str	r2, [r3, #0]
}
 8003160:	46c0      	nop			; (mov r8, r8)
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	20000030 	.word	0x20000030
 800316c:	2000059c 	.word	0x2000059c

08003170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  return uwTick;
 8003174:	4b02      	ldr	r3, [pc, #8]	; (8003180 <HAL_GetTick+0x10>)
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	0018      	movs	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	2000059c 	.word	0x2000059c

08003184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	0002      	movs	r2, r0
 800318c:	1dfb      	adds	r3, r7, #7
 800318e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003190:	1dfb      	adds	r3, r7, #7
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b7f      	cmp	r3, #127	; 0x7f
 8003196:	d809      	bhi.n	80031ac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003198:	1dfb      	adds	r3, r7, #7
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	001a      	movs	r2, r3
 800319e:	231f      	movs	r3, #31
 80031a0:	401a      	ands	r2, r3
 80031a2:	4b04      	ldr	r3, [pc, #16]	; (80031b4 <__NVIC_EnableIRQ+0x30>)
 80031a4:	2101      	movs	r1, #1
 80031a6:	4091      	lsls	r1, r2
 80031a8:	000a      	movs	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]
  }
}
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b002      	add	sp, #8
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	e000e100 	.word	0xe000e100

080031b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	0002      	movs	r2, r0
 80031c0:	6039      	str	r1, [r7, #0]
 80031c2:	1dfb      	adds	r3, r7, #7
 80031c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80031c6:	1dfb      	adds	r3, r7, #7
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b7f      	cmp	r3, #127	; 0x7f
 80031cc:	d828      	bhi.n	8003220 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031ce:	4a2f      	ldr	r2, [pc, #188]	; (800328c <__NVIC_SetPriority+0xd4>)
 80031d0:	1dfb      	adds	r3, r7, #7
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	b25b      	sxtb	r3, r3
 80031d6:	089b      	lsrs	r3, r3, #2
 80031d8:	33c0      	adds	r3, #192	; 0xc0
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	589b      	ldr	r3, [r3, r2]
 80031de:	1dfa      	adds	r2, r7, #7
 80031e0:	7812      	ldrb	r2, [r2, #0]
 80031e2:	0011      	movs	r1, r2
 80031e4:	2203      	movs	r2, #3
 80031e6:	400a      	ands	r2, r1
 80031e8:	00d2      	lsls	r2, r2, #3
 80031ea:	21ff      	movs	r1, #255	; 0xff
 80031ec:	4091      	lsls	r1, r2
 80031ee:	000a      	movs	r2, r1
 80031f0:	43d2      	mvns	r2, r2
 80031f2:	401a      	ands	r2, r3
 80031f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	019b      	lsls	r3, r3, #6
 80031fa:	22ff      	movs	r2, #255	; 0xff
 80031fc:	401a      	ands	r2, r3
 80031fe:	1dfb      	adds	r3, r7, #7
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	0018      	movs	r0, r3
 8003204:	2303      	movs	r3, #3
 8003206:	4003      	ands	r3, r0
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800320c:	481f      	ldr	r0, [pc, #124]	; (800328c <__NVIC_SetPriority+0xd4>)
 800320e:	1dfb      	adds	r3, r7, #7
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	b25b      	sxtb	r3, r3
 8003214:	089b      	lsrs	r3, r3, #2
 8003216:	430a      	orrs	r2, r1
 8003218:	33c0      	adds	r3, #192	; 0xc0
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800321e:	e031      	b.n	8003284 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003220:	4a1b      	ldr	r2, [pc, #108]	; (8003290 <__NVIC_SetPriority+0xd8>)
 8003222:	1dfb      	adds	r3, r7, #7
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	0019      	movs	r1, r3
 8003228:	230f      	movs	r3, #15
 800322a:	400b      	ands	r3, r1
 800322c:	3b08      	subs	r3, #8
 800322e:	089b      	lsrs	r3, r3, #2
 8003230:	3306      	adds	r3, #6
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	18d3      	adds	r3, r2, r3
 8003236:	3304      	adds	r3, #4
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	1dfa      	adds	r2, r7, #7
 800323c:	7812      	ldrb	r2, [r2, #0]
 800323e:	0011      	movs	r1, r2
 8003240:	2203      	movs	r2, #3
 8003242:	400a      	ands	r2, r1
 8003244:	00d2      	lsls	r2, r2, #3
 8003246:	21ff      	movs	r1, #255	; 0xff
 8003248:	4091      	lsls	r1, r2
 800324a:	000a      	movs	r2, r1
 800324c:	43d2      	mvns	r2, r2
 800324e:	401a      	ands	r2, r3
 8003250:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	019b      	lsls	r3, r3, #6
 8003256:	22ff      	movs	r2, #255	; 0xff
 8003258:	401a      	ands	r2, r3
 800325a:	1dfb      	adds	r3, r7, #7
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	0018      	movs	r0, r3
 8003260:	2303      	movs	r3, #3
 8003262:	4003      	ands	r3, r0
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003268:	4809      	ldr	r0, [pc, #36]	; (8003290 <__NVIC_SetPriority+0xd8>)
 800326a:	1dfb      	adds	r3, r7, #7
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	001c      	movs	r4, r3
 8003270:	230f      	movs	r3, #15
 8003272:	4023      	ands	r3, r4
 8003274:	3b08      	subs	r3, #8
 8003276:	089b      	lsrs	r3, r3, #2
 8003278:	430a      	orrs	r2, r1
 800327a:	3306      	adds	r3, #6
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	18c3      	adds	r3, r0, r3
 8003280:	3304      	adds	r3, #4
 8003282:	601a      	str	r2, [r3, #0]
}
 8003284:	46c0      	nop			; (mov r8, r8)
 8003286:	46bd      	mov	sp, r7
 8003288:	b003      	add	sp, #12
 800328a:	bd90      	pop	{r4, r7, pc}
 800328c:	e000e100 	.word	0xe000e100
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	1e5a      	subs	r2, r3, #1
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	045b      	lsls	r3, r3, #17
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d301      	bcc.n	80032ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032a8:	2301      	movs	r3, #1
 80032aa:	e010      	b.n	80032ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <SysTick_Config+0x44>)
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	3a01      	subs	r2, #1
 80032b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032b4:	2301      	movs	r3, #1
 80032b6:	425b      	negs	r3, r3
 80032b8:	2103      	movs	r1, #3
 80032ba:	0018      	movs	r0, r3
 80032bc:	f7ff ff7c 	bl	80031b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <SysTick_Config+0x44>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032c6:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <SysTick_Config+0x44>)
 80032c8:	2207      	movs	r2, #7
 80032ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	0018      	movs	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	b002      	add	sp, #8
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	e000e010 	.word	0xe000e010

080032dc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
 80032e6:	210f      	movs	r1, #15
 80032e8:	187b      	adds	r3, r7, r1
 80032ea:	1c02      	adds	r2, r0, #0
 80032ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	187b      	adds	r3, r7, r1
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	b25b      	sxtb	r3, r3
 80032f6:	0011      	movs	r1, r2
 80032f8:	0018      	movs	r0, r3
 80032fa:	f7ff ff5d 	bl	80031b8 <__NVIC_SetPriority>
}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	46bd      	mov	sp, r7
 8003302:	b004      	add	sp, #16
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	0002      	movs	r2, r0
 800330e:	1dfb      	adds	r3, r7, #7
 8003310:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003312:	1dfb      	adds	r3, r7, #7
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	b25b      	sxtb	r3, r3
 8003318:	0018      	movs	r0, r3
 800331a:	f7ff ff33 	bl	8003184 <__NVIC_EnableIRQ>
}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	46bd      	mov	sp, r7
 8003322:	b002      	add	sp, #8
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	0018      	movs	r0, r3
 8003332:	f7ff ffaf 	bl	8003294 <SysTick_Config>
 8003336:	0003      	movs	r3, r0
}
 8003338:	0018      	movs	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	b002      	add	sp, #8
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e061      	b.n	8003416 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a32      	ldr	r2, [pc, #200]	; (8003420 <HAL_DMA_Init+0xe0>)
 8003358:	4694      	mov	ip, r2
 800335a:	4463      	add	r3, ip
 800335c:	2114      	movs	r1, #20
 800335e:	0018      	movs	r0, r3
 8003360:	f7fc fed2 	bl	8000108 <__udivsi3>
 8003364:	0003      	movs	r3, r0
 8003366:	009a      	lsls	r2, r3, #2
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a2d      	ldr	r2, [pc, #180]	; (8003424 <HAL_DMA_Init+0xe4>)
 8003370:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2225      	movs	r2, #37	; 0x25
 8003376:	2102      	movs	r1, #2
 8003378:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4a28      	ldr	r2, [pc, #160]	; (8003428 <HAL_DMA_Init+0xe8>)
 8003386:	4013      	ands	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003392:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	01db      	lsls	r3, r3, #7
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d018      	beq.n	80033fe <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033cc:	4b17      	ldr	r3, [pc, #92]	; (800342c <HAL_DMA_Init+0xec>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	211c      	movs	r1, #28
 80033d6:	400b      	ands	r3, r1
 80033d8:	210f      	movs	r1, #15
 80033da:	4099      	lsls	r1, r3
 80033dc:	000b      	movs	r3, r1
 80033de:	43d9      	mvns	r1, r3
 80033e0:	4b12      	ldr	r3, [pc, #72]	; (800342c <HAL_DMA_Init+0xec>)
 80033e2:	400a      	ands	r2, r1
 80033e4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80033e6:	4b11      	ldr	r3, [pc, #68]	; (800342c <HAL_DMA_Init+0xec>)
 80033e8:	6819      	ldr	r1, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	201c      	movs	r0, #28
 80033f4:	4003      	ands	r3, r0
 80033f6:	409a      	lsls	r2, r3
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <HAL_DMA_Init+0xec>)
 80033fa:	430a      	orrs	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2225      	movs	r2, #37	; 0x25
 8003408:	2101      	movs	r1, #1
 800340a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2224      	movs	r2, #36	; 0x24
 8003410:	2100      	movs	r1, #0
 8003412:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	0018      	movs	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	b004      	add	sp, #16
 800341c:	bd80      	pop	{r7, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	bffdfff8 	.word	0xbffdfff8
 8003424:	40020000 	.word	0x40020000
 8003428:	ffff800f 	.word	0xffff800f
 800342c:	400200a8 	.word	0x400200a8

08003430 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800343e:	2317      	movs	r3, #23
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	2200      	movs	r2, #0
 8003444:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2224      	movs	r2, #36	; 0x24
 800344a:	5c9b      	ldrb	r3, [r3, r2]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_DMA_Start_IT+0x24>
 8003450:	2302      	movs	r3, #2
 8003452:	e04f      	b.n	80034f4 <HAL_DMA_Start_IT+0xc4>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2224      	movs	r2, #36	; 0x24
 8003458:	2101      	movs	r1, #1
 800345a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2225      	movs	r2, #37	; 0x25
 8003460:	5c9b      	ldrb	r3, [r3, r2]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d13a      	bne.n	80034de <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2225      	movs	r2, #37	; 0x25
 800346c:	2102      	movs	r1, #2
 800346e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2101      	movs	r1, #1
 8003482:	438a      	bics	r2, r1
 8003484:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	68b9      	ldr	r1, [r7, #8]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f92a 	bl	80036e6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	2b00      	cmp	r3, #0
 8003498:	d008      	beq.n	80034ac <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	210e      	movs	r1, #14
 80034a6:	430a      	orrs	r2, r1
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	e00f      	b.n	80034cc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2104      	movs	r1, #4
 80034b8:	438a      	bics	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	210a      	movs	r1, #10
 80034c8:	430a      	orrs	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2101      	movs	r1, #1
 80034d8:	430a      	orrs	r2, r1
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	e007      	b.n	80034ee <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2224      	movs	r2, #36	; 0x24
 80034e2:	2100      	movs	r1, #0
 80034e4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80034e6:	2317      	movs	r3, #23
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	2202      	movs	r2, #2
 80034ec:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80034ee:	2317      	movs	r3, #23
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	781b      	ldrb	r3, [r3, #0]
}
 80034f4:	0018      	movs	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b006      	add	sp, #24
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003504:	210f      	movs	r1, #15
 8003506:	187b      	adds	r3, r7, r1
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2225      	movs	r2, #37	; 0x25
 8003510:	5c9b      	ldrb	r3, [r3, r2]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d006      	beq.n	8003526 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2204      	movs	r2, #4
 800351c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800351e:	187b      	adds	r3, r7, r1
 8003520:	2201      	movs	r2, #1
 8003522:	701a      	strb	r2, [r3, #0]
 8003524:	e02a      	b.n	800357c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	210e      	movs	r1, #14
 8003532:	438a      	bics	r2, r1
 8003534:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2101      	movs	r1, #1
 8003542:	438a      	bics	r2, r1
 8003544:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	221c      	movs	r2, #28
 800354c:	401a      	ands	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2101      	movs	r1, #1
 8003554:	4091      	lsls	r1, r2
 8003556:	000a      	movs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2225      	movs	r2, #37	; 0x25
 800355e:	2101      	movs	r1, #1
 8003560:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2224      	movs	r2, #36	; 0x24
 8003566:	2100      	movs	r1, #0
 8003568:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356e:	2b00      	cmp	r3, #0
 8003570:	d004      	beq.n	800357c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	0010      	movs	r0, r2
 800357a:	4798      	blx	r3
    }
  }
  return status;
 800357c:	230f      	movs	r3, #15
 800357e:	18fb      	adds	r3, r7, r3
 8003580:	781b      	ldrb	r3, [r3, #0]
}
 8003582:	0018      	movs	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	b004      	add	sp, #16
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b084      	sub	sp, #16
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	221c      	movs	r2, #28
 80035a8:	4013      	ands	r3, r2
 80035aa:	2204      	movs	r2, #4
 80035ac:	409a      	lsls	r2, r3
 80035ae:	0013      	movs	r3, r2
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4013      	ands	r3, r2
 80035b4:	d026      	beq.n	8003604 <HAL_DMA_IRQHandler+0x7a>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2204      	movs	r2, #4
 80035ba:	4013      	ands	r3, r2
 80035bc:	d022      	beq.n	8003604 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2220      	movs	r2, #32
 80035c6:	4013      	ands	r3, r2
 80035c8:	d107      	bne.n	80035da <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2104      	movs	r1, #4
 80035d6:	438a      	bics	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	221c      	movs	r2, #28
 80035e0:	401a      	ands	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	2104      	movs	r1, #4
 80035e8:	4091      	lsls	r1, r2
 80035ea:	000a      	movs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d100      	bne.n	80035f8 <HAL_DMA_IRQHandler+0x6e>
 80035f6:	e071      	b.n	80036dc <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	0010      	movs	r0, r2
 8003600:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8003602:	e06b      	b.n	80036dc <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003608:	221c      	movs	r2, #28
 800360a:	4013      	ands	r3, r2
 800360c:	2202      	movs	r2, #2
 800360e:	409a      	lsls	r2, r3
 8003610:	0013      	movs	r3, r2
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4013      	ands	r3, r2
 8003616:	d02d      	beq.n	8003674 <HAL_DMA_IRQHandler+0xea>
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2202      	movs	r2, #2
 800361c:	4013      	ands	r3, r2
 800361e:	d029      	beq.n	8003674 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2220      	movs	r2, #32
 8003628:	4013      	ands	r3, r2
 800362a:	d10b      	bne.n	8003644 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	210a      	movs	r1, #10
 8003638:	438a      	bics	r2, r1
 800363a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2225      	movs	r2, #37	; 0x25
 8003640:	2101      	movs	r1, #1
 8003642:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003648:	221c      	movs	r2, #28
 800364a:	401a      	ands	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	2102      	movs	r1, #2
 8003652:	4091      	lsls	r1, r2
 8003654:	000a      	movs	r2, r1
 8003656:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2224      	movs	r2, #36	; 0x24
 800365c:	2100      	movs	r1, #0
 800365e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	2b00      	cmp	r3, #0
 8003666:	d039      	beq.n	80036dc <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	0010      	movs	r0, r2
 8003670:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003672:	e033      	b.n	80036dc <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003678:	221c      	movs	r2, #28
 800367a:	4013      	ands	r3, r2
 800367c:	2208      	movs	r2, #8
 800367e:	409a      	lsls	r2, r3
 8003680:	0013      	movs	r3, r2
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4013      	ands	r3, r2
 8003686:	d02a      	beq.n	80036de <HAL_DMA_IRQHandler+0x154>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2208      	movs	r2, #8
 800368c:	4013      	ands	r3, r2
 800368e:	d026      	beq.n	80036de <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	210e      	movs	r1, #14
 800369c:	438a      	bics	r2, r1
 800369e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a4:	221c      	movs	r2, #28
 80036a6:	401a      	ands	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	2101      	movs	r1, #1
 80036ae:	4091      	lsls	r1, r2
 80036b0:	000a      	movs	r2, r1
 80036b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2225      	movs	r2, #37	; 0x25
 80036be:	2101      	movs	r1, #1
 80036c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2224      	movs	r2, #36	; 0x24
 80036c6:	2100      	movs	r1, #0
 80036c8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	0010      	movs	r0, r2
 80036da:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80036dc:	46c0      	nop			; (mov r8, r8)
 80036de:	46c0      	nop			; (mov r8, r8)
}
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b004      	add	sp, #16
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f8:	221c      	movs	r2, #28
 80036fa:	401a      	ands	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	2101      	movs	r1, #1
 8003702:	4091      	lsls	r1, r2
 8003704:	000a      	movs	r2, r1
 8003706:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b10      	cmp	r3, #16
 8003716:	d108      	bne.n	800372a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003728:	e007      	b.n	800373a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	60da      	str	r2, [r3, #12]
}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	46bd      	mov	sp, r7
 800373e:	b004      	add	sp, #16
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800374c:	f7ff fd10 	bl	8003170 <HAL_GetTick>
 8003750:	0003      	movs	r3, r0
 8003752:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003754:	e00f      	b.n	8003776 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3301      	adds	r3, #1
 800375a:	d00c      	beq.n	8003776 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d007      	beq.n	8003772 <FLASH_WaitForLastOperation+0x2e>
 8003762:	f7ff fd05 	bl	8003170 <HAL_GetTick>
 8003766:	0002      	movs	r2, r0
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	429a      	cmp	r2, r3
 8003770:	d201      	bcs.n	8003776 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e052      	b.n	800381c <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003776:	4b2b      	ldr	r3, [pc, #172]	; (8003824 <FLASH_WaitForLastOperation+0xe0>)
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	2201      	movs	r2, #1
 800377c:	4013      	ands	r3, r2
 800377e:	2b01      	cmp	r3, #1
 8003780:	d0e9      	beq.n	8003756 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003782:	4b28      	ldr	r3, [pc, #160]	; (8003824 <FLASH_WaitForLastOperation+0xe0>)
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2202      	movs	r2, #2
 8003788:	4013      	ands	r3, r2
 800378a:	2b02      	cmp	r3, #2
 800378c:	d102      	bne.n	8003794 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800378e:	4b25      	ldr	r3, [pc, #148]	; (8003824 <FLASH_WaitForLastOperation+0xe0>)
 8003790:	2202      	movs	r2, #2
 8003792:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003794:	4b23      	ldr	r3, [pc, #140]	; (8003824 <FLASH_WaitForLastOperation+0xe0>)
 8003796:	699a      	ldr	r2, [r3, #24]
 8003798:	2380      	movs	r3, #128	; 0x80
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	401a      	ands	r2, r3
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d035      	beq.n	8003812 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80037a6:	4b1f      	ldr	r3, [pc, #124]	; (8003824 <FLASH_WaitForLastOperation+0xe0>)
 80037a8:	699a      	ldr	r2, [r3, #24]
 80037aa:	2380      	movs	r3, #128	; 0x80
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80037b0:	2380      	movs	r3, #128	; 0x80
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d02c      	beq.n	8003812 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80037b8:	4b1a      	ldr	r3, [pc, #104]	; (8003824 <FLASH_WaitForLastOperation+0xe0>)
 80037ba:	699a      	ldr	r2, [r3, #24]
 80037bc:	2380      	movs	r3, #128	; 0x80
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80037c2:	2380      	movs	r3, #128	; 0x80
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d023      	beq.n	8003812 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80037ca:	4b16      	ldr	r3, [pc, #88]	; (8003824 <FLASH_WaitForLastOperation+0xe0>)
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	429a      	cmp	r2, r3
 80037da:	d01a      	beq.n	8003812 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80037dc:	4b11      	ldr	r3, [pc, #68]	; (8003824 <FLASH_WaitForLastOperation+0xe0>)
 80037de:	699a      	ldr	r2, [r3, #24]
 80037e0:	2380      	movs	r3, #128	; 0x80
 80037e2:	019b      	lsls	r3, r3, #6
 80037e4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80037e6:	2380      	movs	r3, #128	; 0x80
 80037e8:	019b      	lsls	r3, r3, #6
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d011      	beq.n	8003812 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80037ee:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <FLASH_WaitForLastOperation+0xe0>)
 80037f0:	699a      	ldr	r2, [r3, #24]
 80037f2:	2380      	movs	r3, #128	; 0x80
 80037f4:	029b      	lsls	r3, r3, #10
 80037f6:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80037f8:	2380      	movs	r3, #128	; 0x80
 80037fa:	029b      	lsls	r3, r3, #10
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d008      	beq.n	8003812 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <FLASH_WaitForLastOperation+0xe0>)
 8003802:	699a      	ldr	r2, [r3, #24]
 8003804:	2380      	movs	r3, #128	; 0x80
 8003806:	025b      	lsls	r3, r3, #9
 8003808:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800380a:	2380      	movs	r3, #128	; 0x80
 800380c:	025b      	lsls	r3, r3, #9
 800380e:	429a      	cmp	r2, r3
 8003810:	d103      	bne.n	800381a <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8003812:	f000 f809 	bl	8003828 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	0018      	movs	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	b004      	add	sp, #16
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40022000 	.word	0x40022000

08003828 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800382e:	2300      	movs	r3, #0
 8003830:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003832:	4b49      	ldr	r3, [pc, #292]	; (8003958 <FLASH_SetErrorCode+0x130>)
 8003834:	699a      	ldr	r2, [r3, #24]
 8003836:	2380      	movs	r3, #128	; 0x80
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	401a      	ands	r2, r3
 800383c:	2380      	movs	r3, #128	; 0x80
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	429a      	cmp	r2, r3
 8003842:	d10a      	bne.n	800385a <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003844:	4b45      	ldr	r3, [pc, #276]	; (800395c <FLASH_SetErrorCode+0x134>)
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	2202      	movs	r2, #2
 800384a:	431a      	orrs	r2, r3
 800384c:	4b43      	ldr	r3, [pc, #268]	; (800395c <FLASH_SetErrorCode+0x134>)
 800384e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2280      	movs	r2, #128	; 0x80
 8003854:	0052      	lsls	r2, r2, #1
 8003856:	4313      	orrs	r3, r2
 8003858:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800385a:	4b3f      	ldr	r3, [pc, #252]	; (8003958 <FLASH_SetErrorCode+0x130>)
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	2380      	movs	r3, #128	; 0x80
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	401a      	ands	r2, r3
 8003864:	2380      	movs	r3, #128	; 0x80
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	429a      	cmp	r2, r3
 800386a:	d10a      	bne.n	8003882 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800386c:	4b3b      	ldr	r3, [pc, #236]	; (800395c <FLASH_SetErrorCode+0x134>)
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	2201      	movs	r2, #1
 8003872:	431a      	orrs	r2, r3
 8003874:	4b39      	ldr	r3, [pc, #228]	; (800395c <FLASH_SetErrorCode+0x134>)
 8003876:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2280      	movs	r2, #128	; 0x80
 800387c:	0092      	lsls	r2, r2, #2
 800387e:	4313      	orrs	r3, r2
 8003880:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8003882:	4b35      	ldr	r3, [pc, #212]	; (8003958 <FLASH_SetErrorCode+0x130>)
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	401a      	ands	r2, r3
 800388c:	2380      	movs	r3, #128	; 0x80
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	429a      	cmp	r2, r3
 8003892:	d10a      	bne.n	80038aa <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8003894:	4b31      	ldr	r3, [pc, #196]	; (800395c <FLASH_SetErrorCode+0x134>)
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	2208      	movs	r2, #8
 800389a:	431a      	orrs	r2, r3
 800389c:	4b2f      	ldr	r3, [pc, #188]	; (800395c <FLASH_SetErrorCode+0x134>)
 800389e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2280      	movs	r2, #128	; 0x80
 80038a4:	00d2      	lsls	r2, r2, #3
 80038a6:	4313      	orrs	r3, r2
 80038a8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80038aa:	4b2b      	ldr	r3, [pc, #172]	; (8003958 <FLASH_SetErrorCode+0x130>)
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	2380      	movs	r3, #128	; 0x80
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	401a      	ands	r2, r3
 80038b4:	2380      	movs	r3, #128	; 0x80
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d10a      	bne.n	80038d2 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80038bc:	4b27      	ldr	r3, [pc, #156]	; (800395c <FLASH_SetErrorCode+0x134>)
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	2204      	movs	r2, #4
 80038c2:	431a      	orrs	r2, r3
 80038c4:	4b25      	ldr	r3, [pc, #148]	; (800395c <FLASH_SetErrorCode+0x134>)
 80038c6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2280      	movs	r2, #128	; 0x80
 80038cc:	0112      	lsls	r2, r2, #4
 80038ce:	4313      	orrs	r3, r2
 80038d0:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80038d2:	4b21      	ldr	r3, [pc, #132]	; (8003958 <FLASH_SetErrorCode+0x130>)
 80038d4:	699a      	ldr	r2, [r3, #24]
 80038d6:	2380      	movs	r3, #128	; 0x80
 80038d8:	019b      	lsls	r3, r3, #6
 80038da:	401a      	ands	r2, r3
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	019b      	lsls	r3, r3, #6
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d10a      	bne.n	80038fa <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80038e4:	4b1d      	ldr	r3, [pc, #116]	; (800395c <FLASH_SetErrorCode+0x134>)
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	2210      	movs	r2, #16
 80038ea:	431a      	orrs	r2, r3
 80038ec:	4b1b      	ldr	r3, [pc, #108]	; (800395c <FLASH_SetErrorCode+0x134>)
 80038ee:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2280      	movs	r2, #128	; 0x80
 80038f4:	0192      	lsls	r2, r2, #6
 80038f6:	4313      	orrs	r3, r2
 80038f8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80038fa:	4b17      	ldr	r3, [pc, #92]	; (8003958 <FLASH_SetErrorCode+0x130>)
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	2380      	movs	r3, #128	; 0x80
 8003900:	029b      	lsls	r3, r3, #10
 8003902:	401a      	ands	r2, r3
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	029b      	lsls	r3, r3, #10
 8003908:	429a      	cmp	r2, r3
 800390a:	d109      	bne.n	8003920 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800390c:	4b13      	ldr	r3, [pc, #76]	; (800395c <FLASH_SetErrorCode+0x134>)
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	2220      	movs	r2, #32
 8003912:	431a      	orrs	r2, r3
 8003914:	4b11      	ldr	r3, [pc, #68]	; (800395c <FLASH_SetErrorCode+0x134>)
 8003916:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	4313      	orrs	r3, r2
 800391e:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8003920:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <FLASH_SetErrorCode+0x130>)
 8003922:	699a      	ldr	r2, [r3, #24]
 8003924:	2380      	movs	r3, #128	; 0x80
 8003926:	025b      	lsls	r3, r3, #9
 8003928:	401a      	ands	r2, r3
 800392a:	2380      	movs	r3, #128	; 0x80
 800392c:	025b      	lsls	r3, r3, #9
 800392e:	429a      	cmp	r2, r3
 8003930:	d10a      	bne.n	8003948 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8003932:	4b0a      	ldr	r3, [pc, #40]	; (800395c <FLASH_SetErrorCode+0x134>)
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	2240      	movs	r2, #64	; 0x40
 8003938:	431a      	orrs	r2, r3
 800393a:	4b08      	ldr	r3, [pc, #32]	; (800395c <FLASH_SetErrorCode+0x134>)
 800393c:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2280      	movs	r2, #128	; 0x80
 8003942:	0252      	lsls	r2, r2, #9
 8003944:	4313      	orrs	r3, r2
 8003946:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003948:	4b03      	ldr	r3, [pc, #12]	; (8003958 <FLASH_SetErrorCode+0x130>)
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	619a      	str	r2, [r3, #24]
}  
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	46bd      	mov	sp, r7
 8003952:	b002      	add	sp, #8
 8003954:	bd80      	pop	{r7, pc}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	40022000 	.word	0x40022000
 800395c:	200005a0 	.word	0x200005a0

08003960 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003966:	4b12      	ldr	r3, [pc, #72]	; (80039b0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	4013      	ands	r3, r2
 800396e:	d019      	beq.n	80039a4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003970:	f3ef 8310 	mrs	r3, PRIMASK
 8003974:	607b      	str	r3, [r7, #4]
  return(result);
 8003976:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8003978:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800397a:	b672      	cpsid	i
}
 800397c:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800397e:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8003980:	4a0c      	ldr	r2, [pc, #48]	; (80039b4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8003982:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8003986:	4a0c      	ldr	r2, [pc, #48]	; (80039b8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8003988:	60da      	str	r2, [r3, #12]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f383 8810 	msr	PRIMASK, r3
}
 8003994:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003996:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	4013      	ands	r3, r2
 800399e:	d001      	beq.n	80039a4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	0018      	movs	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b004      	add	sp, #16
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	40022000 	.word	0x40022000
 80039b4:	89abcdef 	.word	0x89abcdef
 80039b8:	02030405 	.word	0x02030405

080039bc <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80039c0:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	4b03      	ldr	r3, [pc, #12]	; (80039d4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80039c6:	2101      	movs	r1, #1
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	0018      	movs	r0, r3
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40022000 	.word	0x40022000

080039d8 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80039d8:	b5b0      	push	{r4, r5, r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80039e4:	2317      	movs	r3, #23
 80039e6:	18fb      	adds	r3, r7, r3
 80039e8:	2201      	movs	r2, #1
 80039ea:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80039ec:	4b24      	ldr	r3, [pc, #144]	; (8003a80 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80039ee:	7c1b      	ldrb	r3, [r3, #16]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e03e      	b.n	8003a76 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 80039f8:	4b21      	ldr	r3, [pc, #132]	; (8003a80 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80039fe:	2517      	movs	r5, #23
 8003a00:	197c      	adds	r4, r7, r5
 8003a02:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8003a04:	0018      	movs	r0, r3
 8003a06:	f7ff fe9d 	bl	8003744 <FLASH_WaitForLastOperation>
 8003a0a:	0003      	movs	r3, r0
 8003a0c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8003a0e:	197b      	adds	r3, r7, r5
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d129      	bne.n	8003a6a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a16:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d103      	bne.n	8003a2a <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	e013      	b.n	8003a52 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d104      	bne.n	8003a3a <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	b292      	uxth	r2, r2
 8003a36:	801a      	strh	r2, [r3, #0]
 8003a38:	e00b      	b.n	8003a52 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d104      	bne.n	8003a4a <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	e003      	b.n	8003a52 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8003a4a:	2317      	movs	r3, #23
 8003a4c:	18fb      	adds	r3, r7, r3
 8003a4e:	2201      	movs	r2, #1
 8003a50:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8003a52:	2217      	movs	r2, #23
 8003a54:	18bb      	adds	r3, r7, r2
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d106      	bne.n	8003a6a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003a5c:	18bc      	adds	r4, r7, r2
 8003a5e:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8003a60:	0018      	movs	r0, r3
 8003a62:	f7ff fe6f 	bl	8003744 <FLASH_WaitForLastOperation>
 8003a66:	0003      	movs	r3, r0
 8003a68:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	741a      	strb	r2, [r3, #16]

  return status;
 8003a70:	2317      	movs	r3, #23
 8003a72:	18fb      	adds	r3, r7, r3
 8003a74:	781b      	ldrb	r3, [r3, #0]
}
 8003a76:	0018      	movs	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b006      	add	sp, #24
 8003a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	200005a0 	.word	0x200005a0
 8003a84:	0000c350 	.word	0x0000c350

08003a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003a9e:	e149      	b.n	8003d34 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4091      	lsls	r1, r2
 8003aaa:	000a      	movs	r2, r1
 8003aac:	4013      	ands	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d100      	bne.n	8003ab8 <HAL_GPIO_Init+0x30>
 8003ab6:	e13a      	b.n	8003d2e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2203      	movs	r2, #3
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d005      	beq.n	8003ad0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2203      	movs	r2, #3
 8003aca:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d130      	bne.n	8003b32 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	2203      	movs	r2, #3
 8003adc:	409a      	lsls	r2, r3
 8003ade:	0013      	movs	r3, r2
 8003ae0:	43da      	mvns	r2, r3
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	409a      	lsls	r2, r3
 8003af2:	0013      	movs	r3, r2
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b06:	2201      	movs	r2, #1
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	0013      	movs	r3, r2
 8003b0e:	43da      	mvns	r2, r3
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4013      	ands	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	091b      	lsrs	r3, r3, #4
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	401a      	ands	r2, r3
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	409a      	lsls	r2, r3
 8003b24:	0013      	movs	r3, r2
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2203      	movs	r2, #3
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d017      	beq.n	8003b6e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	2203      	movs	r2, #3
 8003b4a:	409a      	lsls	r2, r3
 8003b4c:	0013      	movs	r3, r2
 8003b4e:	43da      	mvns	r2, r3
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4013      	ands	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	0013      	movs	r3, r2
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2203      	movs	r2, #3
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d123      	bne.n	8003bc2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	08da      	lsrs	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3208      	adds	r2, #8
 8003b82:	0092      	lsls	r2, r2, #2
 8003b84:	58d3      	ldr	r3, [r2, r3]
 8003b86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2207      	movs	r2, #7
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	220f      	movs	r2, #15
 8003b92:	409a      	lsls	r2, r3
 8003b94:	0013      	movs	r3, r2
 8003b96:	43da      	mvns	r2, r3
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	691a      	ldr	r2, [r3, #16]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2107      	movs	r1, #7
 8003ba6:	400b      	ands	r3, r1
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	409a      	lsls	r2, r3
 8003bac:	0013      	movs	r3, r2
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	08da      	lsrs	r2, r3, #3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3208      	adds	r2, #8
 8003bbc:	0092      	lsls	r2, r2, #2
 8003bbe:	6939      	ldr	r1, [r7, #16]
 8003bc0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	2203      	movs	r2, #3
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	0013      	movs	r3, r2
 8003bd2:	43da      	mvns	r2, r3
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2203      	movs	r2, #3
 8003be0:	401a      	ands	r2, r3
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	409a      	lsls	r2, r3
 8003be8:	0013      	movs	r3, r2
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	23c0      	movs	r3, #192	; 0xc0
 8003bfc:	029b      	lsls	r3, r3, #10
 8003bfe:	4013      	ands	r3, r2
 8003c00:	d100      	bne.n	8003c04 <HAL_GPIO_Init+0x17c>
 8003c02:	e094      	b.n	8003d2e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c04:	4b51      	ldr	r3, [pc, #324]	; (8003d4c <HAL_GPIO_Init+0x2c4>)
 8003c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c08:	4b50      	ldr	r3, [pc, #320]	; (8003d4c <HAL_GPIO_Init+0x2c4>)
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c10:	4a4f      	ldr	r2, [pc, #316]	; (8003d50 <HAL_GPIO_Init+0x2c8>)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	089b      	lsrs	r3, r3, #2
 8003c16:	3302      	adds	r3, #2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	589b      	ldr	r3, [r3, r2]
 8003c1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2203      	movs	r2, #3
 8003c22:	4013      	ands	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	220f      	movs	r2, #15
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	0013      	movs	r3, r2
 8003c2c:	43da      	mvns	r2, r3
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	4013      	ands	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	23a0      	movs	r3, #160	; 0xa0
 8003c38:	05db      	lsls	r3, r3, #23
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d013      	beq.n	8003c66 <HAL_GPIO_Init+0x1de>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a44      	ldr	r2, [pc, #272]	; (8003d54 <HAL_GPIO_Init+0x2cc>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d00d      	beq.n	8003c62 <HAL_GPIO_Init+0x1da>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a43      	ldr	r2, [pc, #268]	; (8003d58 <HAL_GPIO_Init+0x2d0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d007      	beq.n	8003c5e <HAL_GPIO_Init+0x1d6>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a42      	ldr	r2, [pc, #264]	; (8003d5c <HAL_GPIO_Init+0x2d4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d101      	bne.n	8003c5a <HAL_GPIO_Init+0x1d2>
 8003c56:	2305      	movs	r3, #5
 8003c58:	e006      	b.n	8003c68 <HAL_GPIO_Init+0x1e0>
 8003c5a:	2306      	movs	r3, #6
 8003c5c:	e004      	b.n	8003c68 <HAL_GPIO_Init+0x1e0>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e002      	b.n	8003c68 <HAL_GPIO_Init+0x1e0>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_GPIO_Init+0x1e0>
 8003c66:	2300      	movs	r3, #0
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	2103      	movs	r1, #3
 8003c6c:	400a      	ands	r2, r1
 8003c6e:	0092      	lsls	r2, r2, #2
 8003c70:	4093      	lsls	r3, r2
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c78:	4935      	ldr	r1, [pc, #212]	; (8003d50 <HAL_GPIO_Init+0x2c8>)
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	089b      	lsrs	r3, r3, #2
 8003c7e:	3302      	adds	r3, #2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c86:	4b36      	ldr	r3, [pc, #216]	; (8003d60 <HAL_GPIO_Init+0x2d8>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	43da      	mvns	r2, r3
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4013      	ands	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	2380      	movs	r3, #128	; 0x80
 8003c9c:	035b      	lsls	r3, r3, #13
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d003      	beq.n	8003caa <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003caa:	4b2d      	ldr	r3, [pc, #180]	; (8003d60 <HAL_GPIO_Init+0x2d8>)
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003cb0:	4b2b      	ldr	r3, [pc, #172]	; (8003d60 <HAL_GPIO_Init+0x2d8>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	43da      	mvns	r2, r3
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	2380      	movs	r3, #128	; 0x80
 8003cc6:	039b      	lsls	r3, r3, #14
 8003cc8:	4013      	ands	r3, r2
 8003cca:	d003      	beq.n	8003cd4 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003cd4:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <HAL_GPIO_Init+0x2d8>)
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003cda:	4b21      	ldr	r3, [pc, #132]	; (8003d60 <HAL_GPIO_Init+0x2d8>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	43da      	mvns	r2, r3
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	2380      	movs	r3, #128	; 0x80
 8003cf0:	029b      	lsls	r3, r3, #10
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	d003      	beq.n	8003cfe <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003cfe:	4b18      	ldr	r3, [pc, #96]	; (8003d60 <HAL_GPIO_Init+0x2d8>)
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d04:	4b16      	ldr	r3, [pc, #88]	; (8003d60 <HAL_GPIO_Init+0x2d8>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	43da      	mvns	r2, r3
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4013      	ands	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	025b      	lsls	r3, r3, #9
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d003      	beq.n	8003d28 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003d28:	4b0d      	ldr	r3, [pc, #52]	; (8003d60 <HAL_GPIO_Init+0x2d8>)
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	3301      	adds	r3, #1
 8003d32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	40da      	lsrs	r2, r3
 8003d3c:	1e13      	subs	r3, r2, #0
 8003d3e:	d000      	beq.n	8003d42 <HAL_GPIO_Init+0x2ba>
 8003d40:	e6ae      	b.n	8003aa0 <HAL_GPIO_Init+0x18>
  }
}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b006      	add	sp, #24
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	40010000 	.word	0x40010000
 8003d54:	50000400 	.word	0x50000400
 8003d58:	50000800 	.word	0x50000800
 8003d5c:	50001c00 	.word	0x50001c00
 8003d60:	40010400 	.word	0x40010400

08003d64 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	000a      	movs	r2, r1
 8003d6e:	1cbb      	adds	r3, r7, #2
 8003d70:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	1cba      	adds	r2, r7, #2
 8003d78:	8812      	ldrh	r2, [r2, #0]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d004      	beq.n	8003d88 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003d7e:	230f      	movs	r3, #15
 8003d80:	18fb      	adds	r3, r7, r3
 8003d82:	2201      	movs	r2, #1
 8003d84:	701a      	strb	r2, [r3, #0]
 8003d86:	e003      	b.n	8003d90 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d88:	230f      	movs	r3, #15
 8003d8a:	18fb      	adds	r3, r7, r3
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003d90:	230f      	movs	r3, #15
 8003d92:	18fb      	adds	r3, r7, r3
 8003d94:	781b      	ldrb	r3, [r3, #0]
}
 8003d96:	0018      	movs	r0, r3
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b004      	add	sp, #16
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b082      	sub	sp, #8
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	0008      	movs	r0, r1
 8003da8:	0011      	movs	r1, r2
 8003daa:	1cbb      	adds	r3, r7, #2
 8003dac:	1c02      	adds	r2, r0, #0
 8003dae:	801a      	strh	r2, [r3, #0]
 8003db0:	1c7b      	adds	r3, r7, #1
 8003db2:	1c0a      	adds	r2, r1, #0
 8003db4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003db6:	1c7b      	adds	r3, r7, #1
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d004      	beq.n	8003dc8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dbe:	1cbb      	adds	r3, r7, #2
 8003dc0:	881a      	ldrh	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003dc6:	e003      	b.n	8003dd0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003dc8:	1cbb      	adds	r3, r7, #2
 8003dca:	881a      	ldrh	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003dd0:	46c0      	nop			; (mov r8, r8)
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b002      	add	sp, #8
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e082      	b.n	8003ef0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2241      	movs	r2, #65	; 0x41
 8003dee:	5c9b      	ldrb	r3, [r3, r2]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d107      	bne.n	8003e06 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2240      	movs	r2, #64	; 0x40
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	0018      	movs	r0, r3
 8003e02:	f7fc fc1d 	bl	8000640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2241      	movs	r2, #65	; 0x41
 8003e0a:	2124      	movs	r1, #36	; 0x24
 8003e0c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2101      	movs	r1, #1
 8003e1a:	438a      	bics	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4934      	ldr	r1, [pc, #208]	; (8003ef8 <HAL_I2C_Init+0x120>)
 8003e28:	400a      	ands	r2, r1
 8003e2a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4931      	ldr	r1, [pc, #196]	; (8003efc <HAL_I2C_Init+0x124>)
 8003e38:	400a      	ands	r2, r1
 8003e3a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d108      	bne.n	8003e56 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2180      	movs	r1, #128	; 0x80
 8003e4e:	0209      	lsls	r1, r1, #8
 8003e50:	430a      	orrs	r2, r1
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	e007      	b.n	8003e66 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2184      	movs	r1, #132	; 0x84
 8003e60:	0209      	lsls	r1, r1, #8
 8003e62:	430a      	orrs	r2, r1
 8003e64:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d104      	bne.n	8003e78 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2280      	movs	r2, #128	; 0x80
 8003e74:	0112      	lsls	r2, r2, #4
 8003e76:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	491f      	ldr	r1, [pc, #124]	; (8003f00 <HAL_I2C_Init+0x128>)
 8003e84:	430a      	orrs	r2, r1
 8003e86:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	491a      	ldr	r1, [pc, #104]	; (8003efc <HAL_I2C_Init+0x124>)
 8003e94:	400a      	ands	r2, r1
 8003e96:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69d9      	ldr	r1, [r3, #28]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1a      	ldr	r2, [r3, #32]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2101      	movs	r1, #1
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2241      	movs	r2, #65	; 0x41
 8003edc:	2120      	movs	r1, #32
 8003ede:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2242      	movs	r2, #66	; 0x42
 8003eea:	2100      	movs	r1, #0
 8003eec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b002      	add	sp, #8
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	f0ffffff 	.word	0xf0ffffff
 8003efc:	ffff7fff 	.word	0xffff7fff
 8003f00:	02008000 	.word	0x02008000

08003f04 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b089      	sub	sp, #36	; 0x24
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	0008      	movs	r0, r1
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	0019      	movs	r1, r3
 8003f12:	230a      	movs	r3, #10
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	1c02      	adds	r2, r0, #0
 8003f18:	801a      	strh	r2, [r3, #0]
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	18fb      	adds	r3, r7, r3
 8003f1e:	1c0a      	adds	r2, r1, #0
 8003f20:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2241      	movs	r2, #65	; 0x41
 8003f26:	5c9b      	ldrb	r3, [r3, r2]
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d000      	beq.n	8003f30 <HAL_I2C_Master_Transmit+0x2c>
 8003f2e:	e0e7      	b.n	8004100 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2240      	movs	r2, #64	; 0x40
 8003f34:	5c9b      	ldrb	r3, [r3, r2]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d101      	bne.n	8003f3e <HAL_I2C_Master_Transmit+0x3a>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e0e1      	b.n	8004102 <HAL_I2C_Master_Transmit+0x1fe>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2240      	movs	r2, #64	; 0x40
 8003f42:	2101      	movs	r1, #1
 8003f44:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f46:	f7ff f913 	bl	8003170 <HAL_GetTick>
 8003f4a:	0003      	movs	r3, r0
 8003f4c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f4e:	2380      	movs	r3, #128	; 0x80
 8003f50:	0219      	lsls	r1, r3, #8
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	2319      	movs	r3, #25
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f000 fa04 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8003f60:	1e03      	subs	r3, r0, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0cc      	b.n	8004102 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2241      	movs	r2, #65	; 0x41
 8003f6c:	2121      	movs	r1, #33	; 0x21
 8003f6e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2242      	movs	r2, #66	; 0x42
 8003f74:	2110      	movs	r1, #16
 8003f76:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2208      	movs	r2, #8
 8003f88:	18ba      	adds	r2, r7, r2
 8003f8a:	8812      	ldrh	r2, [r2, #0]
 8003f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2bff      	cmp	r3, #255	; 0xff
 8003f9c:	d911      	bls.n	8003fc2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	22ff      	movs	r2, #255	; 0xff
 8003fa2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	2380      	movs	r3, #128	; 0x80
 8003fac:	045c      	lsls	r4, r3, #17
 8003fae:	230a      	movs	r3, #10
 8003fb0:	18fb      	adds	r3, r7, r3
 8003fb2:	8819      	ldrh	r1, [r3, #0]
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	4b55      	ldr	r3, [pc, #340]	; (800410c <HAL_I2C_Master_Transmit+0x208>)
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	0023      	movs	r3, r4
 8003fbc:	f000 fc2e 	bl	800481c <I2C_TransferConfig>
 8003fc0:	e075      	b.n	80040ae <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	2380      	movs	r3, #128	; 0x80
 8003fd4:	049c      	lsls	r4, r3, #18
 8003fd6:	230a      	movs	r3, #10
 8003fd8:	18fb      	adds	r3, r7, r3
 8003fda:	8819      	ldrh	r1, [r3, #0]
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	4b4b      	ldr	r3, [pc, #300]	; (800410c <HAL_I2C_Master_Transmit+0x208>)
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	0023      	movs	r3, r4
 8003fe4:	f000 fc1a 	bl	800481c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003fe8:	e061      	b.n	80040ae <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f000 fa07 	bl	8004404 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ff6:	1e03      	subs	r3, r0, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e081      	b.n	8004102 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	781a      	ldrb	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d03a      	beq.n	80040ae <HAL_I2C_Master_Transmit+0x1aa>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403c:	2b00      	cmp	r3, #0
 800403e:	d136      	bne.n	80040ae <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	0013      	movs	r3, r2
 800404a:	2200      	movs	r2, #0
 800404c:	2180      	movs	r1, #128	; 0x80
 800404e:	f000 f98b 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8004052:	1e03      	subs	r3, r0, #0
 8004054:	d001      	beq.n	800405a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e053      	b.n	8004102 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	2bff      	cmp	r3, #255	; 0xff
 8004062:	d911      	bls.n	8004088 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	22ff      	movs	r2, #255	; 0xff
 8004068:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406e:	b2da      	uxtb	r2, r3
 8004070:	2380      	movs	r3, #128	; 0x80
 8004072:	045c      	lsls	r4, r3, #17
 8004074:	230a      	movs	r3, #10
 8004076:	18fb      	adds	r3, r7, r3
 8004078:	8819      	ldrh	r1, [r3, #0]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	2300      	movs	r3, #0
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	0023      	movs	r3, r4
 8004082:	f000 fbcb 	bl	800481c <I2C_TransferConfig>
 8004086:	e012      	b.n	80040ae <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004096:	b2da      	uxtb	r2, r3
 8004098:	2380      	movs	r3, #128	; 0x80
 800409a:	049c      	lsls	r4, r3, #18
 800409c:	230a      	movs	r3, #10
 800409e:	18fb      	adds	r3, r7, r3
 80040a0:	8819      	ldrh	r1, [r3, #0]
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	2300      	movs	r3, #0
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	0023      	movs	r3, r4
 80040aa:	f000 fbb7 	bl	800481c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d198      	bne.n	8003fea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	0018      	movs	r0, r3
 80040c0:	f000 f9e6 	bl	8004490 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040c4:	1e03      	subs	r3, r0, #0
 80040c6:	d001      	beq.n	80040cc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e01a      	b.n	8004102 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2220      	movs	r2, #32
 80040d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	490c      	ldr	r1, [pc, #48]	; (8004110 <HAL_I2C_Master_Transmit+0x20c>)
 80040e0:	400a      	ands	r2, r1
 80040e2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2241      	movs	r2, #65	; 0x41
 80040e8:	2120      	movs	r1, #32
 80040ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2242      	movs	r2, #66	; 0x42
 80040f0:	2100      	movs	r1, #0
 80040f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2240      	movs	r2, #64	; 0x40
 80040f8:	2100      	movs	r1, #0
 80040fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e000      	b.n	8004102 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004100:	2302      	movs	r3, #2
  }
}
 8004102:	0018      	movs	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	b007      	add	sp, #28
 8004108:	bd90      	pop	{r4, r7, pc}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	80002000 	.word	0x80002000
 8004110:	fe00e800 	.word	0xfe00e800

08004114 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004114:	b590      	push	{r4, r7, lr}
 8004116:	b089      	sub	sp, #36	; 0x24
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	0008      	movs	r0, r1
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	0019      	movs	r1, r3
 8004122:	230a      	movs	r3, #10
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	1c02      	adds	r2, r0, #0
 8004128:	801a      	strh	r2, [r3, #0]
 800412a:	2308      	movs	r3, #8
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	1c0a      	adds	r2, r1, #0
 8004130:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2241      	movs	r2, #65	; 0x41
 8004136:	5c9b      	ldrb	r3, [r3, r2]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b20      	cmp	r3, #32
 800413c:	d000      	beq.n	8004140 <HAL_I2C_Master_Receive+0x2c>
 800413e:	e0e8      	b.n	8004312 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2240      	movs	r2, #64	; 0x40
 8004144:	5c9b      	ldrb	r3, [r3, r2]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <HAL_I2C_Master_Receive+0x3a>
 800414a:	2302      	movs	r3, #2
 800414c:	e0e2      	b.n	8004314 <HAL_I2C_Master_Receive+0x200>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2240      	movs	r2, #64	; 0x40
 8004152:	2101      	movs	r1, #1
 8004154:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004156:	f7ff f80b 	bl	8003170 <HAL_GetTick>
 800415a:	0003      	movs	r3, r0
 800415c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800415e:	2380      	movs	r3, #128	; 0x80
 8004160:	0219      	lsls	r1, r3, #8
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	2319      	movs	r3, #25
 800416a:	2201      	movs	r2, #1
 800416c:	f000 f8fc 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8004170:	1e03      	subs	r3, r0, #0
 8004172:	d001      	beq.n	8004178 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0cd      	b.n	8004314 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2241      	movs	r2, #65	; 0x41
 800417c:	2122      	movs	r1, #34	; 0x22
 800417e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2242      	movs	r2, #66	; 0x42
 8004184:	2110      	movs	r1, #16
 8004186:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2208      	movs	r2, #8
 8004198:	18ba      	adds	r2, r7, r2
 800419a:	8812      	ldrh	r2, [r2, #0]
 800419c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2bff      	cmp	r3, #255	; 0xff
 80041ac:	d911      	bls.n	80041d2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	22ff      	movs	r2, #255	; 0xff
 80041b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	2380      	movs	r3, #128	; 0x80
 80041bc:	045c      	lsls	r4, r3, #17
 80041be:	230a      	movs	r3, #10
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	8819      	ldrh	r1, [r3, #0]
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	4b55      	ldr	r3, [pc, #340]	; (800431c <HAL_I2C_Master_Receive+0x208>)
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	0023      	movs	r3, r4
 80041cc:	f000 fb26 	bl	800481c <I2C_TransferConfig>
 80041d0:	e076      	b.n	80042c0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	2380      	movs	r3, #128	; 0x80
 80041e4:	049c      	lsls	r4, r3, #18
 80041e6:	230a      	movs	r3, #10
 80041e8:	18fb      	adds	r3, r7, r3
 80041ea:	8819      	ldrh	r1, [r3, #0]
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	4b4b      	ldr	r3, [pc, #300]	; (800431c <HAL_I2C_Master_Receive+0x208>)
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	0023      	movs	r3, r4
 80041f4:	f000 fb12 	bl	800481c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80041f8:	e062      	b.n	80042c0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	0018      	movs	r0, r3
 8004202:	f000 f989 	bl	8004518 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004206:	1e03      	subs	r3, r0, #0
 8004208:	d001      	beq.n	800420e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e082      	b.n	8004314 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	b2d2      	uxtb	r2, r2
 800421a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422a:	3b01      	subs	r3, #1
 800422c:	b29a      	uxth	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d03a      	beq.n	80042c0 <HAL_I2C_Master_Receive+0x1ac>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424e:	2b00      	cmp	r3, #0
 8004250:	d136      	bne.n	80042c0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004252:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	0013      	movs	r3, r2
 800425c:	2200      	movs	r2, #0
 800425e:	2180      	movs	r1, #128	; 0x80
 8004260:	f000 f882 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8004264:	1e03      	subs	r3, r0, #0
 8004266:	d001      	beq.n	800426c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e053      	b.n	8004314 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	2bff      	cmp	r3, #255	; 0xff
 8004274:	d911      	bls.n	800429a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	22ff      	movs	r2, #255	; 0xff
 800427a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004280:	b2da      	uxtb	r2, r3
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	045c      	lsls	r4, r3, #17
 8004286:	230a      	movs	r3, #10
 8004288:	18fb      	adds	r3, r7, r3
 800428a:	8819      	ldrh	r1, [r3, #0]
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	2300      	movs	r3, #0
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	0023      	movs	r3, r4
 8004294:	f000 fac2 	bl	800481c <I2C_TransferConfig>
 8004298:	e012      	b.n	80042c0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	2380      	movs	r3, #128	; 0x80
 80042ac:	049c      	lsls	r4, r3, #18
 80042ae:	230a      	movs	r3, #10
 80042b0:	18fb      	adds	r3, r7, r3
 80042b2:	8819      	ldrh	r1, [r3, #0]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	2300      	movs	r3, #0
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	0023      	movs	r3, r4
 80042bc:	f000 faae 	bl	800481c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d197      	bne.n	80041fa <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	0018      	movs	r0, r3
 80042d2:	f000 f8dd 	bl	8004490 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042d6:	1e03      	subs	r3, r0, #0
 80042d8:	d001      	beq.n	80042de <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e01a      	b.n	8004314 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2220      	movs	r2, #32
 80042e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	490b      	ldr	r1, [pc, #44]	; (8004320 <HAL_I2C_Master_Receive+0x20c>)
 80042f2:	400a      	ands	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2241      	movs	r2, #65	; 0x41
 80042fa:	2120      	movs	r1, #32
 80042fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2242      	movs	r2, #66	; 0x42
 8004302:	2100      	movs	r1, #0
 8004304:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2240      	movs	r2, #64	; 0x40
 800430a:	2100      	movs	r1, #0
 800430c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	e000      	b.n	8004314 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004312:	2302      	movs	r3, #2
  }
}
 8004314:	0018      	movs	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	b007      	add	sp, #28
 800431a:	bd90      	pop	{r4, r7, pc}
 800431c:	80002400 	.word	0x80002400
 8004320:	fe00e800 	.word	0xfe00e800

08004324 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	2202      	movs	r2, #2
 8004334:	4013      	ands	r3, r2
 8004336:	2b02      	cmp	r3, #2
 8004338:	d103      	bne.n	8004342 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2200      	movs	r2, #0
 8004340:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	2201      	movs	r2, #1
 800434a:	4013      	ands	r3, r2
 800434c:	2b01      	cmp	r3, #1
 800434e:	d007      	beq.n	8004360 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699a      	ldr	r2, [r3, #24]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2101      	movs	r1, #1
 800435c:	430a      	orrs	r2, r1
 800435e:	619a      	str	r2, [r3, #24]
  }
}
 8004360:	46c0      	nop			; (mov r8, r8)
 8004362:	46bd      	mov	sp, r7
 8004364:	b002      	add	sp, #8
 8004366:	bd80      	pop	{r7, pc}

08004368 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	1dfb      	adds	r3, r7, #7
 8004376:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004378:	e030      	b.n	80043dc <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	3301      	adds	r3, #1
 800437e:	d02d      	beq.n	80043dc <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004380:	f7fe fef6 	bl	8003170 <HAL_GetTick>
 8004384:	0002      	movs	r2, r0
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d302      	bcc.n	8004396 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d122      	bne.n	80043dc <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	4013      	ands	r3, r2
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	425a      	negs	r2, r3
 80043a6:	4153      	adcs	r3, r2
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	001a      	movs	r2, r3
 80043ac:	1dfb      	adds	r3, r7, #7
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d113      	bne.n	80043dc <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b8:	2220      	movs	r2, #32
 80043ba:	431a      	orrs	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2241      	movs	r2, #65	; 0x41
 80043c4:	2120      	movs	r1, #32
 80043c6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2242      	movs	r2, #66	; 0x42
 80043cc:	2100      	movs	r1, #0
 80043ce:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2240      	movs	r2, #64	; 0x40
 80043d4:	2100      	movs	r1, #0
 80043d6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e00f      	b.n	80043fc <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	4013      	ands	r3, r2
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	425a      	negs	r2, r3
 80043ec:	4153      	adcs	r3, r2
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	001a      	movs	r2, r3
 80043f2:	1dfb      	adds	r3, r7, #7
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d0bf      	beq.n	800437a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	0018      	movs	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	b004      	add	sp, #16
 8004402:	bd80      	pop	{r7, pc}

08004404 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004410:	e032      	b.n	8004478 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	0018      	movs	r0, r3
 800441a:	f000 f8ff 	bl	800461c <I2C_IsErrorOccurred>
 800441e:	1e03      	subs	r3, r0, #0
 8004420:	d001      	beq.n	8004426 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e030      	b.n	8004488 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	3301      	adds	r3, #1
 800442a:	d025      	beq.n	8004478 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442c:	f7fe fea0 	bl	8003170 <HAL_GetTick>
 8004430:	0002      	movs	r2, r0
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	429a      	cmp	r2, r3
 800443a:	d302      	bcc.n	8004442 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d11a      	bne.n	8004478 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	2202      	movs	r2, #2
 800444a:	4013      	ands	r3, r2
 800444c:	2b02      	cmp	r3, #2
 800444e:	d013      	beq.n	8004478 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004454:	2220      	movs	r2, #32
 8004456:	431a      	orrs	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2241      	movs	r2, #65	; 0x41
 8004460:	2120      	movs	r1, #32
 8004462:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2242      	movs	r2, #66	; 0x42
 8004468:	2100      	movs	r1, #0
 800446a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2240      	movs	r2, #64	; 0x40
 8004470:	2100      	movs	r1, #0
 8004472:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e007      	b.n	8004488 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	2202      	movs	r2, #2
 8004480:	4013      	ands	r3, r2
 8004482:	2b02      	cmp	r3, #2
 8004484:	d1c5      	bne.n	8004412 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	0018      	movs	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	b004      	add	sp, #16
 800448e:	bd80      	pop	{r7, pc}

08004490 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800449c:	e02f      	b.n	80044fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	0018      	movs	r0, r3
 80044a6:	f000 f8b9 	bl	800461c <I2C_IsErrorOccurred>
 80044aa:	1e03      	subs	r3, r0, #0
 80044ac:	d001      	beq.n	80044b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e02d      	b.n	800450e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b2:	f7fe fe5d 	bl	8003170 <HAL_GetTick>
 80044b6:	0002      	movs	r2, r0
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d302      	bcc.n	80044c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d11a      	bne.n	80044fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	2220      	movs	r2, #32
 80044d0:	4013      	ands	r3, r2
 80044d2:	2b20      	cmp	r3, #32
 80044d4:	d013      	beq.n	80044fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044da:	2220      	movs	r2, #32
 80044dc:	431a      	orrs	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2241      	movs	r2, #65	; 0x41
 80044e6:	2120      	movs	r1, #32
 80044e8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2242      	movs	r2, #66	; 0x42
 80044ee:	2100      	movs	r1, #0
 80044f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2240      	movs	r2, #64	; 0x40
 80044f6:	2100      	movs	r1, #0
 80044f8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e007      	b.n	800450e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	2220      	movs	r2, #32
 8004506:	4013      	ands	r3, r2
 8004508:	2b20      	cmp	r3, #32
 800450a:	d1c8      	bne.n	800449e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	0018      	movs	r0, r3
 8004510:	46bd      	mov	sp, r7
 8004512:	b004      	add	sp, #16
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004524:	e06b      	b.n	80045fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	68b9      	ldr	r1, [r7, #8]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	0018      	movs	r0, r3
 800452e:	f000 f875 	bl	800461c <I2C_IsErrorOccurred>
 8004532:	1e03      	subs	r3, r0, #0
 8004534:	d001      	beq.n	800453a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e069      	b.n	800460e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	2220      	movs	r2, #32
 8004542:	4013      	ands	r3, r2
 8004544:	2b20      	cmp	r3, #32
 8004546:	d138      	bne.n	80045ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	2204      	movs	r2, #4
 8004550:	4013      	ands	r3, r2
 8004552:	2b04      	cmp	r3, #4
 8004554:	d105      	bne.n	8004562 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	e055      	b.n	800460e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	2210      	movs	r2, #16
 800456a:	4013      	ands	r3, r2
 800456c:	2b10      	cmp	r3, #16
 800456e:	d107      	bne.n	8004580 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2210      	movs	r2, #16
 8004576:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2204      	movs	r2, #4
 800457c:	645a      	str	r2, [r3, #68]	; 0x44
 800457e:	e002      	b.n	8004586 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2220      	movs	r2, #32
 800458c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	491f      	ldr	r1, [pc, #124]	; (8004618 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800459a:	400a      	ands	r2, r1
 800459c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2241      	movs	r2, #65	; 0x41
 80045a2:	2120      	movs	r1, #32
 80045a4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2242      	movs	r2, #66	; 0x42
 80045aa:	2100      	movs	r1, #0
 80045ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2240      	movs	r2, #64	; 0x40
 80045b2:	2100      	movs	r1, #0
 80045b4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e029      	b.n	800460e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ba:	f7fe fdd9 	bl	8003170 <HAL_GetTick>
 80045be:	0002      	movs	r2, r0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d302      	bcc.n	80045d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d116      	bne.n	80045fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	2204      	movs	r2, #4
 80045d8:	4013      	ands	r3, r2
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d00f      	beq.n	80045fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e2:	2220      	movs	r2, #32
 80045e4:	431a      	orrs	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2241      	movs	r2, #65	; 0x41
 80045ee:	2120      	movs	r1, #32
 80045f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2240      	movs	r2, #64	; 0x40
 80045f6:	2100      	movs	r1, #0
 80045f8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e007      	b.n	800460e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2204      	movs	r2, #4
 8004606:	4013      	ands	r3, r2
 8004608:	2b04      	cmp	r3, #4
 800460a:	d18c      	bne.n	8004526 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	0018      	movs	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	b004      	add	sp, #16
 8004614:	bd80      	pop	{r7, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	fe00e800 	.word	0xfe00e800

0800461c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800461c:	b590      	push	{r4, r7, lr}
 800461e:	b08b      	sub	sp, #44	; 0x2c
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004628:	2327      	movs	r3, #39	; 0x27
 800462a:	18fb      	adds	r3, r7, r3
 800462c:	2200      	movs	r2, #0
 800462e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	2210      	movs	r2, #16
 8004644:	4013      	ands	r3, r2
 8004646:	d100      	bne.n	800464a <I2C_IsErrorOccurred+0x2e>
 8004648:	e082      	b.n	8004750 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2210      	movs	r2, #16
 8004650:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004652:	e060      	b.n	8004716 <I2C_IsErrorOccurred+0xfa>
 8004654:	2427      	movs	r4, #39	; 0x27
 8004656:	193b      	adds	r3, r7, r4
 8004658:	193a      	adds	r2, r7, r4
 800465a:	7812      	ldrb	r2, [r2, #0]
 800465c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	3301      	adds	r3, #1
 8004662:	d058      	beq.n	8004716 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004664:	f7fe fd84 	bl	8003170 <HAL_GetTick>
 8004668:	0002      	movs	r2, r0
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	429a      	cmp	r2, r3
 8004672:	d306      	bcc.n	8004682 <I2C_IsErrorOccurred+0x66>
 8004674:	193b      	adds	r3, r7, r4
 8004676:	193a      	adds	r2, r7, r4
 8004678:	7812      	ldrb	r2, [r2, #0]
 800467a:	701a      	strb	r2, [r3, #0]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d149      	bne.n	8004716 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	2380      	movs	r3, #128	; 0x80
 800468a:	01db      	lsls	r3, r3, #7
 800468c:	4013      	ands	r3, r2
 800468e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004690:	2013      	movs	r0, #19
 8004692:	183b      	adds	r3, r7, r0
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	2142      	movs	r1, #66	; 0x42
 8004698:	5c52      	ldrb	r2, [r2, r1]
 800469a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699a      	ldr	r2, [r3, #24]
 80046a2:	2380      	movs	r3, #128	; 0x80
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	401a      	ands	r2, r3
 80046a8:	2380      	movs	r3, #128	; 0x80
 80046aa:	021b      	lsls	r3, r3, #8
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d126      	bne.n	80046fe <I2C_IsErrorOccurred+0xe2>
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	2380      	movs	r3, #128	; 0x80
 80046b4:	01db      	lsls	r3, r3, #7
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d021      	beq.n	80046fe <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80046ba:	183b      	adds	r3, r7, r0
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d01d      	beq.n	80046fe <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2180      	movs	r1, #128	; 0x80
 80046ce:	01c9      	lsls	r1, r1, #7
 80046d0:	430a      	orrs	r2, r1
 80046d2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80046d4:	f7fe fd4c 	bl	8003170 <HAL_GetTick>
 80046d8:	0003      	movs	r3, r0
 80046da:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046dc:	e00f      	b.n	80046fe <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046de:	f7fe fd47 	bl	8003170 <HAL_GetTick>
 80046e2:	0002      	movs	r2, r0
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b19      	cmp	r3, #25
 80046ea:	d908      	bls.n	80046fe <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	2220      	movs	r2, #32
 80046f0:	4313      	orrs	r3, r2
 80046f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80046f4:	2327      	movs	r3, #39	; 0x27
 80046f6:	18fb      	adds	r3, r7, r3
 80046f8:	2201      	movs	r2, #1
 80046fa:	701a      	strb	r2, [r3, #0]

              break;
 80046fc:	e00b      	b.n	8004716 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	2220      	movs	r2, #32
 8004706:	4013      	ands	r3, r2
 8004708:	2127      	movs	r1, #39	; 0x27
 800470a:	187a      	adds	r2, r7, r1
 800470c:	1879      	adds	r1, r7, r1
 800470e:	7809      	ldrb	r1, [r1, #0]
 8004710:	7011      	strb	r1, [r2, #0]
 8004712:	2b20      	cmp	r3, #32
 8004714:	d1e3      	bne.n	80046de <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	2220      	movs	r2, #32
 800471e:	4013      	ands	r3, r2
 8004720:	2b20      	cmp	r3, #32
 8004722:	d004      	beq.n	800472e <I2C_IsErrorOccurred+0x112>
 8004724:	2327      	movs	r3, #39	; 0x27
 8004726:	18fb      	adds	r3, r7, r3
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d092      	beq.n	8004654 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800472e:	2327      	movs	r3, #39	; 0x27
 8004730:	18fb      	adds	r3, r7, r3
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d103      	bne.n	8004740 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2220      	movs	r2, #32
 800473e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	2204      	movs	r2, #4
 8004744:	4313      	orrs	r3, r2
 8004746:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004748:	2327      	movs	r3, #39	; 0x27
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	2201      	movs	r2, #1
 800474e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	2380      	movs	r3, #128	; 0x80
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	4013      	ands	r3, r2
 8004760:	d00c      	beq.n	800477c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	2201      	movs	r2, #1
 8004766:	4313      	orrs	r3, r2
 8004768:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2280      	movs	r2, #128	; 0x80
 8004770:	0052      	lsls	r2, r2, #1
 8004772:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004774:	2327      	movs	r3, #39	; 0x27
 8004776:	18fb      	adds	r3, r7, r3
 8004778:	2201      	movs	r2, #1
 800477a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	2380      	movs	r3, #128	; 0x80
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	4013      	ands	r3, r2
 8004784:	d00c      	beq.n	80047a0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	2208      	movs	r2, #8
 800478a:	4313      	orrs	r3, r2
 800478c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2280      	movs	r2, #128	; 0x80
 8004794:	00d2      	lsls	r2, r2, #3
 8004796:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004798:	2327      	movs	r3, #39	; 0x27
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	2201      	movs	r2, #1
 800479e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	2380      	movs	r3, #128	; 0x80
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4013      	ands	r3, r2
 80047a8:	d00c      	beq.n	80047c4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	2202      	movs	r2, #2
 80047ae:	4313      	orrs	r3, r2
 80047b0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2280      	movs	r2, #128	; 0x80
 80047b8:	0092      	lsls	r2, r2, #2
 80047ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047bc:	2327      	movs	r3, #39	; 0x27
 80047be:	18fb      	adds	r3, r7, r3
 80047c0:	2201      	movs	r2, #1
 80047c2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80047c4:	2327      	movs	r3, #39	; 0x27
 80047c6:	18fb      	adds	r3, r7, r3
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d01d      	beq.n	800480a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	0018      	movs	r0, r3
 80047d2:	f7ff fda7 	bl	8004324 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	490d      	ldr	r1, [pc, #52]	; (8004818 <I2C_IsErrorOccurred+0x1fc>)
 80047e2:	400a      	ands	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	431a      	orrs	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2241      	movs	r2, #65	; 0x41
 80047f6:	2120      	movs	r1, #32
 80047f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2242      	movs	r2, #66	; 0x42
 80047fe:	2100      	movs	r1, #0
 8004800:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2240      	movs	r2, #64	; 0x40
 8004806:	2100      	movs	r1, #0
 8004808:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800480a:	2327      	movs	r3, #39	; 0x27
 800480c:	18fb      	adds	r3, r7, r3
 800480e:	781b      	ldrb	r3, [r3, #0]
}
 8004810:	0018      	movs	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	b00b      	add	sp, #44	; 0x2c
 8004816:	bd90      	pop	{r4, r7, pc}
 8004818:	fe00e800 	.word	0xfe00e800

0800481c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800481c:	b590      	push	{r4, r7, lr}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	0008      	movs	r0, r1
 8004826:	0011      	movs	r1, r2
 8004828:	607b      	str	r3, [r7, #4]
 800482a:	240a      	movs	r4, #10
 800482c:	193b      	adds	r3, r7, r4
 800482e:	1c02      	adds	r2, r0, #0
 8004830:	801a      	strh	r2, [r3, #0]
 8004832:	2009      	movs	r0, #9
 8004834:	183b      	adds	r3, r7, r0
 8004836:	1c0a      	adds	r2, r1, #0
 8004838:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800483a:	193b      	adds	r3, r7, r4
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	059b      	lsls	r3, r3, #22
 8004840:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004842:	183b      	adds	r3, r7, r0
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	0419      	lsls	r1, r3, #16
 8004848:	23ff      	movs	r3, #255	; 0xff
 800484a:	041b      	lsls	r3, r3, #16
 800484c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800484e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004856:	4313      	orrs	r3, r2
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	085b      	lsrs	r3, r3, #1
 800485c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004866:	0d51      	lsrs	r1, r2, #21
 8004868:	2280      	movs	r2, #128	; 0x80
 800486a:	00d2      	lsls	r2, r2, #3
 800486c:	400a      	ands	r2, r1
 800486e:	4907      	ldr	r1, [pc, #28]	; (800488c <I2C_TransferConfig+0x70>)
 8004870:	430a      	orrs	r2, r1
 8004872:	43d2      	mvns	r2, r2
 8004874:	401a      	ands	r2, r3
 8004876:	0011      	movs	r1, r2
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	430a      	orrs	r2, r1
 8004880:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	46bd      	mov	sp, r7
 8004886:	b007      	add	sp, #28
 8004888:	bd90      	pop	{r4, r7, pc}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	03ff63ff 	.word	0x03ff63ff

08004890 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2241      	movs	r2, #65	; 0x41
 800489e:	5c9b      	ldrb	r3, [r3, r2]
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b20      	cmp	r3, #32
 80048a4:	d138      	bne.n	8004918 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2240      	movs	r2, #64	; 0x40
 80048aa:	5c9b      	ldrb	r3, [r3, r2]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e032      	b.n	800491a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2240      	movs	r2, #64	; 0x40
 80048b8:	2101      	movs	r1, #1
 80048ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2241      	movs	r2, #65	; 0x41
 80048c0:	2124      	movs	r1, #36	; 0x24
 80048c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2101      	movs	r1, #1
 80048d0:	438a      	bics	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4911      	ldr	r1, [pc, #68]	; (8004924 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80048e0:	400a      	ands	r2, r1
 80048e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6819      	ldr	r1, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2101      	movs	r1, #1
 8004900:	430a      	orrs	r2, r1
 8004902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2241      	movs	r2, #65	; 0x41
 8004908:	2120      	movs	r1, #32
 800490a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2240      	movs	r2, #64	; 0x40
 8004910:	2100      	movs	r1, #0
 8004912:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	e000      	b.n	800491a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004918:	2302      	movs	r3, #2
  }
}
 800491a:	0018      	movs	r0, r3
 800491c:	46bd      	mov	sp, r7
 800491e:	b002      	add	sp, #8
 8004920:	bd80      	pop	{r7, pc}
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	ffffefff 	.word	0xffffefff

08004928 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2241      	movs	r2, #65	; 0x41
 8004936:	5c9b      	ldrb	r3, [r3, r2]
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b20      	cmp	r3, #32
 800493c:	d139      	bne.n	80049b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2240      	movs	r2, #64	; 0x40
 8004942:	5c9b      	ldrb	r3, [r3, r2]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004948:	2302      	movs	r3, #2
 800494a:	e033      	b.n	80049b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2240      	movs	r2, #64	; 0x40
 8004950:	2101      	movs	r1, #1
 8004952:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2241      	movs	r2, #65	; 0x41
 8004958:	2124      	movs	r1, #36	; 0x24
 800495a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2101      	movs	r1, #1
 8004968:	438a      	bics	r2, r1
 800496a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4a11      	ldr	r2, [pc, #68]	; (80049bc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004978:	4013      	ands	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	021b      	lsls	r3, r3, #8
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2101      	movs	r1, #1
 800499a:	430a      	orrs	r2, r1
 800499c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2241      	movs	r2, #65	; 0x41
 80049a2:	2120      	movs	r1, #32
 80049a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2240      	movs	r2, #64	; 0x40
 80049aa:	2100      	movs	r1, #0
 80049ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	e000      	b.n	80049b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049b2:	2302      	movs	r3, #2
  }
}
 80049b4:	0018      	movs	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b004      	add	sp, #16
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	fffff0ff 	.word	0xfffff0ff

080049c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c0:	b5b0      	push	{r4, r5, r7, lr}
 80049c2:	b08a      	sub	sp, #40	; 0x28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d102      	bne.n	80049d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f000 fb6c 	bl	80050ac <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049d4:	4bc8      	ldr	r3, [pc, #800]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	220c      	movs	r2, #12
 80049da:	4013      	ands	r3, r2
 80049dc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049de:	4bc6      	ldr	r3, [pc, #792]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	2380      	movs	r3, #128	; 0x80
 80049e4:	025b      	lsls	r3, r3, #9
 80049e6:	4013      	ands	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2201      	movs	r2, #1
 80049f0:	4013      	ands	r3, r2
 80049f2:	d100      	bne.n	80049f6 <HAL_RCC_OscConfig+0x36>
 80049f4:	e07d      	b.n	8004af2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d007      	beq.n	8004a0c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	2b0c      	cmp	r3, #12
 8004a00:	d112      	bne.n	8004a28 <HAL_RCC_OscConfig+0x68>
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	2380      	movs	r3, #128	; 0x80
 8004a06:	025b      	lsls	r3, r3, #9
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d10d      	bne.n	8004a28 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a0c:	4bba      	ldr	r3, [pc, #744]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	2380      	movs	r3, #128	; 0x80
 8004a12:	029b      	lsls	r3, r3, #10
 8004a14:	4013      	ands	r3, r2
 8004a16:	d100      	bne.n	8004a1a <HAL_RCC_OscConfig+0x5a>
 8004a18:	e06a      	b.n	8004af0 <HAL_RCC_OscConfig+0x130>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d166      	bne.n	8004af0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f000 fb42 	bl	80050ac <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	2380      	movs	r3, #128	; 0x80
 8004a2e:	025b      	lsls	r3, r3, #9
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d107      	bne.n	8004a44 <HAL_RCC_OscConfig+0x84>
 8004a34:	4bb0      	ldr	r3, [pc, #704]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	4baf      	ldr	r3, [pc, #700]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004a3a:	2180      	movs	r1, #128	; 0x80
 8004a3c:	0249      	lsls	r1, r1, #9
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	e027      	b.n	8004a94 <HAL_RCC_OscConfig+0xd4>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	23a0      	movs	r3, #160	; 0xa0
 8004a4a:	02db      	lsls	r3, r3, #11
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d10e      	bne.n	8004a6e <HAL_RCC_OscConfig+0xae>
 8004a50:	4ba9      	ldr	r3, [pc, #676]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	4ba8      	ldr	r3, [pc, #672]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004a56:	2180      	movs	r1, #128	; 0x80
 8004a58:	02c9      	lsls	r1, r1, #11
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	4ba6      	ldr	r3, [pc, #664]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4ba5      	ldr	r3, [pc, #660]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004a64:	2180      	movs	r1, #128	; 0x80
 8004a66:	0249      	lsls	r1, r1, #9
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	e012      	b.n	8004a94 <HAL_RCC_OscConfig+0xd4>
 8004a6e:	4ba2      	ldr	r3, [pc, #648]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	4ba1      	ldr	r3, [pc, #644]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004a74:	49a1      	ldr	r1, [pc, #644]	; (8004cfc <HAL_RCC_OscConfig+0x33c>)
 8004a76:	400a      	ands	r2, r1
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	4b9f      	ldr	r3, [pc, #636]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	2380      	movs	r3, #128	; 0x80
 8004a80:	025b      	lsls	r3, r3, #9
 8004a82:	4013      	ands	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4b9b      	ldr	r3, [pc, #620]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	4b9a      	ldr	r3, [pc, #616]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004a8e:	499c      	ldr	r1, [pc, #624]	; (8004d00 <HAL_RCC_OscConfig+0x340>)
 8004a90:	400a      	ands	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d014      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9c:	f7fe fb68 	bl	8003170 <HAL_GetTick>
 8004aa0:	0003      	movs	r3, r0
 8004aa2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aa6:	f7fe fb63 	bl	8003170 <HAL_GetTick>
 8004aaa:	0002      	movs	r2, r0
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b64      	cmp	r3, #100	; 0x64
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e2f9      	b.n	80050ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ab8:	4b8f      	ldr	r3, [pc, #572]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	2380      	movs	r3, #128	; 0x80
 8004abe:	029b      	lsls	r3, r3, #10
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	d0f0      	beq.n	8004aa6 <HAL_RCC_OscConfig+0xe6>
 8004ac4:	e015      	b.n	8004af2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac6:	f7fe fb53 	bl	8003170 <HAL_GetTick>
 8004aca:	0003      	movs	r3, r0
 8004acc:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ad0:	f7fe fb4e 	bl	8003170 <HAL_GetTick>
 8004ad4:	0002      	movs	r2, r0
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b64      	cmp	r3, #100	; 0x64
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e2e4      	b.n	80050ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ae2:	4b85      	ldr	r3, [pc, #532]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	2380      	movs	r3, #128	; 0x80
 8004ae8:	029b      	lsls	r3, r3, #10
 8004aea:	4013      	ands	r3, r2
 8004aec:	d1f0      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x110>
 8004aee:	e000      	b.n	8004af2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2202      	movs	r2, #2
 8004af8:	4013      	ands	r3, r2
 8004afa:	d100      	bne.n	8004afe <HAL_RCC_OscConfig+0x13e>
 8004afc:	e099      	b.n	8004c32 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	2220      	movs	r2, #32
 8004b08:	4013      	ands	r3, r2
 8004b0a:	d009      	beq.n	8004b20 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004b0c:	4b7a      	ldr	r3, [pc, #488]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	4b79      	ldr	r3, [pc, #484]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004b12:	2120      	movs	r1, #32
 8004b14:	430a      	orrs	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	4393      	bics	r3, r2
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d005      	beq.n	8004b32 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	2b0c      	cmp	r3, #12
 8004b2a:	d13e      	bne.n	8004baa <HAL_RCC_OscConfig+0x1ea>
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d13b      	bne.n	8004baa <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004b32:	4b71      	ldr	r3, [pc, #452]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2204      	movs	r2, #4
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d004      	beq.n	8004b46 <HAL_RCC_OscConfig+0x186>
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e2b2      	b.n	80050ac <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b46:	4b6c      	ldr	r3, [pc, #432]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	4a6e      	ldr	r2, [pc, #440]	; (8004d04 <HAL_RCC_OscConfig+0x344>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	0019      	movs	r1, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	021a      	lsls	r2, r3, #8
 8004b56:	4b68      	ldr	r3, [pc, #416]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004b5c:	4b66      	ldr	r3, [pc, #408]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2209      	movs	r2, #9
 8004b62:	4393      	bics	r3, r2
 8004b64:	0019      	movs	r1, r3
 8004b66:	4b64      	ldr	r3, [pc, #400]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b6e:	f000 fbeb 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 8004b72:	0001      	movs	r1, r0
 8004b74:	4b60      	ldr	r3, [pc, #384]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	091b      	lsrs	r3, r3, #4
 8004b7a:	220f      	movs	r2, #15
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	4a62      	ldr	r2, [pc, #392]	; (8004d08 <HAL_RCC_OscConfig+0x348>)
 8004b80:	5cd3      	ldrb	r3, [r2, r3]
 8004b82:	000a      	movs	r2, r1
 8004b84:	40da      	lsrs	r2, r3
 8004b86:	4b61      	ldr	r3, [pc, #388]	; (8004d0c <HAL_RCC_OscConfig+0x34c>)
 8004b88:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004b8a:	4b61      	ldr	r3, [pc, #388]	; (8004d10 <HAL_RCC_OscConfig+0x350>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2513      	movs	r5, #19
 8004b90:	197c      	adds	r4, r7, r5
 8004b92:	0018      	movs	r0, r3
 8004b94:	f7fe faa6 	bl	80030e4 <HAL_InitTick>
 8004b98:	0003      	movs	r3, r0
 8004b9a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004b9c:	197b      	adds	r3, r7, r5
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d046      	beq.n	8004c32 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004ba4:	197b      	adds	r3, r7, r5
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	e280      	b.n	80050ac <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d027      	beq.n	8004c00 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004bb0:	4b51      	ldr	r3, [pc, #324]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2209      	movs	r2, #9
 8004bb6:	4393      	bics	r3, r2
 8004bb8:	0019      	movs	r1, r3
 8004bba:	4b4f      	ldr	r3, [pc, #316]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc2:	f7fe fad5 	bl	8003170 <HAL_GetTick>
 8004bc6:	0003      	movs	r3, r0
 8004bc8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bcc:	f7fe fad0 	bl	8003170 <HAL_GetTick>
 8004bd0:	0002      	movs	r2, r0
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e266      	b.n	80050ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bde:	4b46      	ldr	r3, [pc, #280]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2204      	movs	r2, #4
 8004be4:	4013      	ands	r3, r2
 8004be6:	d0f1      	beq.n	8004bcc <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be8:	4b43      	ldr	r3, [pc, #268]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	4a45      	ldr	r2, [pc, #276]	; (8004d04 <HAL_RCC_OscConfig+0x344>)
 8004bee:	4013      	ands	r3, r2
 8004bf0:	0019      	movs	r1, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	021a      	lsls	r2, r3, #8
 8004bf8:	4b3f      	ldr	r3, [pc, #252]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
 8004bfe:	e018      	b.n	8004c32 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c00:	4b3d      	ldr	r3, [pc, #244]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	4b3c      	ldr	r3, [pc, #240]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004c06:	2101      	movs	r1, #1
 8004c08:	438a      	bics	r2, r1
 8004c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0c:	f7fe fab0 	bl	8003170 <HAL_GetTick>
 8004c10:	0003      	movs	r3, r0
 8004c12:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c16:	f7fe faab 	bl	8003170 <HAL_GetTick>
 8004c1a:	0002      	movs	r2, r0
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e241      	b.n	80050ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c28:	4b33      	ldr	r3, [pc, #204]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2204      	movs	r2, #4
 8004c2e:	4013      	ands	r3, r2
 8004c30:	d1f1      	bne.n	8004c16 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2210      	movs	r2, #16
 8004c38:	4013      	ands	r3, r2
 8004c3a:	d100      	bne.n	8004c3e <HAL_RCC_OscConfig+0x27e>
 8004c3c:	e0a1      	b.n	8004d82 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d140      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c44:	4b2c      	ldr	r3, [pc, #176]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	2380      	movs	r3, #128	; 0x80
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d005      	beq.n	8004c5c <HAL_RCC_OscConfig+0x29c>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e227      	b.n	80050ac <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c5c:	4b26      	ldr	r3, [pc, #152]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	4a2c      	ldr	r2, [pc, #176]	; (8004d14 <HAL_RCC_OscConfig+0x354>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	0019      	movs	r1, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1a      	ldr	r2, [r3, #32]
 8004c6a:	4b23      	ldr	r3, [pc, #140]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c70:	4b21      	ldr	r3, [pc, #132]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	0a19      	lsrs	r1, r3, #8
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	061a      	lsls	r2, r3, #24
 8004c7e:	4b1e      	ldr	r3, [pc, #120]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004c80:	430a      	orrs	r2, r1
 8004c82:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	0b5b      	lsrs	r3, r3, #13
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	2280      	movs	r2, #128	; 0x80
 8004c8e:	0212      	lsls	r2, r2, #8
 8004c90:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004c92:	4b19      	ldr	r3, [pc, #100]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	091b      	lsrs	r3, r3, #4
 8004c98:	210f      	movs	r1, #15
 8004c9a:	400b      	ands	r3, r1
 8004c9c:	491a      	ldr	r1, [pc, #104]	; (8004d08 <HAL_RCC_OscConfig+0x348>)
 8004c9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ca0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004ca2:	4b1a      	ldr	r3, [pc, #104]	; (8004d0c <HAL_RCC_OscConfig+0x34c>)
 8004ca4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004ca6:	4b1a      	ldr	r3, [pc, #104]	; (8004d10 <HAL_RCC_OscConfig+0x350>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2513      	movs	r5, #19
 8004cac:	197c      	adds	r4, r7, r5
 8004cae:	0018      	movs	r0, r3
 8004cb0:	f7fe fa18 	bl	80030e4 <HAL_InitTick>
 8004cb4:	0003      	movs	r3, r0
 8004cb6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004cb8:	197b      	adds	r3, r7, r5
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d060      	beq.n	8004d82 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8004cc0:	197b      	adds	r3, r7, r5
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	e1f2      	b.n	80050ac <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d03f      	beq.n	8004d4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cce:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <HAL_RCC_OscConfig+0x338>)
 8004cd4:	2180      	movs	r1, #128	; 0x80
 8004cd6:	0049      	lsls	r1, r1, #1
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cdc:	f7fe fa48 	bl	8003170 <HAL_GetTick>
 8004ce0:	0003      	movs	r3, r0
 8004ce2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004ce4:	e018      	b.n	8004d18 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ce6:	f7fe fa43 	bl	8003170 <HAL_GetTick>
 8004cea:	0002      	movs	r2, r0
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d911      	bls.n	8004d18 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e1d9      	b.n	80050ac <HAL_RCC_OscConfig+0x6ec>
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	fffeffff 	.word	0xfffeffff
 8004d00:	fffbffff 	.word	0xfffbffff
 8004d04:	ffffe0ff 	.word	0xffffe0ff
 8004d08:	08007118 	.word	0x08007118
 8004d0c:	20000010 	.word	0x20000010
 8004d10:	2000002c 	.word	0x2000002c
 8004d14:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d18:	4bc9      	ldr	r3, [pc, #804]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	2380      	movs	r3, #128	; 0x80
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4013      	ands	r3, r2
 8004d22:	d0e0      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d24:	4bc6      	ldr	r3, [pc, #792]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	4ac6      	ldr	r2, [pc, #792]	; (8005044 <HAL_RCC_OscConfig+0x684>)
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	0019      	movs	r1, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1a      	ldr	r2, [r3, #32]
 8004d32:	4bc3      	ldr	r3, [pc, #780]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004d34:	430a      	orrs	r2, r1
 8004d36:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d38:	4bc1      	ldr	r3, [pc, #772]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	021b      	lsls	r3, r3, #8
 8004d3e:	0a19      	lsrs	r1, r3, #8
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	061a      	lsls	r2, r3, #24
 8004d46:	4bbe      	ldr	r3, [pc, #760]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	605a      	str	r2, [r3, #4]
 8004d4c:	e019      	b.n	8004d82 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d4e:	4bbc      	ldr	r3, [pc, #752]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4bbb      	ldr	r3, [pc, #748]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004d54:	49bc      	ldr	r1, [pc, #752]	; (8005048 <HAL_RCC_OscConfig+0x688>)
 8004d56:	400a      	ands	r2, r1
 8004d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5a:	f7fe fa09 	bl	8003170 <HAL_GetTick>
 8004d5e:	0003      	movs	r3, r0
 8004d60:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d64:	f7fe fa04 	bl	8003170 <HAL_GetTick>
 8004d68:	0002      	movs	r2, r0
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e19a      	b.n	80050ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004d76:	4bb2      	ldr	r3, [pc, #712]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	2380      	movs	r3, #128	; 0x80
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4013      	ands	r3, r2
 8004d80:	d1f0      	bne.n	8004d64 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2208      	movs	r2, #8
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d036      	beq.n	8004dfa <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d019      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d94:	4baa      	ldr	r3, [pc, #680]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004d96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d98:	4ba9      	ldr	r3, [pc, #676]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da0:	f7fe f9e6 	bl	8003170 <HAL_GetTick>
 8004da4:	0003      	movs	r3, r0
 8004da6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004daa:	f7fe f9e1 	bl	8003170 <HAL_GetTick>
 8004dae:	0002      	movs	r2, r0
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e177      	b.n	80050ac <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004dbc:	4ba0      	ldr	r3, [pc, #640]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d0f1      	beq.n	8004daa <HAL_RCC_OscConfig+0x3ea>
 8004dc6:	e018      	b.n	8004dfa <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dc8:	4b9d      	ldr	r3, [pc, #628]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004dca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dcc:	4b9c      	ldr	r3, [pc, #624]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004dce:	2101      	movs	r1, #1
 8004dd0:	438a      	bics	r2, r1
 8004dd2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd4:	f7fe f9cc 	bl	8003170 <HAL_GetTick>
 8004dd8:	0003      	movs	r3, r0
 8004dda:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dde:	f7fe f9c7 	bl	8003170 <HAL_GetTick>
 8004de2:	0002      	movs	r2, r0
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e15d      	b.n	80050ac <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004df0:	4b93      	ldr	r3, [pc, #588]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df4:	2202      	movs	r2, #2
 8004df6:	4013      	ands	r3, r2
 8004df8:	d1f1      	bne.n	8004dde <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2204      	movs	r2, #4
 8004e00:	4013      	ands	r3, r2
 8004e02:	d100      	bne.n	8004e06 <HAL_RCC_OscConfig+0x446>
 8004e04:	e0ae      	b.n	8004f64 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e06:	2023      	movs	r0, #35	; 0x23
 8004e08:	183b      	adds	r3, r7, r0
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e0e:	4b8c      	ldr	r3, [pc, #560]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e12:	2380      	movs	r3, #128	; 0x80
 8004e14:	055b      	lsls	r3, r3, #21
 8004e16:	4013      	ands	r3, r2
 8004e18:	d109      	bne.n	8004e2e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e1a:	4b89      	ldr	r3, [pc, #548]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e1e:	4b88      	ldr	r3, [pc, #544]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004e20:	2180      	movs	r1, #128	; 0x80
 8004e22:	0549      	lsls	r1, r1, #21
 8004e24:	430a      	orrs	r2, r1
 8004e26:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004e28:	183b      	adds	r3, r7, r0
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2e:	4b87      	ldr	r3, [pc, #540]	; (800504c <HAL_RCC_OscConfig+0x68c>)
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	2380      	movs	r3, #128	; 0x80
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	4013      	ands	r3, r2
 8004e38:	d11a      	bne.n	8004e70 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e3a:	4b84      	ldr	r3, [pc, #528]	; (800504c <HAL_RCC_OscConfig+0x68c>)
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	4b83      	ldr	r3, [pc, #524]	; (800504c <HAL_RCC_OscConfig+0x68c>)
 8004e40:	2180      	movs	r1, #128	; 0x80
 8004e42:	0049      	lsls	r1, r1, #1
 8004e44:	430a      	orrs	r2, r1
 8004e46:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e48:	f7fe f992 	bl	8003170 <HAL_GetTick>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e50:	e008      	b.n	8004e64 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e52:	f7fe f98d 	bl	8003170 <HAL_GetTick>
 8004e56:	0002      	movs	r2, r0
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b64      	cmp	r3, #100	; 0x64
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e123      	b.n	80050ac <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e64:	4b79      	ldr	r3, [pc, #484]	; (800504c <HAL_RCC_OscConfig+0x68c>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	2380      	movs	r3, #128	; 0x80
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	d0f0      	beq.n	8004e52 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	2380      	movs	r3, #128	; 0x80
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d107      	bne.n	8004e8c <HAL_RCC_OscConfig+0x4cc>
 8004e7c:	4b70      	ldr	r3, [pc, #448]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004e7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e80:	4b6f      	ldr	r3, [pc, #444]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004e82:	2180      	movs	r1, #128	; 0x80
 8004e84:	0049      	lsls	r1, r1, #1
 8004e86:	430a      	orrs	r2, r1
 8004e88:	651a      	str	r2, [r3, #80]	; 0x50
 8004e8a:	e031      	b.n	8004ef0 <HAL_RCC_OscConfig+0x530>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10c      	bne.n	8004eae <HAL_RCC_OscConfig+0x4ee>
 8004e94:	4b6a      	ldr	r3, [pc, #424]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004e96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e98:	4b69      	ldr	r3, [pc, #420]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004e9a:	496b      	ldr	r1, [pc, #428]	; (8005048 <HAL_RCC_OscConfig+0x688>)
 8004e9c:	400a      	ands	r2, r1
 8004e9e:	651a      	str	r2, [r3, #80]	; 0x50
 8004ea0:	4b67      	ldr	r3, [pc, #412]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004ea2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ea4:	4b66      	ldr	r3, [pc, #408]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004ea6:	496a      	ldr	r1, [pc, #424]	; (8005050 <HAL_RCC_OscConfig+0x690>)
 8004ea8:	400a      	ands	r2, r1
 8004eaa:	651a      	str	r2, [r3, #80]	; 0x50
 8004eac:	e020      	b.n	8004ef0 <HAL_RCC_OscConfig+0x530>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	23a0      	movs	r3, #160	; 0xa0
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d10e      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x518>
 8004eba:	4b61      	ldr	r3, [pc, #388]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004ebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ebe:	4b60      	ldr	r3, [pc, #384]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004ec0:	2180      	movs	r1, #128	; 0x80
 8004ec2:	00c9      	lsls	r1, r1, #3
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	651a      	str	r2, [r3, #80]	; 0x50
 8004ec8:	4b5d      	ldr	r3, [pc, #372]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004eca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ecc:	4b5c      	ldr	r3, [pc, #368]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004ece:	2180      	movs	r1, #128	; 0x80
 8004ed0:	0049      	lsls	r1, r1, #1
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	651a      	str	r2, [r3, #80]	; 0x50
 8004ed6:	e00b      	b.n	8004ef0 <HAL_RCC_OscConfig+0x530>
 8004ed8:	4b59      	ldr	r3, [pc, #356]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004eda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004edc:	4b58      	ldr	r3, [pc, #352]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004ede:	495a      	ldr	r1, [pc, #360]	; (8005048 <HAL_RCC_OscConfig+0x688>)
 8004ee0:	400a      	ands	r2, r1
 8004ee2:	651a      	str	r2, [r3, #80]	; 0x50
 8004ee4:	4b56      	ldr	r3, [pc, #344]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004ee6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ee8:	4b55      	ldr	r3, [pc, #340]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004eea:	4959      	ldr	r1, [pc, #356]	; (8005050 <HAL_RCC_OscConfig+0x690>)
 8004eec:	400a      	ands	r2, r1
 8004eee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d015      	beq.n	8004f24 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef8:	f7fe f93a 	bl	8003170 <HAL_GetTick>
 8004efc:	0003      	movs	r3, r0
 8004efe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f00:	e009      	b.n	8004f16 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f02:	f7fe f935 	bl	8003170 <HAL_GetTick>
 8004f06:	0002      	movs	r2, r0
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	4a51      	ldr	r2, [pc, #324]	; (8005054 <HAL_RCC_OscConfig+0x694>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e0ca      	b.n	80050ac <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f16:	4b4a      	ldr	r3, [pc, #296]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004f18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f1a:	2380      	movs	r3, #128	; 0x80
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4013      	ands	r3, r2
 8004f20:	d0ef      	beq.n	8004f02 <HAL_RCC_OscConfig+0x542>
 8004f22:	e014      	b.n	8004f4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f24:	f7fe f924 	bl	8003170 <HAL_GetTick>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f2c:	e009      	b.n	8004f42 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f2e:	f7fe f91f 	bl	8003170 <HAL_GetTick>
 8004f32:	0002      	movs	r2, r0
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	4a46      	ldr	r2, [pc, #280]	; (8005054 <HAL_RCC_OscConfig+0x694>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e0b4      	b.n	80050ac <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f42:	4b3f      	ldr	r3, [pc, #252]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004f44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f46:	2380      	movs	r3, #128	; 0x80
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	d1ef      	bne.n	8004f2e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f4e:	2323      	movs	r3, #35	; 0x23
 8004f50:	18fb      	adds	r3, r7, r3
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d105      	bne.n	8004f64 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f58:	4b39      	ldr	r3, [pc, #228]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f5c:	4b38      	ldr	r3, [pc, #224]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004f5e:	493e      	ldr	r1, [pc, #248]	; (8005058 <HAL_RCC_OscConfig+0x698>)
 8004f60:	400a      	ands	r2, r1
 8004f62:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d100      	bne.n	8004f6e <HAL_RCC_OscConfig+0x5ae>
 8004f6c:	e09d      	b.n	80050aa <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	2b0c      	cmp	r3, #12
 8004f72:	d100      	bne.n	8004f76 <HAL_RCC_OscConfig+0x5b6>
 8004f74:	e076      	b.n	8005064 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d145      	bne.n	800500a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f7e:	4b30      	ldr	r3, [pc, #192]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	4b2f      	ldr	r3, [pc, #188]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004f84:	4935      	ldr	r1, [pc, #212]	; (800505c <HAL_RCC_OscConfig+0x69c>)
 8004f86:	400a      	ands	r2, r1
 8004f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8a:	f7fe f8f1 	bl	8003170 <HAL_GetTick>
 8004f8e:	0003      	movs	r3, r0
 8004f90:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f94:	f7fe f8ec 	bl	8003170 <HAL_GetTick>
 8004f98:	0002      	movs	r2, r0
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e082      	b.n	80050ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004fa6:	4b26      	ldr	r3, [pc, #152]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	2380      	movs	r3, #128	; 0x80
 8004fac:	049b      	lsls	r3, r3, #18
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d1f0      	bne.n	8004f94 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fb2:	4b23      	ldr	r3, [pc, #140]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	4a2a      	ldr	r2, [pc, #168]	; (8005060 <HAL_RCC_OscConfig+0x6a0>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	0019      	movs	r1, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	4b1c      	ldr	r3, [pc, #112]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fd2:	4b1b      	ldr	r3, [pc, #108]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	4b1a      	ldr	r3, [pc, #104]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004fd8:	2180      	movs	r1, #128	; 0x80
 8004fda:	0449      	lsls	r1, r1, #17
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe0:	f7fe f8c6 	bl	8003170 <HAL_GetTick>
 8004fe4:	0003      	movs	r3, r0
 8004fe6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fea:	f7fe f8c1 	bl	8003170 <HAL_GetTick>
 8004fee:	0002      	movs	r2, r0
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e057      	b.n	80050ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004ffc:	4b10      	ldr	r3, [pc, #64]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	2380      	movs	r3, #128	; 0x80
 8005002:	049b      	lsls	r3, r3, #18
 8005004:	4013      	ands	r3, r2
 8005006:	d0f0      	beq.n	8004fea <HAL_RCC_OscConfig+0x62a>
 8005008:	e04f      	b.n	80050aa <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800500a:	4b0d      	ldr	r3, [pc, #52]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4b0c      	ldr	r3, [pc, #48]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8005010:	4912      	ldr	r1, [pc, #72]	; (800505c <HAL_RCC_OscConfig+0x69c>)
 8005012:	400a      	ands	r2, r1
 8005014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005016:	f7fe f8ab 	bl	8003170 <HAL_GetTick>
 800501a:	0003      	movs	r3, r0
 800501c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005020:	f7fe f8a6 	bl	8003170 <HAL_GetTick>
 8005024:	0002      	movs	r2, r0
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e03c      	b.n	80050ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005032:	4b03      	ldr	r3, [pc, #12]	; (8005040 <HAL_RCC_OscConfig+0x680>)
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	2380      	movs	r3, #128	; 0x80
 8005038:	049b      	lsls	r3, r3, #18
 800503a:	4013      	ands	r3, r2
 800503c:	d1f0      	bne.n	8005020 <HAL_RCC_OscConfig+0x660>
 800503e:	e034      	b.n	80050aa <HAL_RCC_OscConfig+0x6ea>
 8005040:	40021000 	.word	0x40021000
 8005044:	ffff1fff 	.word	0xffff1fff
 8005048:	fffffeff 	.word	0xfffffeff
 800504c:	40007000 	.word	0x40007000
 8005050:	fffffbff 	.word	0xfffffbff
 8005054:	00001388 	.word	0x00001388
 8005058:	efffffff 	.word	0xefffffff
 800505c:	feffffff 	.word	0xfeffffff
 8005060:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e01d      	b.n	80050ac <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005070:	4b10      	ldr	r3, [pc, #64]	; (80050b4 <HAL_RCC_OscConfig+0x6f4>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	2380      	movs	r3, #128	; 0x80
 800507a:	025b      	lsls	r3, r3, #9
 800507c:	401a      	ands	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	429a      	cmp	r2, r3
 8005084:	d10f      	bne.n	80050a6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	23f0      	movs	r3, #240	; 0xf0
 800508a:	039b      	lsls	r3, r3, #14
 800508c:	401a      	ands	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005092:	429a      	cmp	r2, r3
 8005094:	d107      	bne.n	80050a6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	23c0      	movs	r3, #192	; 0xc0
 800509a:	041b      	lsls	r3, r3, #16
 800509c:	401a      	ands	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d001      	beq.n	80050aa <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e000      	b.n	80050ac <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	0018      	movs	r0, r3
 80050ae:	46bd      	mov	sp, r7
 80050b0:	b00a      	add	sp, #40	; 0x28
 80050b2:	bdb0      	pop	{r4, r5, r7, pc}
 80050b4:	40021000 	.word	0x40021000

080050b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050b8:	b5b0      	push	{r4, r5, r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e128      	b.n	800531e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050cc:	4b96      	ldr	r3, [pc, #600]	; (8005328 <HAL_RCC_ClockConfig+0x270>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2201      	movs	r2, #1
 80050d2:	4013      	ands	r3, r2
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d91e      	bls.n	8005118 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050da:	4b93      	ldr	r3, [pc, #588]	; (8005328 <HAL_RCC_ClockConfig+0x270>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2201      	movs	r2, #1
 80050e0:	4393      	bics	r3, r2
 80050e2:	0019      	movs	r1, r3
 80050e4:	4b90      	ldr	r3, [pc, #576]	; (8005328 <HAL_RCC_ClockConfig+0x270>)
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050ec:	f7fe f840 	bl	8003170 <HAL_GetTick>
 80050f0:	0003      	movs	r3, r0
 80050f2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f4:	e009      	b.n	800510a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f6:	f7fe f83b 	bl	8003170 <HAL_GetTick>
 80050fa:	0002      	movs	r2, r0
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	4a8a      	ldr	r2, [pc, #552]	; (800532c <HAL_RCC_ClockConfig+0x274>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e109      	b.n	800531e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800510a:	4b87      	ldr	r3, [pc, #540]	; (8005328 <HAL_RCC_ClockConfig+0x270>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2201      	movs	r2, #1
 8005110:	4013      	ands	r3, r2
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d1ee      	bne.n	80050f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2202      	movs	r2, #2
 800511e:	4013      	ands	r3, r2
 8005120:	d009      	beq.n	8005136 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005122:	4b83      	ldr	r3, [pc, #524]	; (8005330 <HAL_RCC_ClockConfig+0x278>)
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	22f0      	movs	r2, #240	; 0xf0
 8005128:	4393      	bics	r3, r2
 800512a:	0019      	movs	r1, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	4b7f      	ldr	r3, [pc, #508]	; (8005330 <HAL_RCC_ClockConfig+0x278>)
 8005132:	430a      	orrs	r2, r1
 8005134:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2201      	movs	r2, #1
 800513c:	4013      	ands	r3, r2
 800513e:	d100      	bne.n	8005142 <HAL_RCC_ClockConfig+0x8a>
 8005140:	e089      	b.n	8005256 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d107      	bne.n	800515a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800514a:	4b79      	ldr	r3, [pc, #484]	; (8005330 <HAL_RCC_ClockConfig+0x278>)
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	2380      	movs	r3, #128	; 0x80
 8005150:	029b      	lsls	r3, r3, #10
 8005152:	4013      	ands	r3, r2
 8005154:	d120      	bne.n	8005198 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e0e1      	b.n	800531e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b03      	cmp	r3, #3
 8005160:	d107      	bne.n	8005172 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005162:	4b73      	ldr	r3, [pc, #460]	; (8005330 <HAL_RCC_ClockConfig+0x278>)
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	2380      	movs	r3, #128	; 0x80
 8005168:	049b      	lsls	r3, r3, #18
 800516a:	4013      	ands	r3, r2
 800516c:	d114      	bne.n	8005198 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e0d5      	b.n	800531e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d106      	bne.n	8005188 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800517a:	4b6d      	ldr	r3, [pc, #436]	; (8005330 <HAL_RCC_ClockConfig+0x278>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2204      	movs	r2, #4
 8005180:	4013      	ands	r3, r2
 8005182:	d109      	bne.n	8005198 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e0ca      	b.n	800531e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005188:	4b69      	ldr	r3, [pc, #420]	; (8005330 <HAL_RCC_ClockConfig+0x278>)
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	2380      	movs	r3, #128	; 0x80
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4013      	ands	r3, r2
 8005192:	d101      	bne.n	8005198 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e0c2      	b.n	800531e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005198:	4b65      	ldr	r3, [pc, #404]	; (8005330 <HAL_RCC_ClockConfig+0x278>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	2203      	movs	r2, #3
 800519e:	4393      	bics	r3, r2
 80051a0:	0019      	movs	r1, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	4b62      	ldr	r3, [pc, #392]	; (8005330 <HAL_RCC_ClockConfig+0x278>)
 80051a8:	430a      	orrs	r2, r1
 80051aa:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051ac:	f7fd ffe0 	bl	8003170 <HAL_GetTick>
 80051b0:	0003      	movs	r3, r0
 80051b2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d111      	bne.n	80051e0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80051bc:	e009      	b.n	80051d2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051be:	f7fd ffd7 	bl	8003170 <HAL_GetTick>
 80051c2:	0002      	movs	r2, r0
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	4a58      	ldr	r2, [pc, #352]	; (800532c <HAL_RCC_ClockConfig+0x274>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e0a5      	b.n	800531e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80051d2:	4b57      	ldr	r3, [pc, #348]	; (8005330 <HAL_RCC_ClockConfig+0x278>)
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	220c      	movs	r2, #12
 80051d8:	4013      	ands	r3, r2
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d1ef      	bne.n	80051be <HAL_RCC_ClockConfig+0x106>
 80051de:	e03a      	b.n	8005256 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b03      	cmp	r3, #3
 80051e6:	d111      	bne.n	800520c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051e8:	e009      	b.n	80051fe <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ea:	f7fd ffc1 	bl	8003170 <HAL_GetTick>
 80051ee:	0002      	movs	r2, r0
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	4a4d      	ldr	r2, [pc, #308]	; (800532c <HAL_RCC_ClockConfig+0x274>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e08f      	b.n	800531e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051fe:	4b4c      	ldr	r3, [pc, #304]	; (8005330 <HAL_RCC_ClockConfig+0x278>)
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	220c      	movs	r2, #12
 8005204:	4013      	ands	r3, r2
 8005206:	2b0c      	cmp	r3, #12
 8005208:	d1ef      	bne.n	80051ea <HAL_RCC_ClockConfig+0x132>
 800520a:	e024      	b.n	8005256 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d11b      	bne.n	800524c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005214:	e009      	b.n	800522a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005216:	f7fd ffab 	bl	8003170 <HAL_GetTick>
 800521a:	0002      	movs	r2, r0
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	4a42      	ldr	r2, [pc, #264]	; (800532c <HAL_RCC_ClockConfig+0x274>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d901      	bls.n	800522a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e079      	b.n	800531e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800522a:	4b41      	ldr	r3, [pc, #260]	; (8005330 <HAL_RCC_ClockConfig+0x278>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	220c      	movs	r2, #12
 8005230:	4013      	ands	r3, r2
 8005232:	2b04      	cmp	r3, #4
 8005234:	d1ef      	bne.n	8005216 <HAL_RCC_ClockConfig+0x15e>
 8005236:	e00e      	b.n	8005256 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005238:	f7fd ff9a 	bl	8003170 <HAL_GetTick>
 800523c:	0002      	movs	r2, r0
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	4a3a      	ldr	r2, [pc, #232]	; (800532c <HAL_RCC_ClockConfig+0x274>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d901      	bls.n	800524c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e068      	b.n	800531e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800524c:	4b38      	ldr	r3, [pc, #224]	; (8005330 <HAL_RCC_ClockConfig+0x278>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	220c      	movs	r2, #12
 8005252:	4013      	ands	r3, r2
 8005254:	d1f0      	bne.n	8005238 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005256:	4b34      	ldr	r3, [pc, #208]	; (8005328 <HAL_RCC_ClockConfig+0x270>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2201      	movs	r2, #1
 800525c:	4013      	ands	r3, r2
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d21e      	bcs.n	80052a2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005264:	4b30      	ldr	r3, [pc, #192]	; (8005328 <HAL_RCC_ClockConfig+0x270>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2201      	movs	r2, #1
 800526a:	4393      	bics	r3, r2
 800526c:	0019      	movs	r1, r3
 800526e:	4b2e      	ldr	r3, [pc, #184]	; (8005328 <HAL_RCC_ClockConfig+0x270>)
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005276:	f7fd ff7b 	bl	8003170 <HAL_GetTick>
 800527a:	0003      	movs	r3, r0
 800527c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800527e:	e009      	b.n	8005294 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005280:	f7fd ff76 	bl	8003170 <HAL_GetTick>
 8005284:	0002      	movs	r2, r0
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	4a28      	ldr	r2, [pc, #160]	; (800532c <HAL_RCC_ClockConfig+0x274>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e044      	b.n	800531e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005294:	4b24      	ldr	r3, [pc, #144]	; (8005328 <HAL_RCC_ClockConfig+0x270>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2201      	movs	r2, #1
 800529a:	4013      	ands	r3, r2
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d1ee      	bne.n	8005280 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2204      	movs	r2, #4
 80052a8:	4013      	ands	r3, r2
 80052aa:	d009      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052ac:	4b20      	ldr	r3, [pc, #128]	; (8005330 <HAL_RCC_ClockConfig+0x278>)
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	4a20      	ldr	r2, [pc, #128]	; (8005334 <HAL_RCC_ClockConfig+0x27c>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	0019      	movs	r1, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	4b1d      	ldr	r3, [pc, #116]	; (8005330 <HAL_RCC_ClockConfig+0x278>)
 80052bc:	430a      	orrs	r2, r1
 80052be:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2208      	movs	r2, #8
 80052c6:	4013      	ands	r3, r2
 80052c8:	d00a      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052ca:	4b19      	ldr	r3, [pc, #100]	; (8005330 <HAL_RCC_ClockConfig+0x278>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	4a1a      	ldr	r2, [pc, #104]	; (8005338 <HAL_RCC_ClockConfig+0x280>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	0019      	movs	r1, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	00da      	lsls	r2, r3, #3
 80052da:	4b15      	ldr	r3, [pc, #84]	; (8005330 <HAL_RCC_ClockConfig+0x278>)
 80052dc:	430a      	orrs	r2, r1
 80052de:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052e0:	f000 f832 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 80052e4:	0001      	movs	r1, r0
 80052e6:	4b12      	ldr	r3, [pc, #72]	; (8005330 <HAL_RCC_ClockConfig+0x278>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	091b      	lsrs	r3, r3, #4
 80052ec:	220f      	movs	r2, #15
 80052ee:	4013      	ands	r3, r2
 80052f0:	4a12      	ldr	r2, [pc, #72]	; (800533c <HAL_RCC_ClockConfig+0x284>)
 80052f2:	5cd3      	ldrb	r3, [r2, r3]
 80052f4:	000a      	movs	r2, r1
 80052f6:	40da      	lsrs	r2, r3
 80052f8:	4b11      	ldr	r3, [pc, #68]	; (8005340 <HAL_RCC_ClockConfig+0x288>)
 80052fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052fc:	4b11      	ldr	r3, [pc, #68]	; (8005344 <HAL_RCC_ClockConfig+0x28c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	250b      	movs	r5, #11
 8005302:	197c      	adds	r4, r7, r5
 8005304:	0018      	movs	r0, r3
 8005306:	f7fd feed 	bl	80030e4 <HAL_InitTick>
 800530a:	0003      	movs	r3, r0
 800530c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800530e:	197b      	adds	r3, r7, r5
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005316:	197b      	adds	r3, r7, r5
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	e000      	b.n	800531e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	0018      	movs	r0, r3
 8005320:	46bd      	mov	sp, r7
 8005322:	b004      	add	sp, #16
 8005324:	bdb0      	pop	{r4, r5, r7, pc}
 8005326:	46c0      	nop			; (mov r8, r8)
 8005328:	40022000 	.word	0x40022000
 800532c:	00001388 	.word	0x00001388
 8005330:	40021000 	.word	0x40021000
 8005334:	fffff8ff 	.word	0xfffff8ff
 8005338:	ffffc7ff 	.word	0xffffc7ff
 800533c:	08007118 	.word	0x08007118
 8005340:	20000010 	.word	0x20000010
 8005344:	2000002c 	.word	0x2000002c

08005348 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005348:	b5b0      	push	{r4, r5, r7, lr}
 800534a:	b08e      	sub	sp, #56	; 0x38
 800534c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800534e:	4b4c      	ldr	r3, [pc, #304]	; (8005480 <HAL_RCC_GetSysClockFreq+0x138>)
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005356:	230c      	movs	r3, #12
 8005358:	4013      	ands	r3, r2
 800535a:	2b0c      	cmp	r3, #12
 800535c:	d014      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x40>
 800535e:	d900      	bls.n	8005362 <HAL_RCC_GetSysClockFreq+0x1a>
 8005360:	e07b      	b.n	800545a <HAL_RCC_GetSysClockFreq+0x112>
 8005362:	2b04      	cmp	r3, #4
 8005364:	d002      	beq.n	800536c <HAL_RCC_GetSysClockFreq+0x24>
 8005366:	2b08      	cmp	r3, #8
 8005368:	d00b      	beq.n	8005382 <HAL_RCC_GetSysClockFreq+0x3a>
 800536a:	e076      	b.n	800545a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800536c:	4b44      	ldr	r3, [pc, #272]	; (8005480 <HAL_RCC_GetSysClockFreq+0x138>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2210      	movs	r2, #16
 8005372:	4013      	ands	r3, r2
 8005374:	d002      	beq.n	800537c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005376:	4b43      	ldr	r3, [pc, #268]	; (8005484 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005378:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800537a:	e07c      	b.n	8005476 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800537c:	4b42      	ldr	r3, [pc, #264]	; (8005488 <HAL_RCC_GetSysClockFreq+0x140>)
 800537e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005380:	e079      	b.n	8005476 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005382:	4b42      	ldr	r3, [pc, #264]	; (800548c <HAL_RCC_GetSysClockFreq+0x144>)
 8005384:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005386:	e076      	b.n	8005476 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	0c9a      	lsrs	r2, r3, #18
 800538c:	230f      	movs	r3, #15
 800538e:	401a      	ands	r2, r3
 8005390:	4b3f      	ldr	r3, [pc, #252]	; (8005490 <HAL_RCC_GetSysClockFreq+0x148>)
 8005392:	5c9b      	ldrb	r3, [r3, r2]
 8005394:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005398:	0d9a      	lsrs	r2, r3, #22
 800539a:	2303      	movs	r3, #3
 800539c:	4013      	ands	r3, r2
 800539e:	3301      	adds	r3, #1
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053a2:	4b37      	ldr	r3, [pc, #220]	; (8005480 <HAL_RCC_GetSysClockFreq+0x138>)
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	2380      	movs	r3, #128	; 0x80
 80053a8:	025b      	lsls	r3, r3, #9
 80053aa:	4013      	ands	r3, r2
 80053ac:	d01a      	beq.n	80053e4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	61bb      	str	r3, [r7, #24]
 80053b2:	2300      	movs	r3, #0
 80053b4:	61fb      	str	r3, [r7, #28]
 80053b6:	4a35      	ldr	r2, [pc, #212]	; (800548c <HAL_RCC_GetSysClockFreq+0x144>)
 80053b8:	2300      	movs	r3, #0
 80053ba:	69b8      	ldr	r0, [r7, #24]
 80053bc:	69f9      	ldr	r1, [r7, #28]
 80053be:	f7fa ff4f 	bl	8000260 <__aeabi_lmul>
 80053c2:	0002      	movs	r2, r0
 80053c4:	000b      	movs	r3, r1
 80053c6:	0010      	movs	r0, r2
 80053c8:	0019      	movs	r1, r3
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	2300      	movs	r3, #0
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f7fa ff23 	bl	8000220 <__aeabi_uldivmod>
 80053da:	0002      	movs	r2, r0
 80053dc:	000b      	movs	r3, r1
 80053de:	0013      	movs	r3, r2
 80053e0:	637b      	str	r3, [r7, #52]	; 0x34
 80053e2:	e037      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80053e4:	4b26      	ldr	r3, [pc, #152]	; (8005480 <HAL_RCC_GetSysClockFreq+0x138>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2210      	movs	r2, #16
 80053ea:	4013      	ands	r3, r2
 80053ec:	d01a      	beq.n	8005424 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	60bb      	str	r3, [r7, #8]
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	4a23      	ldr	r2, [pc, #140]	; (8005484 <HAL_RCC_GetSysClockFreq+0x13c>)
 80053f8:	2300      	movs	r3, #0
 80053fa:	68b8      	ldr	r0, [r7, #8]
 80053fc:	68f9      	ldr	r1, [r7, #12]
 80053fe:	f7fa ff2f 	bl	8000260 <__aeabi_lmul>
 8005402:	0002      	movs	r2, r0
 8005404:	000b      	movs	r3, r1
 8005406:	0010      	movs	r0, r2
 8005408:	0019      	movs	r1, r3
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	603b      	str	r3, [r7, #0]
 800540e:	2300      	movs	r3, #0
 8005410:	607b      	str	r3, [r7, #4]
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f7fa ff03 	bl	8000220 <__aeabi_uldivmod>
 800541a:	0002      	movs	r2, r0
 800541c:	000b      	movs	r3, r1
 800541e:	0013      	movs	r3, r2
 8005420:	637b      	str	r3, [r7, #52]	; 0x34
 8005422:	e017      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005426:	0018      	movs	r0, r3
 8005428:	2300      	movs	r3, #0
 800542a:	0019      	movs	r1, r3
 800542c:	4a16      	ldr	r2, [pc, #88]	; (8005488 <HAL_RCC_GetSysClockFreq+0x140>)
 800542e:	2300      	movs	r3, #0
 8005430:	f7fa ff16 	bl	8000260 <__aeabi_lmul>
 8005434:	0002      	movs	r2, r0
 8005436:	000b      	movs	r3, r1
 8005438:	0010      	movs	r0, r2
 800543a:	0019      	movs	r1, r3
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	001c      	movs	r4, r3
 8005440:	2300      	movs	r3, #0
 8005442:	001d      	movs	r5, r3
 8005444:	0022      	movs	r2, r4
 8005446:	002b      	movs	r3, r5
 8005448:	f7fa feea 	bl	8000220 <__aeabi_uldivmod>
 800544c:	0002      	movs	r2, r0
 800544e:	000b      	movs	r3, r1
 8005450:	0013      	movs	r3, r2
 8005452:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005456:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005458:	e00d      	b.n	8005476 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800545a:	4b09      	ldr	r3, [pc, #36]	; (8005480 <HAL_RCC_GetSysClockFreq+0x138>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	0b5b      	lsrs	r3, r3, #13
 8005460:	2207      	movs	r2, #7
 8005462:	4013      	ands	r3, r2
 8005464:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	3301      	adds	r3, #1
 800546a:	2280      	movs	r2, #128	; 0x80
 800546c:	0212      	lsls	r2, r2, #8
 800546e:	409a      	lsls	r2, r3
 8005470:	0013      	movs	r3, r2
 8005472:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005474:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005478:	0018      	movs	r0, r3
 800547a:	46bd      	mov	sp, r7
 800547c:	b00e      	add	sp, #56	; 0x38
 800547e:	bdb0      	pop	{r4, r5, r7, pc}
 8005480:	40021000 	.word	0x40021000
 8005484:	003d0900 	.word	0x003d0900
 8005488:	00f42400 	.word	0x00f42400
 800548c:	007a1200 	.word	0x007a1200
 8005490:	08007128 	.word	0x08007128

08005494 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800549c:	2017      	movs	r0, #23
 800549e:	183b      	adds	r3, r7, r0
 80054a0:	2200      	movs	r2, #0
 80054a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2220      	movs	r2, #32
 80054aa:	4013      	ands	r3, r2
 80054ac:	d100      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80054ae:	e0c7      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054b0:	4b84      	ldr	r3, [pc, #528]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80054b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054b4:	2380      	movs	r3, #128	; 0x80
 80054b6:	055b      	lsls	r3, r3, #21
 80054b8:	4013      	ands	r3, r2
 80054ba:	d109      	bne.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054bc:	4b81      	ldr	r3, [pc, #516]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80054be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054c0:	4b80      	ldr	r3, [pc, #512]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80054c2:	2180      	movs	r1, #128	; 0x80
 80054c4:	0549      	lsls	r1, r1, #21
 80054c6:	430a      	orrs	r2, r1
 80054c8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80054ca:	183b      	adds	r3, r7, r0
 80054cc:	2201      	movs	r2, #1
 80054ce:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d0:	4b7d      	ldr	r3, [pc, #500]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	2380      	movs	r3, #128	; 0x80
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	4013      	ands	r3, r2
 80054da:	d11a      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054dc:	4b7a      	ldr	r3, [pc, #488]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	4b79      	ldr	r3, [pc, #484]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80054e2:	2180      	movs	r1, #128	; 0x80
 80054e4:	0049      	lsls	r1, r1, #1
 80054e6:	430a      	orrs	r2, r1
 80054e8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054ea:	f7fd fe41 	bl	8003170 <HAL_GetTick>
 80054ee:	0003      	movs	r3, r0
 80054f0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f2:	e008      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054f4:	f7fd fe3c 	bl	8003170 <HAL_GetTick>
 80054f8:	0002      	movs	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b64      	cmp	r3, #100	; 0x64
 8005500:	d901      	bls.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e0d9      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005506:	4b70      	ldr	r3, [pc, #448]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	2380      	movs	r3, #128	; 0x80
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	4013      	ands	r3, r2
 8005510:	d0f0      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005512:	4b6c      	ldr	r3, [pc, #432]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	23c0      	movs	r3, #192	; 0xc0
 8005518:	039b      	lsls	r3, r3, #14
 800551a:	4013      	ands	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	23c0      	movs	r3, #192	; 0xc0
 8005524:	039b      	lsls	r3, r3, #14
 8005526:	4013      	ands	r3, r2
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	429a      	cmp	r2, r3
 800552c:	d013      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	23c0      	movs	r3, #192	; 0xc0
 8005534:	029b      	lsls	r3, r3, #10
 8005536:	401a      	ands	r2, r3
 8005538:	23c0      	movs	r3, #192	; 0xc0
 800553a:	029b      	lsls	r3, r3, #10
 800553c:	429a      	cmp	r2, r3
 800553e:	d10a      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005540:	4b60      	ldr	r3, [pc, #384]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	2380      	movs	r3, #128	; 0x80
 8005546:	029b      	lsls	r3, r3, #10
 8005548:	401a      	ands	r2, r3
 800554a:	2380      	movs	r3, #128	; 0x80
 800554c:	029b      	lsls	r3, r3, #10
 800554e:	429a      	cmp	r2, r3
 8005550:	d101      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e0b1      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005556:	4b5b      	ldr	r3, [pc, #364]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005558:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800555a:	23c0      	movs	r3, #192	; 0xc0
 800555c:	029b      	lsls	r3, r3, #10
 800555e:	4013      	ands	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d03b      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	23c0      	movs	r3, #192	; 0xc0
 800556e:	029b      	lsls	r3, r3, #10
 8005570:	4013      	ands	r3, r2
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	429a      	cmp	r2, r3
 8005576:	d033      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2220      	movs	r2, #32
 800557e:	4013      	ands	r3, r2
 8005580:	d02e      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005582:	4b50      	ldr	r3, [pc, #320]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005586:	4a51      	ldr	r2, [pc, #324]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8005588:	4013      	ands	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800558c:	4b4d      	ldr	r3, [pc, #308]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800558e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005590:	4b4c      	ldr	r3, [pc, #304]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005592:	2180      	movs	r1, #128	; 0x80
 8005594:	0309      	lsls	r1, r1, #12
 8005596:	430a      	orrs	r2, r1
 8005598:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800559a:	4b4a      	ldr	r3, [pc, #296]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800559c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800559e:	4b49      	ldr	r3, [pc, #292]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80055a0:	494b      	ldr	r1, [pc, #300]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80055a2:	400a      	ands	r2, r1
 80055a4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80055a6:	4b47      	ldr	r3, [pc, #284]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	2380      	movs	r3, #128	; 0x80
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	4013      	ands	r3, r2
 80055b4:	d014      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b6:	f7fd fddb 	bl	8003170 <HAL_GetTick>
 80055ba:	0003      	movs	r3, r0
 80055bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055be:	e009      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055c0:	f7fd fdd6 	bl	8003170 <HAL_GetTick>
 80055c4:	0002      	movs	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	4a42      	ldr	r2, [pc, #264]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e072      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055d4:	4b3b      	ldr	r3, [pc, #236]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80055d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055d8:	2380      	movs	r3, #128	; 0x80
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4013      	ands	r3, r2
 80055de:	d0ef      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2220      	movs	r2, #32
 80055e6:	4013      	ands	r3, r2
 80055e8:	d01f      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	23c0      	movs	r3, #192	; 0xc0
 80055f0:	029b      	lsls	r3, r3, #10
 80055f2:	401a      	ands	r2, r3
 80055f4:	23c0      	movs	r3, #192	; 0xc0
 80055f6:	029b      	lsls	r3, r3, #10
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d10c      	bne.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80055fc:	4b31      	ldr	r3, [pc, #196]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a35      	ldr	r2, [pc, #212]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005602:	4013      	ands	r3, r2
 8005604:	0019      	movs	r1, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	23c0      	movs	r3, #192	; 0xc0
 800560c:	039b      	lsls	r3, r3, #14
 800560e:	401a      	ands	r2, r3
 8005610:	4b2c      	ldr	r3, [pc, #176]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005612:	430a      	orrs	r2, r1
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	4b2b      	ldr	r3, [pc, #172]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005618:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	23c0      	movs	r3, #192	; 0xc0
 8005620:	029b      	lsls	r3, r3, #10
 8005622:	401a      	ands	r2, r3
 8005624:	4b27      	ldr	r3, [pc, #156]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005626:	430a      	orrs	r2, r1
 8005628:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800562a:	2317      	movs	r3, #23
 800562c:	18fb      	adds	r3, r7, r3
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d105      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005634:	4b23      	ldr	r3, [pc, #140]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005638:	4b22      	ldr	r3, [pc, #136]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800563a:	4928      	ldr	r1, [pc, #160]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800563c:	400a      	ands	r2, r1
 800563e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2202      	movs	r2, #2
 8005646:	4013      	ands	r3, r2
 8005648:	d009      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800564a:	4b1e      	ldr	r3, [pc, #120]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800564c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800564e:	220c      	movs	r2, #12
 8005650:	4393      	bics	r3, r2
 8005652:	0019      	movs	r1, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	4b1a      	ldr	r3, [pc, #104]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800565a:	430a      	orrs	r2, r1
 800565c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2204      	movs	r2, #4
 8005664:	4013      	ands	r3, r2
 8005666:	d009      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005668:	4b16      	ldr	r3, [pc, #88]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800566a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800566c:	4a1c      	ldr	r2, [pc, #112]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800566e:	4013      	ands	r3, r2
 8005670:	0019      	movs	r1, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	4b13      	ldr	r3, [pc, #76]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005678:	430a      	orrs	r2, r1
 800567a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2208      	movs	r2, #8
 8005682:	4013      	ands	r3, r2
 8005684:	d009      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005686:	4b0f      	ldr	r3, [pc, #60]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800568a:	4a16      	ldr	r2, [pc, #88]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800568c:	4013      	ands	r3, r2
 800568e:	0019      	movs	r1, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005696:	430a      	orrs	r2, r1
 8005698:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2280      	movs	r2, #128	; 0x80
 80056a0:	4013      	ands	r3, r2
 80056a2:	d009      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80056a4:	4b07      	ldr	r3, [pc, #28]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80056a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a8:	4a0f      	ldr	r2, [pc, #60]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80056aa:	4013      	ands	r3, r2
 80056ac:	0019      	movs	r1, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80056b4:	430a      	orrs	r2, r1
 80056b6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	0018      	movs	r0, r3
 80056bc:	46bd      	mov	sp, r7
 80056be:	b006      	add	sp, #24
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	46c0      	nop			; (mov r8, r8)
 80056c4:	40021000 	.word	0x40021000
 80056c8:	40007000 	.word	0x40007000
 80056cc:	fffcffff 	.word	0xfffcffff
 80056d0:	fff7ffff 	.word	0xfff7ffff
 80056d4:	00001388 	.word	0x00001388
 80056d8:	ffcfffff 	.word	0xffcfffff
 80056dc:	efffffff 	.word	0xefffffff
 80056e0:	fffff3ff 	.word	0xfffff3ff
 80056e4:	ffffcfff 	.word	0xffffcfff
 80056e8:	fff3ffff 	.word	0xfff3ffff

080056ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e07b      	b.n	80057f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	2b00      	cmp	r3, #0
 8005704:	d109      	bne.n	800571a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	2382      	movs	r3, #130	; 0x82
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	429a      	cmp	r2, r3
 8005710:	d009      	beq.n	8005726 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	61da      	str	r2, [r3, #28]
 8005718:	e005      	b.n	8005726 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2251      	movs	r2, #81	; 0x51
 8005730:	5c9b      	ldrb	r3, [r3, r2]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d107      	bne.n	8005748 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2250      	movs	r2, #80	; 0x50
 800573c:	2100      	movs	r1, #0
 800573e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	0018      	movs	r0, r3
 8005744:	f7fc ff62 	bl	800260c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2251      	movs	r2, #81	; 0x51
 800574c:	2102      	movs	r1, #2
 800574e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2140      	movs	r1, #64	; 0x40
 800575c:	438a      	bics	r2, r1
 800575e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	2382      	movs	r3, #130	; 0x82
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	401a      	ands	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6899      	ldr	r1, [r3, #8]
 800576e:	2384      	movs	r3, #132	; 0x84
 8005770:	021b      	lsls	r3, r3, #8
 8005772:	400b      	ands	r3, r1
 8005774:	431a      	orrs	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68d9      	ldr	r1, [r3, #12]
 800577a:	2380      	movs	r3, #128	; 0x80
 800577c:	011b      	lsls	r3, r3, #4
 800577e:	400b      	ands	r3, r1
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2102      	movs	r1, #2
 8005788:	400b      	ands	r3, r1
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	2101      	movs	r1, #1
 8005792:	400b      	ands	r3, r1
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6999      	ldr	r1, [r3, #24]
 800579a:	2380      	movs	r3, #128	; 0x80
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	400b      	ands	r3, r1
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	2138      	movs	r1, #56	; 0x38
 80057a8:	400b      	ands	r3, r1
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	2180      	movs	r1, #128	; 0x80
 80057b2:	400b      	ands	r3, r1
 80057b4:	431a      	orrs	r2, r3
 80057b6:	0011      	movs	r1, r2
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057bc:	2380      	movs	r3, #128	; 0x80
 80057be:	019b      	lsls	r3, r3, #6
 80057c0:	401a      	ands	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	0c1b      	lsrs	r3, r3, #16
 80057d0:	2204      	movs	r2, #4
 80057d2:	4013      	ands	r3, r2
 80057d4:	0019      	movs	r1, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	2210      	movs	r2, #16
 80057dc:	401a      	ands	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2251      	movs	r2, #81	; 0x51
 80057f0:	2101      	movs	r1, #1
 80057f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	0018      	movs	r0, r3
 80057f8:	46bd      	mov	sp, r7
 80057fa:	b002      	add	sp, #8
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b088      	sub	sp, #32
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	603b      	str	r3, [r7, #0]
 800580a:	1dbb      	adds	r3, r7, #6
 800580c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800580e:	231f      	movs	r3, #31
 8005810:	18fb      	adds	r3, r7, r3
 8005812:	2200      	movs	r2, #0
 8005814:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2250      	movs	r2, #80	; 0x50
 800581a:	5c9b      	ldrb	r3, [r3, r2]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_SPI_Transmit+0x26>
 8005820:	2302      	movs	r3, #2
 8005822:	e145      	b.n	8005ab0 <HAL_SPI_Transmit+0x2b2>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2250      	movs	r2, #80	; 0x50
 8005828:	2101      	movs	r1, #1
 800582a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800582c:	f7fd fca0 	bl	8003170 <HAL_GetTick>
 8005830:	0003      	movs	r3, r0
 8005832:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005834:	2316      	movs	r3, #22
 8005836:	18fb      	adds	r3, r7, r3
 8005838:	1dba      	adds	r2, r7, #6
 800583a:	8812      	ldrh	r2, [r2, #0]
 800583c:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2251      	movs	r2, #81	; 0x51
 8005842:	5c9b      	ldrb	r3, [r3, r2]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b01      	cmp	r3, #1
 8005848:	d004      	beq.n	8005854 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800584a:	231f      	movs	r3, #31
 800584c:	18fb      	adds	r3, r7, r3
 800584e:	2202      	movs	r2, #2
 8005850:	701a      	strb	r2, [r3, #0]
    goto error;
 8005852:	e126      	b.n	8005aa2 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_SPI_Transmit+0x64>
 800585a:	1dbb      	adds	r3, r7, #6
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d104      	bne.n	800586c <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005862:	231f      	movs	r3, #31
 8005864:	18fb      	adds	r3, r7, r3
 8005866:	2201      	movs	r2, #1
 8005868:	701a      	strb	r2, [r3, #0]
    goto error;
 800586a:	e11a      	b.n	8005aa2 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2251      	movs	r2, #81	; 0x51
 8005870:	2103      	movs	r1, #3
 8005872:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	1dba      	adds	r2, r7, #6
 8005884:	8812      	ldrh	r2, [r2, #0]
 8005886:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	1dba      	adds	r2, r7, #6
 800588c:	8812      	ldrh	r2, [r2, #0]
 800588e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	2380      	movs	r3, #128	; 0x80
 80058b4:	021b      	lsls	r3, r3, #8
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d110      	bne.n	80058dc <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2140      	movs	r1, #64	; 0x40
 80058c6:	438a      	bics	r2, r1
 80058c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2180      	movs	r1, #128	; 0x80
 80058d6:	01c9      	lsls	r1, r1, #7
 80058d8:	430a      	orrs	r2, r1
 80058da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2240      	movs	r2, #64	; 0x40
 80058e4:	4013      	ands	r3, r2
 80058e6:	2b40      	cmp	r3, #64	; 0x40
 80058e8:	d007      	beq.n	80058fa <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2140      	movs	r1, #64	; 0x40
 80058f6:	430a      	orrs	r2, r1
 80058f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	68da      	ldr	r2, [r3, #12]
 80058fe:	2380      	movs	r3, #128	; 0x80
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	429a      	cmp	r2, r3
 8005904:	d152      	bne.n	80059ac <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d004      	beq.n	8005918 <HAL_SPI_Transmit+0x11a>
 800590e:	2316      	movs	r3, #22
 8005910:	18fb      	adds	r3, r7, r3
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d143      	bne.n	80059a0 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591c:	881a      	ldrh	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005928:	1c9a      	adds	r2, r3, #2
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005932:	b29b      	uxth	r3, r3
 8005934:	3b01      	subs	r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800593c:	e030      	b.n	80059a0 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	2202      	movs	r2, #2
 8005946:	4013      	ands	r3, r2
 8005948:	2b02      	cmp	r3, #2
 800594a:	d112      	bne.n	8005972 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005950:	881a      	ldrh	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595c:	1c9a      	adds	r2, r3, #2
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005970:	e016      	b.n	80059a0 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005972:	f7fd fbfd 	bl	8003170 <HAL_GetTick>
 8005976:	0002      	movs	r2, r0
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d802      	bhi.n	8005988 <HAL_SPI_Transmit+0x18a>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	3301      	adds	r3, #1
 8005986:	d102      	bne.n	800598e <HAL_SPI_Transmit+0x190>
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d108      	bne.n	80059a0 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 800598e:	231f      	movs	r3, #31
 8005990:	18fb      	adds	r3, r7, r3
 8005992:	2203      	movs	r2, #3
 8005994:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2251      	movs	r2, #81	; 0x51
 800599a:	2101      	movs	r1, #1
 800599c:	5499      	strb	r1, [r3, r2]
          goto error;
 800599e:	e080      	b.n	8005aa2 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1c9      	bne.n	800593e <HAL_SPI_Transmit+0x140>
 80059aa:	e053      	b.n	8005a54 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d004      	beq.n	80059be <HAL_SPI_Transmit+0x1c0>
 80059b4:	2316      	movs	r3, #22
 80059b6:	18fb      	adds	r3, r7, r3
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d145      	bne.n	8005a4a <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	330c      	adds	r3, #12
 80059c8:	7812      	ldrb	r2, [r2, #0]
 80059ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059da:	b29b      	uxth	r3, r3
 80059dc:	3b01      	subs	r3, #1
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80059e4:	e031      	b.n	8005a4a <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	2202      	movs	r2, #2
 80059ee:	4013      	ands	r3, r2
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d113      	bne.n	8005a1c <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	7812      	ldrb	r2, [r2, #0]
 8005a00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a1a:	e016      	b.n	8005a4a <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a1c:	f7fd fba8 	bl	8003170 <HAL_GetTick>
 8005a20:	0002      	movs	r2, r0
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d802      	bhi.n	8005a32 <HAL_SPI_Transmit+0x234>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	d102      	bne.n	8005a38 <HAL_SPI_Transmit+0x23a>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d108      	bne.n	8005a4a <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8005a38:	231f      	movs	r3, #31
 8005a3a:	18fb      	adds	r3, r7, r3
 8005a3c:	2203      	movs	r2, #3
 8005a3e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2251      	movs	r2, #81	; 0x51
 8005a44:	2101      	movs	r1, #1
 8005a46:	5499      	strb	r1, [r3, r2]
          goto error;
 8005a48:	e02b      	b.n	8005aa2 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1c8      	bne.n	80059e6 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	6839      	ldr	r1, [r7, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f000 f8ba 	bl	8005bd4 <SPI_EndRxTxTransaction>
 8005a60:	1e03      	subs	r3, r0, #0
 8005a62:	d002      	beq.n	8005a6a <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2220      	movs	r2, #32
 8005a68:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10a      	bne.n	8005a88 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a72:	2300      	movs	r3, #0
 8005a74:	613b      	str	r3, [r7, #16]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	613b      	str	r3, [r7, #16]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	613b      	str	r3, [r7, #16]
 8005a86:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d004      	beq.n	8005a9a <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8005a90:	231f      	movs	r3, #31
 8005a92:	18fb      	adds	r3, r7, r3
 8005a94:	2201      	movs	r2, #1
 8005a96:	701a      	strb	r2, [r3, #0]
 8005a98:	e003      	b.n	8005aa2 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2251      	movs	r2, #81	; 0x51
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2250      	movs	r2, #80	; 0x50
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005aaa:	231f      	movs	r3, #31
 8005aac:	18fb      	adds	r3, r7, r3
 8005aae:	781b      	ldrb	r3, [r3, #0]
}
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	b008      	add	sp, #32
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b088      	sub	sp, #32
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	603b      	str	r3, [r7, #0]
 8005ac4:	1dfb      	adds	r3, r7, #7
 8005ac6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ac8:	f7fd fb52 	bl	8003170 <HAL_GetTick>
 8005acc:	0002      	movs	r2, r0
 8005ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad0:	1a9b      	subs	r3, r3, r2
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	18d3      	adds	r3, r2, r3
 8005ad6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ad8:	f7fd fb4a 	bl	8003170 <HAL_GetTick>
 8005adc:	0003      	movs	r3, r0
 8005ade:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ae0:	4b3a      	ldr	r3, [pc, #232]	; (8005bcc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	015b      	lsls	r3, r3, #5
 8005ae6:	0d1b      	lsrs	r3, r3, #20
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	4353      	muls	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aee:	e058      	b.n	8005ba2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	3301      	adds	r3, #1
 8005af4:	d055      	beq.n	8005ba2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005af6:	f7fd fb3b 	bl	8003170 <HAL_GetTick>
 8005afa:	0002      	movs	r2, r0
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	69fa      	ldr	r2, [r7, #28]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d902      	bls.n	8005b0c <SPI_WaitFlagStateUntilTimeout+0x54>
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d142      	bne.n	8005b92 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	21e0      	movs	r1, #224	; 0xe0
 8005b18:	438a      	bics	r2, r1
 8005b1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	2382      	movs	r3, #130	; 0x82
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d113      	bne.n	8005b50 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	2380      	movs	r3, #128	; 0x80
 8005b2e:	021b      	lsls	r3, r3, #8
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d005      	beq.n	8005b40 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	2380      	movs	r3, #128	; 0x80
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d107      	bne.n	8005b50 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2140      	movs	r1, #64	; 0x40
 8005b4c:	438a      	bics	r2, r1
 8005b4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b54:	2380      	movs	r3, #128	; 0x80
 8005b56:	019b      	lsls	r3, r3, #6
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d110      	bne.n	8005b7e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	491a      	ldr	r1, [pc, #104]	; (8005bd0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005b68:	400a      	ands	r2, r1
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2180      	movs	r1, #128	; 0x80
 8005b78:	0189      	lsls	r1, r1, #6
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2251      	movs	r2, #81	; 0x51
 8005b82:	2101      	movs	r1, #1
 8005b84:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2250      	movs	r2, #80	; 0x50
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e017      	b.n	8005bc2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	4013      	ands	r3, r2
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	425a      	negs	r2, r3
 8005bb2:	4153      	adcs	r3, r2
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	001a      	movs	r2, r3
 8005bb8:	1dfb      	adds	r3, r7, #7
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d197      	bne.n	8005af0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	b008      	add	sp, #32
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	20000010 	.word	0x20000010
 8005bd0:	ffffdfff 	.word	0xffffdfff

08005bd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005be0:	4b1d      	ldr	r3, [pc, #116]	; (8005c58 <SPI_EndRxTxTransaction+0x84>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	491d      	ldr	r1, [pc, #116]	; (8005c5c <SPI_EndRxTxTransaction+0x88>)
 8005be6:	0018      	movs	r0, r3
 8005be8:	f7fa fa8e 	bl	8000108 <__udivsi3>
 8005bec:	0003      	movs	r3, r0
 8005bee:	001a      	movs	r2, r3
 8005bf0:	0013      	movs	r3, r2
 8005bf2:	015b      	lsls	r3, r3, #5
 8005bf4:	1a9b      	subs	r3, r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	189b      	adds	r3, r3, r2
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	2382      	movs	r3, #130	; 0x82
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d112      	bne.n	8005c30 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	0013      	movs	r3, r2
 8005c14:	2200      	movs	r2, #0
 8005c16:	2180      	movs	r1, #128	; 0x80
 8005c18:	f7ff ff4e 	bl	8005ab8 <SPI_WaitFlagStateUntilTimeout>
 8005c1c:	1e03      	subs	r3, r0, #0
 8005c1e:	d016      	beq.n	8005c4e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c24:	2220      	movs	r2, #32
 8005c26:	431a      	orrs	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e00f      	b.n	8005c50 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00a      	beq.n	8005c4c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	2280      	movs	r2, #128	; 0x80
 8005c44:	4013      	ands	r3, r2
 8005c46:	2b80      	cmp	r3, #128	; 0x80
 8005c48:	d0f2      	beq.n	8005c30 <SPI_EndRxTxTransaction+0x5c>
 8005c4a:	e000      	b.n	8005c4e <SPI_EndRxTxTransaction+0x7a>
        break;
 8005c4c:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	0018      	movs	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	b006      	add	sp, #24
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	20000010 	.word	0x20000010
 8005c5c:	016e3600 	.word	0x016e3600

08005c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e032      	b.n	8005cd8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2239      	movs	r2, #57	; 0x39
 8005c76:	5c9b      	ldrb	r3, [r3, r2]
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d107      	bne.n	8005c8e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2238      	movs	r2, #56	; 0x38
 8005c82:	2100      	movs	r1, #0
 8005c84:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f7fc fe51 	bl	8002930 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2239      	movs	r2, #57	; 0x39
 8005c92:	2102      	movs	r1, #2
 8005c94:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	0019      	movs	r1, r3
 8005ca0:	0010      	movs	r0, r2
 8005ca2:	f000 ff87 	bl	8006bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	223e      	movs	r2, #62	; 0x3e
 8005caa:	2101      	movs	r1, #1
 8005cac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	223a      	movs	r2, #58	; 0x3a
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	5499      	strb	r1, [r3, r2]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	223b      	movs	r2, #59	; 0x3b
 8005cba:	2101      	movs	r1, #1
 8005cbc:	5499      	strb	r1, [r3, r2]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	223c      	movs	r2, #60	; 0x3c
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	5499      	strb	r1, [r3, r2]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	223d      	movs	r2, #61	; 0x3d
 8005cca:	2101      	movs	r1, #1
 8005ccc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2239      	movs	r2, #57	; 0x39
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	0018      	movs	r0, r3
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	b002      	add	sp, #8
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e032      	b.n	8005d58 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2239      	movs	r2, #57	; 0x39
 8005cf6:	5c9b      	ldrb	r3, [r3, r2]
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d107      	bne.n	8005d0e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2238      	movs	r2, #56	; 0x38
 8005d02:	2100      	movs	r1, #0
 8005d04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f000 f829 	bl	8005d60 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2239      	movs	r2, #57	; 0x39
 8005d12:	2102      	movs	r1, #2
 8005d14:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	0019      	movs	r1, r3
 8005d20:	0010      	movs	r0, r2
 8005d22:	f000 ff47 	bl	8006bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	223e      	movs	r2, #62	; 0x3e
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	223a      	movs	r2, #58	; 0x3a
 8005d32:	2101      	movs	r1, #1
 8005d34:	5499      	strb	r1, [r3, r2]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	223b      	movs	r2, #59	; 0x3b
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	5499      	strb	r1, [r3, r2]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	223c      	movs	r2, #60	; 0x3c
 8005d42:	2101      	movs	r1, #1
 8005d44:	5499      	strb	r1, [r3, r2]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	223d      	movs	r2, #61	; 0x3d
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2239      	movs	r2, #57	; 0x39
 8005d52:	2101      	movs	r1, #1
 8005d54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	0018      	movs	r0, r3
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	b002      	add	sp, #8
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005d68:	46c0      	nop			; (mov r8, r8)
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	b002      	add	sp, #8
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d7a:	230f      	movs	r3, #15
 8005d7c:	18fb      	adds	r3, r7, r3
 8005d7e:	2200      	movs	r2, #0
 8005d80:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d108      	bne.n	8005d9a <HAL_TIM_OC_Start_IT+0x2a>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	223a      	movs	r2, #58	; 0x3a
 8005d8c:	5c9b      	ldrb	r3, [r3, r2]
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	1e5a      	subs	r2, r3, #1
 8005d94:	4193      	sbcs	r3, r2
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	e01f      	b.n	8005dda <HAL_TIM_OC_Start_IT+0x6a>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b04      	cmp	r3, #4
 8005d9e:	d108      	bne.n	8005db2 <HAL_TIM_OC_Start_IT+0x42>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	223b      	movs	r2, #59	; 0x3b
 8005da4:	5c9b      	ldrb	r3, [r3, r2]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	3b01      	subs	r3, #1
 8005daa:	1e5a      	subs	r2, r3, #1
 8005dac:	4193      	sbcs	r3, r2
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	e013      	b.n	8005dda <HAL_TIM_OC_Start_IT+0x6a>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	d108      	bne.n	8005dca <HAL_TIM_OC_Start_IT+0x5a>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	223c      	movs	r2, #60	; 0x3c
 8005dbc:	5c9b      	ldrb	r3, [r3, r2]
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	1e5a      	subs	r2, r3, #1
 8005dc4:	4193      	sbcs	r3, r2
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	e007      	b.n	8005dda <HAL_TIM_OC_Start_IT+0x6a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	223d      	movs	r2, #61	; 0x3d
 8005dce:	5c9b      	ldrb	r3, [r3, r2]
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	1e5a      	subs	r2, r3, #1
 8005dd6:	4193      	sbcs	r3, r2
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e090      	b.n	8005f04 <HAL_TIM_OC_Start_IT+0x194>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d104      	bne.n	8005df2 <HAL_TIM_OC_Start_IT+0x82>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	223a      	movs	r2, #58	; 0x3a
 8005dec:	2102      	movs	r1, #2
 8005dee:	5499      	strb	r1, [r3, r2]
 8005df0:	e013      	b.n	8005e1a <HAL_TIM_OC_Start_IT+0xaa>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d104      	bne.n	8005e02 <HAL_TIM_OC_Start_IT+0x92>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	223b      	movs	r2, #59	; 0x3b
 8005dfc:	2102      	movs	r1, #2
 8005dfe:	5499      	strb	r1, [r3, r2]
 8005e00:	e00b      	b.n	8005e1a <HAL_TIM_OC_Start_IT+0xaa>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d104      	bne.n	8005e12 <HAL_TIM_OC_Start_IT+0xa2>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	223c      	movs	r2, #60	; 0x3c
 8005e0c:	2102      	movs	r1, #2
 8005e0e:	5499      	strb	r1, [r3, r2]
 8005e10:	e003      	b.n	8005e1a <HAL_TIM_OC_Start_IT+0xaa>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	223d      	movs	r2, #61	; 0x3d
 8005e16:	2102      	movs	r1, #2
 8005e18:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b0c      	cmp	r3, #12
 8005e1e:	d02a      	beq.n	8005e76 <HAL_TIM_OC_Start_IT+0x106>
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	2b0c      	cmp	r3, #12
 8005e24:	d830      	bhi.n	8005e88 <HAL_TIM_OC_Start_IT+0x118>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b08      	cmp	r3, #8
 8005e2a:	d01b      	beq.n	8005e64 <HAL_TIM_OC_Start_IT+0xf4>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	2b08      	cmp	r3, #8
 8005e30:	d82a      	bhi.n	8005e88 <HAL_TIM_OC_Start_IT+0x118>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_TIM_OC_Start_IT+0xd0>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d009      	beq.n	8005e52 <HAL_TIM_OC_Start_IT+0xe2>
 8005e3e:	e023      	b.n	8005e88 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2102      	movs	r1, #2
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	60da      	str	r2, [r3, #12]
      break;
 8005e50:	e01f      	b.n	8005e92 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2104      	movs	r1, #4
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	60da      	str	r2, [r3, #12]
      break;
 8005e62:	e016      	b.n	8005e92 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2108      	movs	r1, #8
 8005e70:	430a      	orrs	r2, r1
 8005e72:	60da      	str	r2, [r3, #12]
      break;
 8005e74:	e00d      	b.n	8005e92 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68da      	ldr	r2, [r3, #12]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2110      	movs	r1, #16
 8005e82:	430a      	orrs	r2, r1
 8005e84:	60da      	str	r2, [r3, #12]
      break;
 8005e86:	e004      	b.n	8005e92 <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8005e88:	230f      	movs	r3, #15
 8005e8a:	18fb      	adds	r3, r7, r3
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	701a      	strb	r2, [r3, #0]
      break;
 8005e90:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005e92:	230f      	movs	r3, #15
 8005e94:	18fb      	adds	r3, r7, r3
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d130      	bne.n	8005efe <HAL_TIM_OC_Start_IT+0x18e>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6839      	ldr	r1, [r7, #0]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	f001 f877 	bl	8006f98 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	2380      	movs	r3, #128	; 0x80
 8005eb0:	05db      	lsls	r3, r3, #23
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d009      	beq.n	8005eca <HAL_TIM_OC_Start_IT+0x15a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a14      	ldr	r2, [pc, #80]	; (8005f0c <HAL_TIM_OC_Start_IT+0x19c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d004      	beq.n	8005eca <HAL_TIM_OC_Start_IT+0x15a>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a12      	ldr	r2, [pc, #72]	; (8005f10 <HAL_TIM_OC_Start_IT+0x1a0>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d111      	bne.n	8005eee <HAL_TIM_OC_Start_IT+0x17e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	2207      	movs	r2, #7
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b06      	cmp	r3, #6
 8005eda:	d010      	beq.n	8005efe <HAL_TIM_OC_Start_IT+0x18e>
      {
        __HAL_TIM_ENABLE(htim);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eec:	e007      	b.n	8005efe <HAL_TIM_OC_Start_IT+0x18e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2101      	movs	r1, #1
 8005efa:	430a      	orrs	r2, r1
 8005efc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005efe:	230f      	movs	r3, #15
 8005f00:	18fb      	adds	r3, r7, r3
 8005f02:	781b      	ldrb	r3, [r3, #0]
}
 8005f04:	0018      	movs	r0, r3
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b004      	add	sp, #16
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	40010800 	.word	0x40010800
 8005f10:	40011400 	.word	0x40011400

08005f14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e032      	b.n	8005f8c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2239      	movs	r2, #57	; 0x39
 8005f2a:	5c9b      	ldrb	r3, [r3, r2]
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d107      	bne.n	8005f42 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2238      	movs	r2, #56	; 0x38
 8005f36:	2100      	movs	r1, #0
 8005f38:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	0018      	movs	r0, r3
 8005f3e:	f000 f829 	bl	8005f94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2239      	movs	r2, #57	; 0x39
 8005f46:	2102      	movs	r1, #2
 8005f48:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	3304      	adds	r3, #4
 8005f52:	0019      	movs	r1, r3
 8005f54:	0010      	movs	r0, r2
 8005f56:	f000 fe2d 	bl	8006bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	223e      	movs	r2, #62	; 0x3e
 8005f5e:	2101      	movs	r1, #1
 8005f60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	223a      	movs	r2, #58	; 0x3a
 8005f66:	2101      	movs	r1, #1
 8005f68:	5499      	strb	r1, [r3, r2]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	223b      	movs	r2, #59	; 0x3b
 8005f6e:	2101      	movs	r1, #1
 8005f70:	5499      	strb	r1, [r3, r2]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	223c      	movs	r2, #60	; 0x3c
 8005f76:	2101      	movs	r1, #1
 8005f78:	5499      	strb	r1, [r3, r2]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	223d      	movs	r2, #61	; 0x3d
 8005f7e:	2101      	movs	r1, #1
 8005f80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2239      	movs	r2, #57	; 0x39
 8005f86:	2101      	movs	r1, #1
 8005f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b002      	add	sp, #8
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f9c:	46c0      	nop			; (mov r8, r8)
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	b002      	add	sp, #8
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
 8005fb0:	001a      	movs	r2, r3
 8005fb2:	1cbb      	adds	r3, r7, #2
 8005fb4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb6:	2317      	movs	r3, #23
 8005fb8:	18fb      	adds	r3, r7, r3
 8005fba:	2200      	movs	r2, #0
 8005fbc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d108      	bne.n	8005fd6 <HAL_TIM_PWM_Start_DMA+0x32>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	223a      	movs	r2, #58	; 0x3a
 8005fc8:	5c9b      	ldrb	r3, [r3, r2]
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	3b02      	subs	r3, #2
 8005fce:	425a      	negs	r2, r3
 8005fd0:	4153      	adcs	r3, r2
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	e01f      	b.n	8006016 <HAL_TIM_PWM_Start_DMA+0x72>
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d108      	bne.n	8005fee <HAL_TIM_PWM_Start_DMA+0x4a>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	223b      	movs	r2, #59	; 0x3b
 8005fe0:	5c9b      	ldrb	r3, [r3, r2]
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	3b02      	subs	r3, #2
 8005fe6:	425a      	negs	r2, r3
 8005fe8:	4153      	adcs	r3, r2
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	e013      	b.n	8006016 <HAL_TIM_PWM_Start_DMA+0x72>
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d108      	bne.n	8006006 <HAL_TIM_PWM_Start_DMA+0x62>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	223c      	movs	r2, #60	; 0x3c
 8005ff8:	5c9b      	ldrb	r3, [r3, r2]
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	3b02      	subs	r3, #2
 8005ffe:	425a      	negs	r2, r3
 8006000:	4153      	adcs	r3, r2
 8006002:	b2db      	uxtb	r3, r3
 8006004:	e007      	b.n	8006016 <HAL_TIM_PWM_Start_DMA+0x72>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	223d      	movs	r2, #61	; 0x3d
 800600a:	5c9b      	ldrb	r3, [r3, r2]
 800600c:	b2db      	uxtb	r3, r3
 800600e:	3b02      	subs	r3, #2
 8006010:	425a      	negs	r2, r3
 8006012:	4153      	adcs	r3, r2
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800601a:	2302      	movs	r3, #2
 800601c:	e13d      	b.n	800629a <HAL_TIM_PWM_Start_DMA+0x2f6>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d108      	bne.n	8006036 <HAL_TIM_PWM_Start_DMA+0x92>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	223a      	movs	r2, #58	; 0x3a
 8006028:	5c9b      	ldrb	r3, [r3, r2]
 800602a:	b2db      	uxtb	r3, r3
 800602c:	3b01      	subs	r3, #1
 800602e:	425a      	negs	r2, r3
 8006030:	4153      	adcs	r3, r2
 8006032:	b2db      	uxtb	r3, r3
 8006034:	e01f      	b.n	8006076 <HAL_TIM_PWM_Start_DMA+0xd2>
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2b04      	cmp	r3, #4
 800603a:	d108      	bne.n	800604e <HAL_TIM_PWM_Start_DMA+0xaa>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	223b      	movs	r2, #59	; 0x3b
 8006040:	5c9b      	ldrb	r3, [r3, r2]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	3b01      	subs	r3, #1
 8006046:	425a      	negs	r2, r3
 8006048:	4153      	adcs	r3, r2
 800604a:	b2db      	uxtb	r3, r3
 800604c:	e013      	b.n	8006076 <HAL_TIM_PWM_Start_DMA+0xd2>
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b08      	cmp	r3, #8
 8006052:	d108      	bne.n	8006066 <HAL_TIM_PWM_Start_DMA+0xc2>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	223c      	movs	r2, #60	; 0x3c
 8006058:	5c9b      	ldrb	r3, [r3, r2]
 800605a:	b2db      	uxtb	r3, r3
 800605c:	3b01      	subs	r3, #1
 800605e:	425a      	negs	r2, r3
 8006060:	4153      	adcs	r3, r2
 8006062:	b2db      	uxtb	r3, r3
 8006064:	e007      	b.n	8006076 <HAL_TIM_PWM_Start_DMA+0xd2>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	223d      	movs	r2, #61	; 0x3d
 800606a:	5c9b      	ldrb	r3, [r3, r2]
 800606c:	b2db      	uxtb	r3, r3
 800606e:	3b01      	subs	r3, #1
 8006070:	425a      	negs	r2, r3
 8006072:	4153      	adcs	r3, r2
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d025      	beq.n	80060c6 <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <HAL_TIM_PWM_Start_DMA+0xe4>
 8006080:	1cbb      	adds	r3, r7, #2
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e106      	b.n	800629a <HAL_TIM_PWM_Start_DMA+0x2f6>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d104      	bne.n	800609c <HAL_TIM_PWM_Start_DMA+0xf8>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	223a      	movs	r2, #58	; 0x3a
 8006096:	2102      	movs	r1, #2
 8006098:	5499      	strb	r1, [r3, r2]
 800609a:	e016      	b.n	80060ca <HAL_TIM_PWM_Start_DMA+0x126>
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b04      	cmp	r3, #4
 80060a0:	d104      	bne.n	80060ac <HAL_TIM_PWM_Start_DMA+0x108>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	223b      	movs	r2, #59	; 0x3b
 80060a6:	2102      	movs	r1, #2
 80060a8:	5499      	strb	r1, [r3, r2]
 80060aa:	e00e      	b.n	80060ca <HAL_TIM_PWM_Start_DMA+0x126>
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	d104      	bne.n	80060bc <HAL_TIM_PWM_Start_DMA+0x118>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	223c      	movs	r2, #60	; 0x3c
 80060b6:	2102      	movs	r1, #2
 80060b8:	5499      	strb	r1, [r3, r2]
 80060ba:	e006      	b.n	80060ca <HAL_TIM_PWM_Start_DMA+0x126>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	223d      	movs	r2, #61	; 0x3d
 80060c0:	2102      	movs	r1, #2
 80060c2:	5499      	strb	r1, [r3, r2]
 80060c4:	e001      	b.n	80060ca <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e0e7      	b.n	800629a <HAL_TIM_PWM_Start_DMA+0x2f6>
  }

  switch (Channel)
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2b0c      	cmp	r3, #12
 80060ce:	d100      	bne.n	80060d2 <HAL_TIM_PWM_Start_DMA+0x12e>
 80060d0:	e080      	b.n	80061d4 <HAL_TIM_PWM_Start_DMA+0x230>
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b0c      	cmp	r3, #12
 80060d6:	d900      	bls.n	80060da <HAL_TIM_PWM_Start_DMA+0x136>
 80060d8:	e0a1      	b.n	800621e <HAL_TIM_PWM_Start_DMA+0x27a>
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b08      	cmp	r3, #8
 80060de:	d054      	beq.n	800618a <HAL_TIM_PWM_Start_DMA+0x1e6>
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d900      	bls.n	80060e8 <HAL_TIM_PWM_Start_DMA+0x144>
 80060e6:	e09a      	b.n	800621e <HAL_TIM_PWM_Start_DMA+0x27a>
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_TIM_PWM_Start_DMA+0x152>
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b04      	cmp	r3, #4
 80060f2:	d025      	beq.n	8006140 <HAL_TIM_PWM_Start_DMA+0x19c>
 80060f4:	e093      	b.n	800621e <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	4a6a      	ldr	r2, [pc, #424]	; (80062a4 <HAL_TIM_PWM_Start_DMA+0x300>)
 80060fc:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	4a69      	ldr	r2, [pc, #420]	; (80062a8 <HAL_TIM_PWM_Start_DMA+0x304>)
 8006104:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	4a68      	ldr	r2, [pc, #416]	; (80062ac <HAL_TIM_PWM_Start_DMA+0x308>)
 800610c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6a18      	ldr	r0, [r3, #32]
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3334      	adds	r3, #52	; 0x34
 800611a:	001a      	movs	r2, r3
 800611c:	1cbb      	adds	r3, r7, #2
 800611e:	881b      	ldrh	r3, [r3, #0]
 8006120:	f7fd f986 	bl	8003430 <HAL_DMA_Start_IT>
 8006124:	1e03      	subs	r3, r0, #0
 8006126:	d001      	beq.n	800612c <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e0b6      	b.n	800629a <HAL_TIM_PWM_Start_DMA+0x2f6>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2180      	movs	r1, #128	; 0x80
 8006138:	0089      	lsls	r1, r1, #2
 800613a:	430a      	orrs	r2, r1
 800613c:	60da      	str	r2, [r3, #12]
      break;
 800613e:	e073      	b.n	8006228 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	4a57      	ldr	r2, [pc, #348]	; (80062a4 <HAL_TIM_PWM_Start_DMA+0x300>)
 8006146:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	4a56      	ldr	r2, [pc, #344]	; (80062a8 <HAL_TIM_PWM_Start_DMA+0x304>)
 800614e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	4a55      	ldr	r2, [pc, #340]	; (80062ac <HAL_TIM_PWM_Start_DMA+0x308>)
 8006156:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800615c:	6879      	ldr	r1, [r7, #4]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3338      	adds	r3, #56	; 0x38
 8006164:	001a      	movs	r2, r3
 8006166:	1cbb      	adds	r3, r7, #2
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	f7fd f961 	bl	8003430 <HAL_DMA_Start_IT>
 800616e:	1e03      	subs	r3, r0, #0
 8006170:	d001      	beq.n	8006176 <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e091      	b.n	800629a <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68da      	ldr	r2, [r3, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2180      	movs	r1, #128	; 0x80
 8006182:	00c9      	lsls	r1, r1, #3
 8006184:	430a      	orrs	r2, r1
 8006186:	60da      	str	r2, [r3, #12]
      break;
 8006188:	e04e      	b.n	8006228 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	4a45      	ldr	r2, [pc, #276]	; (80062a4 <HAL_TIM_PWM_Start_DMA+0x300>)
 8006190:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006196:	4a44      	ldr	r2, [pc, #272]	; (80062a8 <HAL_TIM_PWM_Start_DMA+0x304>)
 8006198:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619e:	4a43      	ldr	r2, [pc, #268]	; (80062ac <HAL_TIM_PWM_Start_DMA+0x308>)
 80061a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80061a6:	6879      	ldr	r1, [r7, #4]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	333c      	adds	r3, #60	; 0x3c
 80061ae:	001a      	movs	r2, r3
 80061b0:	1cbb      	adds	r3, r7, #2
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	f7fd f93c 	bl	8003430 <HAL_DMA_Start_IT>
 80061b8:	1e03      	subs	r3, r0, #0
 80061ba:	d001      	beq.n	80061c0 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e06c      	b.n	800629a <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2180      	movs	r1, #128	; 0x80
 80061cc:	0109      	lsls	r1, r1, #4
 80061ce:	430a      	orrs	r2, r1
 80061d0:	60da      	str	r2, [r3, #12]
      break;
 80061d2:	e029      	b.n	8006228 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	4a32      	ldr	r2, [pc, #200]	; (80062a4 <HAL_TIM_PWM_Start_DMA+0x300>)
 80061da:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	4a31      	ldr	r2, [pc, #196]	; (80062a8 <HAL_TIM_PWM_Start_DMA+0x304>)
 80061e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	4a30      	ldr	r2, [pc, #192]	; (80062ac <HAL_TIM_PWM_Start_DMA+0x308>)
 80061ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80061f0:	6879      	ldr	r1, [r7, #4]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3340      	adds	r3, #64	; 0x40
 80061f8:	001a      	movs	r2, r3
 80061fa:	1cbb      	adds	r3, r7, #2
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	f7fd f917 	bl	8003430 <HAL_DMA_Start_IT>
 8006202:	1e03      	subs	r3, r0, #0
 8006204:	d001      	beq.n	800620a <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e047      	b.n	800629a <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68da      	ldr	r2, [r3, #12]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2180      	movs	r1, #128	; 0x80
 8006216:	0149      	lsls	r1, r1, #5
 8006218:	430a      	orrs	r2, r1
 800621a:	60da      	str	r2, [r3, #12]
      break;
 800621c:	e004      	b.n	8006228 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 800621e:	2317      	movs	r3, #23
 8006220:	18fb      	adds	r3, r7, r3
 8006222:	2201      	movs	r2, #1
 8006224:	701a      	strb	r2, [r3, #0]
      break;
 8006226:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8006228:	2317      	movs	r3, #23
 800622a:	18fb      	adds	r3, r7, r3
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d130      	bne.n	8006294 <HAL_TIM_PWM_Start_DMA+0x2f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68b9      	ldr	r1, [r7, #8]
 8006238:	2201      	movs	r2, #1
 800623a:	0018      	movs	r0, r3
 800623c:	f000 feac 	bl	8006f98 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	2380      	movs	r3, #128	; 0x80
 8006246:	05db      	lsls	r3, r3, #23
 8006248:	429a      	cmp	r2, r3
 800624a:	d009      	beq.n	8006260 <HAL_TIM_PWM_Start_DMA+0x2bc>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a17      	ldr	r2, [pc, #92]	; (80062b0 <HAL_TIM_PWM_Start_DMA+0x30c>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d004      	beq.n	8006260 <HAL_TIM_PWM_Start_DMA+0x2bc>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a16      	ldr	r2, [pc, #88]	; (80062b4 <HAL_TIM_PWM_Start_DMA+0x310>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d111      	bne.n	8006284 <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	2207      	movs	r2, #7
 8006268:	4013      	ands	r3, r2
 800626a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	2b06      	cmp	r3, #6
 8006270:	d010      	beq.n	8006294 <HAL_TIM_PWM_Start_DMA+0x2f0>
      {
        __HAL_TIM_ENABLE(htim);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2101      	movs	r1, #1
 800627e:	430a      	orrs	r2, r1
 8006280:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006282:	e007      	b.n	8006294 <HAL_TIM_PWM_Start_DMA+0x2f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2101      	movs	r1, #1
 8006290:	430a      	orrs	r2, r1
 8006292:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006294:	2317      	movs	r3, #23
 8006296:	18fb      	adds	r3, r7, r3
 8006298:	781b      	ldrb	r3, [r3, #0]
}
 800629a:	0018      	movs	r0, r3
 800629c:	46bd      	mov	sp, r7
 800629e:	b006      	add	sp, #24
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	08006aa1 	.word	0x08006aa1
 80062a8:	08006b4b 	.word	0x08006b4b
 80062ac:	08006a0d 	.word	0x08006a0d
 80062b0:	40010800 	.word	0x40010800
 80062b4:	40011400 	.word	0x40011400

080062b8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062c2:	230f      	movs	r3, #15
 80062c4:	18fb      	adds	r3, r7, r3
 80062c6:	2200      	movs	r2, #0
 80062c8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b0c      	cmp	r3, #12
 80062ce:	d039      	beq.n	8006344 <HAL_TIM_PWM_Stop_DMA+0x8c>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b0c      	cmp	r3, #12
 80062d4:	d844      	bhi.n	8006360 <HAL_TIM_PWM_Stop_DMA+0xa8>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b08      	cmp	r3, #8
 80062da:	d025      	beq.n	8006328 <HAL_TIM_PWM_Stop_DMA+0x70>
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2b08      	cmp	r3, #8
 80062e0:	d83e      	bhi.n	8006360 <HAL_TIM_PWM_Stop_DMA+0xa8>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <HAL_TIM_PWM_Stop_DMA+0x38>
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	2b04      	cmp	r3, #4
 80062ec:	d00e      	beq.n	800630c <HAL_TIM_PWM_Stop_DMA+0x54>
 80062ee:	e037      	b.n	8006360 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	493a      	ldr	r1, [pc, #232]	; (80063e4 <HAL_TIM_PWM_Stop_DMA+0x12c>)
 80062fc:	400a      	ands	r2, r1
 80062fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	0018      	movs	r0, r3
 8006306:	f7fd f8f9 	bl	80034fc <HAL_DMA_Abort_IT>
      break;
 800630a:	e02e      	b.n	800636a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4934      	ldr	r1, [pc, #208]	; (80063e8 <HAL_TIM_PWM_Stop_DMA+0x130>)
 8006318:	400a      	ands	r2, r1
 800631a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	0018      	movs	r0, r3
 8006322:	f7fd f8eb 	bl	80034fc <HAL_DMA_Abort_IT>
      break;
 8006326:	e020      	b.n	800636a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	492e      	ldr	r1, [pc, #184]	; (80063ec <HAL_TIM_PWM_Stop_DMA+0x134>)
 8006334:	400a      	ands	r2, r1
 8006336:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633c:	0018      	movs	r0, r3
 800633e:	f7fd f8dd 	bl	80034fc <HAL_DMA_Abort_IT>
      break;
 8006342:	e012      	b.n	800636a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4928      	ldr	r1, [pc, #160]	; (80063f0 <HAL_TIM_PWM_Stop_DMA+0x138>)
 8006350:	400a      	ands	r2, r1
 8006352:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	0018      	movs	r0, r3
 800635a:	f7fd f8cf 	bl	80034fc <HAL_DMA_Abort_IT>
      break;
 800635e:	e004      	b.n	800636a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8006360:	230f      	movs	r3, #15
 8006362:	18fb      	adds	r3, r7, r3
 8006364:	2201      	movs	r2, #1
 8006366:	701a      	strb	r2, [r3, #0]
      break;
 8006368:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800636a:	230f      	movs	r3, #15
 800636c:	18fb      	adds	r3, r7, r3
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d130      	bne.n	80063d6 <HAL_TIM_PWM_Stop_DMA+0x11e>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	2200      	movs	r2, #0
 800637c:	0018      	movs	r0, r3
 800637e:	f000 fe0b 	bl	8006f98 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	4a1a      	ldr	r2, [pc, #104]	; (80063f4 <HAL_TIM_PWM_Stop_DMA+0x13c>)
 800638a:	4013      	ands	r3, r2
 800638c:	d107      	bne.n	800639e <HAL_TIM_PWM_Stop_DMA+0xe6>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2101      	movs	r1, #1
 800639a:	438a      	bics	r2, r1
 800639c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d104      	bne.n	80063ae <HAL_TIM_PWM_Stop_DMA+0xf6>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	223a      	movs	r2, #58	; 0x3a
 80063a8:	2101      	movs	r1, #1
 80063aa:	5499      	strb	r1, [r3, r2]
 80063ac:	e013      	b.n	80063d6 <HAL_TIM_PWM_Stop_DMA+0x11e>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	d104      	bne.n	80063be <HAL_TIM_PWM_Stop_DMA+0x106>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	223b      	movs	r2, #59	; 0x3b
 80063b8:	2101      	movs	r1, #1
 80063ba:	5499      	strb	r1, [r3, r2]
 80063bc:	e00b      	b.n	80063d6 <HAL_TIM_PWM_Stop_DMA+0x11e>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d104      	bne.n	80063ce <HAL_TIM_PWM_Stop_DMA+0x116>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	223c      	movs	r2, #60	; 0x3c
 80063c8:	2101      	movs	r1, #1
 80063ca:	5499      	strb	r1, [r3, r2]
 80063cc:	e003      	b.n	80063d6 <HAL_TIM_PWM_Stop_DMA+0x11e>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	223d      	movs	r2, #61	; 0x3d
 80063d2:	2101      	movs	r1, #1
 80063d4:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80063d6:	230f      	movs	r3, #15
 80063d8:	18fb      	adds	r3, r7, r3
 80063da:	781b      	ldrb	r3, [r3, #0]
}
 80063dc:	0018      	movs	r0, r3
 80063de:	46bd      	mov	sp, r7
 80063e0:	b004      	add	sp, #16
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	fffffdff 	.word	0xfffffdff
 80063e8:	fffffbff 	.word	0xfffffbff
 80063ec:	fffff7ff 	.word	0xfffff7ff
 80063f0:	ffffefff 	.word	0xffffefff
 80063f4:	00001111 	.word	0x00001111

080063f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2202      	movs	r2, #2
 8006408:	4013      	ands	r3, r2
 800640a:	2b02      	cmp	r3, #2
 800640c:	d124      	bne.n	8006458 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2202      	movs	r2, #2
 8006416:	4013      	ands	r3, r2
 8006418:	2b02      	cmp	r3, #2
 800641a:	d11d      	bne.n	8006458 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2203      	movs	r2, #3
 8006422:	4252      	negs	r2, r2
 8006424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	2203      	movs	r2, #3
 8006434:	4013      	ands	r3, r2
 8006436:	d004      	beq.n	8006442 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	0018      	movs	r0, r3
 800643c:	f000 fac6 	bl	80069cc <HAL_TIM_IC_CaptureCallback>
 8006440:	e007      	b.n	8006452 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	0018      	movs	r0, r3
 8006446:	f000 fab9 	bl	80069bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	0018      	movs	r0, r3
 800644e:	f7fa fc03 	bl	8000c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	2204      	movs	r2, #4
 8006460:	4013      	ands	r3, r2
 8006462:	2b04      	cmp	r3, #4
 8006464:	d125      	bne.n	80064b2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	2204      	movs	r2, #4
 800646e:	4013      	ands	r3, r2
 8006470:	2b04      	cmp	r3, #4
 8006472:	d11e      	bne.n	80064b2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2205      	movs	r2, #5
 800647a:	4252      	negs	r2, r2
 800647c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2202      	movs	r2, #2
 8006482:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	23c0      	movs	r3, #192	; 0xc0
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4013      	ands	r3, r2
 8006490:	d004      	beq.n	800649c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	0018      	movs	r0, r3
 8006496:	f000 fa99 	bl	80069cc <HAL_TIM_IC_CaptureCallback>
 800649a:	e007      	b.n	80064ac <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	0018      	movs	r0, r3
 80064a0:	f000 fa8c 	bl	80069bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	0018      	movs	r0, r3
 80064a8:	f7fa fbd6 	bl	8000c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	2208      	movs	r2, #8
 80064ba:	4013      	ands	r3, r2
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d124      	bne.n	800650a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	2208      	movs	r2, #8
 80064c8:	4013      	ands	r3, r2
 80064ca:	2b08      	cmp	r3, #8
 80064cc:	d11d      	bne.n	800650a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2209      	movs	r2, #9
 80064d4:	4252      	negs	r2, r2
 80064d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2204      	movs	r2, #4
 80064dc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	2203      	movs	r2, #3
 80064e6:	4013      	ands	r3, r2
 80064e8:	d004      	beq.n	80064f4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	0018      	movs	r0, r3
 80064ee:	f000 fa6d 	bl	80069cc <HAL_TIM_IC_CaptureCallback>
 80064f2:	e007      	b.n	8006504 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	0018      	movs	r0, r3
 80064f8:	f000 fa60 	bl	80069bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	0018      	movs	r0, r3
 8006500:	f7fa fbaa 	bl	8000c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	2210      	movs	r2, #16
 8006512:	4013      	ands	r3, r2
 8006514:	2b10      	cmp	r3, #16
 8006516:	d125      	bne.n	8006564 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	2210      	movs	r2, #16
 8006520:	4013      	ands	r3, r2
 8006522:	2b10      	cmp	r3, #16
 8006524:	d11e      	bne.n	8006564 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2211      	movs	r2, #17
 800652c:	4252      	negs	r2, r2
 800652e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2208      	movs	r2, #8
 8006534:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69da      	ldr	r2, [r3, #28]
 800653c:	23c0      	movs	r3, #192	; 0xc0
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4013      	ands	r3, r2
 8006542:	d004      	beq.n	800654e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	0018      	movs	r0, r3
 8006548:	f000 fa40 	bl	80069cc <HAL_TIM_IC_CaptureCallback>
 800654c:	e007      	b.n	800655e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	0018      	movs	r0, r3
 8006552:	f000 fa33 	bl	80069bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	0018      	movs	r0, r3
 800655a:	f7fa fb7d 	bl	8000c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	2201      	movs	r2, #1
 800656c:	4013      	ands	r3, r2
 800656e:	2b01      	cmp	r3, #1
 8006570:	d10f      	bne.n	8006592 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	2201      	movs	r2, #1
 800657a:	4013      	ands	r3, r2
 800657c:	2b01      	cmp	r3, #1
 800657e:	d108      	bne.n	8006592 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2202      	movs	r2, #2
 8006586:	4252      	negs	r2, r2
 8006588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	0018      	movs	r0, r3
 800658e:	f000 fa0d 	bl	80069ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	2240      	movs	r2, #64	; 0x40
 800659a:	4013      	ands	r3, r2
 800659c:	2b40      	cmp	r3, #64	; 0x40
 800659e:	d10f      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	2240      	movs	r2, #64	; 0x40
 80065a8:	4013      	ands	r3, r2
 80065aa:	2b40      	cmp	r3, #64	; 0x40
 80065ac:	d108      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2241      	movs	r2, #65	; 0x41
 80065b4:	4252      	negs	r2, r2
 80065b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	0018      	movs	r0, r3
 80065bc:	f000 fa16 	bl	80069ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065c0:	46c0      	nop			; (mov r8, r8)
 80065c2:	46bd      	mov	sp, r7
 80065c4:	b002      	add	sp, #8
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065d4:	2317      	movs	r3, #23
 80065d6:	18fb      	adds	r3, r7, r3
 80065d8:	2200      	movs	r2, #0
 80065da:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2238      	movs	r2, #56	; 0x38
 80065e0:	5c9b      	ldrb	r3, [r3, r2]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d101      	bne.n	80065ea <HAL_TIM_OC_ConfigChannel+0x22>
 80065e6:	2302      	movs	r3, #2
 80065e8:	e042      	b.n	8006670 <HAL_TIM_OC_ConfigChannel+0xa8>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2238      	movs	r2, #56	; 0x38
 80065ee:	2101      	movs	r1, #1
 80065f0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b0c      	cmp	r3, #12
 80065f6:	d027      	beq.n	8006648 <HAL_TIM_OC_ConfigChannel+0x80>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b0c      	cmp	r3, #12
 80065fc:	d82c      	bhi.n	8006658 <HAL_TIM_OC_ConfigChannel+0x90>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b08      	cmp	r3, #8
 8006602:	d019      	beq.n	8006638 <HAL_TIM_OC_ConfigChannel+0x70>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b08      	cmp	r3, #8
 8006608:	d826      	bhi.n	8006658 <HAL_TIM_OC_ConfigChannel+0x90>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <HAL_TIM_OC_ConfigChannel+0x50>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b04      	cmp	r3, #4
 8006614:	d008      	beq.n	8006628 <HAL_TIM_OC_ConfigChannel+0x60>
 8006616:	e01f      	b.n	8006658 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	0011      	movs	r1, r2
 8006620:	0018      	movs	r0, r3
 8006622:	f000 fb1b 	bl	8006c5c <TIM_OC1_SetConfig>
      break;
 8006626:	e01c      	b.n	8006662 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	0011      	movs	r1, r2
 8006630:	0018      	movs	r0, r3
 8006632:	f000 fb4f 	bl	8006cd4 <TIM_OC2_SetConfig>
      break;
 8006636:	e014      	b.n	8006662 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	0011      	movs	r1, r2
 8006640:	0018      	movs	r0, r3
 8006642:	f000 fb89 	bl	8006d58 <TIM_OC3_SetConfig>
      break;
 8006646:	e00c      	b.n	8006662 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	0011      	movs	r1, r2
 8006650:	0018      	movs	r0, r3
 8006652:	f000 fbc1 	bl	8006dd8 <TIM_OC4_SetConfig>
      break;
 8006656:	e004      	b.n	8006662 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8006658:	2317      	movs	r3, #23
 800665a:	18fb      	adds	r3, r7, r3
 800665c:	2201      	movs	r2, #1
 800665e:	701a      	strb	r2, [r3, #0]
      break;
 8006660:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2238      	movs	r2, #56	; 0x38
 8006666:	2100      	movs	r1, #0
 8006668:	5499      	strb	r1, [r3, r2]

  return status;
 800666a:	2317      	movs	r3, #23
 800666c:	18fb      	adds	r3, r7, r3
 800666e:	781b      	ldrb	r3, [r3, #0]
}
 8006670:	0018      	movs	r0, r3
 8006672:	46bd      	mov	sp, r7
 8006674:	b006      	add	sp, #24
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006684:	2317      	movs	r3, #23
 8006686:	18fb      	adds	r3, r7, r3
 8006688:	2200      	movs	r2, #0
 800668a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2238      	movs	r2, #56	; 0x38
 8006690:	5c9b      	ldrb	r3, [r3, r2]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d101      	bne.n	800669a <HAL_TIM_PWM_ConfigChannel+0x22>
 8006696:	2302      	movs	r3, #2
 8006698:	e0ad      	b.n	80067f6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2238      	movs	r2, #56	; 0x38
 800669e:	2101      	movs	r1, #1
 80066a0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b0c      	cmp	r3, #12
 80066a6:	d100      	bne.n	80066aa <HAL_TIM_PWM_ConfigChannel+0x32>
 80066a8:	e076      	b.n	8006798 <HAL_TIM_PWM_ConfigChannel+0x120>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b0c      	cmp	r3, #12
 80066ae:	d900      	bls.n	80066b2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80066b0:	e095      	b.n	80067de <HAL_TIM_PWM_ConfigChannel+0x166>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	d04e      	beq.n	8006756 <HAL_TIM_PWM_ConfigChannel+0xde>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b08      	cmp	r3, #8
 80066bc:	d900      	bls.n	80066c0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80066be:	e08e      	b.n	80067de <HAL_TIM_PWM_ConfigChannel+0x166>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <HAL_TIM_PWM_ConfigChannel+0x56>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	d021      	beq.n	8006710 <HAL_TIM_PWM_ConfigChannel+0x98>
 80066cc:	e087      	b.n	80067de <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	0011      	movs	r1, r2
 80066d6:	0018      	movs	r0, r3
 80066d8:	f000 fac0 	bl	8006c5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	699a      	ldr	r2, [r3, #24]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2108      	movs	r1, #8
 80066e8:	430a      	orrs	r2, r1
 80066ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	699a      	ldr	r2, [r3, #24]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2104      	movs	r1, #4
 80066f8:	438a      	bics	r2, r1
 80066fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6999      	ldr	r1, [r3, #24]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	68da      	ldr	r2, [r3, #12]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	619a      	str	r2, [r3, #24]
      break;
 800670e:	e06b      	b.n	80067e8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	0011      	movs	r1, r2
 8006718:	0018      	movs	r0, r3
 800671a:	f000 fadb 	bl	8006cd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	699a      	ldr	r2, [r3, #24]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2180      	movs	r1, #128	; 0x80
 800672a:	0109      	lsls	r1, r1, #4
 800672c:	430a      	orrs	r2, r1
 800672e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	699a      	ldr	r2, [r3, #24]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4931      	ldr	r1, [pc, #196]	; (8006800 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800673c:	400a      	ands	r2, r1
 800673e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6999      	ldr	r1, [r3, #24]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	021a      	lsls	r2, r3, #8
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	619a      	str	r2, [r3, #24]
      break;
 8006754:	e048      	b.n	80067e8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	0011      	movs	r1, r2
 800675e:	0018      	movs	r0, r3
 8006760:	f000 fafa 	bl	8006d58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	69da      	ldr	r2, [r3, #28]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2108      	movs	r1, #8
 8006770:	430a      	orrs	r2, r1
 8006772:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	69da      	ldr	r2, [r3, #28]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2104      	movs	r1, #4
 8006780:	438a      	bics	r2, r1
 8006782:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	69d9      	ldr	r1, [r3, #28]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	61da      	str	r2, [r3, #28]
      break;
 8006796:	e027      	b.n	80067e8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	0011      	movs	r1, r2
 80067a0:	0018      	movs	r0, r3
 80067a2:	f000 fb19 	bl	8006dd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69da      	ldr	r2, [r3, #28]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2180      	movs	r1, #128	; 0x80
 80067b2:	0109      	lsls	r1, r1, #4
 80067b4:	430a      	orrs	r2, r1
 80067b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	69da      	ldr	r2, [r3, #28]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	490f      	ldr	r1, [pc, #60]	; (8006800 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80067c4:	400a      	ands	r2, r1
 80067c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	69d9      	ldr	r1, [r3, #28]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	021a      	lsls	r2, r3, #8
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	61da      	str	r2, [r3, #28]
      break;
 80067dc:	e004      	b.n	80067e8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80067de:	2317      	movs	r3, #23
 80067e0:	18fb      	adds	r3, r7, r3
 80067e2:	2201      	movs	r2, #1
 80067e4:	701a      	strb	r2, [r3, #0]
      break;
 80067e6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2238      	movs	r2, #56	; 0x38
 80067ec:	2100      	movs	r1, #0
 80067ee:	5499      	strb	r1, [r3, r2]

  return status;
 80067f0:	2317      	movs	r3, #23
 80067f2:	18fb      	adds	r3, r7, r3
 80067f4:	781b      	ldrb	r3, [r3, #0]
}
 80067f6:	0018      	movs	r0, r3
 80067f8:	46bd      	mov	sp, r7
 80067fa:	b006      	add	sp, #24
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	46c0      	nop			; (mov r8, r8)
 8006800:	fffffbff 	.word	0xfffffbff

08006804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800680e:	230f      	movs	r3, #15
 8006810:	18fb      	adds	r3, r7, r3
 8006812:	2200      	movs	r2, #0
 8006814:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2238      	movs	r2, #56	; 0x38
 800681a:	5c9b      	ldrb	r3, [r3, r2]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d101      	bne.n	8006824 <HAL_TIM_ConfigClockSource+0x20>
 8006820:	2302      	movs	r3, #2
 8006822:	e0bc      	b.n	800699e <HAL_TIM_ConfigClockSource+0x19a>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2238      	movs	r2, #56	; 0x38
 8006828:	2101      	movs	r1, #1
 800682a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2239      	movs	r2, #57	; 0x39
 8006830:	2102      	movs	r1, #2
 8006832:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2277      	movs	r2, #119	; 0x77
 8006840:	4393      	bics	r3, r2
 8006842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	4a58      	ldr	r2, [pc, #352]	; (80069a8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006848:	4013      	ands	r3, r2
 800684a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2280      	movs	r2, #128	; 0x80
 800685a:	0192      	lsls	r2, r2, #6
 800685c:	4293      	cmp	r3, r2
 800685e:	d040      	beq.n	80068e2 <HAL_TIM_ConfigClockSource+0xde>
 8006860:	2280      	movs	r2, #128	; 0x80
 8006862:	0192      	lsls	r2, r2, #6
 8006864:	4293      	cmp	r3, r2
 8006866:	d900      	bls.n	800686a <HAL_TIM_ConfigClockSource+0x66>
 8006868:	e088      	b.n	800697c <HAL_TIM_ConfigClockSource+0x178>
 800686a:	2280      	movs	r2, #128	; 0x80
 800686c:	0152      	lsls	r2, r2, #5
 800686e:	4293      	cmp	r3, r2
 8006870:	d100      	bne.n	8006874 <HAL_TIM_ConfigClockSource+0x70>
 8006872:	e088      	b.n	8006986 <HAL_TIM_ConfigClockSource+0x182>
 8006874:	2280      	movs	r2, #128	; 0x80
 8006876:	0152      	lsls	r2, r2, #5
 8006878:	4293      	cmp	r3, r2
 800687a:	d900      	bls.n	800687e <HAL_TIM_ConfigClockSource+0x7a>
 800687c:	e07e      	b.n	800697c <HAL_TIM_ConfigClockSource+0x178>
 800687e:	2b70      	cmp	r3, #112	; 0x70
 8006880:	d018      	beq.n	80068b4 <HAL_TIM_ConfigClockSource+0xb0>
 8006882:	d900      	bls.n	8006886 <HAL_TIM_ConfigClockSource+0x82>
 8006884:	e07a      	b.n	800697c <HAL_TIM_ConfigClockSource+0x178>
 8006886:	2b60      	cmp	r3, #96	; 0x60
 8006888:	d04f      	beq.n	800692a <HAL_TIM_ConfigClockSource+0x126>
 800688a:	d900      	bls.n	800688e <HAL_TIM_ConfigClockSource+0x8a>
 800688c:	e076      	b.n	800697c <HAL_TIM_ConfigClockSource+0x178>
 800688e:	2b50      	cmp	r3, #80	; 0x50
 8006890:	d03b      	beq.n	800690a <HAL_TIM_ConfigClockSource+0x106>
 8006892:	d900      	bls.n	8006896 <HAL_TIM_ConfigClockSource+0x92>
 8006894:	e072      	b.n	800697c <HAL_TIM_ConfigClockSource+0x178>
 8006896:	2b40      	cmp	r3, #64	; 0x40
 8006898:	d057      	beq.n	800694a <HAL_TIM_ConfigClockSource+0x146>
 800689a:	d900      	bls.n	800689e <HAL_TIM_ConfigClockSource+0x9a>
 800689c:	e06e      	b.n	800697c <HAL_TIM_ConfigClockSource+0x178>
 800689e:	2b30      	cmp	r3, #48	; 0x30
 80068a0:	d063      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x166>
 80068a2:	d86b      	bhi.n	800697c <HAL_TIM_ConfigClockSource+0x178>
 80068a4:	2b20      	cmp	r3, #32
 80068a6:	d060      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x166>
 80068a8:	d868      	bhi.n	800697c <HAL_TIM_ConfigClockSource+0x178>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d05d      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x166>
 80068ae:	2b10      	cmp	r3, #16
 80068b0:	d05b      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x166>
 80068b2:	e063      	b.n	800697c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6818      	ldr	r0, [r3, #0]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	6899      	ldr	r1, [r3, #8]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f000 fb48 	bl	8006f58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2277      	movs	r2, #119	; 0x77
 80068d4:	4313      	orrs	r3, r2
 80068d6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	609a      	str	r2, [r3, #8]
      break;
 80068e0:	e052      	b.n	8006988 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	6899      	ldr	r1, [r3, #8]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f000 fb31 	bl	8006f58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689a      	ldr	r2, [r3, #8]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2180      	movs	r1, #128	; 0x80
 8006902:	01c9      	lsls	r1, r1, #7
 8006904:	430a      	orrs	r2, r1
 8006906:	609a      	str	r2, [r3, #8]
      break;
 8006908:	e03e      	b.n	8006988 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6818      	ldr	r0, [r3, #0]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	6859      	ldr	r1, [r3, #4]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	001a      	movs	r2, r3
 8006918:	f000 faa4 	bl	8006e64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2150      	movs	r1, #80	; 0x50
 8006922:	0018      	movs	r0, r3
 8006924:	f000 fafe 	bl	8006f24 <TIM_ITRx_SetConfig>
      break;
 8006928:	e02e      	b.n	8006988 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6818      	ldr	r0, [r3, #0]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	6859      	ldr	r1, [r3, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	001a      	movs	r2, r3
 8006938:	f000 fac2 	bl	8006ec0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2160      	movs	r1, #96	; 0x60
 8006942:	0018      	movs	r0, r3
 8006944:	f000 faee 	bl	8006f24 <TIM_ITRx_SetConfig>
      break;
 8006948:	e01e      	b.n	8006988 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6818      	ldr	r0, [r3, #0]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	6859      	ldr	r1, [r3, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	001a      	movs	r2, r3
 8006958:	f000 fa84 	bl	8006e64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2140      	movs	r1, #64	; 0x40
 8006962:	0018      	movs	r0, r3
 8006964:	f000 fade 	bl	8006f24 <TIM_ITRx_SetConfig>
      break;
 8006968:	e00e      	b.n	8006988 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	0019      	movs	r1, r3
 8006974:	0010      	movs	r0, r2
 8006976:	f000 fad5 	bl	8006f24 <TIM_ITRx_SetConfig>
      break;
 800697a:	e005      	b.n	8006988 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800697c:	230f      	movs	r3, #15
 800697e:	18fb      	adds	r3, r7, r3
 8006980:	2201      	movs	r2, #1
 8006982:	701a      	strb	r2, [r3, #0]
      break;
 8006984:	e000      	b.n	8006988 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006986:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2239      	movs	r2, #57	; 0x39
 800698c:	2101      	movs	r1, #1
 800698e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2238      	movs	r2, #56	; 0x38
 8006994:	2100      	movs	r1, #0
 8006996:	5499      	strb	r1, [r3, r2]

  return status;
 8006998:	230f      	movs	r3, #15
 800699a:	18fb      	adds	r3, r7, r3
 800699c:	781b      	ldrb	r3, [r3, #0]
}
 800699e:	0018      	movs	r0, r3
 80069a0:	46bd      	mov	sp, r7
 80069a2:	b004      	add	sp, #16
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	46c0      	nop			; (mov r8, r8)
 80069a8:	ffff00ff 	.word	0xffff00ff

080069ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80069b4:	46c0      	nop			; (mov r8, r8)
 80069b6:	46bd      	mov	sp, r7
 80069b8:	b002      	add	sp, #8
 80069ba:	bd80      	pop	{r7, pc}

080069bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069c4:	46c0      	nop			; (mov r8, r8)
 80069c6:	46bd      	mov	sp, r7
 80069c8:	b002      	add	sp, #8
 80069ca:	bd80      	pop	{r7, pc}

080069cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069d4:	46c0      	nop			; (mov r8, r8)
 80069d6:	46bd      	mov	sp, r7
 80069d8:	b002      	add	sp, #8
 80069da:	bd80      	pop	{r7, pc}

080069dc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80069e4:	46c0      	nop			; (mov r8, r8)
 80069e6:	46bd      	mov	sp, r7
 80069e8:	b002      	add	sp, #8
 80069ea:	bd80      	pop	{r7, pc}

080069ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069f4:	46c0      	nop			; (mov r8, r8)
 80069f6:	46bd      	mov	sp, r7
 80069f8:	b002      	add	sp, #8
 80069fa:	bd80      	pop	{r7, pc}

080069fc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006a04:	46c0      	nop			; (mov r8, r8)
 8006a06:	46bd      	mov	sp, r7
 8006a08:	b002      	add	sp, #8
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a18:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d107      	bne.n	8006a34 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2201      	movs	r2, #1
 8006a28:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	223a      	movs	r2, #58	; 0x3a
 8006a2e:	2101      	movs	r1, #1
 8006a30:	5499      	strb	r1, [r3, r2]
 8006a32:	e02a      	b.n	8006a8a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d107      	bne.n	8006a4e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2202      	movs	r2, #2
 8006a42:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	223b      	movs	r2, #59	; 0x3b
 8006a48:	2101      	movs	r1, #1
 8006a4a:	5499      	strb	r1, [r3, r2]
 8006a4c:	e01d      	b.n	8006a8a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d107      	bne.n	8006a68 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	223c      	movs	r2, #60	; 0x3c
 8006a62:	2101      	movs	r1, #1
 8006a64:	5499      	strb	r1, [r3, r2]
 8006a66:	e010      	b.n	8006a8a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d107      	bne.n	8006a82 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2208      	movs	r2, #8
 8006a76:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	223d      	movs	r2, #61	; 0x3d
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	5499      	strb	r1, [r3, r2]
 8006a80:	e003      	b.n	8006a8a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2239      	movs	r2, #57	; 0x39
 8006a86:	2101      	movs	r1, #1
 8006a88:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	f7ff ffb5 	bl	80069fc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	761a      	strb	r2, [r3, #24]
}
 8006a98:	46c0      	nop			; (mov r8, r8)
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	b004      	add	sp, #16
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aac:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d10b      	bne.n	8006ad0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2201      	movs	r2, #1
 8006abc:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d136      	bne.n	8006b34 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	223a      	movs	r2, #58	; 0x3a
 8006aca:	2101      	movs	r1, #1
 8006acc:	5499      	strb	r1, [r3, r2]
 8006ace:	e031      	b.n	8006b34 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d10b      	bne.n	8006af2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2202      	movs	r2, #2
 8006ade:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d125      	bne.n	8006b34 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	223b      	movs	r2, #59	; 0x3b
 8006aec:	2101      	movs	r1, #1
 8006aee:	5499      	strb	r1, [r3, r2]
 8006af0:	e020      	b.n	8006b34 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d10b      	bne.n	8006b14 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2204      	movs	r2, #4
 8006b00:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d114      	bne.n	8006b34 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	223c      	movs	r2, #60	; 0x3c
 8006b0e:	2101      	movs	r1, #1
 8006b10:	5499      	strb	r1, [r3, r2]
 8006b12:	e00f      	b.n	8006b34 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d10a      	bne.n	8006b34 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2208      	movs	r2, #8
 8006b22:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d103      	bne.n	8006b34 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	223d      	movs	r2, #61	; 0x3d
 8006b30:	2101      	movs	r1, #1
 8006b32:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	0018      	movs	r0, r3
 8006b38:	f7fa f88e 	bl	8000c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	761a      	strb	r2, [r3, #24]
}
 8006b42:	46c0      	nop			; (mov r8, r8)
 8006b44:	46bd      	mov	sp, r7
 8006b46:	b004      	add	sp, #16
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b56:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d103      	bne.n	8006b6a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2201      	movs	r2, #1
 8006b66:	761a      	strb	r2, [r3, #24]
 8006b68:	e019      	b.n	8006b9e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d103      	bne.n	8006b7c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2202      	movs	r2, #2
 8006b78:	761a      	strb	r2, [r3, #24]
 8006b7a:	e010      	b.n	8006b9e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d103      	bne.n	8006b8e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2204      	movs	r2, #4
 8006b8a:	761a      	strb	r2, [r3, #24]
 8006b8c:	e007      	b.n	8006b9e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d102      	bne.n	8006b9e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2208      	movs	r2, #8
 8006b9c:	761a      	strb	r2, [r3, #24]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	f7ff ff1b 	bl	80069dc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	761a      	strb	r2, [r3, #24]
}
 8006bac:	46c0      	nop			; (mov r8, r8)
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	b004      	add	sp, #16
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	2380      	movs	r3, #128	; 0x80
 8006bc8:	05db      	lsls	r3, r3, #23
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d007      	beq.n	8006bde <TIM_Base_SetConfig+0x2a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a1f      	ldr	r2, [pc, #124]	; (8006c50 <TIM_Base_SetConfig+0x9c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d003      	beq.n	8006bde <TIM_Base_SetConfig+0x2a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a1e      	ldr	r2, [pc, #120]	; (8006c54 <TIM_Base_SetConfig+0xa0>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d108      	bne.n	8006bf0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2270      	movs	r2, #112	; 0x70
 8006be2:	4393      	bics	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	2380      	movs	r3, #128	; 0x80
 8006bf4:	05db      	lsls	r3, r3, #23
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d007      	beq.n	8006c0a <TIM_Base_SetConfig+0x56>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a14      	ldr	r2, [pc, #80]	; (8006c50 <TIM_Base_SetConfig+0x9c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d003      	beq.n	8006c0a <TIM_Base_SetConfig+0x56>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a13      	ldr	r2, [pc, #76]	; (8006c54 <TIM_Base_SetConfig+0xa0>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d108      	bne.n	8006c1c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	4a12      	ldr	r2, [pc, #72]	; (8006c58 <TIM_Base_SetConfig+0xa4>)
 8006c0e:	4013      	ands	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2280      	movs	r2, #128	; 0x80
 8006c20:	4393      	bics	r3, r2
 8006c22:	001a      	movs	r2, r3
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	689a      	ldr	r2, [r3, #8]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	615a      	str	r2, [r3, #20]
}
 8006c48:	46c0      	nop			; (mov r8, r8)
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	b004      	add	sp, #16
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	40010800 	.word	0x40010800
 8006c54:	40011400 	.word	0x40011400
 8006c58:	fffffcff 	.word	0xfffffcff

08006c5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	4393      	bics	r3, r2
 8006c6e:	001a      	movs	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2270      	movs	r2, #112	; 0x70
 8006c8a:	4393      	bics	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2203      	movs	r2, #3
 8006c92:	4393      	bics	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	4393      	bics	r3, r2
 8006ca6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	621a      	str	r2, [r3, #32]
}
 8006ccc:	46c0      	nop			; (mov r8, r8)
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	b006      	add	sp, #24
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	2210      	movs	r2, #16
 8006ce4:	4393      	bics	r3, r2
 8006ce6:	001a      	movs	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4a13      	ldr	r2, [pc, #76]	; (8006d50 <TIM_OC2_SetConfig+0x7c>)
 8006d02:	4013      	ands	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4a12      	ldr	r2, [pc, #72]	; (8006d54 <TIM_OC2_SetConfig+0x80>)
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	021b      	lsls	r3, r3, #8
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	4393      	bics	r3, r2
 8006d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	621a      	str	r2, [r3, #32]
}
 8006d48:	46c0      	nop			; (mov r8, r8)
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	b006      	add	sp, #24
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	ffff8fff 	.word	0xffff8fff
 8006d54:	fffffcff 	.word	0xfffffcff

08006d58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	4a1a      	ldr	r2, [pc, #104]	; (8006dd0 <TIM_OC3_SetConfig+0x78>)
 8006d68:	401a      	ands	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2270      	movs	r2, #112	; 0x70
 8006d84:	4393      	bics	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2203      	movs	r2, #3
 8006d8c:	4393      	bics	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	4a0d      	ldr	r2, [pc, #52]	; (8006dd4 <TIM_OC3_SetConfig+0x7c>)
 8006d9e:	4013      	ands	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	021b      	lsls	r3, r3, #8
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	621a      	str	r2, [r3, #32]
}
 8006dc8:	46c0      	nop			; (mov r8, r8)
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	b006      	add	sp, #24
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	fffffeff 	.word	0xfffffeff
 8006dd4:	fffffdff 	.word	0xfffffdff

08006dd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	4a1b      	ldr	r2, [pc, #108]	; (8006e54 <TIM_OC4_SetConfig+0x7c>)
 8006de8:	401a      	ands	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4a15      	ldr	r2, [pc, #84]	; (8006e58 <TIM_OC4_SetConfig+0x80>)
 8006e04:	4013      	ands	r3, r2
 8006e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4a14      	ldr	r2, [pc, #80]	; (8006e5c <TIM_OC4_SetConfig+0x84>)
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	021b      	lsls	r3, r3, #8
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	4a10      	ldr	r2, [pc, #64]	; (8006e60 <TIM_OC4_SetConfig+0x88>)
 8006e20:	4013      	ands	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	031b      	lsls	r3, r3, #12
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	621a      	str	r2, [r3, #32]
}
 8006e4a:	46c0      	nop			; (mov r8, r8)
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	b006      	add	sp, #24
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	46c0      	nop			; (mov r8, r8)
 8006e54:	ffffefff 	.word	0xffffefff
 8006e58:	ffff8fff 	.word	0xffff8fff
 8006e5c:	fffffcff 	.word	0xfffffcff
 8006e60:	ffffdfff 	.word	0xffffdfff

08006e64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	4393      	bics	r3, r2
 8006e7e:	001a      	movs	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	22f0      	movs	r2, #240	; 0xf0
 8006e8e:	4393      	bics	r3, r2
 8006e90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	011b      	lsls	r3, r3, #4
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	220a      	movs	r2, #10
 8006ea0:	4393      	bics	r3, r2
 8006ea2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	621a      	str	r2, [r3, #32]
}
 8006eb8:	46c0      	nop			; (mov r8, r8)
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	b006      	add	sp, #24
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	2210      	movs	r2, #16
 8006ed2:	4393      	bics	r3, r2
 8006ed4:	001a      	movs	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	4a0d      	ldr	r2, [pc, #52]	; (8006f20 <TIM_TI2_ConfigInputStage+0x60>)
 8006eea:	4013      	ands	r3, r2
 8006eec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	031b      	lsls	r3, r3, #12
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	22a0      	movs	r2, #160	; 0xa0
 8006efc:	4393      	bics	r3, r2
 8006efe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	011b      	lsls	r3, r3, #4
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	621a      	str	r2, [r3, #32]
}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	b006      	add	sp, #24
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	ffff0fff 	.word	0xffff0fff

08006f24 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2270      	movs	r2, #112	; 0x70
 8006f38:	4393      	bics	r3, r2
 8006f3a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	2207      	movs	r2, #7
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	609a      	str	r2, [r3, #8]
}
 8006f4e:	46c0      	nop			; (mov r8, r8)
 8006f50:	46bd      	mov	sp, r7
 8006f52:	b004      	add	sp, #16
 8006f54:	bd80      	pop	{r7, pc}
	...

08006f58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
 8006f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	4a09      	ldr	r2, [pc, #36]	; (8006f94 <TIM_ETR_SetConfig+0x3c>)
 8006f70:	4013      	ands	r3, r2
 8006f72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	021a      	lsls	r2, r3, #8
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	609a      	str	r2, [r3, #8]
}
 8006f8c:	46c0      	nop			; (mov r8, r8)
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	b006      	add	sp, #24
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	ffff00ff 	.word	0xffff00ff

08006f98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	221f      	movs	r2, #31
 8006fa8:	4013      	ands	r3, r2
 8006faa:	2201      	movs	r2, #1
 8006fac:	409a      	lsls	r2, r3
 8006fae:	0013      	movs	r3, r2
 8006fb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	43d2      	mvns	r2, r2
 8006fba:	401a      	ands	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6a1a      	ldr	r2, [r3, #32]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	211f      	movs	r1, #31
 8006fc8:	400b      	ands	r3, r1
 8006fca:	6879      	ldr	r1, [r7, #4]
 8006fcc:	4099      	lsls	r1, r3
 8006fce:	000b      	movs	r3, r1
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	621a      	str	r2, [r3, #32]
}
 8006fd6:	46c0      	nop			; (mov r8, r8)
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	b006      	add	sp, #24
 8006fdc:	bd80      	pop	{r7, pc}
	...

08006fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2238      	movs	r2, #56	; 0x38
 8006fee:	5c9b      	ldrb	r3, [r3, r2]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d101      	bne.n	8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	e042      	b.n	800707e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2238      	movs	r2, #56	; 0x38
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2239      	movs	r2, #57	; 0x39
 8007004:	2102      	movs	r1, #2
 8007006:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2270      	movs	r2, #112	; 0x70
 800701c:	4393      	bics	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	4313      	orrs	r3, r2
 8007028:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	2380      	movs	r3, #128	; 0x80
 8007038:	05db      	lsls	r3, r3, #23
 800703a:	429a      	cmp	r2, r3
 800703c:	d009      	beq.n	8007052 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a11      	ldr	r2, [pc, #68]	; (8007088 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d004      	beq.n	8007052 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a0f      	ldr	r2, [pc, #60]	; (800708c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d10c      	bne.n	800706c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2280      	movs	r2, #128	; 0x80
 8007056:	4393      	bics	r3, r2
 8007058:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	4313      	orrs	r3, r2
 8007062:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2239      	movs	r2, #57	; 0x39
 8007070:	2101      	movs	r1, #1
 8007072:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2238      	movs	r2, #56	; 0x38
 8007078:	2100      	movs	r1, #0
 800707a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	0018      	movs	r0, r3
 8007080:	46bd      	mov	sp, r7
 8007082:	b004      	add	sp, #16
 8007084:	bd80      	pop	{r7, pc}
 8007086:	46c0      	nop			; (mov r8, r8)
 8007088:	40010800 	.word	0x40010800
 800708c:	40011400 	.word	0x40011400

08007090 <__libc_init_array>:
 8007090:	b570      	push	{r4, r5, r6, lr}
 8007092:	2600      	movs	r6, #0
 8007094:	4d0c      	ldr	r5, [pc, #48]	; (80070c8 <__libc_init_array+0x38>)
 8007096:	4c0d      	ldr	r4, [pc, #52]	; (80070cc <__libc_init_array+0x3c>)
 8007098:	1b64      	subs	r4, r4, r5
 800709a:	10a4      	asrs	r4, r4, #2
 800709c:	42a6      	cmp	r6, r4
 800709e:	d109      	bne.n	80070b4 <__libc_init_array+0x24>
 80070a0:	2600      	movs	r6, #0
 80070a2:	f000 f821 	bl	80070e8 <_init>
 80070a6:	4d0a      	ldr	r5, [pc, #40]	; (80070d0 <__libc_init_array+0x40>)
 80070a8:	4c0a      	ldr	r4, [pc, #40]	; (80070d4 <__libc_init_array+0x44>)
 80070aa:	1b64      	subs	r4, r4, r5
 80070ac:	10a4      	asrs	r4, r4, #2
 80070ae:	42a6      	cmp	r6, r4
 80070b0:	d105      	bne.n	80070be <__libc_init_array+0x2e>
 80070b2:	bd70      	pop	{r4, r5, r6, pc}
 80070b4:	00b3      	lsls	r3, r6, #2
 80070b6:	58eb      	ldr	r3, [r5, r3]
 80070b8:	4798      	blx	r3
 80070ba:	3601      	adds	r6, #1
 80070bc:	e7ee      	b.n	800709c <__libc_init_array+0xc>
 80070be:	00b3      	lsls	r3, r6, #2
 80070c0:	58eb      	ldr	r3, [r5, r3]
 80070c2:	4798      	blx	r3
 80070c4:	3601      	adds	r6, #1
 80070c6:	e7f2      	b.n	80070ae <__libc_init_array+0x1e>
 80070c8:	0800713c 	.word	0x0800713c
 80070cc:	0800713c 	.word	0x0800713c
 80070d0:	0800713c 	.word	0x0800713c
 80070d4:	08007140 	.word	0x08007140

080070d8 <memset>:
 80070d8:	0003      	movs	r3, r0
 80070da:	1882      	adds	r2, r0, r2
 80070dc:	4293      	cmp	r3, r2
 80070de:	d100      	bne.n	80070e2 <memset+0xa>
 80070e0:	4770      	bx	lr
 80070e2:	7019      	strb	r1, [r3, #0]
 80070e4:	3301      	adds	r3, #1
 80070e6:	e7f9      	b.n	80070dc <memset+0x4>

080070e8 <_init>:
 80070e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ea:	46c0      	nop			; (mov r8, r8)
 80070ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ee:	bc08      	pop	{r3}
 80070f0:	469e      	mov	lr, r3
 80070f2:	4770      	bx	lr

080070f4 <_fini>:
 80070f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f6:	46c0      	nop			; (mov r8, r8)
 80070f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070fa:	bc08      	pop	{r3}
 80070fc:	469e      	mov	lr, r3
 80070fe:	4770      	bx	lr
