
FW-NixieClock3-L031F6P6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006948  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08006a08  08006a08  00016a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a3c  08006a3c  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08006a3c  08006a3c  00016a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a44  08006a44  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a44  08006a44  00016a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a48  08006a48  00016a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08006a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000034  08006a80  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08006a80  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108f1  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f2b  00000000  00000000  0003094d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00033878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  000347e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000135bd  00000000  00000000  000355b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155dc  00000000  00000000  00048b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000697c8  00000000  00000000  0005e149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c7911  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003594  00000000  00000000  000c7964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000034 	.word	0x20000034
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080069f0 	.word	0x080069f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000038 	.word	0x20000038
 8000104:	080069f0 	.word	0x080069f0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f834 	bl	8000490 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	46ce      	mov	lr, r9
 8000438:	4647      	mov	r7, r8
 800043a:	b580      	push	{r7, lr}
 800043c:	0007      	movs	r7, r0
 800043e:	4699      	mov	r9, r3
 8000440:	0c3b      	lsrs	r3, r7, #16
 8000442:	469c      	mov	ip, r3
 8000444:	0413      	lsls	r3, r2, #16
 8000446:	0c1b      	lsrs	r3, r3, #16
 8000448:	001d      	movs	r5, r3
 800044a:	000e      	movs	r6, r1
 800044c:	4661      	mov	r1, ip
 800044e:	0400      	lsls	r0, r0, #16
 8000450:	0c14      	lsrs	r4, r2, #16
 8000452:	0c00      	lsrs	r0, r0, #16
 8000454:	4345      	muls	r5, r0
 8000456:	434b      	muls	r3, r1
 8000458:	4360      	muls	r0, r4
 800045a:	4361      	muls	r1, r4
 800045c:	18c0      	adds	r0, r0, r3
 800045e:	0c2c      	lsrs	r4, r5, #16
 8000460:	1820      	adds	r0, r4, r0
 8000462:	468c      	mov	ip, r1
 8000464:	4283      	cmp	r3, r0
 8000466:	d903      	bls.n	8000470 <__aeabi_lmul+0x3c>
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	025b      	lsls	r3, r3, #9
 800046c:	4698      	mov	r8, r3
 800046e:	44c4      	add	ip, r8
 8000470:	4649      	mov	r1, r9
 8000472:	4379      	muls	r1, r7
 8000474:	4372      	muls	r2, r6
 8000476:	0c03      	lsrs	r3, r0, #16
 8000478:	4463      	add	r3, ip
 800047a:	042d      	lsls	r5, r5, #16
 800047c:	0c2d      	lsrs	r5, r5, #16
 800047e:	18c9      	adds	r1, r1, r3
 8000480:	0400      	lsls	r0, r0, #16
 8000482:	1940      	adds	r0, r0, r5
 8000484:	1889      	adds	r1, r1, r2
 8000486:	bcc0      	pop	{r6, r7}
 8000488:	46b9      	mov	r9, r7
 800048a:	46b0      	mov	r8, r6
 800048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__udivmoddi4>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	4657      	mov	r7, sl
 8000494:	464e      	mov	r6, r9
 8000496:	4645      	mov	r5, r8
 8000498:	46de      	mov	lr, fp
 800049a:	b5e0      	push	{r5, r6, r7, lr}
 800049c:	0004      	movs	r4, r0
 800049e:	000d      	movs	r5, r1
 80004a0:	4692      	mov	sl, r2
 80004a2:	4699      	mov	r9, r3
 80004a4:	b083      	sub	sp, #12
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d830      	bhi.n	800050c <__udivmoddi4+0x7c>
 80004aa:	d02d      	beq.n	8000508 <__udivmoddi4+0x78>
 80004ac:	4649      	mov	r1, r9
 80004ae:	4650      	mov	r0, sl
 80004b0:	f000 f8ba 	bl	8000628 <__clzdi2>
 80004b4:	0029      	movs	r1, r5
 80004b6:	0006      	movs	r6, r0
 80004b8:	0020      	movs	r0, r4
 80004ba:	f000 f8b5 	bl	8000628 <__clzdi2>
 80004be:	1a33      	subs	r3, r6, r0
 80004c0:	4698      	mov	r8, r3
 80004c2:	3b20      	subs	r3, #32
 80004c4:	469b      	mov	fp, r3
 80004c6:	d433      	bmi.n	8000530 <__udivmoddi4+0xa0>
 80004c8:	465a      	mov	r2, fp
 80004ca:	4653      	mov	r3, sl
 80004cc:	4093      	lsls	r3, r2
 80004ce:	4642      	mov	r2, r8
 80004d0:	001f      	movs	r7, r3
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	001e      	movs	r6, r3
 80004d8:	42af      	cmp	r7, r5
 80004da:	d83a      	bhi.n	8000552 <__udivmoddi4+0xc2>
 80004dc:	42af      	cmp	r7, r5
 80004de:	d100      	bne.n	80004e2 <__udivmoddi4+0x52>
 80004e0:	e078      	b.n	80005d4 <__udivmoddi4+0x144>
 80004e2:	465b      	mov	r3, fp
 80004e4:	1ba4      	subs	r4, r4, r6
 80004e6:	41bd      	sbcs	r5, r7
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	da00      	bge.n	80004ee <__udivmoddi4+0x5e>
 80004ec:	e075      	b.n	80005da <__udivmoddi4+0x14a>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	465a      	mov	r2, fp
 80004fa:	4093      	lsls	r3, r2
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	4642      	mov	r2, r8
 8000502:	4093      	lsls	r3, r2
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	e028      	b.n	800055a <__udivmoddi4+0xca>
 8000508:	4282      	cmp	r2, r0
 800050a:	d9cf      	bls.n	80004ac <__udivmoddi4+0x1c>
 800050c:	2200      	movs	r2, #0
 800050e:	2300      	movs	r3, #0
 8000510:	9200      	str	r2, [sp, #0]
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <__udivmoddi4+0x8e>
 800051a:	601c      	str	r4, [r3, #0]
 800051c:	605d      	str	r5, [r3, #4]
 800051e:	9800      	ldr	r0, [sp, #0]
 8000520:	9901      	ldr	r1, [sp, #4]
 8000522:	b003      	add	sp, #12
 8000524:	bcf0      	pop	{r4, r5, r6, r7}
 8000526:	46bb      	mov	fp, r7
 8000528:	46b2      	mov	sl, r6
 800052a:	46a9      	mov	r9, r5
 800052c:	46a0      	mov	r8, r4
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000530:	4642      	mov	r2, r8
 8000532:	2320      	movs	r3, #32
 8000534:	1a9b      	subs	r3, r3, r2
 8000536:	4652      	mov	r2, sl
 8000538:	40da      	lsrs	r2, r3
 800053a:	4641      	mov	r1, r8
 800053c:	0013      	movs	r3, r2
 800053e:	464a      	mov	r2, r9
 8000540:	408a      	lsls	r2, r1
 8000542:	0017      	movs	r7, r2
 8000544:	4642      	mov	r2, r8
 8000546:	431f      	orrs	r7, r3
 8000548:	4653      	mov	r3, sl
 800054a:	4093      	lsls	r3, r2
 800054c:	001e      	movs	r6, r3
 800054e:	42af      	cmp	r7, r5
 8000550:	d9c4      	bls.n	80004dc <__udivmoddi4+0x4c>
 8000552:	2200      	movs	r2, #0
 8000554:	2300      	movs	r3, #0
 8000556:	9200      	str	r2, [sp, #0]
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	4643      	mov	r3, r8
 800055c:	2b00      	cmp	r3, #0
 800055e:	d0d9      	beq.n	8000514 <__udivmoddi4+0x84>
 8000560:	07fb      	lsls	r3, r7, #31
 8000562:	0872      	lsrs	r2, r6, #1
 8000564:	431a      	orrs	r2, r3
 8000566:	4646      	mov	r6, r8
 8000568:	087b      	lsrs	r3, r7, #1
 800056a:	e00e      	b.n	800058a <__udivmoddi4+0xfa>
 800056c:	42ab      	cmp	r3, r5
 800056e:	d101      	bne.n	8000574 <__udivmoddi4+0xe4>
 8000570:	42a2      	cmp	r2, r4
 8000572:	d80c      	bhi.n	800058e <__udivmoddi4+0xfe>
 8000574:	1aa4      	subs	r4, r4, r2
 8000576:	419d      	sbcs	r5, r3
 8000578:	2001      	movs	r0, #1
 800057a:	1924      	adds	r4, r4, r4
 800057c:	416d      	adcs	r5, r5
 800057e:	2100      	movs	r1, #0
 8000580:	3e01      	subs	r6, #1
 8000582:	1824      	adds	r4, r4, r0
 8000584:	414d      	adcs	r5, r1
 8000586:	2e00      	cmp	r6, #0
 8000588:	d006      	beq.n	8000598 <__udivmoddi4+0x108>
 800058a:	42ab      	cmp	r3, r5
 800058c:	d9ee      	bls.n	800056c <__udivmoddi4+0xdc>
 800058e:	3e01      	subs	r6, #1
 8000590:	1924      	adds	r4, r4, r4
 8000592:	416d      	adcs	r5, r5
 8000594:	2e00      	cmp	r6, #0
 8000596:	d1f8      	bne.n	800058a <__udivmoddi4+0xfa>
 8000598:	9800      	ldr	r0, [sp, #0]
 800059a:	9901      	ldr	r1, [sp, #4]
 800059c:	465b      	mov	r3, fp
 800059e:	1900      	adds	r0, r0, r4
 80005a0:	4169      	adcs	r1, r5
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	db24      	blt.n	80005f0 <__udivmoddi4+0x160>
 80005a6:	002b      	movs	r3, r5
 80005a8:	465a      	mov	r2, fp
 80005aa:	4644      	mov	r4, r8
 80005ac:	40d3      	lsrs	r3, r2
 80005ae:	002a      	movs	r2, r5
 80005b0:	40e2      	lsrs	r2, r4
 80005b2:	001c      	movs	r4, r3
 80005b4:	465b      	mov	r3, fp
 80005b6:	0015      	movs	r5, r2
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db2a      	blt.n	8000612 <__udivmoddi4+0x182>
 80005bc:	0026      	movs	r6, r4
 80005be:	409e      	lsls	r6, r3
 80005c0:	0033      	movs	r3, r6
 80005c2:	0026      	movs	r6, r4
 80005c4:	4647      	mov	r7, r8
 80005c6:	40be      	lsls	r6, r7
 80005c8:	0032      	movs	r2, r6
 80005ca:	1a80      	subs	r0, r0, r2
 80005cc:	4199      	sbcs	r1, r3
 80005ce:	9000      	str	r0, [sp, #0]
 80005d0:	9101      	str	r1, [sp, #4]
 80005d2:	e79f      	b.n	8000514 <__udivmoddi4+0x84>
 80005d4:	42a3      	cmp	r3, r4
 80005d6:	d8bc      	bhi.n	8000552 <__udivmoddi4+0xc2>
 80005d8:	e783      	b.n	80004e2 <__udivmoddi4+0x52>
 80005da:	4642      	mov	r2, r8
 80005dc:	2320      	movs	r3, #32
 80005de:	2100      	movs	r1, #0
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	2200      	movs	r2, #0
 80005e4:	9100      	str	r1, [sp, #0]
 80005e6:	9201      	str	r2, [sp, #4]
 80005e8:	2201      	movs	r2, #1
 80005ea:	40da      	lsrs	r2, r3
 80005ec:	9201      	str	r2, [sp, #4]
 80005ee:	e786      	b.n	80004fe <__udivmoddi4+0x6e>
 80005f0:	4642      	mov	r2, r8
 80005f2:	2320      	movs	r3, #32
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	002a      	movs	r2, r5
 80005f8:	4646      	mov	r6, r8
 80005fa:	409a      	lsls	r2, r3
 80005fc:	0023      	movs	r3, r4
 80005fe:	40f3      	lsrs	r3, r6
 8000600:	4644      	mov	r4, r8
 8000602:	4313      	orrs	r3, r2
 8000604:	002a      	movs	r2, r5
 8000606:	40e2      	lsrs	r2, r4
 8000608:	001c      	movs	r4, r3
 800060a:	465b      	mov	r3, fp
 800060c:	0015      	movs	r5, r2
 800060e:	2b00      	cmp	r3, #0
 8000610:	dad4      	bge.n	80005bc <__udivmoddi4+0x12c>
 8000612:	4642      	mov	r2, r8
 8000614:	002f      	movs	r7, r5
 8000616:	2320      	movs	r3, #32
 8000618:	0026      	movs	r6, r4
 800061a:	4097      	lsls	r7, r2
 800061c:	1a9b      	subs	r3, r3, r2
 800061e:	40de      	lsrs	r6, r3
 8000620:	003b      	movs	r3, r7
 8000622:	4333      	orrs	r3, r6
 8000624:	e7cd      	b.n	80005c2 <__udivmoddi4+0x132>
 8000626:	46c0      	nop			; (mov r8, r8)

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f000 f807 	bl	8000640 <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f000 f802 	bl	8000640 <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__clzsi2>:
 8000640:	211c      	movs	r1, #28
 8000642:	2301      	movs	r3, #1
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	4298      	cmp	r0, r3
 8000648:	d301      	bcc.n	800064e <__clzsi2+0xe>
 800064a:	0c00      	lsrs	r0, r0, #16
 800064c:	3910      	subs	r1, #16
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	4298      	cmp	r0, r3
 8000652:	d301      	bcc.n	8000658 <__clzsi2+0x18>
 8000654:	0a00      	lsrs	r0, r0, #8
 8000656:	3908      	subs	r1, #8
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0x22>
 800065e:	0900      	lsrs	r0, r0, #4
 8000660:	3904      	subs	r1, #4
 8000662:	a202      	add	r2, pc, #8	; (adr r2, 800066c <__clzsi2+0x2c>)
 8000664:	5c10      	ldrb	r0, [r2, r0]
 8000666:	1840      	adds	r0, r0, r1
 8000668:	4770      	bx	lr
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	02020304 	.word	0x02020304
 8000670:	01010101 	.word	0x01010101
	...

0800067c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_DMA_Init+0x38>)
 8000684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_DMA_Init+0x38>)
 8000688:	2101      	movs	r1, #1
 800068a:	430a      	orrs	r2, r1
 800068c:	631a      	str	r2, [r3, #48]	; 0x30
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_DMA_Init+0x38>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	2201      	movs	r2, #1
 8000694:	4013      	ands	r3, r2
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2009      	movs	r0, #9
 80006a0:	f002 fc42 	bl	8002f28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006a4:	2009      	movs	r0, #9
 80006a6:	f002 fc54 	bl	8002f52 <HAL_NVIC_EnableIRQ>

}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b002      	add	sp, #8
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	40021000 	.word	0x40021000

080006b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b089      	sub	sp, #36	; 0x24
 80006bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	240c      	movs	r4, #12
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	0018      	movs	r0, r3
 80006c4:	2314      	movs	r3, #20
 80006c6:	001a      	movs	r2, r3
 80006c8:	2100      	movs	r1, #0
 80006ca:	f006 f989 	bl	80069e0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <MX_GPIO_Init+0xd4>)
 80006d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006d2:	4b2e      	ldr	r3, [pc, #184]	; (800078c <MX_GPIO_Init+0xd4>)
 80006d4:	2101      	movs	r1, #1
 80006d6:	430a      	orrs	r2, r1
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80006da:	4b2c      	ldr	r3, [pc, #176]	; (800078c <MX_GPIO_Init+0xd4>)
 80006dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006de:	2201      	movs	r2, #1
 80006e0:	4013      	ands	r3, r2
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <MX_GPIO_Init+0xd4>)
 80006e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <MX_GPIO_Init+0xd4>)
 80006ec:	2102      	movs	r1, #2
 80006ee:	430a      	orrs	r2, r1
 80006f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <MX_GPIO_Init+0xd4>)
 80006f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f6:	2202      	movs	r2, #2
 80006f8:	4013      	ands	r3, r2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(sr_shift_output_GPIO_Port, sr_shift_output_Pin, GPIO_PIN_RESET);
 80006fe:	23a0      	movs	r3, #160	; 0xa0
 8000700:	05db      	lsls	r3, r3, #23
 8000702:	2200      	movs	r2, #0
 8000704:	2140      	movs	r1, #64	; 0x40
 8000706:	0018      	movs	r0, r3
 8000708:	f002 ffcd 	bl	80036a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(enable_hv_GPIO_Port, enable_hv_Pin, GPIO_PIN_RESET);
 800070c:	4b20      	ldr	r3, [pc, #128]	; (8000790 <MX_GPIO_Init+0xd8>)
 800070e:	2200      	movs	r2, #0
 8000710:	2102      	movs	r1, #2
 8000712:	0018      	movs	r0, r3
 8000714:	f002 ffc7 	bl	80036a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = rot_b_Pin|rot_a_Pin|sens_size_Pin|rot_push_Pin;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	221b      	movs	r2, #27
 800071c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2200      	movs	r2, #0
 8000722:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2202      	movs	r2, #2
 8000728:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	193a      	adds	r2, r7, r4
 800072c:	23a0      	movs	r3, #160	; 0xa0
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	0011      	movs	r1, r2
 8000732:	0018      	movs	r0, r3
 8000734:	f002 fe2c 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = sr_shift_output_Pin;
 8000738:	193b      	adds	r3, r7, r4
 800073a:	2240      	movs	r2, #64	; 0x40
 800073c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2201      	movs	r2, #1
 8000742:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(sr_shift_output_GPIO_Port, &GPIO_InitStruct);
 8000750:	193a      	adds	r2, r7, r4
 8000752:	23a0      	movs	r3, #160	; 0xa0
 8000754:	05db      	lsls	r3, r3, #23
 8000756:	0011      	movs	r1, r2
 8000758:	0018      	movs	r0, r3
 800075a:	f002 fe19 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = enable_hv_Pin;
 800075e:	0021      	movs	r1, r4
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2202      	movs	r2, #2
 8000764:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2201      	movs	r2, #1
 800076a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(enable_hv_GPIO_Port, &GPIO_InitStruct);
 8000778:	187b      	adds	r3, r7, r1
 800077a:	4a05      	ldr	r2, [pc, #20]	; (8000790 <MX_GPIO_Init+0xd8>)
 800077c:	0019      	movs	r1, r3
 800077e:	0010      	movs	r0, r2
 8000780:	f002 fe06 	bl	8003390 <HAL_GPIO_Init>

}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b009      	add	sp, #36	; 0x24
 800078a:	bd90      	pop	{r4, r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	50000400 	.word	0x50000400

08000794 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_I2C1_Init+0x74>)
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <MX_I2C1_Init+0x78>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_I2C1_Init+0x74>)
 80007a0:	4a1b      	ldr	r2, [pc, #108]	; (8000810 <MX_I2C1_Init+0x7c>)
 80007a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_I2C1_Init+0x74>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_I2C1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_I2C1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_I2C1_Init+0x74>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f002 ff85 	bl	80036e0 <HAL_I2C_Init>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007da:	f000 fc33 	bl	8001044 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_I2C1_Init+0x74>)
 80007e0:	2100      	movs	r1, #0
 80007e2:	0018      	movs	r0, r3
 80007e4:	f003 fcd8 	bl	8004198 <HAL_I2CEx_ConfigAnalogFilter>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d001      	beq.n	80007f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007ec:	f000 fc2a 	bl	8001044 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <MX_I2C1_Init+0x74>)
 80007f2:	2100      	movs	r1, #0
 80007f4:	0018      	movs	r0, r3
 80007f6:	f003 fd1b 	bl	8004230 <HAL_I2CEx_ConfigDigitalFilter>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007fe:	f000 fc21 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000050 	.word	0x20000050
 800080c:	40005400 	.word	0x40005400
 8000810:	0060112f 	.word	0x0060112f

08000814 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	240c      	movs	r4, #12
 800081e:	193b      	adds	r3, r7, r4
 8000820:	0018      	movs	r0, r3
 8000822:	2314      	movs	r3, #20
 8000824:	001a      	movs	r2, r3
 8000826:	2100      	movs	r1, #0
 8000828:	f006 f8da 	bl	80069e0 <memset>
  if(i2cHandle->Instance==I2C1)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a18      	ldr	r2, [pc, #96]	; (8000894 <HAL_I2C_MspInit+0x80>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d12a      	bne.n	800088c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <HAL_I2C_MspInit+0x84>)
 8000838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <HAL_I2C_MspInit+0x84>)
 800083c:	2101      	movs	r1, #1
 800083e:	430a      	orrs	r2, r1
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_I2C_MspInit+0x84>)
 8000844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000846:	2201      	movs	r2, #1
 8000848:	4013      	ands	r3, r2
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	22c0      	movs	r2, #192	; 0xc0
 8000852:	00d2      	lsls	r2, r2, #3
 8000854:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000856:	0021      	movs	r1, r4
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2212      	movs	r2, #18
 800085c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2203      	movs	r2, #3
 8000868:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2201      	movs	r2, #1
 800086e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	187a      	adds	r2, r7, r1
 8000872:	23a0      	movs	r3, #160	; 0xa0
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	0011      	movs	r1, r2
 8000878:	0018      	movs	r0, r3
 800087a:	f002 fd89 	bl	8003390 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_I2C_MspInit+0x84>)
 8000880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <HAL_I2C_MspInit+0x84>)
 8000884:	2180      	movs	r1, #128	; 0x80
 8000886:	0389      	lsls	r1, r1, #14
 8000888:	430a      	orrs	r2, r1
 800088a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b009      	add	sp, #36	; 0x24
 8000892:	bd90      	pop	{r4, r7, pc}
 8000894:	40005400 	.word	0x40005400
 8000898:	40021000 	.word	0x40021000

0800089c <_Z17run_input_handlerv>:
 * 	b0 HIGH: decoder turned right one click
 * 	b1 HIGH: decoder turned left one click
 * 	b2 HIGH: push button short pushed and released	>50ms
 * 	b3 HIGH: push button long pushed and NOT released >2000ms
 */
uint8_t run_input_handler(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
	static uint8_t test_byte=0;
	uint8_t calculated_input_byte=0;
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
	static uint8_t input_data=0;
	input_data=debouncer();											//debouncing
 80008a8:	f000 f844 	bl	8000934 <_Z9debouncerv>
 80008ac:	0003      	movs	r3, r0
 80008ae:	001a      	movs	r2, r3
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <_Z17run_input_handlerv+0x90>)
 80008b2:	701a      	strb	r2, [r3, #0]
	calculated_input_byte |= decoder(input_data&DECODE_FILTER);		//rotary decoding
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <_Z17run_input_handlerv+0x90>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2203      	movs	r2, #3
 80008ba:	4013      	ands	r3, r2
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 f8ec 	bl	8000a9c <_Z7decoderh>
 80008c4:	0003      	movs	r3, r0
 80008c6:	0019      	movs	r1, r3
 80008c8:	1dfb      	adds	r3, r7, #7
 80008ca:	1dfa      	adds	r2, r7, #7
 80008cc:	7812      	ldrb	r2, [r2, #0]
 80008ce:	430a      	orrs	r2, r1
 80008d0:	701a      	strb	r2, [r3, #0]
	calculated_input_byte |= push_handler(input_data&PUSH_FILTER);	//handling long press for push button
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <_Z17run_input_handlerv+0x90>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	220c      	movs	r2, #12
 80008d8:	4013      	ands	r3, r2
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	0018      	movs	r0, r3
 80008de:	f000 f943 	bl	8000b68 <_Z12push_handlerh>
 80008e2:	0003      	movs	r3, r0
 80008e4:	0019      	movs	r1, r3
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	1dfa      	adds	r2, r7, #7
 80008ea:	7812      	ldrb	r2, [r2, #0]
 80008ec:	430a      	orrs	r2, r1
 80008ee:	701a      	strb	r2, [r3, #0]

	if((calculated_input_byte&DECODE_FILTER) == DECODER_CW){
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2203      	movs	r2, #3
 80008f6:	4013      	ands	r3, r2
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d105      	bne.n	8000908 <_Z17run_input_handlerv+0x6c>
		test_byte++;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <_Z17run_input_handlerv+0x94>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	3301      	adds	r3, #1
 8000902:	b2da      	uxtb	r2, r3
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <_Z17run_input_handlerv+0x94>)
 8000906:	701a      	strb	r2, [r3, #0]
	}
	if((calculated_input_byte&DECODE_FILTER) == DECODER_CCW){
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2203      	movs	r2, #3
 800090e:	4013      	ands	r3, r2
 8000910:	2b02      	cmp	r3, #2
 8000912:	d105      	bne.n	8000920 <_Z17run_input_handlerv+0x84>
		test_byte--;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <_Z17run_input_handlerv+0x94>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	3b01      	subs	r3, #1
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <_Z17run_input_handlerv+0x94>)
 800091e:	701a      	strb	r2, [r3, #0]
	}

	return calculated_input_byte;
 8000920:	1dfb      	adds	r3, r7, #7
 8000922:	781b      	ldrb	r3, [r3, #0]
}
 8000924:	0018      	movs	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	b002      	add	sp, #8
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200000a5 	.word	0x200000a5
 8000930:	200000a4 	.word	0x200000a4

08000934 <_Z9debouncerv>:
 * @return debounced input states in one byte
 * 	b0: HIGH: rotary_a high
 * 	b1: HIGH: rotary_b high
 * 	b2: HIGH: rotary_push high
 */
uint8_t debouncer(void){
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	static uint8_t debounced_data=0;
	static input_debounce_timer debounce_timer;
	//let's debounce some inputs
	if(HAL_GPIO_ReadPin(rot_a_GPIO_Port, rot_a_Pin)==true){
 8000938:	23a0      	movs	r3, #160	; 0xa0
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	2102      	movs	r1, #2
 800093e:	0018      	movs	r0, r3
 8000940:	f002 fe94 	bl	800366c <HAL_GPIO_ReadPin>
 8000944:	0003      	movs	r3, r0
 8000946:	3b01      	subs	r3, #1
 8000948:	425a      	negs	r2, r3
 800094a:	4153      	adcs	r3, r2
 800094c:	b2db      	uxtb	r3, r3
 800094e:	2b00      	cmp	r3, #0
 8000950:	d00a      	beq.n	8000968 <_Z9debouncerv+0x34>
		if(debounce_timer.rotary_a<DEBOUNCE_TIME)
 8000952:	4b50      	ldr	r3, [pc, #320]	; (8000a94 <_Z9debouncerv+0x160>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b04      	cmp	r3, #4
 8000958:	d810      	bhi.n	800097c <_Z9debouncerv+0x48>
			debounce_timer.rotary_a++;
 800095a:	4b4e      	ldr	r3, [pc, #312]	; (8000a94 <_Z9debouncerv+0x160>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b4c      	ldr	r3, [pc, #304]	; (8000a94 <_Z9debouncerv+0x160>)
 8000964:	701a      	strb	r2, [r3, #0]
 8000966:	e009      	b.n	800097c <_Z9debouncerv+0x48>
	}
	else{
		if(debounce_timer.rotary_a!=0)
 8000968:	4b4a      	ldr	r3, [pc, #296]	; (8000a94 <_Z9debouncerv+0x160>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d005      	beq.n	800097c <_Z9debouncerv+0x48>
			debounce_timer.rotary_a--;
 8000970:	4b48      	ldr	r3, [pc, #288]	; (8000a94 <_Z9debouncerv+0x160>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	3b01      	subs	r3, #1
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b46      	ldr	r3, [pc, #280]	; (8000a94 <_Z9debouncerv+0x160>)
 800097a:	701a      	strb	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(rot_b_GPIO_Port, rot_b_Pin)==true){
 800097c:	23a0      	movs	r3, #160	; 0xa0
 800097e:	05db      	lsls	r3, r3, #23
 8000980:	2101      	movs	r1, #1
 8000982:	0018      	movs	r0, r3
 8000984:	f002 fe72 	bl	800366c <HAL_GPIO_ReadPin>
 8000988:	0003      	movs	r3, r0
 800098a:	3b01      	subs	r3, #1
 800098c:	425a      	negs	r2, r3
 800098e:	4153      	adcs	r3, r2
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d00a      	beq.n	80009ac <_Z9debouncerv+0x78>
		if(debounce_timer.rotary_b<DEBOUNCE_TIME)
 8000996:	4b3f      	ldr	r3, [pc, #252]	; (8000a94 <_Z9debouncerv+0x160>)
 8000998:	785b      	ldrb	r3, [r3, #1]
 800099a:	2b04      	cmp	r3, #4
 800099c:	d810      	bhi.n	80009c0 <_Z9debouncerv+0x8c>
			debounce_timer.rotary_b++;
 800099e:	4b3d      	ldr	r3, [pc, #244]	; (8000a94 <_Z9debouncerv+0x160>)
 80009a0:	785b      	ldrb	r3, [r3, #1]
 80009a2:	3301      	adds	r3, #1
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <_Z9debouncerv+0x160>)
 80009a8:	705a      	strb	r2, [r3, #1]
 80009aa:	e009      	b.n	80009c0 <_Z9debouncerv+0x8c>
	}
	else{
		if(debounce_timer.rotary_b!=0)
 80009ac:	4b39      	ldr	r3, [pc, #228]	; (8000a94 <_Z9debouncerv+0x160>)
 80009ae:	785b      	ldrb	r3, [r3, #1]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d005      	beq.n	80009c0 <_Z9debouncerv+0x8c>
			debounce_timer.rotary_b--;
 80009b4:	4b37      	ldr	r3, [pc, #220]	; (8000a94 <_Z9debouncerv+0x160>)
 80009b6:	785b      	ldrb	r3, [r3, #1]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	4b35      	ldr	r3, [pc, #212]	; (8000a94 <_Z9debouncerv+0x160>)
 80009be:	705a      	strb	r2, [r3, #1]
	}
	if(HAL_GPIO_ReadPin(rot_push_GPIO_Port, rot_push_Pin)==true){
 80009c0:	23a0      	movs	r3, #160	; 0xa0
 80009c2:	05db      	lsls	r3, r3, #23
 80009c4:	2110      	movs	r1, #16
 80009c6:	0018      	movs	r0, r3
 80009c8:	f002 fe50 	bl	800366c <HAL_GPIO_ReadPin>
 80009cc:	0003      	movs	r3, r0
 80009ce:	3b01      	subs	r3, #1
 80009d0:	425a      	negs	r2, r3
 80009d2:	4153      	adcs	r3, r2
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d00a      	beq.n	80009f0 <_Z9debouncerv+0xbc>
		if(debounce_timer.rotary_push<DEBOUNCE_TIME)
 80009da:	4b2e      	ldr	r3, [pc, #184]	; (8000a94 <_Z9debouncerv+0x160>)
 80009dc:	789b      	ldrb	r3, [r3, #2]
 80009de:	2b04      	cmp	r3, #4
 80009e0:	d810      	bhi.n	8000a04 <_Z9debouncerv+0xd0>
			debounce_timer.rotary_push++;
 80009e2:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <_Z9debouncerv+0x160>)
 80009e4:	789b      	ldrb	r3, [r3, #2]
 80009e6:	3301      	adds	r3, #1
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <_Z9debouncerv+0x160>)
 80009ec:	709a      	strb	r2, [r3, #2]
 80009ee:	e009      	b.n	8000a04 <_Z9debouncerv+0xd0>
	}
	else{
		if(debounce_timer.rotary_push!=0)
 80009f0:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <_Z9debouncerv+0x160>)
 80009f2:	789b      	ldrb	r3, [r3, #2]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d005      	beq.n	8000a04 <_Z9debouncerv+0xd0>
			debounce_timer.rotary_push--;
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <_Z9debouncerv+0x160>)
 80009fa:	789b      	ldrb	r3, [r3, #2]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <_Z9debouncerv+0x160>)
 8000a02:	709a      	strb	r2, [r3, #2]
	}

	//now lets check the inputs
	if(debounce_timer.rotary_a==DEBOUNCE_TIME)
 8000a04:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <_Z9debouncerv+0x160>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b05      	cmp	r3, #5
 8000a0a:	d106      	bne.n	8000a1a <_Z9debouncerv+0xe6>
		debounced_data |= 0x1;
 8000a0c:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2201      	movs	r2, #1
 8000a12:	4313      	orrs	r3, r2
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4b20      	ldr	r3, [pc, #128]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a18:	701a      	strb	r2, [r3, #0]
	if(debounce_timer.rotary_a==0)
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <_Z9debouncerv+0x160>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d106      	bne.n	8000a30 <_Z9debouncerv+0xfc>
		debounced_data &= ~0x1;
 8000a22:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2201      	movs	r2, #1
 8000a28:	4393      	bics	r3, r2
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a2e:	701a      	strb	r2, [r3, #0]
	if(debounce_timer.rotary_b==DEBOUNCE_TIME)
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <_Z9debouncerv+0x160>)
 8000a32:	785b      	ldrb	r3, [r3, #1]
 8000a34:	2b05      	cmp	r3, #5
 8000a36:	d106      	bne.n	8000a46 <_Z9debouncerv+0x112>
		debounced_data |= 0x2;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a44:	701a      	strb	r2, [r3, #0]
	if(debounce_timer.rotary_b==0)
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <_Z9debouncerv+0x160>)
 8000a48:	785b      	ldrb	r3, [r3, #1]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d106      	bne.n	8000a5c <_Z9debouncerv+0x128>
		debounced_data &= ~0x2;
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2202      	movs	r2, #2
 8000a54:	4393      	bics	r3, r2
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a5a:	701a      	strb	r2, [r3, #0]
	if(debounce_timer.rotary_push==DEBOUNCE_TIME)
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <_Z9debouncerv+0x160>)
 8000a5e:	789b      	ldrb	r3, [r3, #2]
 8000a60:	2b05      	cmp	r3, #5
 8000a62:	d106      	bne.n	8000a72 <_Z9debouncerv+0x13e>
		debounced_data |= 0x4;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2204      	movs	r2, #4
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a70:	701a      	strb	r2, [r3, #0]
	if(debounce_timer.rotary_push==0)
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <_Z9debouncerv+0x160>)
 8000a74:	789b      	ldrb	r3, [r3, #2]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d106      	bne.n	8000a88 <_Z9debouncerv+0x154>
		debounced_data &= ~0x4;
 8000a7a:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2204      	movs	r2, #4
 8000a80:	4393      	bics	r3, r2
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a86:	701a      	strb	r2, [r3, #0]
	return debounced_data;
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	200000a8 	.word	0x200000a8
 8000a98:	200000a6 	.word	0x200000a6

08000a9c <_Z7decoderh>:
 * @param input debounced data - see debouncer() [0b = a; b1 = b]
 * @return information, if decoder turned left, right or not
 *  b0 HIGH: did turn right - CW
 *  b1 HIGH: did turn left - CCW
 */
uint8_t decoder(uint8_t new_state){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	701a      	strb	r2, [r3, #0]
	static uint8_t last_state=0;
	uint8_t decoded_data=0;
 8000aa8:	210f      	movs	r1, #15
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
	if(last_state == 0x00){
 8000ab0:	4b2c      	ldr	r3, [pc, #176]	; (8000b64 <_Z7decoderh+0xc8>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d10e      	bne.n	8000ad6 <_Z7decoderh+0x3a>
		if(new_state==0x01)
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d102      	bne.n	8000ac6 <_Z7decoderh+0x2a>
			decoded_data =DECODER_CW;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	701a      	strb	r2, [r3, #0]
		if(new_state==0x10)
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b10      	cmp	r3, #16
 8000acc:	d103      	bne.n	8000ad6 <_Z7decoderh+0x3a>
			decoded_data =DECODER_CCW;
 8000ace:	230f      	movs	r3, #15
 8000ad0:	18fb      	adds	r3, r7, r3
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	701a      	strb	r2, [r3, #0]
	}
	if(last_state == 0x01){
 8000ad6:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <_Z7decoderh+0xc8>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d10f      	bne.n	8000afe <_Z7decoderh+0x62>
		if(new_state==0x11)
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b11      	cmp	r3, #17
 8000ae4:	d103      	bne.n	8000aee <_Z7decoderh+0x52>
			decoded_data =DECODER_CW;
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	2201      	movs	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]
		if(new_state==0x00)
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d103      	bne.n	8000afe <_Z7decoderh+0x62>
			decoded_data =DECODER_CCW;
 8000af6:	230f      	movs	r3, #15
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	2202      	movs	r2, #2
 8000afc:	701a      	strb	r2, [r3, #0]
	}
	if(last_state == 0x11){
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <_Z7decoderh+0xc8>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b11      	cmp	r3, #17
 8000b04:	d10f      	bne.n	8000b26 <_Z7decoderh+0x8a>
		if(new_state==0x10)
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b10      	cmp	r3, #16
 8000b0c:	d103      	bne.n	8000b16 <_Z7decoderh+0x7a>
			decoded_data =DECODER_CW;
 8000b0e:	230f      	movs	r3, #15
 8000b10:	18fb      	adds	r3, r7, r3
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
		if(new_state==0x01)
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d103      	bne.n	8000b26 <_Z7decoderh+0x8a>
			decoded_data =DECODER_CCW;
 8000b1e:	230f      	movs	r3, #15
 8000b20:	18fb      	adds	r3, r7, r3
 8000b22:	2202      	movs	r2, #2
 8000b24:	701a      	strb	r2, [r3, #0]
	}
	if(last_state == 0x10){
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <_Z7decoderh+0xc8>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b10      	cmp	r3, #16
 8000b2c:	d10f      	bne.n	8000b4e <_Z7decoderh+0xb2>
		if(new_state==0x00)
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d103      	bne.n	8000b3e <_Z7decoderh+0xa2>
			decoded_data =DECODER_CW;
 8000b36:	230f      	movs	r3, #15
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	701a      	strb	r2, [r3, #0]
		if(new_state==0x11)
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b11      	cmp	r3, #17
 8000b44:	d103      	bne.n	8000b4e <_Z7decoderh+0xb2>
			decoded_data =DECODER_CCW;
 8000b46:	230f      	movs	r3, #15
 8000b48:	18fb      	adds	r3, r7, r3
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	701a      	strb	r2, [r3, #0]
	}
	last_state = new_state;
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <_Z7decoderh+0xc8>)
 8000b50:	1dfa      	adds	r2, r7, #7
 8000b52:	7812      	ldrb	r2, [r2, #0]
 8000b54:	701a      	strb	r2, [r3, #0]
	return decoded_data;
 8000b56:	230f      	movs	r3, #15
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	781b      	ldrb	r3, [r3, #0]
}
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b004      	add	sp, #16
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200000ab 	.word	0x200000ab

08000b68 <_Z12push_handlerh>:
 * @param input debounced data - see debouncer()
 * @return wether input was pressed short, long or not at all
 * 	b2 HIGH: push button short pushed and released	>50ms
 * 	b3 HIGH: push button long pushed and NOT released >2000ms
 */
uint8_t push_handler(uint8_t push_button){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	0002      	movs	r2, r0
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	701a      	strb	r2, [r3, #0]
	push_button = push_button >> 2;
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	1dfa      	adds	r2, r7, #7
 8000b78:	7812      	ldrb	r2, [r2, #0]
 8000b7a:	0892      	lsrs	r2, r2, #2
 8000b7c:	701a      	strb	r2, [r3, #0]
	static uint16_t input_hold_timer=0;
	uint8_t push_state=0;
 8000b7e:	230f      	movs	r3, #15
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]

	if(push_button == true && input_hold_timer<=LONG_PUSH_TIME+2){
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d10a      	bne.n	8000ba4 <_Z12push_handlerh+0x3c>
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <_Z12push_handlerh+0x88>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <_Z12push_handlerh+0x8c>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d805      	bhi.n	8000ba4 <_Z12push_handlerh+0x3c>
		input_hold_timer++;
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <_Z12push_handlerh+0x88>)
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <_Z12push_handlerh+0x88>)
 8000ba2:	801a      	strh	r2, [r3, #0]
	}

	if(push_button == false){
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d110      	bne.n	8000bce <_Z12push_handlerh+0x66>
		if(input_hold_timer>=SHORT_PUSH_TIME && input_hold_timer<=LONG_PUSH_TIME)
 8000bac:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <_Z12push_handlerh+0x88>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	2b31      	cmp	r3, #49	; 0x31
 8000bb2:	d909      	bls.n	8000bc8 <_Z12push_handlerh+0x60>
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <_Z12push_handlerh+0x88>)
 8000bb6:	881a      	ldrh	r2, [r3, #0]
 8000bb8:	23fa      	movs	r3, #250	; 0xfa
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d803      	bhi.n	8000bc8 <_Z12push_handlerh+0x60>
			push_state = SHORT_PUSH;
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	701a      	strb	r2, [r3, #0]
		input_hold_timer=0;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <_Z12push_handlerh+0x88>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	801a      	strh	r2, [r3, #0]
	}

	if(input_hold_timer==LONG_PUSH_TIME){
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <_Z12push_handlerh+0x88>)
 8000bd0:	881a      	ldrh	r2, [r3, #0]
 8000bd2:	23fa      	movs	r3, #250	; 0xfa
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d103      	bne.n	8000be2 <_Z12push_handlerh+0x7a>
		push_state = LONG_PUSH;
 8000bda:	230f      	movs	r3, #15
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	2208      	movs	r2, #8
 8000be0:	701a      	strb	r2, [r3, #0]
	}
	return push_state;
 8000be2:	230f      	movs	r3, #15
 8000be4:	18fb      	adds	r3, r7, r3
 8000be6:	781b      	ldrb	r3, [r3, #0]
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b004      	add	sp, #16
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	200000ac 	.word	0x200000ac
 8000bf4:	000007d2 	.word	0x000007d2

08000bf8 <_Z9set_colorhmh>:
 * @brief function to write new color to output queue
 * @param led_number number to which led the color should be applied [0-5]
 * @param hex_code	enter RGB Hex code of color or use predefined values
 * @param brightness choose brightness level between 1 and 100 - brightness cannot turn led off
 */
void set_color(uint8_t led_number, uint32_t hex_code, uint8_t brightness){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6039      	str	r1, [r7, #0]
 8000c00:	0011      	movs	r1, r2
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	1c02      	adds	r2, r0, #0
 8000c06:	701a      	strb	r2, [r3, #0]
 8000c08:	1dbb      	adds	r3, r7, #6
 8000c0a:	1c0a      	adds	r2, r1, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
	brightness_controller = 0;
 8000c0e:	4b3f      	ldr	r3, [pc, #252]	; (8000d0c <_Z9set_colorhmh+0x114>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
	if(led_number>=MAX_LED)
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b05      	cmp	r3, #5
 8000c1a:	d902      	bls.n	8000c22 <_Z9set_colorhmh+0x2a>
		led_number=MAX_LED-1;
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	2205      	movs	r2, #5
 8000c20:	701a      	strb	r2, [r3, #0]
	led_data[led_number]=0;
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	4b3a      	ldr	r3, [pc, #232]	; (8000d10 <_Z9set_colorhmh+0x118>)
 8000c28:	0092      	lsls	r2, r2, #2
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	50d1      	str	r1, [r2, r3]
	if(brightness>100)
 8000c2e:	1dbb      	adds	r3, r7, #6
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b64      	cmp	r3, #100	; 0x64
 8000c34:	d902      	bls.n	8000c3c <_Z9set_colorhmh+0x44>
		brightness = 100;
 8000c36:	1dbb      	adds	r3, r7, #6
 8000c38:	2264      	movs	r2, #100	; 0x64
 8000c3a:	701a      	strb	r2, [r3, #0]
	if(brightness<1)
 8000c3c:	1dbb      	adds	r3, r7, #6
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <_Z9set_colorhmh+0x52>
		brightness = 1;
 8000c44:	1dbb      	adds	r3, r7, #6
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
	//apply brightness to each color segment and reshuffle bits as required by the LED: green-red-blue
	//red
	brightness_controller = (uint16_t)((hex_code&0xff0000) >> 16)*brightness/100;
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	0c1b      	lsrs	r3, r3, #16
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	001a      	movs	r2, r3
 8000c52:	23ff      	movs	r3, #255	; 0xff
 8000c54:	4013      	ands	r3, r2
 8000c56:	1dba      	adds	r2, r7, #6
 8000c58:	7812      	ldrb	r2, [r2, #0]
 8000c5a:	4353      	muls	r3, r2
 8000c5c:	2164      	movs	r1, #100	; 0x64
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f7ff fadc 	bl	800021c <__divsi3>
 8000c64:	0003      	movs	r3, r0
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <_Z9set_colorhmh+0x114>)
 8000c6a:	701a      	strb	r2, [r3, #0]
	led_data[led_number] |= (uint16_t)brightness_controller << 8;
 8000c6c:	1dfb      	adds	r3, r7, #7
 8000c6e:	781a      	ldrb	r2, [r3, #0]
 8000c70:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <_Z9set_colorhmh+0x118>)
 8000c72:	0092      	lsls	r2, r2, #2
 8000c74:	58d3      	ldr	r3, [r2, r3]
 8000c76:	4a25      	ldr	r2, [pc, #148]	; (8000d0c <_Z9set_colorhmh+0x114>)
 8000c78:	7812      	ldrb	r2, [r2, #0]
 8000c7a:	0212      	lsls	r2, r2, #8
 8000c7c:	0011      	movs	r1, r2
 8000c7e:	1dfa      	adds	r2, r7, #7
 8000c80:	7812      	ldrb	r2, [r2, #0]
 8000c82:	4319      	orrs	r1, r3
 8000c84:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <_Z9set_colorhmh+0x118>)
 8000c86:	0092      	lsls	r2, r2, #2
 8000c88:	50d1      	str	r1, [r2, r3]
	//green
	brightness_controller = (uint16_t)((hex_code&0xff00) >> 8)*brightness/100;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	001a      	movs	r2, r3
 8000c92:	23ff      	movs	r3, #255	; 0xff
 8000c94:	4013      	ands	r3, r2
 8000c96:	1dba      	adds	r2, r7, #6
 8000c98:	7812      	ldrb	r2, [r2, #0]
 8000c9a:	4353      	muls	r3, r2
 8000c9c:	2164      	movs	r1, #100	; 0x64
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f7ff fabc 	bl	800021c <__divsi3>
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <_Z9set_colorhmh+0x114>)
 8000caa:	701a      	strb	r2, [r3, #0]
	led_data[led_number] |= (uint32_t)brightness_controller << 16;
 8000cac:	1dfb      	adds	r3, r7, #7
 8000cae:	781a      	ldrb	r2, [r3, #0]
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <_Z9set_colorhmh+0x118>)
 8000cb2:	0092      	lsls	r2, r2, #2
 8000cb4:	58d1      	ldr	r1, [r2, r3]
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <_Z9set_colorhmh+0x114>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	041b      	lsls	r3, r3, #16
 8000cbc:	1dfa      	adds	r2, r7, #7
 8000cbe:	7812      	ldrb	r2, [r2, #0]
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <_Z9set_colorhmh+0x118>)
 8000cc4:	0092      	lsls	r2, r2, #2
 8000cc6:	50d1      	str	r1, [r2, r3]
	//blue
	brightness_controller = (uint16_t)(hex_code&0xff)*brightness/100;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	001a      	movs	r2, r3
 8000cce:	23ff      	movs	r3, #255	; 0xff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	1dba      	adds	r2, r7, #6
 8000cd4:	7812      	ldrb	r2, [r2, #0]
 8000cd6:	4353      	muls	r3, r2
 8000cd8:	2164      	movs	r1, #100	; 0x64
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f7ff fa9e 	bl	800021c <__divsi3>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <_Z9set_colorhmh+0x114>)
 8000ce6:	701a      	strb	r2, [r3, #0]
	led_data[led_number] |= brightness_controller;
 8000ce8:	1dfb      	adds	r3, r7, #7
 8000cea:	781a      	ldrb	r2, [r3, #0]
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <_Z9set_colorhmh+0x118>)
 8000cee:	0092      	lsls	r2, r2, #2
 8000cf0:	58d3      	ldr	r3, [r2, r3]
 8000cf2:	4a06      	ldr	r2, [pc, #24]	; (8000d0c <_Z9set_colorhmh+0x114>)
 8000cf4:	7812      	ldrb	r2, [r2, #0]
 8000cf6:	0011      	movs	r1, r2
 8000cf8:	1dfa      	adds	r2, r7, #7
 8000cfa:	7812      	ldrb	r2, [r2, #0]
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <_Z9set_colorhmh+0x118>)
 8000d00:	0092      	lsls	r2, r2, #2
 8000d02:	50d1      	str	r1, [r2, r3]
}
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b002      	add	sp, #8
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200000ae 	.word	0x200000ae
 8000d10:	200000b4 	.word	0x200000b4

08000d14 <_Z9send_datab>:
/*
 * @brief: calling this command will prepare the data and perform a dma request to output the Data
 * also used to turn led on or off
 * @param state true: actual data is send to led; false: 0 is send to turn LED off
 */
void send_data(bool state){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	1dfb      	adds	r3, r7, #7
 8000d1e:	701a      	strb	r2, [r3, #0]
//T0L = 580ns~1us
//T1L = 220ns~420ns
//RES = >280us
// 1 period = 40 cycles = 1,25us = 800kHz

	index = 0;
 8000d20:	4b3f      	ldr	r3, [pc, #252]	; (8000e20 <_Z9send_datab+0x10c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<MAX_LED;i++){
 8000d26:	230f      	movs	r3, #15
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	230f      	movs	r3, #15
 8000d30:	18fb      	adds	r3, r7, r3
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b05      	cmp	r3, #5
 8000d36:	d846      	bhi.n	8000dc6 <_Z9send_datab+0xb2>
		for(uint8_t j = NUM_BITS;j>0; j--){
 8000d38:	230e      	movs	r3, #14
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	2218      	movs	r2, #24
 8000d3e:	701a      	strb	r2, [r3, #0]
 8000d40:	230e      	movs	r3, #14
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d036      	beq.n	8000db8 <_Z9send_datab+0xa4>
			if(state == false){
 8000d4a:	1dfb      	adds	r3, r7, #7
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d107      	bne.n	8000d62 <_Z9send_datab+0x4e>
				pwm_data[index] = LOW_CLOCKS;
 8000d52:	4b33      	ldr	r3, [pc, #204]	; (8000e20 <_Z9send_datab+0x10c>)
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	001a      	movs	r2, r3
 8000d58:	4b32      	ldr	r3, [pc, #200]	; (8000e24 <_Z9send_datab+0x110>)
 8000d5a:	0052      	lsls	r2, r2, #1
 8000d5c:	210f      	movs	r1, #15
 8000d5e:	52d1      	strh	r1, [r2, r3]
 8000d60:	e01d      	b.n	8000d9e <_Z9send_datab+0x8a>
			}
			else{
				if(led_data[i]&(1<<(j-1)))
 8000d62:	230f      	movs	r3, #15
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	781a      	ldrb	r2, [r3, #0]
 8000d68:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <_Z9send_datab+0x114>)
 8000d6a:	0092      	lsls	r2, r2, #2
 8000d6c:	58d3      	ldr	r3, [r2, r3]
 8000d6e:	220e      	movs	r2, #14
 8000d70:	18ba      	adds	r2, r7, r2
 8000d72:	7812      	ldrb	r2, [r2, #0]
 8000d74:	3a01      	subs	r2, #1
 8000d76:	2101      	movs	r1, #1
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	000a      	movs	r2, r1
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	d007      	beq.n	8000d90 <_Z9send_datab+0x7c>
					pwm_data[index] = HIGH_CLOCKS;	//one period = 40 --> High bit = 70%
 8000d80:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <_Z9send_datab+0x10c>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	001a      	movs	r2, r3
 8000d86:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <_Z9send_datab+0x110>)
 8000d88:	0052      	lsls	r2, r2, #1
 8000d8a:	2119      	movs	r1, #25
 8000d8c:	52d1      	strh	r1, [r2, r3]
 8000d8e:	e006      	b.n	8000d9e <_Z9send_datab+0x8a>
				else
					pwm_data[index] = LOW_CLOCKS;	//one period = 40 --> High bit = 30%
 8000d90:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <_Z9send_datab+0x10c>)
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	001a      	movs	r2, r3
 8000d96:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <_Z9send_datab+0x110>)
 8000d98:	0052      	lsls	r2, r2, #1
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	52d1      	strh	r1, [r2, r3]
			}
			index++;
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <_Z9send_datab+0x10c>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <_Z9send_datab+0x10c>)
 8000da8:	801a      	strh	r2, [r3, #0]
		for(uint8_t j = NUM_BITS;j>0; j--){
 8000daa:	210e      	movs	r1, #14
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	781a      	ldrb	r2, [r3, #0]
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	3a01      	subs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
 8000db6:	e7c3      	b.n	8000d40 <_Z9send_datab+0x2c>
	for(uint8_t i=0;i<MAX_LED;i++){
 8000db8:	210f      	movs	r1, #15
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	781a      	ldrb	r2, [r3, #0]
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	3201      	adds	r2, #1
 8000dc2:	701a      	strb	r2, [r3, #0]
 8000dc4:	e7b3      	b.n	8000d2e <_Z9send_datab+0x1a>
		}
	}
	for(uint8_t i = 0; i<LED_RESET; i++){
 8000dc6:	230d      	movs	r3, #13
 8000dc8:	18fb      	adds	r3, r7, r3
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
 8000dce:	200d      	movs	r0, #13
 8000dd0:	183b      	adds	r3, r7, r0
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b31      	cmp	r3, #49	; 0x31
 8000dd6:	d812      	bhi.n	8000dfe <_Z9send_datab+0xea>
		pwm_data[index]=0;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <_Z9send_datab+0x10c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	001a      	movs	r2, r3
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <_Z9send_datab+0x110>)
 8000de0:	0052      	lsls	r2, r2, #1
 8000de2:	2100      	movs	r1, #0
 8000de4:	52d1      	strh	r1, [r2, r3]
		index++;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <_Z9send_datab+0x10c>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <_Z9send_datab+0x10c>)
 8000df0:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i<LED_RESET; i++){
 8000df2:	183b      	adds	r3, r7, r0
 8000df4:	781a      	ldrb	r2, [r3, #0]
 8000df6:	183b      	adds	r3, r7, r0
 8000df8:	3201      	adds	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
 8000dfc:	e7e7      	b.n	8000dce <_Z9send_datab+0xba>
	}
	if(dma_running==false){
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <_Z9send_datab+0x118>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d108      	bne.n	8000e18 <_Z9send_datab+0x104>
		HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, (uint32_t*)pwm_data, (MAX_LED*NUM_BITS)+LED_RESET);
 8000e06:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <_Z9send_datab+0x110>)
 8000e08:	4809      	ldr	r0, [pc, #36]	; (8000e30 <_Z9send_datab+0x11c>)
 8000e0a:	23c2      	movs	r3, #194	; 0xc2
 8000e0c:	2108      	movs	r1, #8
 8000e0e:	f004 fd4d 	bl	80058ac <HAL_TIM_PWM_Start_DMA>
		dma_running=true;
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <_Z9send_datab+0x118>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	701a      	strb	r2, [r3, #0]
	}
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b004      	add	sp, #16
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	200000b0 	.word	0x200000b0
 8000e24:	200000cc 	.word	0x200000cc
 8000e28:	200000b4 	.word	0x200000b4
 8000e2c:	20000250 	.word	0x20000250
 8000e30:	2000031c 	.word	0x2000031c

08000e34 <HAL_TIM_PWM_PulseFinishedCallback>:

/*
 * @brief: callback function when transfer is finished to stop the DMA
 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_3);
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000e3e:	2108      	movs	r1, #8
 8000e40:	0018      	movs	r0, r3
 8000e42:	f004 febd 	bl	8005bc0 <HAL_TIM_PWM_Stop_DMA>
	dma_running=false;
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b002      	add	sp, #8
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000031c 	.word	0x2000031c
 8000e58:	20000250 	.word	0x20000250

08000e5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e60:	f001 ff46 	bl	8002cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e64:	f000 f840 	bl	8000ee8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e68:	f7ff fc26 	bl	80006b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e6c:	f7ff fc06 	bl	800067c <MX_DMA_Init>
  MX_I2C1_Init();
 8000e70:	f7ff fc90 	bl	8000794 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000e74:	f001 fa80 	bl	8002378 <MX_TIM2_Init>
  MX_TIM21_Init();
 8000e78:	f001 fafc 	bl	8002474 <MX_TIM21_Init>
  MX_SPI1_Init();
 8000e7c:	f001 f9b4 	bl	80021e8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // start hardware timer for 1ms timer
  HAL_TIM_OC_Start_IT(&htim21, TIM_CHANNEL_1);
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <main+0x80>)
 8000e82:	2100      	movs	r1, #0
 8000e84:	0018      	movs	r0, r3
 8000e86:	f004 fbf7 	bl	8005678 <HAL_TIM_OC_Start_IT>

  // check the size of the board
  board_size = 4;
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <main+0x84>)
 8000e8c:	2204      	movs	r2, #4
 8000e8e:	701a      	strb	r2, [r3, #0]
  if(HAL_GPIO_ReadPin(sens_size_GPIO_Port, sens_size_Pin)==true){
 8000e90:	23a0      	movs	r3, #160	; 0xa0
 8000e92:	05db      	lsls	r3, r3, #23
 8000e94:	2108      	movs	r1, #8
 8000e96:	0018      	movs	r0, r3
 8000e98:	f002 fbe8 	bl	800366c <HAL_GPIO_ReadPin>
 8000e9c:	0003      	movs	r3, r0
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	425a      	negs	r2, r3
 8000ea2:	4153      	adcs	r3, r2
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d002      	beq.n	8000eb0 <main+0x54>
	  board_size = 6;
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <main+0x84>)
 8000eac:	2206      	movs	r2, #6
 8000eae:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  if(timeout(main_timer)){
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <main+0x88>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f000 f8b3 	bl	8001020 <timeout>
 8000eba:	1e03      	subs	r3, r0, #0
 8000ebc:	d0f8      	beq.n	8000eb0 <main+0x54>
		  main_timer = start_timer_ms(MAIN_TIMER);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f000 f89e 	bl	8001000 <start_timer_ms>
 8000ec4:	0002      	movs	r2, r0
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <main+0x88>)
 8000ec8:	601a      	str	r2, [r3, #0]
		  run_time_handler();
 8000eca:	f001 fbef 	bl	80026ac <_Z16run_time_handlerv>

		  run_output_mixer(run_input_handler());
 8000ece:	f7ff fce5 	bl	800089c <_Z17run_input_handlerv>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f000 fa31 	bl	800133c <_Z16run_output_mixerh>
	  if(timeout(main_timer)){
 8000eda:	e7e9      	b.n	8000eb0 <main+0x54>
 8000edc:	2000035c 	.word	0x2000035c
 8000ee0:	2000025c 	.word	0x2000025c
 8000ee4:	20000254 	.word	0x20000254

08000ee8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b099      	sub	sp, #100	; 0x64
 8000eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eee:	242c      	movs	r4, #44	; 0x2c
 8000ef0:	193b      	adds	r3, r7, r4
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	2334      	movs	r3, #52	; 0x34
 8000ef6:	001a      	movs	r2, r3
 8000ef8:	2100      	movs	r1, #0
 8000efa:	f005 fd71 	bl	80069e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000efe:	2318      	movs	r3, #24
 8000f00:	18fb      	adds	r3, r7, r3
 8000f02:	0018      	movs	r0, r3
 8000f04:	2314      	movs	r3, #20
 8000f06:	001a      	movs	r2, r3
 8000f08:	2100      	movs	r1, #0
 8000f0a:	f005 fd69 	bl	80069e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f0e:	003b      	movs	r3, r7
 8000f10:	0018      	movs	r0, r3
 8000f12:	2318      	movs	r3, #24
 8000f14:	001a      	movs	r2, r3
 8000f16:	2100      	movs	r1, #0
 8000f18:	f005 fd62 	bl	80069e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f1c:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <_Z18SystemClock_Configv+0xf8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a30      	ldr	r2, [pc, #192]	; (8000fe4 <_Z18SystemClock_Configv+0xfc>)
 8000f22:	401a      	ands	r2, r3
 8000f24:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <_Z18SystemClock_Configv+0xf8>)
 8000f26:	2180      	movs	r1, #128	; 0x80
 8000f28:	0109      	lsls	r1, r1, #4
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f2e:	0021      	movs	r1, r4
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	2202      	movs	r2, #2
 8000f34:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2201      	movs	r2, #1
 8000f3a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	2210      	movs	r2, #16
 8000f40:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	2202      	movs	r2, #2
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	02d2      	lsls	r2, r2, #11
 8000f54:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2280      	movs	r2, #128	; 0x80
 8000f5a:	03d2      	lsls	r2, r2, #15
 8000f5c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	0018      	movs	r0, r3
 8000f62:	f003 f9b1 	bl	80042c8 <HAL_RCC_OscConfig>
 8000f66:	0003      	movs	r3, r0
 8000f68:	1e5a      	subs	r2, r3, #1
 8000f6a:	4193      	sbcs	r3, r2
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8000f72:	f000 f867 	bl	8001044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f76:	2118      	movs	r1, #24
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f7e:	187b      	adds	r3, r7, r1
 8000f80:	2203      	movs	r2, #3
 8000f82:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	00d2      	lsls	r2, r2, #3
 8000f96:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f003 fd0f 	bl	80049c0 <HAL_RCC_ClockConfig>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	1e5a      	subs	r2, r3, #1
 8000fa6:	4193      	sbcs	r3, r2
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 8000fae:	f000 f849 	bl	8001044 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fb2:	003b      	movs	r3, r7
 8000fb4:	2208      	movs	r2, #8
 8000fb6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fb8:	003b      	movs	r3, r7
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fbe:	003b      	movs	r3, r7
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f003 feeb 	bl	8004d9c <HAL_RCCEx_PeriphCLKConfig>
 8000fc6:	0003      	movs	r3, r0
 8000fc8:	1e5a      	subs	r2, r3, #1
 8000fca:	4193      	sbcs	r3, r2
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <_Z18SystemClock_Configv+0xee>
  {
    Error_Handler();
 8000fd2:	f000 f837 	bl	8001044 <Error_Handler>
  }
}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b019      	add	sp, #100	; 0x64
 8000fdc:	bd90      	pop	{r4, r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	40007000 	.word	0x40007000
 8000fe4:	ffffe7ff 	.word	0xffffe7ff

08000fe8 <counter_update_it>:

//variables for runtime functions
/**
 * @brief: funcitons updates counter for 1ms time base - triggered by timer hardware module
 */
void counter_update_it(){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	sys_counter++;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <counter_update_it+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	4b02      	ldr	r3, [pc, #8]	; (8000ffc <counter_update_it+0x14>)
 8000ff4:	601a      	str	r2, [r3, #0]
}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000258 	.word	0x20000258

08001000 <start_timer_ms>:
 * @brief function to calculate end-time of timer event
 * @param ms: amount of time, the timer should run
 * @return systemtick value, at which the timer run out
 * @usage: call function and insert return value into timeout() function, to check if timeout occured
 */
uint32_t start_timer_ms(uint32_t new_timer_value){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	return new_timer_value += sys_counter;
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <start_timer_ms+0x1c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	18d3      	adds	r3, r2, r3
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
}
 8001014:	0018      	movs	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	b002      	add	sp, #8
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000258 	.word	0x20000258

08001020 <timeout>:
/**
 * @brief checks if the timer set by start_timer_ms for a given class is expired
 * @return if present tick counter is higher then timer value set by start_timer_ms
 * the timer is expired and the function returns true
 */
bool timeout(uint32_t end_time){
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	if(end_time>sys_counter)
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <timeout+0x20>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	429a      	cmp	r2, r3
 8001030:	d901      	bls.n	8001036 <timeout+0x16>
		return false;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <timeout+0x18>
	else
		return true;
 8001036:	2301      	movs	r3, #1
}
 8001038:	0018      	movs	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	b002      	add	sp, #8
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000258 	.word	0x20000258

08001044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001048:	b672      	cpsid	i
}
 800104a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800104c:	e7fe      	b.n	800104c <Error_Handler+0x8>
	...

08001050 <_Z9spi_writev>:
//////////////// SPI-Subroutine ////////////////
//MSB first
/*
 * @brief: function to handle write commands via SPI - calls HAL
 */
void spi_write(void){
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(sr_shift_output_GPIO_Port, sr_shift_output_Pin, GPIO_PIN_RESET);
 8001054:	23a0      	movs	r3, #160	; 0xa0
 8001056:	05db      	lsls	r3, r3, #23
 8001058:	2200      	movs	r2, #0
 800105a:	2140      	movs	r1, #64	; 0x40
 800105c:	0018      	movs	r0, r3
 800105e:	f002 fb22 	bl	80036a6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, spi_data, 4, 100);
 8001062:	4908      	ldr	r1, [pc, #32]	; (8001084 <_Z9spi_writev+0x34>)
 8001064:	4808      	ldr	r0, [pc, #32]	; (8001088 <_Z9spi_writev+0x38>)
 8001066:	2364      	movs	r3, #100	; 0x64
 8001068:	2204      	movs	r2, #4
 800106a:	f004 f84c 	bl	8005106 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(sr_shift_output_GPIO_Port, sr_shift_output_Pin, GPIO_PIN_SET);
 800106e:	23a0      	movs	r3, #160	; 0xa0
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	2201      	movs	r2, #1
 8001074:	2140      	movs	r1, #64	; 0x40
 8001076:	0018      	movs	r0, r3
 8001078:	f002 fb15 	bl	80036a6 <HAL_GPIO_WritePin>
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	20000298 	.word	0x20000298
 8001088:	200002c4 	.word	0x200002c4

0800108c <_Z10set_numberhh>:
 * @brief writes a value to the register of the specified number
 * @param tube_number is the selected tube. 0 is the left tube, 5 the most right one (if 6 tubes are installed)
 * @param value is the value to be displayed - values other than 0 to 9 will turn the tube off
 * @note: values are stored in their variables so that they can easily be copied into the spi_data
 */
void set_number(uint8_t tube_number, uint8_t value){
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	0002      	movs	r2, r0
 8001094:	1dfb      	adds	r3, r7, #7
 8001096:	701a      	strb	r2, [r3, #0]
 8001098:	1dbb      	adds	r3, r7, #6
 800109a:	1c0a      	adds	r2, r1, #0
 800109c:	701a      	strb	r2, [r3, #0]
	uint8_t temp = 0;
 800109e:	230f      	movs	r3, #15
 80010a0:	18fb      	adds	r3, r7, r3
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]

	if(value>0xf)
 80010a6:	1dbb      	adds	r3, r7, #6
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b0f      	cmp	r3, #15
 80010ac:	d902      	bls.n	80010b4 <_Z10set_numberhh+0x28>
		value=0xf;
 80010ae:	1dbb      	adds	r3, r7, #6
 80010b0:	220f      	movs	r2, #15
 80010b2:	701a      	strb	r2, [r3, #0]

	if(tube_number%2 == 1)
 80010b4:	1dfb      	adds	r3, r7, #7
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2201      	movs	r2, #1
 80010ba:	4013      	ands	r3, r2
 80010bc:	d004      	beq.n	80010c8 <_Z10set_numberhh+0x3c>
		value = value << 4;
 80010be:	1dbb      	adds	r3, r7, #6
 80010c0:	1dba      	adds	r2, r7, #6
 80010c2:	7812      	ldrb	r2, [r2, #0]
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	701a      	strb	r2, [r3, #0]

	//spi_data [0] = seconds; [2] = minutes; [3] = hours

	switch(tube_number){
 80010c8:	1dfb      	adds	r3, r7, #7
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b05      	cmp	r3, #5
 80010ce:	d86a      	bhi.n	80011a6 <_Z10set_numberhh+0x11a>
 80010d0:	009a      	lsls	r2, r3, #2
 80010d2:	4b37      	ldr	r3, [pc, #220]	; (80011b0 <_Z10set_numberhh+0x124>)
 80010d4:	18d3      	adds	r3, r2, r3
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	469f      	mov	pc, r3
		case 0: temp = spi_data[3]; spi_data[3] = (temp & 0xf0) | value; break;
 80010da:	210f      	movs	r1, #15
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	4a35      	ldr	r2, [pc, #212]	; (80011b4 <_Z10set_numberhh+0x128>)
 80010e0:	78d2      	ldrb	r2, [r2, #3]
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	220f      	movs	r2, #15
 80010ea:	4393      	bics	r3, r2
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	1dbb      	adds	r3, r7, #6
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <_Z10set_numberhh+0x128>)
 80010f8:	70da      	strb	r2, [r3, #3]
 80010fa:	e055      	b.n	80011a8 <_Z10set_numberhh+0x11c>
		case 1: temp = spi_data[3]; spi_data[3] = (temp & 0x0f) | value; break;	//number already shifted 4 bites
 80010fc:	210f      	movs	r1, #15
 80010fe:	187b      	adds	r3, r7, r1
 8001100:	4a2c      	ldr	r2, [pc, #176]	; (80011b4 <_Z10set_numberhh+0x128>)
 8001102:	78d2      	ldrb	r2, [r2, #3]
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	187b      	adds	r3, r7, r1
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	220f      	movs	r2, #15
 800110c:	4013      	ands	r3, r2
 800110e:	b2da      	uxtb	r2, r3
 8001110:	1dbb      	adds	r3, r7, #6
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4313      	orrs	r3, r2
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <_Z10set_numberhh+0x128>)
 800111a:	70da      	strb	r2, [r3, #3]
 800111c:	e044      	b.n	80011a8 <_Z10set_numberhh+0x11c>
		case 2: temp = spi_data[2]; spi_data[2] = (temp & 0xf0) | value; break;
 800111e:	210f      	movs	r1, #15
 8001120:	187b      	adds	r3, r7, r1
 8001122:	4a24      	ldr	r2, [pc, #144]	; (80011b4 <_Z10set_numberhh+0x128>)
 8001124:	7892      	ldrb	r2, [r2, #2]
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	187b      	adds	r3, r7, r1
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	220f      	movs	r2, #15
 800112e:	4393      	bics	r3, r2
 8001130:	b2da      	uxtb	r2, r3
 8001132:	1dbb      	adds	r3, r7, #6
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4313      	orrs	r3, r2
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <_Z10set_numberhh+0x128>)
 800113c:	709a      	strb	r2, [r3, #2]
 800113e:	e033      	b.n	80011a8 <_Z10set_numberhh+0x11c>
		case 3: temp = spi_data[2]; spi_data[2] = (temp & 0x0f) | value; break;
 8001140:	210f      	movs	r1, #15
 8001142:	187b      	adds	r3, r7, r1
 8001144:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <_Z10set_numberhh+0x128>)
 8001146:	7892      	ldrb	r2, [r2, #2]
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	187b      	adds	r3, r7, r1
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	220f      	movs	r2, #15
 8001150:	4013      	ands	r3, r2
 8001152:	b2da      	uxtb	r2, r3
 8001154:	1dbb      	adds	r3, r7, #6
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4313      	orrs	r3, r2
 800115a:	b2da      	uxtb	r2, r3
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <_Z10set_numberhh+0x128>)
 800115e:	709a      	strb	r2, [r3, #2]
 8001160:	e022      	b.n	80011a8 <_Z10set_numberhh+0x11c>
		case 4: temp = spi_data[0]; spi_data[0] = (temp & 0xf0) | value; break;
 8001162:	210f      	movs	r1, #15
 8001164:	187b      	adds	r3, r7, r1
 8001166:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <_Z10set_numberhh+0x128>)
 8001168:	7812      	ldrb	r2, [r2, #0]
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	187b      	adds	r3, r7, r1
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	220f      	movs	r2, #15
 8001172:	4393      	bics	r3, r2
 8001174:	b2da      	uxtb	r2, r3
 8001176:	1dbb      	adds	r3, r7, #6
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4313      	orrs	r3, r2
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <_Z10set_numberhh+0x128>)
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	e011      	b.n	80011a8 <_Z10set_numberhh+0x11c>
		case 5: temp = spi_data[0]; spi_data[0] = (temp & 0x0f) | value; break;
 8001184:	210f      	movs	r1, #15
 8001186:	187b      	adds	r3, r7, r1
 8001188:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <_Z10set_numberhh+0x128>)
 800118a:	7812      	ldrb	r2, [r2, #0]
 800118c:	701a      	strb	r2, [r3, #0]
 800118e:	187b      	adds	r3, r7, r1
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	220f      	movs	r2, #15
 8001194:	4013      	ands	r3, r2
 8001196:	b2da      	uxtb	r2, r3
 8001198:	1dbb      	adds	r3, r7, #6
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4313      	orrs	r3, r2
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <_Z10set_numberhh+0x128>)
 80011a2:	701a      	strb	r2, [r3, #0]
 80011a4:	e000      	b.n	80011a8 <_Z10set_numberhh+0x11c>
		default: break;
 80011a6:	46c0      	nop			; (mov r8, r8)
	}
}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b004      	add	sp, #16
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	08006a08 	.word	0x08006a08
 80011b4:	20000298 	.word	0x20000298

080011b8 <_Z9set_pointhb>:
/**
 * @brief turns a specific point on or off
 * @param point_number is the selected point starting from left - 0: lh, 1: ll, 2: rh, 3: rl
 * @param state true -> point is on; false -> point is off
 */
void set_point(uint8_t point_number, bool state){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	0002      	movs	r2, r0
 80011c0:	1dfb      	adds	r3, r7, #7
 80011c2:	701a      	strb	r2, [r3, #0]
 80011c4:	1dbb      	adds	r3, r7, #6
 80011c6:	1c0a      	adds	r2, r1, #0
 80011c8:	701a      	strb	r2, [r3, #0]
	switch(point_number){
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d044      	beq.n	800125c <_Z9set_pointhb+0xa4>
 80011d2:	dc57      	bgt.n	8001284 <_Z9set_pointhb+0xcc>
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d02d      	beq.n	8001234 <_Z9set_pointhb+0x7c>
 80011d8:	dc54      	bgt.n	8001284 <_Z9set_pointhb+0xcc>
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d002      	beq.n	80011e4 <_Z9set_pointhb+0x2c>
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d014      	beq.n	800120c <_Z9set_pointhb+0x54>
		case 0: if(state == true) spi_data[1] |= 0x1; else spi_data[1] &= ~0x1; break;
		case 1: if(state == true) spi_data[1] |= 0x2; else spi_data[1] &= ~0x2; break;
		case 2: if(state == true) spi_data[1] |= 0x4; else spi_data[1] &= ~0x4; break;
		case 3: if(state == true) spi_data[1] |= 0x8; else spi_data[1] &= ~0x8; break;
		default: break;
 80011e2:	e04f      	b.n	8001284 <_Z9set_pointhb+0xcc>
		case 0: if(state == true) spi_data[1] |= 0x1; else spi_data[1] &= ~0x1; break;
 80011e4:	1dbb      	adds	r3, r7, #6
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d107      	bne.n	80011fc <_Z9set_pointhb+0x44>
 80011ec:	4b28      	ldr	r3, [pc, #160]	; (8001290 <_Z9set_pointhb+0xd8>)
 80011ee:	785b      	ldrb	r3, [r3, #1]
 80011f0:	2201      	movs	r2, #1
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4b26      	ldr	r3, [pc, #152]	; (8001290 <_Z9set_pointhb+0xd8>)
 80011f8:	705a      	strb	r2, [r3, #1]
 80011fa:	e044      	b.n	8001286 <_Z9set_pointhb+0xce>
 80011fc:	4b24      	ldr	r3, [pc, #144]	; (8001290 <_Z9set_pointhb+0xd8>)
 80011fe:	785b      	ldrb	r3, [r3, #1]
 8001200:	2201      	movs	r2, #1
 8001202:	4393      	bics	r3, r2
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <_Z9set_pointhb+0xd8>)
 8001208:	705a      	strb	r2, [r3, #1]
 800120a:	e03c      	b.n	8001286 <_Z9set_pointhb+0xce>
		case 1: if(state == true) spi_data[1] |= 0x2; else spi_data[1] &= ~0x2; break;
 800120c:	1dbb      	adds	r3, r7, #6
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d107      	bne.n	8001224 <_Z9set_pointhb+0x6c>
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <_Z9set_pointhb+0xd8>)
 8001216:	785b      	ldrb	r3, [r3, #1]
 8001218:	2202      	movs	r2, #2
 800121a:	4313      	orrs	r3, r2
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <_Z9set_pointhb+0xd8>)
 8001220:	705a      	strb	r2, [r3, #1]
 8001222:	e030      	b.n	8001286 <_Z9set_pointhb+0xce>
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <_Z9set_pointhb+0xd8>)
 8001226:	785b      	ldrb	r3, [r3, #1]
 8001228:	2202      	movs	r2, #2
 800122a:	4393      	bics	r3, r2
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <_Z9set_pointhb+0xd8>)
 8001230:	705a      	strb	r2, [r3, #1]
 8001232:	e028      	b.n	8001286 <_Z9set_pointhb+0xce>
		case 2: if(state == true) spi_data[1] |= 0x4; else spi_data[1] &= ~0x4; break;
 8001234:	1dbb      	adds	r3, r7, #6
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d107      	bne.n	800124c <_Z9set_pointhb+0x94>
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <_Z9set_pointhb+0xd8>)
 800123e:	785b      	ldrb	r3, [r3, #1]
 8001240:	2204      	movs	r2, #4
 8001242:	4313      	orrs	r3, r2
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <_Z9set_pointhb+0xd8>)
 8001248:	705a      	strb	r2, [r3, #1]
 800124a:	e01c      	b.n	8001286 <_Z9set_pointhb+0xce>
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <_Z9set_pointhb+0xd8>)
 800124e:	785b      	ldrb	r3, [r3, #1]
 8001250:	2204      	movs	r2, #4
 8001252:	4393      	bics	r3, r2
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <_Z9set_pointhb+0xd8>)
 8001258:	705a      	strb	r2, [r3, #1]
 800125a:	e014      	b.n	8001286 <_Z9set_pointhb+0xce>
		case 3: if(state == true) spi_data[1] |= 0x8; else spi_data[1] &= ~0x8; break;
 800125c:	1dbb      	adds	r3, r7, #6
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d107      	bne.n	8001274 <_Z9set_pointhb+0xbc>
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <_Z9set_pointhb+0xd8>)
 8001266:	785b      	ldrb	r3, [r3, #1]
 8001268:	2208      	movs	r2, #8
 800126a:	4313      	orrs	r3, r2
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <_Z9set_pointhb+0xd8>)
 8001270:	705a      	strb	r2, [r3, #1]
 8001272:	e008      	b.n	8001286 <_Z9set_pointhb+0xce>
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <_Z9set_pointhb+0xd8>)
 8001276:	785b      	ldrb	r3, [r3, #1]
 8001278:	2208      	movs	r2, #8
 800127a:	4393      	bics	r3, r2
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <_Z9set_pointhb+0xd8>)
 8001280:	705a      	strb	r2, [r3, #1]
 8001282:	e000      	b.n	8001286 <_Z9set_pointhb+0xce>
		default: break;
 8001284:	46c0      	nop			; (mov r8, r8)
	}
}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	46bd      	mov	sp, r7
 800128a:	b002      	add	sp, #8
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	20000298 	.word	0x20000298

08001294 <_Z10set_outputv>:

/**
 * @brief function to send data to output
 */
void set_output(void){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	if(board_size == 6)
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <_Z10set_outputv+0x28>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b06      	cmp	r3, #6
 800129e:	d104      	bne.n	80012aa <_Z10set_outputv+0x16>
		spi_data[0] = spi_data[0];
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <_Z10set_outputv+0x2c>)
 80012a2:	781a      	ldrb	r2, [r3, #0]
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <_Z10set_outputv+0x2c>)
 80012a6:	701a      	strb	r2, [r3, #0]
 80012a8:	e002      	b.n	80012b0 <_Z10set_outputv+0x1c>
	else
		spi_data[0] = 0x00;
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <_Z10set_outputv+0x2c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
	spi_write();
 80012b0:	f7ff fece 	bl	8001050 <_Z9spi_writev>
}
 80012b4:	46c0      	nop			; (mov r8, r8)
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	2000025c 	.word	0x2000025c
 80012c0:	20000298 	.word	0x20000298

080012c4 <_Z17set_flyback_stateb>:
 * @return states how the output is set - use to check if function is not in cooldown mode where new values are discarded
 *
 * @info if a new param is written, a cooldown of 500ms is applied, before the converter can get a new state
 * the written value is discarded if the cooldown is still acitve. If the return value
 */
bool set_flyback_state(bool new_state){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	0002      	movs	r2, r0
 80012cc:	1dfb      	adds	r3, r7, #7
 80012ce:	701a      	strb	r2, [r3, #0]
	if(flyback_state!=new_state){
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <_Z17set_flyback_stateb+0x6c>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	1dfa      	adds	r2, r7, #7
 80012d6:	7812      	ldrb	r2, [r2, #0]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d023      	beq.n	8001324 <_Z17set_flyback_stateb+0x60>
		if(timeout(flyback_timer)){
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <_Z17set_flyback_stateb+0x70>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7ff fe9d 	bl	8001020 <timeout>
 80012e6:	1e03      	subs	r3, r0, #0
 80012e8:	d01c      	beq.n	8001324 <_Z17set_flyback_stateb+0x60>
			flyback_state = new_state;
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <_Z17set_flyback_stateb+0x6c>)
 80012ec:	1dfa      	adds	r2, r7, #7
 80012ee:	7812      	ldrb	r2, [r2, #0]
 80012f0:	701a      	strb	r2, [r3, #0]
			flyback_timer = start_timer_ms(FLYBACK_COOLDOWN);						//new value gets applied
 80012f2:	23fa      	movs	r3, #250	; 0xfa
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	0018      	movs	r0, r3
 80012f8:	f7ff fe82 	bl	8001000 <start_timer_ms>
 80012fc:	0002      	movs	r2, r0
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <_Z17set_flyback_stateb+0x70>)
 8001300:	601a      	str	r2, [r3, #0]
			if(flyback_state == true)
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <_Z17set_flyback_stateb+0x6c>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d106      	bne.n	8001318 <_Z17set_flyback_stateb+0x54>
				HAL_GPIO_WritePin(enable_hv_GPIO_Port, enable_hv_Pin, GPIO_PIN_SET);
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <_Z17set_flyback_stateb+0x74>)
 800130c:	2201      	movs	r2, #1
 800130e:	2102      	movs	r1, #2
 8001310:	0018      	movs	r0, r3
 8001312:	f002 f9c8 	bl	80036a6 <HAL_GPIO_WritePin>
 8001316:	e005      	b.n	8001324 <_Z17set_flyback_stateb+0x60>
			else
				HAL_GPIO_WritePin(enable_hv_GPIO_Port, enable_hv_Pin, GPIO_PIN_RESET);
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <_Z17set_flyback_stateb+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	2102      	movs	r1, #2
 800131e:	0018      	movs	r0, r3
 8001320:	f002 f9c1 	bl	80036a6 <HAL_GPIO_WritePin>
		}
	}
	return flyback_state;
 8001324:	4b02      	ldr	r3, [pc, #8]	; (8001330 <_Z17set_flyback_stateb+0x6c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
}
 8001328:	0018      	movs	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	b002      	add	sp, #8
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000290 	.word	0x20000290
 8001334:	20000294 	.word	0x20000294
 8001338:	50000400 	.word	0x50000400

0800133c <_Z16run_output_mixerh>:
 * @brief Processes all data and generates commands for Output Handler and LED driver
 *
 * gets called every ms
 * gets data directly from respective .hpp files
 */
void run_output_mixer(uint8_t input){
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	0002      	movs	r2, r0
 8001344:	1dfb      	adds	r3, r7, #7
 8001346:	701a      	strb	r2, [r3, #0]
	 * 	minutes blink, change
	 * press - safe time
	 */

	//reset all outputs
	for(uint8_t i = 0; i<6; i++){
 8001348:	230f      	movs	r3, #15
 800134a:	18fb      	adds	r3, r7, r3
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
 8001350:	220f      	movs	r2, #15
 8001352:	18bb      	adds	r3, r7, r2
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b05      	cmp	r3, #5
 8001358:	d81a      	bhi.n	8001390 <_Z16run_output_mixerh+0x54>
		set_point(i, false);
 800135a:	0014      	movs	r4, r2
 800135c:	193b      	adds	r3, r7, r4
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2100      	movs	r1, #0
 8001362:	0018      	movs	r0, r3
 8001364:	f7ff ff28 	bl	80011b8 <_Z9set_pointhb>
		set_number(i, 0xA);
 8001368:	193b      	adds	r3, r7, r4
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	210a      	movs	r1, #10
 800136e:	0018      	movs	r0, r3
 8001370:	f7ff fe8c 	bl	800108c <_Z10set_numberhh>
		set_color(i, 0x0, 0x0);
 8001374:	193b      	adds	r3, r7, r4
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2200      	movs	r2, #0
 800137a:	2100      	movs	r1, #0
 800137c:	0018      	movs	r0, r3
 800137e:	f7ff fc3b 	bl	8000bf8 <_Z9set_colorhmh>
	for(uint8_t i = 0; i<6; i++){
 8001382:	0021      	movs	r1, r4
 8001384:	187b      	adds	r3, r7, r1
 8001386:	781a      	ldrb	r2, [r3, #0]
 8001388:	187b      	adds	r3, r7, r1
 800138a:	3201      	adds	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
 800138e:	e7df      	b.n	8001350 <_Z16run_output_mixerh+0x14>

	//menu system: 	default = 0 --> clock
	//				menu_select = 9 --> page to select menu 1-x ; 0=return to clock

	//enter menu
	if((current_menu == 0) && (input == 4) && (flyback_status==true)){
 8001390:	4b5e      	ldr	r3, [pc, #376]	; (800150c <_Z16run_output_mixerh+0x1d0>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d110      	bne.n	80013ba <_Z16run_output_mixerh+0x7e>
 8001398:	1dfb      	adds	r3, r7, #7
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b04      	cmp	r3, #4
 800139e:	d10c      	bne.n	80013ba <_Z16run_output_mixerh+0x7e>
 80013a0:	4b5b      	ldr	r3, [pc, #364]	; (8001510 <_Z16run_output_mixerh+0x1d4>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d108      	bne.n	80013ba <_Z16run_output_mixerh+0x7e>
		input=0;
 80013a8:	1dfb      	adds	r3, r7, #7
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
		current_menu = 9;
 80013ae:	4b57      	ldr	r3, [pc, #348]	; (800150c <_Z16run_output_mixerh+0x1d0>)
 80013b0:	2209      	movs	r2, #9
 80013b2:	701a      	strb	r2, [r3, #0]
		selected_menu = 1;
 80013b4:	4b57      	ldr	r3, [pc, #348]	; (8001514 <_Z16run_output_mixerh+0x1d8>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
	}
	//leave menu - without saving for menu 1 & 2
	if((input == 0x8) && (current_menu!=0) && (current_menu!=3)){
 80013ba:	1dfb      	adds	r3, r7, #7
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d110      	bne.n	80013e4 <_Z16run_output_mixerh+0xa8>
 80013c2:	4b52      	ldr	r3, [pc, #328]	; (800150c <_Z16run_output_mixerh+0x1d0>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00c      	beq.n	80013e4 <_Z16run_output_mixerh+0xa8>
 80013ca:	4b50      	ldr	r3, [pc, #320]	; (800150c <_Z16run_output_mixerh+0x1d0>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d008      	beq.n	80013e4 <_Z16run_output_mixerh+0xa8>
		current_menu = 0;
 80013d2:	4b4e      	ldr	r3, [pc, #312]	; (800150c <_Z16run_output_mixerh+0x1d0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
//		current_state = 0;
		old_state = 0;
 80013d8:	4b4f      	ldr	r3, [pc, #316]	; (8001518 <_Z16run_output_mixerh+0x1dc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
		input = 0;
 80013de:	1dfb      	adds	r3, r7, #7
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
	}

	//"menu" standard clock
	if(current_menu == 0){
 80013e4:	4b49      	ldr	r3, [pc, #292]	; (800150c <_Z16run_output_mixerh+0x1d0>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <_Z16run_output_mixerh+0xb4>
		submenu_0_display_time();
 80013ec:	f000 f89e 	bl	800152c <_Z22submenu_0_display_timev>
	}

	//menu time set
	if(current_menu == 1){
 80013f0:	4b46      	ldr	r3, [pc, #280]	; (800150c <_Z16run_output_mixerh+0x1d0>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d10d      	bne.n	8001414 <_Z16run_output_mixerh+0xd8>
		submenu_1_set_time(input, new_selected_menu);
 80013f8:	4b48      	ldr	r3, [pc, #288]	; (800151c <_Z16run_output_mixerh+0x1e0>)
 80013fa:	781a      	ldrb	r2, [r3, #0]
 80013fc:	1dfb      	adds	r3, r7, #7
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	0011      	movs	r1, r2
 8001402:	0018      	movs	r0, r3
 8001404:	f000 f914 	bl	8001630 <_Z18submenu_1_set_timehb>
		new_selected_menu = false;
 8001408:	4b44      	ldr	r3, [pc, #272]	; (800151c <_Z16run_output_mixerh+0x1e0>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
		input=0;
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
	}

	//menu date set
	if(current_menu == 2){
 8001414:	4b3d      	ldr	r3, [pc, #244]	; (800150c <_Z16run_output_mixerh+0x1d0>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d10d      	bne.n	8001438 <_Z16run_output_mixerh+0xfc>
		submenu_2_set_date(input, new_selected_menu);
 800141c:	4b3f      	ldr	r3, [pc, #252]	; (800151c <_Z16run_output_mixerh+0x1e0>)
 800141e:	781a      	ldrb	r2, [r3, #0]
 8001420:	1dfb      	adds	r3, r7, #7
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	0011      	movs	r1, r2
 8001426:	0018      	movs	r0, r3
 8001428:	f000 fa78 	bl	800191c <_Z18submenu_2_set_datehb>
		new_selected_menu = false;
 800142c:	4b3b      	ldr	r3, [pc, #236]	; (800151c <_Z16run_output_mixerh+0x1e0>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
		input=0;
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
	}

	if(current_menu == 3){
 8001438:	4b34      	ldr	r3, [pc, #208]	; (800150c <_Z16run_output_mixerh+0x1d0>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d10d      	bne.n	800145c <_Z16run_output_mixerh+0x120>
		submenu_3_set_onoff(input, new_selected_menu);
 8001440:	4b36      	ldr	r3, [pc, #216]	; (800151c <_Z16run_output_mixerh+0x1e0>)
 8001442:	781a      	ldrb	r2, [r3, #0]
 8001444:	1dfb      	adds	r3, r7, #7
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	0011      	movs	r1, r2
 800144a:	0018      	movs	r0, r3
 800144c:	f000 fc52 	bl	8001cf4 <_Z19submenu_3_set_onoffhb>
		new_selected_menu = false;
 8001450:	4b32      	ldr	r3, [pc, #200]	; (800151c <_Z16run_output_mixerh+0x1e0>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
		input=0;
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
	}

	//menu menu ;)
	if(current_menu == 9){
 800145c:	4b2b      	ldr	r3, [pc, #172]	; (800150c <_Z16run_output_mixerh+0x1d0>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b09      	cmp	r3, #9
 8001462:	d111      	bne.n	8001488 <_Z16run_output_mixerh+0x14c>
		new_selected_menu = submenu_9_menu_select(input);
 8001464:	1dfb      	adds	r3, r7, #7
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	0018      	movs	r0, r3
 800146a:	f000 fe81 	bl	8002170 <_Z21submenu_9_menu_selecth>
 800146e:	0003      	movs	r3, r0
 8001470:	001a      	movs	r2, r3
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <_Z16run_output_mixerh+0x1e0>)
 8001474:	701a      	strb	r2, [r3, #0]
		input=0;
 8001476:	1dfb      	adds	r3, r7, #7
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
		set_number(0, selected_menu);
 800147c:	4b25      	ldr	r3, [pc, #148]	; (8001514 <_Z16run_output_mixerh+0x1d8>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	0019      	movs	r1, r3
 8001482:	2000      	movs	r0, #0
 8001484:	f7ff fe02 	bl	800108c <_Z10set_numberhh>

	//############################ run Output Handler ############################

	// switch HV-enable pin by long press of button - change led to indicate state (RED = ON, GREEN = OFF)
	static bool tmp = false;
	if(input==0x8){		//Long Press
 8001488:	1dfb      	adds	r3, r7, #7
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b08      	cmp	r3, #8
 800148e:	d10f      	bne.n	80014b0 <_Z16run_output_mixerh+0x174>
		flyback_status = !flyback_status;
 8001490:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <_Z16run_output_mixerh+0x1d4>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2201      	movs	r2, #1
 8001496:	4053      	eors	r3, r2
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <_Z16run_output_mixerh+0x1d4>)
 800149c:	701a      	strb	r2, [r3, #0]
		tmp = set_flyback_state(flyback_status);
 800149e:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <_Z16run_output_mixerh+0x1d4>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	0018      	movs	r0, r3
 80014a4:	f7ff ff0e 	bl	80012c4 <_Z17set_flyback_stateb>
 80014a8:	0003      	movs	r3, r0
 80014aa:	001a      	movs	r2, r3
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <_Z16run_output_mixerh+0x1e4>)
 80014ae:	701a      	strb	r2, [r3, #0]
	}
	if(tmp != true)
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <_Z16run_output_mixerh+0x1e4>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d006      	beq.n	80014c6 <_Z16run_output_mixerh+0x18a>
		set_color(0, RED , 1);	//hotfix für Papa
 80014b8:	23ff      	movs	r3, #255	; 0xff
 80014ba:	041b      	lsls	r3, r3, #16
 80014bc:	2201      	movs	r2, #1
 80014be:	0019      	movs	r1, r3
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7ff fb99 	bl	8000bf8 <_Z9set_colorhmh>

	// Tube Output-Data
	if(timeout(output_mixer_tube_timer)){
 80014c6:	4b17      	ldr	r3, [pc, #92]	; (8001524 <_Z16run_output_mixerh+0x1e8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	0018      	movs	r0, r3
 80014cc:	f7ff fda8 	bl	8001020 <timeout>
 80014d0:	1e03      	subs	r3, r0, #0
 80014d2:	d007      	beq.n	80014e4 <_Z16run_output_mixerh+0x1a8>
		output_mixer_tube_timer = start_timer_ms(TUBE_REFRESH_RATE_MS);
 80014d4:	2021      	movs	r0, #33	; 0x21
 80014d6:	f7ff fd93 	bl	8001000 <start_timer_ms>
 80014da:	0002      	movs	r2, r0
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <_Z16run_output_mixerh+0x1e8>)
 80014de:	601a      	str	r2, [r3, #0]
		set_output();
 80014e0:	f7ff fed8 	bl	8001294 <_Z10set_outputv>
	}

	//	Time LED-Output
	if(timeout(output_mixer_led_timer)){
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <_Z16run_output_mixerh+0x1ec>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	0018      	movs	r0, r3
 80014ea:	f7ff fd99 	bl	8001020 <timeout>
 80014ee:	1e03      	subs	r3, r0, #0
 80014f0:	d008      	beq.n	8001504 <_Z16run_output_mixerh+0x1c8>
		output_mixer_led_timer = start_timer_ms(LED_REFRESH_RATE_MS);
 80014f2:	2021      	movs	r0, #33	; 0x21
 80014f4:	f7ff fd84 	bl	8001000 <start_timer_ms>
 80014f8:	0002      	movs	r2, r0
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <_Z16run_output_mixerh+0x1ec>)
 80014fc:	601a      	str	r2, [r3, #0]
//		for(uint8_t i=1; i<6; i++){
//			set_color(i,led_info[i][0],led_info[i][1]);
//		}
		send_data(true);
 80014fe:	2001      	movs	r0, #1
 8001500:	f7ff fc08 	bl	8000d14 <_Z9send_datab>
	}
}
 8001504:	46c0      	nop			; (mov r8, r8)
 8001506:	46bd      	mov	sp, r7
 8001508:	b005      	add	sp, #20
 800150a:	bd90      	pop	{r4, r7, pc}
 800150c:	200002a4 	.word	0x200002a4
 8001510:	200002a8 	.word	0x200002a8
 8001514:	200002a5 	.word	0x200002a5
 8001518:	200002a7 	.word	0x200002a7
 800151c:	200002a6 	.word	0x200002a6
 8001520:	200002a9 	.word	0x200002a9
 8001524:	200002a0 	.word	0x200002a0
 8001528:	2000029c 	.word	0x2000029c

0800152c <_Z22submenu_0_display_timev>:

/**
 * @brief: default "menu" where the actual time from the RTC is displayed
 */
void submenu_0_display_time(void){
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<6; i++){
 8001532:	1dfb      	adds	r3, r7, #7
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	1dfb      	adds	r3, r7, #7
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b05      	cmp	r3, #5
 800153e:	d80c      	bhi.n	800155a <_Z22submenu_0_display_timev+0x2e>
		set_color(i,OFF,25);	//hotfix für Papa
 8001540:	1dfb      	adds	r3, r7, #7
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2219      	movs	r2, #25
 8001546:	2100      	movs	r1, #0
 8001548:	0018      	movs	r0, r3
 800154a:	f7ff fb55 	bl	8000bf8 <_Z9set_colorhmh>
	for(uint8_t i=0; i<6; i++){
 800154e:	1dfb      	adds	r3, r7, #7
 8001550:	781a      	ldrb	r2, [r3, #0]
 8001552:	1dfb      	adds	r3, r7, #7
 8001554:	3201      	adds	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]
 8001558:	e7ee      	b.n	8001538 <_Z22submenu_0_display_timev+0xc>
	}
	if(data_to_RTC.new_data!=true){				//do not refresh tube with data from RTC before new data is written to RTC
 800155a:	4b33      	ldr	r3, [pc, #204]	; (8001628 <_Z22submenu_0_display_timev+0xfc>)
 800155c:	7a9b      	ldrb	r3, [r3, #10]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d05e      	beq.n	8001620 <_Z22submenu_0_display_timev+0xf4>
												//without this, the old time will shine for a splitsecond when writing new time
		set_number(0, data_from_RTC.hours/10);
 8001562:	4b32      	ldr	r3, [pc, #200]	; (800162c <_Z22submenu_0_display_timev+0x100>)
 8001564:	789b      	ldrb	r3, [r3, #2]
 8001566:	210a      	movs	r1, #10
 8001568:	0018      	movs	r0, r3
 800156a:	f7fe fdcd 	bl	8000108 <__udivsi3>
 800156e:	0003      	movs	r3, r0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	0019      	movs	r1, r3
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff fd89 	bl	800108c <_Z10set_numberhh>
		set_number(1, data_from_RTC.hours%10);
 800157a:	4b2c      	ldr	r3, [pc, #176]	; (800162c <_Z22submenu_0_display_timev+0x100>)
 800157c:	789b      	ldrb	r3, [r3, #2]
 800157e:	210a      	movs	r1, #10
 8001580:	0018      	movs	r0, r3
 8001582:	f7fe fe47 	bl	8000214 <__aeabi_uidivmod>
 8001586:	000b      	movs	r3, r1
 8001588:	b2db      	uxtb	r3, r3
 800158a:	0019      	movs	r1, r3
 800158c:	2001      	movs	r0, #1
 800158e:	f7ff fd7d 	bl	800108c <_Z10set_numberhh>
		set_number(2, data_from_RTC.minutes/10);
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <_Z22submenu_0_display_timev+0x100>)
 8001594:	785b      	ldrb	r3, [r3, #1]
 8001596:	210a      	movs	r1, #10
 8001598:	0018      	movs	r0, r3
 800159a:	f7fe fdb5 	bl	8000108 <__udivsi3>
 800159e:	0003      	movs	r3, r0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	0019      	movs	r1, r3
 80015a4:	2002      	movs	r0, #2
 80015a6:	f7ff fd71 	bl	800108c <_Z10set_numberhh>
		set_number(3, data_from_RTC.minutes%10);
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <_Z22submenu_0_display_timev+0x100>)
 80015ac:	785b      	ldrb	r3, [r3, #1]
 80015ae:	210a      	movs	r1, #10
 80015b0:	0018      	movs	r0, r3
 80015b2:	f7fe fe2f 	bl	8000214 <__aeabi_uidivmod>
 80015b6:	000b      	movs	r3, r1
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	0019      	movs	r1, r3
 80015bc:	2003      	movs	r0, #3
 80015be:	f7ff fd65 	bl	800108c <_Z10set_numberhh>
		set_number(4, data_from_RTC.seconds/10);
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <_Z22submenu_0_display_timev+0x100>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	210a      	movs	r1, #10
 80015c8:	0018      	movs	r0, r3
 80015ca:	f7fe fd9d 	bl	8000108 <__udivsi3>
 80015ce:	0003      	movs	r3, r0
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	0019      	movs	r1, r3
 80015d4:	2004      	movs	r0, #4
 80015d6:	f7ff fd59 	bl	800108c <_Z10set_numberhh>
		set_number(5, data_from_RTC.seconds%10);
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <_Z22submenu_0_display_timev+0x100>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	210a      	movs	r1, #10
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7fe fe17 	bl	8000214 <__aeabi_uidivmod>
 80015e6:	000b      	movs	r3, r1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	0019      	movs	r1, r3
 80015ec:	2005      	movs	r0, #5
 80015ee:	f7ff fd4d 	bl	800108c <_Z10set_numberhh>
		if((data_from_RTC.seconds %2) ==true){
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <_Z22submenu_0_display_timev+0x100>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	001a      	movs	r2, r3
 80015f8:	2301      	movs	r3, #1
 80015fa:	4013      	ands	r3, r2
 80015fc:	d008      	beq.n	8001610 <_Z22submenu_0_display_timev+0xe4>
			set_point(1, false);
 80015fe:	2100      	movs	r1, #0
 8001600:	2001      	movs	r0, #1
 8001602:	f7ff fdd9 	bl	80011b8 <_Z9set_pointhb>
			set_point(3, true);
 8001606:	2101      	movs	r1, #1
 8001608:	2003      	movs	r0, #3
 800160a:	f7ff fdd5 	bl	80011b8 <_Z9set_pointhb>
		else{
			set_point(1, true);
			set_point(3, false);
		}
	}
}
 800160e:	e007      	b.n	8001620 <_Z22submenu_0_display_timev+0xf4>
			set_point(1, true);
 8001610:	2101      	movs	r1, #1
 8001612:	2001      	movs	r0, #1
 8001614:	f7ff fdd0 	bl	80011b8 <_Z9set_pointhb>
			set_point(3, false);
 8001618:	2100      	movs	r1, #0
 800161a:	2003      	movs	r0, #3
 800161c:	f7ff fdcc 	bl	80011b8 <_Z9set_pointhb>
}
 8001620:	46c0      	nop			; (mov r8, r8)
 8001622:	46bd      	mov	sp, r7
 8001624:	b002      	add	sp, #8
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000020 	.word	0x20000020
 800162c:	20000014 	.word	0x20000014

08001630 <_Z18submenu_1_set_timehb>:
/**
 * @brief function to enter new time data - copies the current time, displays it, change it and tell the time handler to safe it to rtc
 * @param: enter input info 0x1=left; 0x2=right; 0x4=press; 0x8=long press
 * @param: new_entry set true, when menu is entered through menu select
 */
void submenu_1_set_time(uint8_t local_input, bool new_entry){
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	0002      	movs	r2, r0
 8001638:	1dfb      	adds	r3, r7, #7
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	1dbb      	adds	r3, r7, #6
 800163e:	1c0a      	adds	r2, r1, #0
 8001640:	701a      	strb	r2, [r3, #0]
	uint8_t number_value = 0;
 8001642:	230f      	movs	r3, #15
 8001644:	18fb      	adds	r3, r7, r3
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
	static bool blink_state = false;
	static uint32_t blink_timer = 0;
	static uint8_t current_state = 0;

	if(new_entry == true){
 800164a:	1dbb      	adds	r3, r7, #6
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d111      	bne.n	8001676 <_Z18submenu_1_set_timehb+0x46>
		current_state = 1;
 8001652:	4bab      	ldr	r3, [pc, #684]	; (8001900 <_Z18submenu_1_set_timehb+0x2d0>)
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
		data_to_RTC.seconds = data_from_RTC.seconds;
 8001658:	4baa      	ldr	r3, [pc, #680]	; (8001904 <_Z18submenu_1_set_timehb+0x2d4>)
 800165a:	781a      	ldrb	r2, [r3, #0]
 800165c:	4baa      	ldr	r3, [pc, #680]	; (8001908 <_Z18submenu_1_set_timehb+0x2d8>)
 800165e:	701a      	strb	r2, [r3, #0]
		data_to_RTC.minutes = data_from_RTC.minutes;
 8001660:	4ba8      	ldr	r3, [pc, #672]	; (8001904 <_Z18submenu_1_set_timehb+0x2d4>)
 8001662:	785a      	ldrb	r2, [r3, #1]
 8001664:	4ba8      	ldr	r3, [pc, #672]	; (8001908 <_Z18submenu_1_set_timehb+0x2d8>)
 8001666:	705a      	strb	r2, [r3, #1]
		data_to_RTC.hours = data_from_RTC.hours;
 8001668:	4ba6      	ldr	r3, [pc, #664]	; (8001904 <_Z18submenu_1_set_timehb+0x2d4>)
 800166a:	789a      	ldrb	r2, [r3, #2]
 800166c:	4ba6      	ldr	r3, [pc, #664]	; (8001908 <_Z18submenu_1_set_timehb+0x2d8>)
 800166e:	709a      	strb	r2, [r3, #2]
		blink_state = false;
 8001670:	4ba6      	ldr	r3, [pc, #664]	; (800190c <_Z18submenu_1_set_timehb+0x2dc>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
	}

	//skip setting for seconds, they can't be shown anyway
	if(local_input==0x4){
 8001676:	1dfb      	adds	r3, r7, #7
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b04      	cmp	r3, #4
 800167c:	d10b      	bne.n	8001696 <_Z18submenu_1_set_timehb+0x66>
		current_state++;
 800167e:	4ba0      	ldr	r3, [pc, #640]	; (8001900 <_Z18submenu_1_set_timehb+0x2d0>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4b9e      	ldr	r3, [pc, #632]	; (8001900 <_Z18submenu_1_set_timehb+0x2d0>)
 8001688:	701a      	strb	r2, [r3, #0]
		local_input=0;
 800168a:	1dfb      	adds	r3, r7, #7
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
		blink_state = false;
 8001690:	4b9e      	ldr	r3, [pc, #632]	; (800190c <_Z18submenu_1_set_timehb+0x2dc>)
 8001692:	2200      	movs	r2, #0
 8001694:	701a      	strb	r2, [r3, #0]
	}

	if(current_state == 3 && board_size==4){
 8001696:	4b9a      	ldr	r3, [pc, #616]	; (8001900 <_Z18submenu_1_set_timehb+0x2d0>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b03      	cmp	r3, #3
 800169c:	d10c      	bne.n	80016b8 <_Z18submenu_1_set_timehb+0x88>
 800169e:	4b9c      	ldr	r3, [pc, #624]	; (8001910 <_Z18submenu_1_set_timehb+0x2e0>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d108      	bne.n	80016b8 <_Z18submenu_1_set_timehb+0x88>
		current_state++;
 80016a6:	4b96      	ldr	r3, [pc, #600]	; (8001900 <_Z18submenu_1_set_timehb+0x2d0>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4b94      	ldr	r3, [pc, #592]	; (8001900 <_Z18submenu_1_set_timehb+0x2d0>)
 80016b0:	701a      	strb	r2, [r3, #0]
		data_to_RTC.seconds = 0;
 80016b2:	4b95      	ldr	r3, [pc, #596]	; (8001908 <_Z18submenu_1_set_timehb+0x2d8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
	}

	//leave setting and safe changes - go back to menu selection
	if(current_state == 4){
 80016b8:	4b91      	ldr	r3, [pc, #580]	; (8001900 <_Z18submenu_1_set_timehb+0x2d0>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d105      	bne.n	80016cc <_Z18submenu_1_set_timehb+0x9c>
		current_menu = 9;
 80016c0:	4b94      	ldr	r3, [pc, #592]	; (8001914 <_Z18submenu_1_set_timehb+0x2e4>)
 80016c2:	2209      	movs	r2, #9
 80016c4:	701a      	strb	r2, [r3, #0]
		data_to_RTC.new_data = 1;	//1 means new time data
 80016c6:	4b90      	ldr	r3, [pc, #576]	; (8001908 <_Z18submenu_1_set_timehb+0x2d8>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	729a      	strb	r2, [r3, #10]
		//TODO: add animation for safed data
	}

	//blink active digits
	if(blink_state==true){
 80016cc:	4b8f      	ldr	r3, [pc, #572]	; (800190c <_Z18submenu_1_set_timehb+0x2dc>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d116      	bne.n	8001702 <_Z18submenu_1_set_timehb+0xd2>
		set_color((current_state*2)-1,OFF,25);
 80016d4:	4b8a      	ldr	r3, [pc, #552]	; (8001900 <_Z18submenu_1_set_timehb+0x2d0>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	18db      	adds	r3, r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	3b01      	subs	r3, #1
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2219      	movs	r2, #25
 80016e2:	2100      	movs	r1, #0
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff fa87 	bl	8000bf8 <_Z9set_colorhmh>
		set_color((current_state*2)-2,OFF,25);
 80016ea:	4b85      	ldr	r3, [pc, #532]	; (8001900 <_Z18submenu_1_set_timehb+0x2d0>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	18db      	adds	r3, r3, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2219      	movs	r2, #25
 80016f8:	2100      	movs	r1, #0
 80016fa:	0018      	movs	r0, r3
 80016fc:	f7ff fa7c 	bl	8000bf8 <_Z9set_colorhmh>
 8001700:	e017      	b.n	8001732 <_Z18submenu_1_set_timehb+0x102>
	}
	else{
		set_color((current_state*2)-1,GREEN,25);
 8001702:	4b7f      	ldr	r3, [pc, #508]	; (8001900 <_Z18submenu_1_set_timehb+0x2d0>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	18db      	adds	r3, r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	3b01      	subs	r3, #1
 800170c:	b2db      	uxtb	r3, r3
 800170e:	22ff      	movs	r2, #255	; 0xff
 8001710:	0211      	lsls	r1, r2, #8
 8001712:	2219      	movs	r2, #25
 8001714:	0018      	movs	r0, r3
 8001716:	f7ff fa6f 	bl	8000bf8 <_Z9set_colorhmh>
		set_color((current_state*2)-2,GREEN,25);
 800171a:	4b79      	ldr	r3, [pc, #484]	; (8001900 <_Z18submenu_1_set_timehb+0x2d0>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	3b01      	subs	r3, #1
 8001720:	b2db      	uxtb	r3, r3
 8001722:	18db      	adds	r3, r3, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	22ff      	movs	r2, #255	; 0xff
 8001728:	0211      	lsls	r1, r2, #8
 800172a:	2219      	movs	r2, #25
 800172c:	0018      	movs	r0, r3
 800172e:	f7ff fa63 	bl	8000bf8 <_Z9set_colorhmh>
	}
	if(timeout(blink_timer)==true){	//500ms loop
 8001732:	4b79      	ldr	r3, [pc, #484]	; (8001918 <_Z18submenu_1_set_timehb+0x2e8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	0018      	movs	r0, r3
 8001738:	f7ff fc72 	bl	8001020 <timeout>
 800173c:	0003      	movs	r3, r0
 800173e:	3b01      	subs	r3, #1
 8001740:	425a      	negs	r2, r3
 8001742:	4153      	adcs	r3, r2
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00e      	beq.n	8001768 <_Z18submenu_1_set_timehb+0x138>
		blink_timer = start_timer_ms(500);
 800174a:	23fa      	movs	r3, #250	; 0xfa
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	0018      	movs	r0, r3
 8001750:	f7ff fc56 	bl	8001000 <start_timer_ms>
 8001754:	0002      	movs	r2, r0
 8001756:	4b70      	ldr	r3, [pc, #448]	; (8001918 <_Z18submenu_1_set_timehb+0x2e8>)
 8001758:	601a      	str	r2, [r3, #0]
		blink_state = !blink_state;
 800175a:	4b6c      	ldr	r3, [pc, #432]	; (800190c <_Z18submenu_1_set_timehb+0x2dc>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2201      	movs	r2, #1
 8001760:	4053      	eors	r3, r2
 8001762:	b2da      	uxtb	r2, r3
 8001764:	4b69      	ldr	r3, [pc, #420]	; (800190c <_Z18submenu_1_set_timehb+0x2dc>)
 8001766:	701a      	strb	r2, [r3, #0]
	}

	//copy time info into local variable for manipulation and checks
	switch(current_state){
 8001768:	4b65      	ldr	r3, [pc, #404]	; (8001900 <_Z18submenu_1_set_timehb+0x2d0>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b03      	cmp	r3, #3
 800176e:	d011      	beq.n	8001794 <_Z18submenu_1_set_timehb+0x164>
 8001770:	dc16      	bgt.n	80017a0 <_Z18submenu_1_set_timehb+0x170>
 8001772:	2b01      	cmp	r3, #1
 8001774:	d002      	beq.n	800177c <_Z18submenu_1_set_timehb+0x14c>
 8001776:	2b02      	cmp	r3, #2
 8001778:	d006      	beq.n	8001788 <_Z18submenu_1_set_timehb+0x158>
		case 0x1: number_value = data_to_RTC.hours; break;
		case 0x2: number_value = data_to_RTC.minutes; break;
		case 0x3: number_value = data_to_RTC.seconds; break;
		default: break;
 800177a:	e011      	b.n	80017a0 <_Z18submenu_1_set_timehb+0x170>
		case 0x1: number_value = data_to_RTC.hours; break;
 800177c:	230f      	movs	r3, #15
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	4a61      	ldr	r2, [pc, #388]	; (8001908 <_Z18submenu_1_set_timehb+0x2d8>)
 8001782:	7892      	ldrb	r2, [r2, #2]
 8001784:	701a      	strb	r2, [r3, #0]
 8001786:	e00c      	b.n	80017a2 <_Z18submenu_1_set_timehb+0x172>
		case 0x2: number_value = data_to_RTC.minutes; break;
 8001788:	230f      	movs	r3, #15
 800178a:	18fb      	adds	r3, r7, r3
 800178c:	4a5e      	ldr	r2, [pc, #376]	; (8001908 <_Z18submenu_1_set_timehb+0x2d8>)
 800178e:	7852      	ldrb	r2, [r2, #1]
 8001790:	701a      	strb	r2, [r3, #0]
 8001792:	e006      	b.n	80017a2 <_Z18submenu_1_set_timehb+0x172>
		case 0x3: number_value = data_to_RTC.seconds; break;
 8001794:	230f      	movs	r3, #15
 8001796:	18fb      	adds	r3, r7, r3
 8001798:	4a5b      	ldr	r2, [pc, #364]	; (8001908 <_Z18submenu_1_set_timehb+0x2d8>)
 800179a:	7812      	ldrb	r2, [r2, #0]
 800179c:	701a      	strb	r2, [r3, #0]
 800179e:	e000      	b.n	80017a2 <_Z18submenu_1_set_timehb+0x172>
		default: break;
 80017a0:	46c0      	nop			; (mov r8, r8)
	}

	//change data according to input
	switch(local_input){
 80017a2:	1dfb      	adds	r3, r7, #7
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d002      	beq.n	80017b0 <_Z18submenu_1_set_timehb+0x180>
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d007      	beq.n	80017be <_Z18submenu_1_set_timehb+0x18e>
		case 0x1:	number_value++;	break;
		case 0x2:	number_value--;	break;
		default: break;
 80017ae:	e00d      	b.n	80017cc <_Z18submenu_1_set_timehb+0x19c>
		case 0x1:	number_value++;	break;
 80017b0:	210f      	movs	r1, #15
 80017b2:	187b      	adds	r3, r7, r1
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	3201      	adds	r2, #1
 80017ba:	701a      	strb	r2, [r3, #0]
 80017bc:	e006      	b.n	80017cc <_Z18submenu_1_set_timehb+0x19c>
		case 0x2:	number_value--;	break;
 80017be:	210f      	movs	r1, #15
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	781a      	ldrb	r2, [r3, #0]
 80017c4:	187b      	adds	r3, r7, r1
 80017c6:	3a01      	subs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
 80017ca:	46c0      	nop			; (mov r8, r8)
	}

	//correction for overrunning of valid value area
	if(((number_value==60) && ((current_state==3) || (current_state==2))) || (number_value==24 && current_state==1))
 80017cc:	230f      	movs	r3, #15
 80017ce:	18fb      	adds	r3, r7, r3
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b3c      	cmp	r3, #60	; 0x3c
 80017d4:	d107      	bne.n	80017e6 <_Z18submenu_1_set_timehb+0x1b6>
 80017d6:	4b4a      	ldr	r3, [pc, #296]	; (8001900 <_Z18submenu_1_set_timehb+0x2d0>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d00c      	beq.n	80017f8 <_Z18submenu_1_set_timehb+0x1c8>
 80017de:	4b48      	ldr	r3, [pc, #288]	; (8001900 <_Z18submenu_1_set_timehb+0x2d0>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d008      	beq.n	80017f8 <_Z18submenu_1_set_timehb+0x1c8>
 80017e6:	230f      	movs	r3, #15
 80017e8:	18fb      	adds	r3, r7, r3
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b18      	cmp	r3, #24
 80017ee:	d107      	bne.n	8001800 <_Z18submenu_1_set_timehb+0x1d0>
 80017f0:	4b43      	ldr	r3, [pc, #268]	; (8001900 <_Z18submenu_1_set_timehb+0x2d0>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d103      	bne.n	8001800 <_Z18submenu_1_set_timehb+0x1d0>
		number_value = 0;
 80017f8:	230f      	movs	r3, #15
 80017fa:	18fb      	adds	r3, r7, r3
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
	if(number_value==255){
 8001800:	230f      	movs	r3, #15
 8001802:	18fb      	adds	r3, r7, r3
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2bff      	cmp	r3, #255	; 0xff
 8001808:	d110      	bne.n	800182c <_Z18submenu_1_set_timehb+0x1fc>
		if(current_state==3 || current_state==2)
 800180a:	4b3d      	ldr	r3, [pc, #244]	; (8001900 <_Z18submenu_1_set_timehb+0x2d0>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b03      	cmp	r3, #3
 8001810:	d003      	beq.n	800181a <_Z18submenu_1_set_timehb+0x1ea>
 8001812:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <_Z18submenu_1_set_timehb+0x2d0>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d104      	bne.n	8001824 <_Z18submenu_1_set_timehb+0x1f4>
			number_value = 59;
 800181a:	230f      	movs	r3, #15
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	223b      	movs	r2, #59	; 0x3b
 8001820:	701a      	strb	r2, [r3, #0]
 8001822:	e003      	b.n	800182c <_Z18submenu_1_set_timehb+0x1fc>
		else
			number_value = 23;
 8001824:	230f      	movs	r3, #15
 8001826:	18fb      	adds	r3, r7, r3
 8001828:	2217      	movs	r2, #23
 800182a:	701a      	strb	r2, [r3, #0]
	}

	//write manipulated value back to time struct
	switch(current_state){
 800182c:	4b34      	ldr	r3, [pc, #208]	; (8001900 <_Z18submenu_1_set_timehb+0x2d0>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b03      	cmp	r3, #3
 8001832:	d011      	beq.n	8001858 <_Z18submenu_1_set_timehb+0x228>
 8001834:	dc16      	bgt.n	8001864 <_Z18submenu_1_set_timehb+0x234>
 8001836:	2b01      	cmp	r3, #1
 8001838:	d002      	beq.n	8001840 <_Z18submenu_1_set_timehb+0x210>
 800183a:	2b02      	cmp	r3, #2
 800183c:	d006      	beq.n	800184c <_Z18submenu_1_set_timehb+0x21c>
		case 0x1: data_to_RTC.hours = number_value; break;
		case 0x2: data_to_RTC.minutes = number_value; break;
		case 0x3: data_to_RTC.seconds = number_value; break;
		default: break;
 800183e:	e011      	b.n	8001864 <_Z18submenu_1_set_timehb+0x234>
		case 0x1: data_to_RTC.hours = number_value; break;
 8001840:	4b31      	ldr	r3, [pc, #196]	; (8001908 <_Z18submenu_1_set_timehb+0x2d8>)
 8001842:	220f      	movs	r2, #15
 8001844:	18ba      	adds	r2, r7, r2
 8001846:	7812      	ldrb	r2, [r2, #0]
 8001848:	709a      	strb	r2, [r3, #2]
 800184a:	e00c      	b.n	8001866 <_Z18submenu_1_set_timehb+0x236>
		case 0x2: data_to_RTC.minutes = number_value; break;
 800184c:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <_Z18submenu_1_set_timehb+0x2d8>)
 800184e:	220f      	movs	r2, #15
 8001850:	18ba      	adds	r2, r7, r2
 8001852:	7812      	ldrb	r2, [r2, #0]
 8001854:	705a      	strb	r2, [r3, #1]
 8001856:	e006      	b.n	8001866 <_Z18submenu_1_set_timehb+0x236>
		case 0x3: data_to_RTC.seconds = number_value; break;
 8001858:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <_Z18submenu_1_set_timehb+0x2d8>)
 800185a:	220f      	movs	r2, #15
 800185c:	18ba      	adds	r2, r7, r2
 800185e:	7812      	ldrb	r2, [r2, #0]
 8001860:	701a      	strb	r2, [r3, #0]
 8001862:	e000      	b.n	8001866 <_Z18submenu_1_set_timehb+0x236>
		default: break;
 8001864:	46c0      	nop			; (mov r8, r8)
	}

	//display output
	set_number(0, data_to_RTC.hours/10);
 8001866:	4b28      	ldr	r3, [pc, #160]	; (8001908 <_Z18submenu_1_set_timehb+0x2d8>)
 8001868:	789b      	ldrb	r3, [r3, #2]
 800186a:	210a      	movs	r1, #10
 800186c:	0018      	movs	r0, r3
 800186e:	f7fe fc4b 	bl	8000108 <__udivsi3>
 8001872:	0003      	movs	r3, r0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	0019      	movs	r1, r3
 8001878:	2000      	movs	r0, #0
 800187a:	f7ff fc07 	bl	800108c <_Z10set_numberhh>
	set_number(1, data_to_RTC.hours%10);
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <_Z18submenu_1_set_timehb+0x2d8>)
 8001880:	789b      	ldrb	r3, [r3, #2]
 8001882:	210a      	movs	r1, #10
 8001884:	0018      	movs	r0, r3
 8001886:	f7fe fcc5 	bl	8000214 <__aeabi_uidivmod>
 800188a:	000b      	movs	r3, r1
 800188c:	b2db      	uxtb	r3, r3
 800188e:	0019      	movs	r1, r3
 8001890:	2001      	movs	r0, #1
 8001892:	f7ff fbfb 	bl	800108c <_Z10set_numberhh>
	set_number(2, data_to_RTC.minutes/10);
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <_Z18submenu_1_set_timehb+0x2d8>)
 8001898:	785b      	ldrb	r3, [r3, #1]
 800189a:	210a      	movs	r1, #10
 800189c:	0018      	movs	r0, r3
 800189e:	f7fe fc33 	bl	8000108 <__udivsi3>
 80018a2:	0003      	movs	r3, r0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	0019      	movs	r1, r3
 80018a8:	2002      	movs	r0, #2
 80018aa:	f7ff fbef 	bl	800108c <_Z10set_numberhh>
	set_number(3, data_to_RTC.minutes%10);
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <_Z18submenu_1_set_timehb+0x2d8>)
 80018b0:	785b      	ldrb	r3, [r3, #1]
 80018b2:	210a      	movs	r1, #10
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7fe fcad 	bl	8000214 <__aeabi_uidivmod>
 80018ba:	000b      	movs	r3, r1
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	0019      	movs	r1, r3
 80018c0:	2003      	movs	r0, #3
 80018c2:	f7ff fbe3 	bl	800108c <_Z10set_numberhh>
	set_number(4, data_to_RTC.seconds/10);
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <_Z18submenu_1_set_timehb+0x2d8>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	210a      	movs	r1, #10
 80018cc:	0018      	movs	r0, r3
 80018ce:	f7fe fc1b 	bl	8000108 <__udivsi3>
 80018d2:	0003      	movs	r3, r0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	0019      	movs	r1, r3
 80018d8:	2004      	movs	r0, #4
 80018da:	f7ff fbd7 	bl	800108c <_Z10set_numberhh>
	set_number(5, data_to_RTC.seconds%10);
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <_Z18submenu_1_set_timehb+0x2d8>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	210a      	movs	r1, #10
 80018e4:	0018      	movs	r0, r3
 80018e6:	f7fe fc95 	bl	8000214 <__aeabi_uidivmod>
 80018ea:	000b      	movs	r3, r1
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	0019      	movs	r1, r3
 80018f0:	2005      	movs	r0, #5
 80018f2:	f7ff fbcb 	bl	800108c <_Z10set_numberhh>
}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b004      	add	sp, #16
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	200002b0 	.word	0x200002b0
 8001904:	20000014 	.word	0x20000014
 8001908:	20000020 	.word	0x20000020
 800190c:	200002aa 	.word	0x200002aa
 8001910:	2000025c 	.word	0x2000025c
 8001914:	200002a4 	.word	0x200002a4
 8001918:	200002ac 	.word	0x200002ac

0800191c <_Z18submenu_2_set_datehb>:
/**
 * @brief: function to set new date to RTC | day | date+month | year
 * @param: enter input info 0x1=left; 0x2=right; 0x4=press; 0x8=long press
 * @param: new_entry set true, when menu is entered through menu select
 */
void submenu_2_set_date(uint8_t local_input, bool new_entry){
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	0002      	movs	r2, r0
 8001924:	1dfb      	adds	r3, r7, #7
 8001926:	701a      	strb	r2, [r3, #0]
 8001928:	1dbb      	adds	r3, r7, #6
 800192a:	1c0a      	adds	r2, r1, #0
 800192c:	701a      	strb	r2, [r3, #0]
	uint16_t value = 0;
 800192e:	230e      	movs	r3, #14
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	2200      	movs	r2, #0
 8001934:	801a      	strh	r2, [r3, #0]
	static uint32_t blink_timer = 0;
	static uint8_t current_state = 0;
	static uint16_t val_min[4]={0,0,0,1899};
	static uint16_t val_max[4]={8,32,13,2101};

	if(new_entry == true){
 8001936:	1dbb      	adds	r3, r7, #6
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d115      	bne.n	800196a <_Z18submenu_2_set_datehb+0x4e>
		current_state = 1;
 800193e:	4b9c      	ldr	r3, [pc, #624]	; (8001bb0 <_Z18submenu_2_set_datehb+0x294>)
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
		data_to_RTC.day = data_from_RTC.day;
 8001944:	4b9b      	ldr	r3, [pc, #620]	; (8001bb4 <_Z18submenu_2_set_datehb+0x298>)
 8001946:	78da      	ldrb	r2, [r3, #3]
 8001948:	4b9b      	ldr	r3, [pc, #620]	; (8001bb8 <_Z18submenu_2_set_datehb+0x29c>)
 800194a:	70da      	strb	r2, [r3, #3]
		data_to_RTC.date = data_from_RTC.date;
 800194c:	4b99      	ldr	r3, [pc, #612]	; (8001bb4 <_Z18submenu_2_set_datehb+0x298>)
 800194e:	791a      	ldrb	r2, [r3, #4]
 8001950:	4b99      	ldr	r3, [pc, #612]	; (8001bb8 <_Z18submenu_2_set_datehb+0x29c>)
 8001952:	711a      	strb	r2, [r3, #4]
		data_to_RTC.month = data_from_RTC.month;
 8001954:	4b97      	ldr	r3, [pc, #604]	; (8001bb4 <_Z18submenu_2_set_datehb+0x298>)
 8001956:	795a      	ldrb	r2, [r3, #5]
 8001958:	4b97      	ldr	r3, [pc, #604]	; (8001bb8 <_Z18submenu_2_set_datehb+0x29c>)
 800195a:	715a      	strb	r2, [r3, #5]
		data_to_RTC.year = data_from_RTC.year;
 800195c:	4b95      	ldr	r3, [pc, #596]	; (8001bb4 <_Z18submenu_2_set_datehb+0x298>)
 800195e:	88da      	ldrh	r2, [r3, #6]
 8001960:	4b95      	ldr	r3, [pc, #596]	; (8001bb8 <_Z18submenu_2_set_datehb+0x29c>)
 8001962:	80da      	strh	r2, [r3, #6]
		blink_state = false;
 8001964:	4b95      	ldr	r3, [pc, #596]	; (8001bbc <_Z18submenu_2_set_datehb+0x2a0>)
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
	}

	//skip setting for seconds, they can't be shown anyway
	if(local_input==0x4){
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b04      	cmp	r3, #4
 8001970:	d10b      	bne.n	800198a <_Z18submenu_2_set_datehb+0x6e>
		current_state++;
 8001972:	4b8f      	ldr	r3, [pc, #572]	; (8001bb0 <_Z18submenu_2_set_datehb+0x294>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	3301      	adds	r3, #1
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4b8d      	ldr	r3, [pc, #564]	; (8001bb0 <_Z18submenu_2_set_datehb+0x294>)
 800197c:	701a      	strb	r2, [r3, #0]
		local_input=0;
 800197e:	1dfb      	adds	r3, r7, #7
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
		blink_state = false;
 8001984:	4b8d      	ldr	r3, [pc, #564]	; (8001bbc <_Z18submenu_2_set_datehb+0x2a0>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
	}

	//leave setting and safe changes - go back to menu selection
	if(current_state == 5){
 800198a:	4b89      	ldr	r3, [pc, #548]	; (8001bb0 <_Z18submenu_2_set_datehb+0x294>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b05      	cmp	r3, #5
 8001990:	d105      	bne.n	800199e <_Z18submenu_2_set_datehb+0x82>
		current_menu = 9;
 8001992:	4b8b      	ldr	r3, [pc, #556]	; (8001bc0 <_Z18submenu_2_set_datehb+0x2a4>)
 8001994:	2209      	movs	r2, #9
 8001996:	701a      	strb	r2, [r3, #0]
		data_to_RTC.new_data = 2;	//2 means new date data
 8001998:	4b87      	ldr	r3, [pc, #540]	; (8001bb8 <_Z18submenu_2_set_datehb+0x29c>)
 800199a:	2202      	movs	r2, #2
 800199c:	729a      	strb	r2, [r3, #10]
		//TODO: add animation for safed data
	}

	//blink active digits
	uint16_t blink_color = 0;
 800199e:	210c      	movs	r1, #12
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	2200      	movs	r2, #0
 80019a4:	801a      	strh	r2, [r3, #0]
	if(blink_state==true)
 80019a6:	4b85      	ldr	r3, [pc, #532]	; (8001bbc <_Z18submenu_2_set_datehb+0x2a0>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d103      	bne.n	80019b6 <_Z18submenu_2_set_datehb+0x9a>
		blink_color = GREEN;
 80019ae:	187b      	adds	r3, r7, r1
 80019b0:	4a84      	ldr	r2, [pc, #528]	; (8001bc4 <_Z18submenu_2_set_datehb+0x2a8>)
 80019b2:	801a      	strh	r2, [r3, #0]
 80019b4:	e003      	b.n	80019be <_Z18submenu_2_set_datehb+0xa2>
	else
		blink_color = 0;
 80019b6:	230c      	movs	r3, #12
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	2200      	movs	r2, #0
 80019bc:	801a      	strh	r2, [r3, #0]

	if(current_state==1)
 80019be:	4b7c      	ldr	r3, [pc, #496]	; (8001bb0 <_Z18submenu_2_set_datehb+0x294>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d107      	bne.n	80019d6 <_Z18submenu_2_set_datehb+0xba>
		set_color(1,blink_color,25);
 80019c6:	230c      	movs	r3, #12
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	2219      	movs	r2, #25
 80019ce:	0019      	movs	r1, r3
 80019d0:	2001      	movs	r0, #1
 80019d2:	f7ff f911 	bl	8000bf8 <_Z9set_colorhmh>
	if(current_state==2){
 80019d6:	4b76      	ldr	r3, [pc, #472]	; (8001bb0 <_Z18submenu_2_set_datehb+0x294>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d10e      	bne.n	80019fc <_Z18submenu_2_set_datehb+0xe0>
		set_color(0,blink_color,25);
 80019de:	240c      	movs	r4, #12
 80019e0:	193b      	adds	r3, r7, r4
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	2219      	movs	r2, #25
 80019e6:	0019      	movs	r1, r3
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff f905 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(1,blink_color,25);
 80019ee:	193b      	adds	r3, r7, r4
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	2219      	movs	r2, #25
 80019f4:	0019      	movs	r1, r3
 80019f6:	2001      	movs	r0, #1
 80019f8:	f7ff f8fe 	bl	8000bf8 <_Z9set_colorhmh>
	}
	if(current_state==3){
 80019fc:	4b6c      	ldr	r3, [pc, #432]	; (8001bb0 <_Z18submenu_2_set_datehb+0x294>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d10e      	bne.n	8001a22 <_Z18submenu_2_set_datehb+0x106>
		set_color(2,blink_color,25);
 8001a04:	240c      	movs	r4, #12
 8001a06:	193b      	adds	r3, r7, r4
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	2219      	movs	r2, #25
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	2002      	movs	r0, #2
 8001a10:	f7ff f8f2 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(3,blink_color,25);
 8001a14:	193b      	adds	r3, r7, r4
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	2219      	movs	r2, #25
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	2003      	movs	r0, #3
 8001a1e:	f7ff f8eb 	bl	8000bf8 <_Z9set_colorhmh>
	}
	if(current_state==4){
 8001a22:	4b63      	ldr	r3, [pc, #396]	; (8001bb0 <_Z18submenu_2_set_datehb+0x294>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d11c      	bne.n	8001a64 <_Z18submenu_2_set_datehb+0x148>
		set_color(0,blink_color,25);
 8001a2a:	240c      	movs	r4, #12
 8001a2c:	193b      	adds	r3, r7, r4
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	2219      	movs	r2, #25
 8001a32:	0019      	movs	r1, r3
 8001a34:	2000      	movs	r0, #0
 8001a36:	f7ff f8df 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(1,blink_color,25);
 8001a3a:	193b      	adds	r3, r7, r4
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	2219      	movs	r2, #25
 8001a40:	0019      	movs	r1, r3
 8001a42:	2001      	movs	r0, #1
 8001a44:	f7ff f8d8 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(2,blink_color,25);
 8001a48:	193b      	adds	r3, r7, r4
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	2219      	movs	r2, #25
 8001a4e:	0019      	movs	r1, r3
 8001a50:	2002      	movs	r0, #2
 8001a52:	f7ff f8d1 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(3,blink_color,25);
 8001a56:	193b      	adds	r3, r7, r4
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	2219      	movs	r2, #25
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	2003      	movs	r0, #3
 8001a60:	f7ff f8ca 	bl	8000bf8 <_Z9set_colorhmh>
	}

	if(timeout(blink_timer)==true){	//500ms loop
 8001a64:	4b58      	ldr	r3, [pc, #352]	; (8001bc8 <_Z18submenu_2_set_datehb+0x2ac>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f7ff fad9 	bl	8001020 <timeout>
 8001a6e:	0003      	movs	r3, r0
 8001a70:	3b01      	subs	r3, #1
 8001a72:	425a      	negs	r2, r3
 8001a74:	4153      	adcs	r3, r2
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00e      	beq.n	8001a9a <_Z18submenu_2_set_datehb+0x17e>
		blink_timer = start_timer_ms(500);
 8001a7c:	23fa      	movs	r3, #250	; 0xfa
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	0018      	movs	r0, r3
 8001a82:	f7ff fabd 	bl	8001000 <start_timer_ms>
 8001a86:	0002      	movs	r2, r0
 8001a88:	4b4f      	ldr	r3, [pc, #316]	; (8001bc8 <_Z18submenu_2_set_datehb+0x2ac>)
 8001a8a:	601a      	str	r2, [r3, #0]
		blink_state = !blink_state;
 8001a8c:	4b4b      	ldr	r3, [pc, #300]	; (8001bbc <_Z18submenu_2_set_datehb+0x2a0>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2201      	movs	r2, #1
 8001a92:	4053      	eors	r3, r2
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b49      	ldr	r3, [pc, #292]	; (8001bbc <_Z18submenu_2_set_datehb+0x2a0>)
 8001a98:	701a      	strb	r2, [r3, #0]
	}

	//copy time info into local variable for manipulation and checks
	switch(current_state){
 8001a9a:	4b45      	ldr	r3, [pc, #276]	; (8001bb0 <_Z18submenu_2_set_datehb+0x294>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d01a      	beq.n	8001ad8 <_Z18submenu_2_set_datehb+0x1bc>
 8001aa2:	dc1f      	bgt.n	8001ae4 <_Z18submenu_2_set_datehb+0x1c8>
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d011      	beq.n	8001acc <_Z18submenu_2_set_datehb+0x1b0>
 8001aa8:	dc1c      	bgt.n	8001ae4 <_Z18submenu_2_set_datehb+0x1c8>
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d002      	beq.n	8001ab4 <_Z18submenu_2_set_datehb+0x198>
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d006      	beq.n	8001ac0 <_Z18submenu_2_set_datehb+0x1a4>
		case 0x1: value = data_to_RTC.day; break;
		case 0x2: value = data_to_RTC.date; break;
		case 0x3: value = data_to_RTC.month; break;
		case 0x4: value = data_to_RTC.year; break;
		default: break;
 8001ab2:	e017      	b.n	8001ae4 <_Z18submenu_2_set_datehb+0x1c8>
		case 0x1: value = data_to_RTC.day; break;
 8001ab4:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <_Z18submenu_2_set_datehb+0x29c>)
 8001ab6:	78da      	ldrb	r2, [r3, #3]
 8001ab8:	230e      	movs	r3, #14
 8001aba:	18fb      	adds	r3, r7, r3
 8001abc:	801a      	strh	r2, [r3, #0]
 8001abe:	e012      	b.n	8001ae6 <_Z18submenu_2_set_datehb+0x1ca>
		case 0x2: value = data_to_RTC.date; break;
 8001ac0:	4b3d      	ldr	r3, [pc, #244]	; (8001bb8 <_Z18submenu_2_set_datehb+0x29c>)
 8001ac2:	791a      	ldrb	r2, [r3, #4]
 8001ac4:	230e      	movs	r3, #14
 8001ac6:	18fb      	adds	r3, r7, r3
 8001ac8:	801a      	strh	r2, [r3, #0]
 8001aca:	e00c      	b.n	8001ae6 <_Z18submenu_2_set_datehb+0x1ca>
		case 0x3: value = data_to_RTC.month; break;
 8001acc:	4b3a      	ldr	r3, [pc, #232]	; (8001bb8 <_Z18submenu_2_set_datehb+0x29c>)
 8001ace:	795a      	ldrb	r2, [r3, #5]
 8001ad0:	230e      	movs	r3, #14
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	801a      	strh	r2, [r3, #0]
 8001ad6:	e006      	b.n	8001ae6 <_Z18submenu_2_set_datehb+0x1ca>
		case 0x4: value = data_to_RTC.year; break;
 8001ad8:	230e      	movs	r3, #14
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	4a36      	ldr	r2, [pc, #216]	; (8001bb8 <_Z18submenu_2_set_datehb+0x29c>)
 8001ade:	88d2      	ldrh	r2, [r2, #6]
 8001ae0:	801a      	strh	r2, [r3, #0]
 8001ae2:	e000      	b.n	8001ae6 <_Z18submenu_2_set_datehb+0x1ca>
		default: break;
 8001ae4:	46c0      	nop			; (mov r8, r8)
	}

	//change data according to input
	switch(local_input){
 8001ae6:	1dfb      	adds	r3, r7, #7
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d002      	beq.n	8001af4 <_Z18submenu_2_set_datehb+0x1d8>
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d007      	beq.n	8001b02 <_Z18submenu_2_set_datehb+0x1e6>
		case 0x1:	value++;	break;
		case 0x2:	value--;	break;
		default: break;
 8001af2:	e00d      	b.n	8001b10 <_Z18submenu_2_set_datehb+0x1f4>
		case 0x1:	value++;	break;
 8001af4:	210e      	movs	r1, #14
 8001af6:	187b      	adds	r3, r7, r1
 8001af8:	881a      	ldrh	r2, [r3, #0]
 8001afa:	187b      	adds	r3, r7, r1
 8001afc:	3201      	adds	r2, #1
 8001afe:	801a      	strh	r2, [r3, #0]
 8001b00:	e006      	b.n	8001b10 <_Z18submenu_2_set_datehb+0x1f4>
		case 0x2:	value--;	break;
 8001b02:	210e      	movs	r1, #14
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	881a      	ldrh	r2, [r3, #0]
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	3a01      	subs	r2, #1
 8001b0c:	801a      	strh	r2, [r3, #0]
 8001b0e:	46c0      	nop			; (mov r8, r8)
	}

	//correction for overrunning of valid value area
	if(value==val_max[current_state-1])
 8001b10:	4b27      	ldr	r3, [pc, #156]	; (8001bb0 <_Z18submenu_2_set_datehb+0x294>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	1e5a      	subs	r2, r3, #1
 8001b16:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <_Z18submenu_2_set_datehb+0x2b0>)
 8001b18:	0052      	lsls	r2, r2, #1
 8001b1a:	5ad3      	ldrh	r3, [r2, r3]
 8001b1c:	210e      	movs	r1, #14
 8001b1e:	187a      	adds	r2, r7, r1
 8001b20:	8812      	ldrh	r2, [r2, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d108      	bne.n	8001b38 <_Z18submenu_2_set_datehb+0x21c>
		value = val_min[current_state-1]+1;
 8001b26:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <_Z18submenu_2_set_datehb+0x294>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	1e5a      	subs	r2, r3, #1
 8001b2c:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <_Z18submenu_2_set_datehb+0x2b4>)
 8001b2e:	0052      	lsls	r2, r2, #1
 8001b30:	5ad2      	ldrh	r2, [r2, r3]
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	3201      	adds	r2, #1
 8001b36:	801a      	strh	r2, [r3, #0]
	if(value==val_min[current_state-1])
 8001b38:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <_Z18submenu_2_set_datehb+0x294>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	1e5a      	subs	r2, r3, #1
 8001b3e:	4b24      	ldr	r3, [pc, #144]	; (8001bd0 <_Z18submenu_2_set_datehb+0x2b4>)
 8001b40:	0052      	lsls	r2, r2, #1
 8001b42:	5ad3      	ldrh	r3, [r2, r3]
 8001b44:	210e      	movs	r1, #14
 8001b46:	187a      	adds	r2, r7, r1
 8001b48:	8812      	ldrh	r2, [r2, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d108      	bne.n	8001b60 <_Z18submenu_2_set_datehb+0x244>
		value = val_max[current_state-1]-1;
 8001b4e:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <_Z18submenu_2_set_datehb+0x294>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	1e5a      	subs	r2, r3, #1
 8001b54:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <_Z18submenu_2_set_datehb+0x2b0>)
 8001b56:	0052      	lsls	r2, r2, #1
 8001b58:	5ad2      	ldrh	r2, [r2, r3]
 8001b5a:	187b      	adds	r3, r7, r1
 8001b5c:	3a01      	subs	r2, #1
 8001b5e:	801a      	strh	r2, [r3, #0]

	//write manipulated value back to time struct
	switch(current_state){
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <_Z18submenu_2_set_datehb+0x294>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d01d      	beq.n	8001ba4 <_Z18submenu_2_set_datehb+0x288>
 8001b68:	dc34      	bgt.n	8001bd4 <_Z18submenu_2_set_datehb+0x2b8>
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d013      	beq.n	8001b96 <_Z18submenu_2_set_datehb+0x27a>
 8001b6e:	dc31      	bgt.n	8001bd4 <_Z18submenu_2_set_datehb+0x2b8>
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d002      	beq.n	8001b7a <_Z18submenu_2_set_datehb+0x25e>
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d007      	beq.n	8001b88 <_Z18submenu_2_set_datehb+0x26c>
		case 0x1: data_to_RTC.day = value; break;
		case 0x2: data_to_RTC.date = value; break;
		case 0x3: data_to_RTC.month = value; break;
		case 0x4: data_to_RTC.year = value; break;
		default: break;
 8001b78:	e02c      	b.n	8001bd4 <_Z18submenu_2_set_datehb+0x2b8>
		case 0x1: data_to_RTC.day = value; break;
 8001b7a:	230e      	movs	r3, #14
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <_Z18submenu_2_set_datehb+0x29c>)
 8001b84:	70da      	strb	r2, [r3, #3]
 8001b86:	e026      	b.n	8001bd6 <_Z18submenu_2_set_datehb+0x2ba>
		case 0x2: data_to_RTC.date = value; break;
 8001b88:	230e      	movs	r3, #14
 8001b8a:	18fb      	adds	r3, r7, r3
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <_Z18submenu_2_set_datehb+0x29c>)
 8001b92:	711a      	strb	r2, [r3, #4]
 8001b94:	e01f      	b.n	8001bd6 <_Z18submenu_2_set_datehb+0x2ba>
		case 0x3: data_to_RTC.month = value; break;
 8001b96:	230e      	movs	r3, #14
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <_Z18submenu_2_set_datehb+0x29c>)
 8001ba0:	715a      	strb	r2, [r3, #5]
 8001ba2:	e018      	b.n	8001bd6 <_Z18submenu_2_set_datehb+0x2ba>
		case 0x4: data_to_RTC.year = value; break;
 8001ba4:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <_Z18submenu_2_set_datehb+0x29c>)
 8001ba6:	220e      	movs	r2, #14
 8001ba8:	18ba      	adds	r2, r7, r2
 8001baa:	8812      	ldrh	r2, [r2, #0]
 8001bac:	80da      	strh	r2, [r3, #6]
 8001bae:	e012      	b.n	8001bd6 <_Z18submenu_2_set_datehb+0x2ba>
 8001bb0:	200002b8 	.word	0x200002b8
 8001bb4:	20000014 	.word	0x20000014
 8001bb8:	20000020 	.word	0x20000020
 8001bbc:	200002b1 	.word	0x200002b1
 8001bc0:	200002a4 	.word	0x200002a4
 8001bc4:	ffffff00 	.word	0xffffff00
 8001bc8:	200002b4 	.word	0x200002b4
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	20000000 	.word	0x20000000
		default: break;
 8001bd4:	46c0      	nop			; (mov r8, r8)
	}

	//display output
	if(current_state == 1){	//day
 8001bd6:	4b45      	ldr	r3, [pc, #276]	; (8001cec <_Z18submenu_2_set_datehb+0x3d0>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d105      	bne.n	8001bea <_Z18submenu_2_set_datehb+0x2ce>
		set_number(1,data_to_RTC.day);
 8001bde:	4b44      	ldr	r3, [pc, #272]	; (8001cf0 <_Z18submenu_2_set_datehb+0x3d4>)
 8001be0:	78db      	ldrb	r3, [r3, #3]
 8001be2:	0019      	movs	r1, r3
 8001be4:	2001      	movs	r0, #1
 8001be6:	f7ff fa51 	bl	800108c <_Z10set_numberhh>
	}
	if(current_state == 2 || current_state == 3){	//date+month
 8001bea:	4b40      	ldr	r3, [pc, #256]	; (8001cec <_Z18submenu_2_set_datehb+0x3d0>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d003      	beq.n	8001bfa <_Z18submenu_2_set_datehb+0x2de>
 8001bf2:	4b3e      	ldr	r3, [pc, #248]	; (8001cec <_Z18submenu_2_set_datehb+0x3d0>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d12f      	bne.n	8001c5a <_Z18submenu_2_set_datehb+0x33e>
		set_number(0,data_to_RTC.date/10);
 8001bfa:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <_Z18submenu_2_set_datehb+0x3d4>)
 8001bfc:	791b      	ldrb	r3, [r3, #4]
 8001bfe:	210a      	movs	r1, #10
 8001c00:	0018      	movs	r0, r3
 8001c02:	f7fe fa81 	bl	8000108 <__udivsi3>
 8001c06:	0003      	movs	r3, r0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f7ff fa3d 	bl	800108c <_Z10set_numberhh>
		set_number(1,data_to_RTC.date%10);
 8001c12:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <_Z18submenu_2_set_datehb+0x3d4>)
 8001c14:	791b      	ldrb	r3, [r3, #4]
 8001c16:	210a      	movs	r1, #10
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f7fe fafb 	bl	8000214 <__aeabi_uidivmod>
 8001c1e:	000b      	movs	r3, r1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	0019      	movs	r1, r3
 8001c24:	2001      	movs	r0, #1
 8001c26:	f7ff fa31 	bl	800108c <_Z10set_numberhh>
		set_number(2,data_to_RTC.month/10);
 8001c2a:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <_Z18submenu_2_set_datehb+0x3d4>)
 8001c2c:	795b      	ldrb	r3, [r3, #5]
 8001c2e:	210a      	movs	r1, #10
 8001c30:	0018      	movs	r0, r3
 8001c32:	f7fe fa69 	bl	8000108 <__udivsi3>
 8001c36:	0003      	movs	r3, r0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	0019      	movs	r1, r3
 8001c3c:	2002      	movs	r0, #2
 8001c3e:	f7ff fa25 	bl	800108c <_Z10set_numberhh>
		set_number(3,data_to_RTC.month%10);
 8001c42:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <_Z18submenu_2_set_datehb+0x3d4>)
 8001c44:	795b      	ldrb	r3, [r3, #5]
 8001c46:	210a      	movs	r1, #10
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f7fe fae3 	bl	8000214 <__aeabi_uidivmod>
 8001c4e:	000b      	movs	r3, r1
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	0019      	movs	r1, r3
 8001c54:	2003      	movs	r0, #3
 8001c56:	f7ff fa19 	bl	800108c <_Z10set_numberhh>
	}
	if(current_state == 4){	//year
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <_Z18submenu_2_set_datehb+0x3d0>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d140      	bne.n	8001ce4 <_Z18submenu_2_set_datehb+0x3c8>
		set_number(0,data_to_RTC.year/1000);
 8001c62:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <_Z18submenu_2_set_datehb+0x3d4>)
 8001c64:	88db      	ldrh	r3, [r3, #6]
 8001c66:	22fa      	movs	r2, #250	; 0xfa
 8001c68:	0091      	lsls	r1, r2, #2
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f7fe fa4c 	bl	8000108 <__udivsi3>
 8001c70:	0003      	movs	r3, r0
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	0019      	movs	r1, r3
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f7ff fa07 	bl	800108c <_Z10set_numberhh>
		set_number(1,(data_to_RTC.year/100)%10);
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <_Z18submenu_2_set_datehb+0x3d4>)
 8001c80:	88db      	ldrh	r3, [r3, #6]
 8001c82:	2164      	movs	r1, #100	; 0x64
 8001c84:	0018      	movs	r0, r3
 8001c86:	f7fe fa3f 	bl	8000108 <__udivsi3>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	210a      	movs	r1, #10
 8001c90:	0018      	movs	r0, r3
 8001c92:	f7fe fabf 	bl	8000214 <__aeabi_uidivmod>
 8001c96:	000b      	movs	r3, r1
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	0019      	movs	r1, r3
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f7ff f9f4 	bl	800108c <_Z10set_numberhh>
		set_number(2,(data_to_RTC.year/10)%10);
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <_Z18submenu_2_set_datehb+0x3d4>)
 8001ca6:	88db      	ldrh	r3, [r3, #6]
 8001ca8:	210a      	movs	r1, #10
 8001caa:	0018      	movs	r0, r3
 8001cac:	f7fe fa2c 	bl	8000108 <__udivsi3>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	210a      	movs	r1, #10
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f7fe faac 	bl	8000214 <__aeabi_uidivmod>
 8001cbc:	000b      	movs	r3, r1
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	0019      	movs	r1, r3
 8001cc4:	2002      	movs	r0, #2
 8001cc6:	f7ff f9e1 	bl	800108c <_Z10set_numberhh>
		set_number(3,data_to_RTC.year%10);
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <_Z18submenu_2_set_datehb+0x3d4>)
 8001ccc:	88db      	ldrh	r3, [r3, #6]
 8001cce:	210a      	movs	r1, #10
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f7fe fa9f 	bl	8000214 <__aeabi_uidivmod>
 8001cd6:	000b      	movs	r3, r1
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	0019      	movs	r1, r3
 8001cde:	2003      	movs	r0, #3
 8001ce0:	f7ff f9d4 	bl	800108c <_Z10set_numberhh>
	}
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b005      	add	sp, #20
 8001cea:	bd90      	pop	{r4, r7, pc}
 8001cec:	200002b8 	.word	0x200002b8
 8001cf0:	20000020 	.word	0x20000020

08001cf4 <_Z19submenu_3_set_onoffhb>:
/**
 * @brief function to set different time-zones when the clock should be acitve
 * @param: enter input info 0x1=left; 0x2=right; 0x4=press; 0x8=long press
 * @param: new_entry set true, when menu is entered through menu select
 */
void submenu_3_set_onoff(uint8_t local_input, bool new_entry){
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	1dfb      	adds	r3, r7, #7
 8001cfe:	701a      	strb	r2, [r3, #0]
 8001d00:	1dbb      	adds	r3, r7, #6
 8001d02:	1c0a      	adds	r2, r1, #0
 8001d04:	701a      	strb	r2, [r3, #0]
	uint8_t number_value = 0;
 8001d06:	2317      	movs	r3, #23
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
	static uint8_t current_state = 0;
	static uint8_t current_substate = 0;

	//current state: 0 - 8; each state contains 6 substates: start day, end day, start time hours/minutes, endtime hours/minutes

	if(new_entry == true){
 8001d0e:	1dbb      	adds	r3, r7, #6
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d108      	bne.n	8001d28 <_Z19submenu_3_set_onoffhb+0x34>
		current_state = 0;
 8001d16:	4b6e      	ldr	r3, [pc, #440]	; (8001ed0 <_Z19submenu_3_set_onoffhb+0x1dc>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
		current_substate = 0;
 8001d1c:	4b6d      	ldr	r3, [pc, #436]	; (8001ed4 <_Z19submenu_3_set_onoffhb+0x1e0>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]
		blink_state = false;
 8001d22:	4b6d      	ldr	r3, [pc, #436]	; (8001ed8 <_Z19submenu_3_set_onoffhb+0x1e4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
	}

	//handle menu control
	if(local_input == 0x4){
 8001d28:	1dfb      	adds	r3, r7, #7
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d118      	bne.n	8001d62 <_Z19submenu_3_set_onoffhb+0x6e>
		current_substate++;
 8001d30:	4b68      	ldr	r3, [pc, #416]	; (8001ed4 <_Z19submenu_3_set_onoffhb+0x1e0>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	3301      	adds	r3, #1
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	4b66      	ldr	r3, [pc, #408]	; (8001ed4 <_Z19submenu_3_set_onoffhb+0x1e0>)
 8001d3a:	701a      	strb	r2, [r3, #0]
		if(current_substate==6){
 8001d3c:	4b65      	ldr	r3, [pc, #404]	; (8001ed4 <_Z19submenu_3_set_onoffhb+0x1e0>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b06      	cmp	r3, #6
 8001d42:	d108      	bne.n	8001d56 <_Z19submenu_3_set_onoffhb+0x62>
			current_state++;
 8001d44:	4b62      	ldr	r3, [pc, #392]	; (8001ed0 <_Z19submenu_3_set_onoffhb+0x1dc>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	4b60      	ldr	r3, [pc, #384]	; (8001ed0 <_Z19submenu_3_set_onoffhb+0x1dc>)
 8001d4e:	701a      	strb	r2, [r3, #0]
			current_substate = 0;
 8001d50:	4b60      	ldr	r3, [pc, #384]	; (8001ed4 <_Z19submenu_3_set_onoffhb+0x1e0>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
		}
		local_input=0;
 8001d56:	1dfb      	adds	r3, r7, #7
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
		blink_state = false;
 8001d5c:	4b5e      	ldr	r3, [pc, #376]	; (8001ed8 <_Z19submenu_3_set_onoffhb+0x1e4>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
	}

	if(local_input == 0x8){	//safe made changes and leave
 8001d62:	1dfb      	adds	r3, r7, #7
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d102      	bne.n	8001d70 <_Z19submenu_3_set_onoffhb+0x7c>
		current_menu = 9;
 8001d6a:	4b5c      	ldr	r3, [pc, #368]	; (8001edc <_Z19submenu_3_set_onoffhb+0x1e8>)
 8001d6c:	2209      	movs	r2, #9
 8001d6e:	701a      	strb	r2, [r3, #0]
		//TODO: safe settings
	}

	if(current_state == 8){
 8001d70:	4b57      	ldr	r3, [pc, #348]	; (8001ed0 <_Z19submenu_3_set_onoffhb+0x1dc>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d105      	bne.n	8001d84 <_Z19submenu_3_set_onoffhb+0x90>
		current_state = 7;	//set state back to legal value to prevent writing in illegal memory space
 8001d78:	4b55      	ldr	r3, [pc, #340]	; (8001ed0 <_Z19submenu_3_set_onoffhb+0x1dc>)
 8001d7a:	2207      	movs	r2, #7
 8001d7c:	701a      	strb	r2, [r3, #0]
		current_menu = 9;
 8001d7e:	4b57      	ldr	r3, [pc, #348]	; (8001edc <_Z19submenu_3_set_onoffhb+0x1e8>)
 8001d80:	2209      	movs	r2, #9
 8001d82:	701a      	strb	r2, [r3, #0]
		//TODO: safe settings
	}

	//menu function
	number_value = on_time[current_state][current_substate];
 8001d84:	4b52      	ldr	r3, [pc, #328]	; (8001ed0 <_Z19submenu_3_set_onoffhb+0x1dc>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	4b52      	ldr	r3, [pc, #328]	; (8001ed4 <_Z19submenu_3_set_onoffhb+0x1e0>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	001c      	movs	r4, r3
 8001d90:	2317      	movs	r3, #23
 8001d92:	18fa      	adds	r2, r7, r3
 8001d94:	4952      	ldr	r1, [pc, #328]	; (8001ee0 <_Z19submenu_3_set_onoffhb+0x1ec>)
 8001d96:	0003      	movs	r3, r0
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	181b      	adds	r3, r3, r0
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	18cb      	adds	r3, r1, r3
 8001da0:	5d1b      	ldrb	r3, [r3, r4]
 8001da2:	7013      	strb	r3, [r2, #0]



	//blink active digits
	uint32_t blink_color = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
	uint32_t static_color = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]

	if(current_substate == 0){
 8001dac:	4b49      	ldr	r3, [pc, #292]	; (8001ed4 <_Z19submenu_3_set_onoffhb+0x1e0>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <_Z19submenu_3_set_onoffhb+0xcc>
		static_color = RED;
 8001db4:	23ff      	movs	r3, #255	; 0xff
 8001db6:	041b      	lsls	r3, r3, #16
 8001db8:	60fb      	str	r3, [r7, #12]
		blink_color = GREEN;
 8001dba:	23ff      	movs	r3, #255	; 0xff
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	613b      	str	r3, [r7, #16]
	}
	if(current_substate == 1){
 8001dc0:	4b44      	ldr	r3, [pc, #272]	; (8001ed4 <_Z19submenu_3_set_onoffhb+0x1e0>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d106      	bne.n	8001dd6 <_Z19submenu_3_set_onoffhb+0xe2>
		static_color = GREEN;
 8001dc8:	23ff      	movs	r3, #255	; 0xff
 8001dca:	021b      	lsls	r3, r3, #8
 8001dcc:	60fb      	str	r3, [r7, #12]
		blink_color = RED;
 8001dce:	23ff      	movs	r3, #255	; 0xff
 8001dd0:	041b      	lsls	r3, r3, #16
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	e016      	b.n	8001e04 <_Z19submenu_3_set_onoffhb+0x110>
	}
	else if(current_substate == 2 || current_substate == 3){
 8001dd6:	4b3f      	ldr	r3, [pc, #252]	; (8001ed4 <_Z19submenu_3_set_onoffhb+0x1e0>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d003      	beq.n	8001de6 <_Z19submenu_3_set_onoffhb+0xf2>
 8001dde:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <_Z19submenu_3_set_onoffhb+0x1e0>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d105      	bne.n	8001df2 <_Z19submenu_3_set_onoffhb+0xfe>
		static_color = blink_color = GREEN;
 8001de6:	23ff      	movs	r3, #255	; 0xff
 8001de8:	021b      	lsls	r3, r3, #8
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	e008      	b.n	8001e04 <_Z19submenu_3_set_onoffhb+0x110>
	}
	else if(current_substate > 3){	// current_substate == 4 || == 5
 8001df2:	4b38      	ldr	r3, [pc, #224]	; (8001ed4 <_Z19submenu_3_set_onoffhb+0x1e0>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d904      	bls.n	8001e04 <_Z19submenu_3_set_onoffhb+0x110>
		static_color = blink_color = RED;
 8001dfa:	23ff      	movs	r3, #255	; 0xff
 8001dfc:	041b      	lsls	r3, r3, #16
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	60fb      	str	r3, [r7, #12]
	}

	if(blink_state==!true)
 8001e04:	4b34      	ldr	r3, [pc, #208]	; (8001ed8 <_Z19submenu_3_set_onoffhb+0x1e4>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <_Z19submenu_3_set_onoffhb+0x11c>
		blink_color = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]

	if(current_substate%2 == 0){	//when first two tubes display changed number
 8001e10:	4b30      	ldr	r3, [pc, #192]	; (8001ed4 <_Z19submenu_3_set_onoffhb+0x1e0>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	001a      	movs	r2, r3
 8001e16:	2301      	movs	r3, #1
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d118      	bne.n	8001e4e <_Z19submenu_3_set_onoffhb+0x15a>
		set_color(0,blink_color,25);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	2219      	movs	r2, #25
 8001e20:	0019      	movs	r1, r3
 8001e22:	2000      	movs	r0, #0
 8001e24:	f7fe fee8 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(1,blink_color,25);
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	2219      	movs	r2, #25
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f7fe fee2 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(2,static_color,25);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2219      	movs	r2, #25
 8001e38:	0019      	movs	r1, r3
 8001e3a:	2002      	movs	r0, #2
 8001e3c:	f7fe fedc 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(3,static_color,25);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2219      	movs	r2, #25
 8001e44:	0019      	movs	r1, r3
 8001e46:	2003      	movs	r0, #3
 8001e48:	f7fe fed6 	bl	8000bf8 <_Z9set_colorhmh>
 8001e4c:	e017      	b.n	8001e7e <_Z19submenu_3_set_onoffhb+0x18a>
	}else{
		set_color(0,static_color,25);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2219      	movs	r2, #25
 8001e52:	0019      	movs	r1, r3
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7fe fecf 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(1,static_color,25);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2219      	movs	r2, #25
 8001e5e:	0019      	movs	r1, r3
 8001e60:	2001      	movs	r0, #1
 8001e62:	f7fe fec9 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(2,blink_color,25);
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	2219      	movs	r2, #25
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	2002      	movs	r0, #2
 8001e6e:	f7fe fec3 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(3,blink_color,25);
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	2219      	movs	r2, #25
 8001e76:	0019      	movs	r1, r3
 8001e78:	2003      	movs	r0, #3
 8001e7a:	f7fe febd 	bl	8000bf8 <_Z9set_colorhmh>
	}

	if(timeout(blink_timer)==true){	//500ms loop
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <_Z19submenu_3_set_onoffhb+0x1f0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	0018      	movs	r0, r3
 8001e84:	f7ff f8cc 	bl	8001020 <timeout>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	425a      	negs	r2, r3
 8001e8e:	4153      	adcs	r3, r2
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00e      	beq.n	8001eb4 <_Z19submenu_3_set_onoffhb+0x1c0>
		blink_timer = start_timer_ms(500);
 8001e96:	23fa      	movs	r3, #250	; 0xfa
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f7ff f8b0 	bl	8001000 <start_timer_ms>
 8001ea0:	0002      	movs	r2, r0
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <_Z19submenu_3_set_onoffhb+0x1f0>)
 8001ea4:	601a      	str	r2, [r3, #0]
		blink_state = !blink_state;
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <_Z19submenu_3_set_onoffhb+0x1e4>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	4053      	eors	r3, r2
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <_Z19submenu_3_set_onoffhb+0x1e4>)
 8001eb2:	701a      	strb	r2, [r3, #0]
	}

	//change data according to input
	switch(local_input){
 8001eb4:	1dfb      	adds	r3, r7, #7
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d002      	beq.n	8001ec2 <_Z19submenu_3_set_onoffhb+0x1ce>
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d013      	beq.n	8001ee8 <_Z19submenu_3_set_onoffhb+0x1f4>
		case 0x1:	number_value++;	break;
		case 0x2:	number_value--;	break;
		default: break;
 8001ec0:	e019      	b.n	8001ef6 <_Z19submenu_3_set_onoffhb+0x202>
		case 0x1:	number_value++;	break;
 8001ec2:	2117      	movs	r1, #23
 8001ec4:	187b      	adds	r3, r7, r1
 8001ec6:	781a      	ldrb	r2, [r3, #0]
 8001ec8:	187b      	adds	r3, r7, r1
 8001eca:	3201      	adds	r2, #1
 8001ecc:	701a      	strb	r2, [r3, #0]
 8001ece:	e012      	b.n	8001ef6 <_Z19submenu_3_set_onoffhb+0x202>
 8001ed0:	200002c0 	.word	0x200002c0
 8001ed4:	200002c1 	.word	0x200002c1
 8001ed8:	200002b9 	.word	0x200002b9
 8001edc:	200002a4 	.word	0x200002a4
 8001ee0:	20000260 	.word	0x20000260
 8001ee4:	200002bc 	.word	0x200002bc
		case 0x2:	number_value--;	break;
 8001ee8:	2117      	movs	r1, #23
 8001eea:	187b      	adds	r3, r7, r1
 8001eec:	781a      	ldrb	r2, [r3, #0]
 8001eee:	187b      	adds	r3, r7, r1
 8001ef0:	3a01      	subs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
 8001ef4:	46c0      	nop			; (mov r8, r8)
	}

	if(current_substate == 0 || current_substate == 1){	//days
 8001ef6:	4b9b      	ldr	r3, [pc, #620]	; (8002164 <_Z19submenu_3_set_onoffhb+0x470>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <_Z19submenu_3_set_onoffhb+0x212>
 8001efe:	4b99      	ldr	r3, [pc, #612]	; (8002164 <_Z19submenu_3_set_onoffhb+0x470>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d10f      	bne.n	8001f26 <_Z19submenu_3_set_onoffhb+0x232>
		if(number_value == 0)
 8001f06:	2217      	movs	r2, #23
 8001f08:	18bb      	adds	r3, r7, r2
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d102      	bne.n	8001f16 <_Z19submenu_3_set_onoffhb+0x222>
			number_value = 7;
 8001f10:	18bb      	adds	r3, r7, r2
 8001f12:	2207      	movs	r2, #7
 8001f14:	701a      	strb	r2, [r3, #0]
		if(number_value == 8)
 8001f16:	2217      	movs	r2, #23
 8001f18:	18bb      	adds	r3, r7, r2
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d102      	bne.n	8001f26 <_Z19submenu_3_set_onoffhb+0x232>
			number_value = 1;
 8001f20:	18bb      	adds	r3, r7, r2
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
	}
	if(current_substate == 2 || current_substate == 4){ //hours
 8001f26:	4b8f      	ldr	r3, [pc, #572]	; (8002164 <_Z19submenu_3_set_onoffhb+0x470>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d003      	beq.n	8001f36 <_Z19submenu_3_set_onoffhb+0x242>
 8001f2e:	4b8d      	ldr	r3, [pc, #564]	; (8002164 <_Z19submenu_3_set_onoffhb+0x470>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d10f      	bne.n	8001f56 <_Z19submenu_3_set_onoffhb+0x262>
		if(number_value == 255)
 8001f36:	2217      	movs	r2, #23
 8001f38:	18bb      	adds	r3, r7, r2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2bff      	cmp	r3, #255	; 0xff
 8001f3e:	d102      	bne.n	8001f46 <_Z19submenu_3_set_onoffhb+0x252>
			number_value = 23;
 8001f40:	18bb      	adds	r3, r7, r2
 8001f42:	2217      	movs	r2, #23
 8001f44:	701a      	strb	r2, [r3, #0]
		if(number_value == 24)
 8001f46:	2217      	movs	r2, #23
 8001f48:	18bb      	adds	r3, r7, r2
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b18      	cmp	r3, #24
 8001f4e:	d102      	bne.n	8001f56 <_Z19submenu_3_set_onoffhb+0x262>
			number_value = 0;
 8001f50:	18bb      	adds	r3, r7, r2
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
	}
	if(current_substate == 3 || current_substate == 5){ //minutes
 8001f56:	4b83      	ldr	r3, [pc, #524]	; (8002164 <_Z19submenu_3_set_onoffhb+0x470>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d003      	beq.n	8001f66 <_Z19submenu_3_set_onoffhb+0x272>
 8001f5e:	4b81      	ldr	r3, [pc, #516]	; (8002164 <_Z19submenu_3_set_onoffhb+0x470>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b05      	cmp	r3, #5
 8001f64:	d10f      	bne.n	8001f86 <_Z19submenu_3_set_onoffhb+0x292>
		if(number_value == 255)
 8001f66:	2217      	movs	r2, #23
 8001f68:	18bb      	adds	r3, r7, r2
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2bff      	cmp	r3, #255	; 0xff
 8001f6e:	d102      	bne.n	8001f76 <_Z19submenu_3_set_onoffhb+0x282>
			number_value = 59;
 8001f70:	18bb      	adds	r3, r7, r2
 8001f72:	223b      	movs	r2, #59	; 0x3b
 8001f74:	701a      	strb	r2, [r3, #0]
		if(number_value == 60)
 8001f76:	2217      	movs	r2, #23
 8001f78:	18bb      	adds	r3, r7, r2
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b3c      	cmp	r3, #60	; 0x3c
 8001f7e:	d102      	bne.n	8001f86 <_Z19submenu_3_set_onoffhb+0x292>
			number_value = 0;
 8001f80:	18bb      	adds	r3, r7, r2
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
	}

	on_time[current_state][current_substate] = number_value;
 8001f86:	4b78      	ldr	r3, [pc, #480]	; (8002168 <_Z19submenu_3_set_onoffhb+0x474>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	4b75      	ldr	r3, [pc, #468]	; (8002164 <_Z19submenu_3_set_onoffhb+0x470>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	0018      	movs	r0, r3
 8001f92:	4a76      	ldr	r2, [pc, #472]	; (800216c <_Z19submenu_3_set_onoffhb+0x478>)
 8001f94:	000b      	movs	r3, r1
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	185b      	adds	r3, r3, r1
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	18d3      	adds	r3, r2, r3
 8001f9e:	2117      	movs	r1, #23
 8001fa0:	187a      	adds	r2, r7, r1
 8001fa2:	7812      	ldrb	r2, [r2, #0]
 8001fa4:	541a      	strb	r2, [r3, r0]

	//display output
	if(current_substate == 0){
 8001fa6:	4b6f      	ldr	r3, [pc, #444]	; (8002164 <_Z19submenu_3_set_onoffhb+0x470>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d114      	bne.n	8001fd8 <_Z19submenu_3_set_onoffhb+0x2e4>
		set_number(1, number_value);
 8001fae:	187b      	adds	r3, r7, r1
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	f7ff f869 	bl	800108c <_Z10set_numberhh>
		set_number(3, on_time[current_state][1]);
 8001fba:	4b6b      	ldr	r3, [pc, #428]	; (8002168 <_Z19submenu_3_set_onoffhb+0x474>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	0019      	movs	r1, r3
 8001fc0:	4a6a      	ldr	r2, [pc, #424]	; (800216c <_Z19submenu_3_set_onoffhb+0x478>)
 8001fc2:	000b      	movs	r3, r1
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	185b      	adds	r3, r3, r1
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	18d3      	adds	r3, r2, r3
 8001fcc:	3301      	adds	r3, #1
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	2003      	movs	r0, #3
 8001fd4:	f7ff f85a 	bl	800108c <_Z10set_numberhh>
	}
	if(current_substate == 1){
 8001fd8:	4b62      	ldr	r3, [pc, #392]	; (8002164 <_Z19submenu_3_set_onoffhb+0x470>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d113      	bne.n	8002008 <_Z19submenu_3_set_onoffhb+0x314>
		set_number(1, on_time[current_state][0]);
 8001fe0:	4b61      	ldr	r3, [pc, #388]	; (8002168 <_Z19submenu_3_set_onoffhb+0x474>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	4a61      	ldr	r2, [pc, #388]	; (800216c <_Z19submenu_3_set_onoffhb+0x478>)
 8001fe8:	000b      	movs	r3, r1
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	185b      	adds	r3, r3, r1
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	5c9b      	ldrb	r3, [r3, r2]
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	f7ff f849 	bl	800108c <_Z10set_numberhh>
		set_number(3, number_value);
 8001ffa:	2317      	movs	r3, #23
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	0019      	movs	r1, r3
 8002002:	2003      	movs	r0, #3
 8002004:	f7ff f842 	bl	800108c <_Z10set_numberhh>
	}
	if(current_substate == 2 || current_substate == 4){
 8002008:	4b56      	ldr	r3, [pc, #344]	; (8002164 <_Z19submenu_3_set_onoffhb+0x470>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d003      	beq.n	8002018 <_Z19submenu_3_set_onoffhb+0x324>
 8002010:	4b54      	ldr	r3, [pc, #336]	; (8002164 <_Z19submenu_3_set_onoffhb+0x470>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b04      	cmp	r3, #4
 8002016:	d146      	bne.n	80020a6 <_Z19submenu_3_set_onoffhb+0x3b2>
		set_number(0, number_value/10);
 8002018:	2417      	movs	r4, #23
 800201a:	193b      	adds	r3, r7, r4
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	210a      	movs	r1, #10
 8002020:	0018      	movs	r0, r3
 8002022:	f7fe f871 	bl	8000108 <__udivsi3>
 8002026:	0003      	movs	r3, r0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	0019      	movs	r1, r3
 800202c:	2000      	movs	r0, #0
 800202e:	f7ff f82d 	bl	800108c <_Z10set_numberhh>
		set_number(1, number_value%10);
 8002032:	193b      	adds	r3, r7, r4
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	210a      	movs	r1, #10
 8002038:	0018      	movs	r0, r3
 800203a:	f7fe f8eb 	bl	8000214 <__aeabi_uidivmod>
 800203e:	000b      	movs	r3, r1
 8002040:	b2db      	uxtb	r3, r3
 8002042:	0019      	movs	r1, r3
 8002044:	2001      	movs	r0, #1
 8002046:	f7ff f821 	bl	800108c <_Z10set_numberhh>
		set_number(2, on_time[current_state][current_substate+1]/10);
 800204a:	4b47      	ldr	r3, [pc, #284]	; (8002168 <_Z19submenu_3_set_onoffhb+0x474>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	0018      	movs	r0, r3
 8002050:	4b44      	ldr	r3, [pc, #272]	; (8002164 <_Z19submenu_3_set_onoffhb+0x470>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	4945      	ldr	r1, [pc, #276]	; (800216c <_Z19submenu_3_set_onoffhb+0x478>)
 8002058:	0003      	movs	r3, r0
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	181b      	adds	r3, r3, r0
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	18cb      	adds	r3, r1, r3
 8002062:	5c9b      	ldrb	r3, [r3, r2]
 8002064:	210a      	movs	r1, #10
 8002066:	0018      	movs	r0, r3
 8002068:	f7fe f84e 	bl	8000108 <__udivsi3>
 800206c:	0003      	movs	r3, r0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	0019      	movs	r1, r3
 8002072:	2002      	movs	r0, #2
 8002074:	f7ff f80a 	bl	800108c <_Z10set_numberhh>
		set_number(3, on_time[current_state][current_substate+1]%10);
 8002078:	4b3b      	ldr	r3, [pc, #236]	; (8002168 <_Z19submenu_3_set_onoffhb+0x474>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	0018      	movs	r0, r3
 800207e:	4b39      	ldr	r3, [pc, #228]	; (8002164 <_Z19submenu_3_set_onoffhb+0x470>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	4939      	ldr	r1, [pc, #228]	; (800216c <_Z19submenu_3_set_onoffhb+0x478>)
 8002086:	0003      	movs	r3, r0
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	181b      	adds	r3, r3, r0
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	18cb      	adds	r3, r1, r3
 8002090:	5c9b      	ldrb	r3, [r3, r2]
 8002092:	210a      	movs	r1, #10
 8002094:	0018      	movs	r0, r3
 8002096:	f7fe f8bd 	bl	8000214 <__aeabi_uidivmod>
 800209a:	000b      	movs	r3, r1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	0019      	movs	r1, r3
 80020a0:	2003      	movs	r0, #3
 80020a2:	f7fe fff3 	bl	800108c <_Z10set_numberhh>

	}
	if(current_substate == 3 || current_substate == 5){
 80020a6:	4b2f      	ldr	r3, [pc, #188]	; (8002164 <_Z19submenu_3_set_onoffhb+0x470>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d003      	beq.n	80020b6 <_Z19submenu_3_set_onoffhb+0x3c2>
 80020ae:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <_Z19submenu_3_set_onoffhb+0x470>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	d146      	bne.n	8002144 <_Z19submenu_3_set_onoffhb+0x450>
		set_number(0, on_time[current_state][current_substate-1]/10);
 80020b6:	4b2c      	ldr	r3, [pc, #176]	; (8002168 <_Z19submenu_3_set_onoffhb+0x474>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	0018      	movs	r0, r3
 80020bc:	4b29      	ldr	r3, [pc, #164]	; (8002164 <_Z19submenu_3_set_onoffhb+0x470>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	1e5a      	subs	r2, r3, #1
 80020c2:	492a      	ldr	r1, [pc, #168]	; (800216c <_Z19submenu_3_set_onoffhb+0x478>)
 80020c4:	0003      	movs	r3, r0
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	181b      	adds	r3, r3, r0
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	18cb      	adds	r3, r1, r3
 80020ce:	5c9b      	ldrb	r3, [r3, r2]
 80020d0:	210a      	movs	r1, #10
 80020d2:	0018      	movs	r0, r3
 80020d4:	f7fe f818 	bl	8000108 <__udivsi3>
 80020d8:	0003      	movs	r3, r0
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	0019      	movs	r1, r3
 80020de:	2000      	movs	r0, #0
 80020e0:	f7fe ffd4 	bl	800108c <_Z10set_numberhh>
		set_number(1, on_time[current_state][current_substate-1]%10);
 80020e4:	4b20      	ldr	r3, [pc, #128]	; (8002168 <_Z19submenu_3_set_onoffhb+0x474>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	0018      	movs	r0, r3
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <_Z19submenu_3_set_onoffhb+0x470>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	1e5a      	subs	r2, r3, #1
 80020f0:	491e      	ldr	r1, [pc, #120]	; (800216c <_Z19submenu_3_set_onoffhb+0x478>)
 80020f2:	0003      	movs	r3, r0
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	181b      	adds	r3, r3, r0
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	18cb      	adds	r3, r1, r3
 80020fc:	5c9b      	ldrb	r3, [r3, r2]
 80020fe:	210a      	movs	r1, #10
 8002100:	0018      	movs	r0, r3
 8002102:	f7fe f887 	bl	8000214 <__aeabi_uidivmod>
 8002106:	000b      	movs	r3, r1
 8002108:	b2db      	uxtb	r3, r3
 800210a:	0019      	movs	r1, r3
 800210c:	2001      	movs	r0, #1
 800210e:	f7fe ffbd 	bl	800108c <_Z10set_numberhh>
		set_number(2, number_value/10);
 8002112:	2417      	movs	r4, #23
 8002114:	193b      	adds	r3, r7, r4
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	210a      	movs	r1, #10
 800211a:	0018      	movs	r0, r3
 800211c:	f7fd fff4 	bl	8000108 <__udivsi3>
 8002120:	0003      	movs	r3, r0
 8002122:	b2db      	uxtb	r3, r3
 8002124:	0019      	movs	r1, r3
 8002126:	2002      	movs	r0, #2
 8002128:	f7fe ffb0 	bl	800108c <_Z10set_numberhh>
		set_number(3, number_value%10);
 800212c:	193b      	adds	r3, r7, r4
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	210a      	movs	r1, #10
 8002132:	0018      	movs	r0, r3
 8002134:	f7fe f86e 	bl	8000214 <__aeabi_uidivmod>
 8002138:	000b      	movs	r3, r1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	0019      	movs	r1, r3
 800213e:	2003      	movs	r0, #3
 8002140:	f7fe ffa4 	bl	800108c <_Z10set_numberhh>
	}
	//debug
	set_number(4, current_state);
 8002144:	4b08      	ldr	r3, [pc, #32]	; (8002168 <_Z19submenu_3_set_onoffhb+0x474>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	0019      	movs	r1, r3
 800214a:	2004      	movs	r0, #4
 800214c:	f7fe ff9e 	bl	800108c <_Z10set_numberhh>
	set_number(5, current_substate);
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <_Z19submenu_3_set_onoffhb+0x470>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	0019      	movs	r1, r3
 8002156:	2005      	movs	r0, #5
 8002158:	f7fe ff98 	bl	800108c <_Z10set_numberhh>
}
 800215c:	46c0      	nop			; (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	b007      	add	sp, #28
 8002162:	bd90      	pop	{r4, r7, pc}
 8002164:	200002c1 	.word	0x200002c1
 8002168:	200002c0 	.word	0x200002c0
 800216c:	20000260 	.word	0x20000260

08002170 <_Z21submenu_9_menu_selecth>:

/**
 * @brief: function to select new setting option
 * @param: enter input info 0x1=left; 0x2=right; 0x4=press; 0x8=long press
 */
bool submenu_9_menu_select(uint8_t local_input){
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	0002      	movs	r2, r0
 8002178:	1dfb      	adds	r3, r7, #7
 800217a:	701a      	strb	r2, [r3, #0]
	if(local_input == 0x1)
 800217c:	1dfb      	adds	r3, r7, #7
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d105      	bne.n	8002190 <_Z21submenu_9_menu_selecth+0x20>
		selected_menu++;
 8002184:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <_Z21submenu_9_menu_selecth+0x70>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	3301      	adds	r3, #1
 800218a:	b2da      	uxtb	r2, r3
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <_Z21submenu_9_menu_selecth+0x70>)
 800218e:	701a      	strb	r2, [r3, #0]
	if(local_input == 0x2)
 8002190:	1dfb      	adds	r3, r7, #7
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d105      	bne.n	80021a4 <_Z21submenu_9_menu_selecth+0x34>
		selected_menu--;
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <_Z21submenu_9_menu_selecth+0x70>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	3b01      	subs	r3, #1
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <_Z21submenu_9_menu_selecth+0x70>)
 80021a2:	701a      	strb	r2, [r3, #0]
	if(selected_menu == 255)
 80021a4:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <_Z21submenu_9_menu_selecth+0x70>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2bff      	cmp	r3, #255	; 0xff
 80021aa:	d102      	bne.n	80021b2 <_Z21submenu_9_menu_selecth+0x42>
		selected_menu = 6;
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <_Z21submenu_9_menu_selecth+0x70>)
 80021ae:	2206      	movs	r2, #6
 80021b0:	701a      	strb	r2, [r3, #0]
	if(selected_menu == 7)
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <_Z21submenu_9_menu_selecth+0x70>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b07      	cmp	r3, #7
 80021b8:	d102      	bne.n	80021c0 <_Z21submenu_9_menu_selecth+0x50>
		selected_menu = 0;
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <_Z21submenu_9_menu_selecth+0x70>)
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
	if(local_input == 0x4){
 80021c0:	1dfb      	adds	r3, r7, #7
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d105      	bne.n	80021d4 <_Z21submenu_9_menu_selecth+0x64>
		current_menu = selected_menu;
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <_Z21submenu_9_menu_selecth+0x70>)
 80021ca:	781a      	ldrb	r2, [r3, #0]
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <_Z21submenu_9_menu_selecth+0x74>)
 80021ce:	701a      	strb	r2, [r3, #0]
		return true;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <_Z21submenu_9_menu_selecth+0x66>
		//TODO: move current state to separat subfunctions
		//		current_state=0;	//reset state when entering new menu
	}
	else
		return false;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	0018      	movs	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	b002      	add	sp, #8
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	200002a5 	.word	0x200002a5
 80021e4:	200002a4 	.word	0x200002a4

080021e8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80021ec:	4b18      	ldr	r3, [pc, #96]	; (8002250 <MX_SPI1_Init+0x68>)
 80021ee:	4a19      	ldr	r2, [pc, #100]	; (8002254 <MX_SPI1_Init+0x6c>)
 80021f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <MX_SPI1_Init+0x68>)
 80021f4:	2282      	movs	r2, #130	; 0x82
 80021f6:	0052      	lsls	r2, r2, #1
 80021f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <MX_SPI1_Init+0x68>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <MX_SPI1_Init+0x68>)
 8002202:	2200      	movs	r2, #0
 8002204:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002206:	4b12      	ldr	r3, [pc, #72]	; (8002250 <MX_SPI1_Init+0x68>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800220c:	4b10      	ldr	r3, [pc, #64]	; (8002250 <MX_SPI1_Init+0x68>)
 800220e:	2200      	movs	r2, #0
 8002210:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <MX_SPI1_Init+0x68>)
 8002214:	2280      	movs	r2, #128	; 0x80
 8002216:	0092      	lsls	r2, r2, #2
 8002218:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <MX_SPI1_Init+0x68>)
 800221c:	2208      	movs	r2, #8
 800221e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <MX_SPI1_Init+0x68>)
 8002222:	2200      	movs	r2, #0
 8002224:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <MX_SPI1_Init+0x68>)
 8002228:	2200      	movs	r2, #0
 800222a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <MX_SPI1_Init+0x68>)
 800222e:	2200      	movs	r2, #0
 8002230:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002232:	4b07      	ldr	r3, [pc, #28]	; (8002250 <MX_SPI1_Init+0x68>)
 8002234:	2207      	movs	r2, #7
 8002236:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <MX_SPI1_Init+0x68>)
 800223a:	0018      	movs	r0, r3
 800223c:	f002 feda 	bl	8004ff4 <HAL_SPI_Init>
 8002240:	1e03      	subs	r3, r0, #0
 8002242:	d001      	beq.n	8002248 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002244:	f7fe fefe 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002248:	46c0      	nop			; (mov r8, r8)
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	200002c4 	.word	0x200002c4
 8002254:	40013000 	.word	0x40013000

08002258 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	240c      	movs	r4, #12
 8002262:	193b      	adds	r3, r7, r4
 8002264:	0018      	movs	r0, r3
 8002266:	2314      	movs	r3, #20
 8002268:	001a      	movs	r2, r3
 800226a:	2100      	movs	r1, #0
 800226c:	f004 fbb8 	bl	80069e0 <memset>
  if(spiHandle->Instance==SPI1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <HAL_SPI_MspInit+0x80>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d129      	bne.n	80022ce <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800227a:	4b18      	ldr	r3, [pc, #96]	; (80022dc <HAL_SPI_MspInit+0x84>)
 800227c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800227e:	4b17      	ldr	r3, [pc, #92]	; (80022dc <HAL_SPI_MspInit+0x84>)
 8002280:	2180      	movs	r1, #128	; 0x80
 8002282:	0149      	lsls	r1, r1, #5
 8002284:	430a      	orrs	r2, r1
 8002286:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002288:	4b14      	ldr	r3, [pc, #80]	; (80022dc <HAL_SPI_MspInit+0x84>)
 800228a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800228c:	4b13      	ldr	r3, [pc, #76]	; (80022dc <HAL_SPI_MspInit+0x84>)
 800228e:	2101      	movs	r1, #1
 8002290:	430a      	orrs	r2, r1
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <HAL_SPI_MspInit+0x84>)
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	2201      	movs	r2, #1
 800229a:	4013      	ands	r3, r2
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80022a0:	0021      	movs	r1, r4
 80022a2:	187b      	adds	r3, r7, r1
 80022a4:	22a0      	movs	r2, #160	; 0xa0
 80022a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a8:	187b      	adds	r3, r7, r1
 80022aa:	2202      	movs	r2, #2
 80022ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	187b      	adds	r3, r7, r1
 80022b0:	2200      	movs	r2, #0
 80022b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b4:	187b      	adds	r3, r7, r1
 80022b6:	2203      	movs	r2, #3
 80022b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80022ba:	187b      	adds	r3, r7, r1
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c0:	187a      	adds	r2, r7, r1
 80022c2:	23a0      	movs	r3, #160	; 0xa0
 80022c4:	05db      	lsls	r3, r3, #23
 80022c6:	0011      	movs	r1, r2
 80022c8:	0018      	movs	r0, r3
 80022ca:	f001 f861 	bl	8003390 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b009      	add	sp, #36	; 0x24
 80022d4:	bd90      	pop	{r4, r7, pc}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	40013000 	.word	0x40013000
 80022dc:	40021000 	.word	0x40021000

080022e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e4:	4b07      	ldr	r3, [pc, #28]	; (8002304 <HAL_MspInit+0x24>)
 80022e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_MspInit+0x24>)
 80022ea:	2101      	movs	r1, #1
 80022ec:	430a      	orrs	r2, r1
 80022ee:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <HAL_MspInit+0x24>)
 80022f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022f4:	4b03      	ldr	r3, [pc, #12]	; (8002304 <HAL_MspInit+0x24>)
 80022f6:	2180      	movs	r1, #128	; 0x80
 80022f8:	0549      	lsls	r1, r1, #21
 80022fa:	430a      	orrs	r2, r1
 80022fc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40021000 	.word	0x40021000

08002308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800230c:	e7fe      	b.n	800230c <NMI_Handler+0x4>

0800230e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002312:	e7fe      	b.n	8002312 <HardFault_Handler+0x4>

08002314 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002318:	46c0      	nop			; (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800232c:	f000 fd34 	bl	8002d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002330:	46c0      	nop			; (mov r8, r8)
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <DMA1_Channel1_IRQHandler+0x14>)
 800233e:	0018      	movs	r0, r3
 8002340:	f000 ff49 	bl	80031d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	2000039c 	.word	0x2000039c

08002350 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */
	counter_update_it();
 8002354:	f7fe fe48 	bl	8000fe8 <counter_update_it>
  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <TIM21_IRQHandler+0x18>)
 800235a:	0018      	movs	r0, r3
 800235c:	f003 fcd0 	bl	8005d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8002360:	46c0      	nop			; (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	2000035c 	.word	0x2000035c

0800236c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002370:	46c0      	nop			; (mov r8, r8)
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <MX_TIM2_Init>:
TIM_HandleTypeDef htim21;
DMA_HandleTypeDef hdma_tim2_ch3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800237e:	2318      	movs	r3, #24
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	0018      	movs	r0, r3
 8002384:	2310      	movs	r3, #16
 8002386:	001a      	movs	r2, r3
 8002388:	2100      	movs	r1, #0
 800238a:	f004 fb29 	bl	80069e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800238e:	2310      	movs	r3, #16
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	0018      	movs	r0, r3
 8002394:	2308      	movs	r3, #8
 8002396:	001a      	movs	r2, r3
 8002398:	2100      	movs	r1, #0
 800239a:	f004 fb21 	bl	80069e0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800239e:	003b      	movs	r3, r7
 80023a0:	0018      	movs	r0, r3
 80023a2:	2310      	movs	r3, #16
 80023a4:	001a      	movs	r2, r3
 80023a6:	2100      	movs	r1, #0
 80023a8:	f004 fb1a 	bl	80069e0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023ac:	4b30      	ldr	r3, [pc, #192]	; (8002470 <MX_TIM2_Init+0xf8>)
 80023ae:	2280      	movs	r2, #128	; 0x80
 80023b0:	05d2      	lsls	r2, r2, #23
 80023b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023b4:	4b2e      	ldr	r3, [pc, #184]	; (8002470 <MX_TIM2_Init+0xf8>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ba:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <MX_TIM2_Init+0xf8>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40-1;
 80023c0:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <MX_TIM2_Init+0xf8>)
 80023c2:	2227      	movs	r2, #39	; 0x27
 80023c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c6:	4b2a      	ldr	r3, [pc, #168]	; (8002470 <MX_TIM2_Init+0xf8>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023cc:	4b28      	ldr	r3, [pc, #160]	; (8002470 <MX_TIM2_Init+0xf8>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023d2:	4b27      	ldr	r3, [pc, #156]	; (8002470 <MX_TIM2_Init+0xf8>)
 80023d4:	0018      	movs	r0, r3
 80023d6:	f003 f8c7 	bl	8005568 <HAL_TIM_Base_Init>
 80023da:	1e03      	subs	r3, r0, #0
 80023dc:	d001      	beq.n	80023e2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80023de:	f7fe fe31 	bl	8001044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e2:	2118      	movs	r1, #24
 80023e4:	187b      	adds	r3, r7, r1
 80023e6:	2280      	movs	r2, #128	; 0x80
 80023e8:	0152      	lsls	r2, r2, #5
 80023ea:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023ec:	187a      	adds	r2, r7, r1
 80023ee:	4b20      	ldr	r3, [pc, #128]	; (8002470 <MX_TIM2_Init+0xf8>)
 80023f0:	0011      	movs	r1, r2
 80023f2:	0018      	movs	r0, r3
 80023f4:	f003 fe8a 	bl	800610c <HAL_TIM_ConfigClockSource>
 80023f8:	1e03      	subs	r3, r0, #0
 80023fa:	d001      	beq.n	8002400 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80023fc:	f7fe fe22 	bl	8001044 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002400:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <MX_TIM2_Init+0xf8>)
 8002402:	0018      	movs	r0, r3
 8002404:	f003 fa0a 	bl	800581c <HAL_TIM_PWM_Init>
 8002408:	1e03      	subs	r3, r0, #0
 800240a:	d001      	beq.n	8002410 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800240c:	f7fe fe1a 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002410:	2110      	movs	r1, #16
 8002412:	187b      	adds	r3, r7, r1
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002418:	187b      	adds	r3, r7, r1
 800241a:	2200      	movs	r2, #0
 800241c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800241e:	187a      	adds	r2, r7, r1
 8002420:	4b13      	ldr	r3, [pc, #76]	; (8002470 <MX_TIM2_Init+0xf8>)
 8002422:	0011      	movs	r1, r2
 8002424:	0018      	movs	r0, r3
 8002426:	f004 fa5f 	bl	80068e8 <HAL_TIMEx_MasterConfigSynchronization>
 800242a:	1e03      	subs	r3, r0, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800242e:	f7fe fe09 	bl	8001044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002432:	003b      	movs	r3, r7
 8002434:	2260      	movs	r2, #96	; 0x60
 8002436:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002438:	003b      	movs	r3, r7
 800243a:	2200      	movs	r2, #0
 800243c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800243e:	003b      	movs	r3, r7
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002444:	003b      	movs	r3, r7
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800244a:	0039      	movs	r1, r7
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <MX_TIM2_Init+0xf8>)
 800244e:	2208      	movs	r2, #8
 8002450:	0018      	movs	r0, r3
 8002452:	f003 fd95 	bl	8005f80 <HAL_TIM_PWM_ConfigChannel>
 8002456:	1e03      	subs	r3, r0, #0
 8002458:	d001      	beq.n	800245e <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800245a:	f7fe fdf3 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800245e:	4b04      	ldr	r3, [pc, #16]	; (8002470 <MX_TIM2_Init+0xf8>)
 8002460:	0018      	movs	r0, r3
 8002462:	f000 f8e7 	bl	8002634 <HAL_TIM_MspPostInit>

}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	46bd      	mov	sp, r7
 800246a:	b00a      	add	sp, #40	; 0x28
 800246c:	bd80      	pop	{r7, pc}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	2000031c 	.word	0x2000031c

08002474 <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	; 0x28
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800247a:	2318      	movs	r3, #24
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	0018      	movs	r0, r3
 8002480:	2310      	movs	r3, #16
 8002482:	001a      	movs	r2, r3
 8002484:	2100      	movs	r1, #0
 8002486:	f004 faab 	bl	80069e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800248a:	2310      	movs	r3, #16
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	0018      	movs	r0, r3
 8002490:	2308      	movs	r3, #8
 8002492:	001a      	movs	r2, r3
 8002494:	2100      	movs	r1, #0
 8002496:	f004 faa3 	bl	80069e0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800249a:	003b      	movs	r3, r7
 800249c:	0018      	movs	r0, r3
 800249e:	2310      	movs	r3, #16
 80024a0:	001a      	movs	r2, r3
 80024a2:	2100      	movs	r1, #0
 80024a4:	f004 fa9c 	bl	80069e0 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 80024a8:	4b31      	ldr	r3, [pc, #196]	; (8002570 <MX_TIM21_Init+0xfc>)
 80024aa:	4a32      	ldr	r2, [pc, #200]	; (8002574 <MX_TIM21_Init+0x100>)
 80024ac:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 32-1;
 80024ae:	4b30      	ldr	r3, [pc, #192]	; (8002570 <MX_TIM21_Init+0xfc>)
 80024b0:	221f      	movs	r2, #31
 80024b2:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b4:	4b2e      	ldr	r3, [pc, #184]	; (8002570 <MX_TIM21_Init+0xfc>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 1000-1;
 80024ba:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <MX_TIM21_Init+0xfc>)
 80024bc:	4a2e      	ldr	r2, [pc, #184]	; (8002578 <MX_TIM21_Init+0x104>)
 80024be:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c0:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <MX_TIM21_Init+0xfc>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024c6:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <MX_TIM21_Init+0xfc>)
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80024cc:	4b28      	ldr	r3, [pc, #160]	; (8002570 <MX_TIM21_Init+0xfc>)
 80024ce:	0018      	movs	r0, r3
 80024d0:	f003 f84a 	bl	8005568 <HAL_TIM_Base_Init>
 80024d4:	1e03      	subs	r3, r0, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 80024d8:	f7fe fdb4 	bl	8001044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024dc:	2118      	movs	r1, #24
 80024de:	187b      	adds	r3, r7, r1
 80024e0:	2280      	movs	r2, #128	; 0x80
 80024e2:	0152      	lsls	r2, r2, #5
 80024e4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80024e6:	187a      	adds	r2, r7, r1
 80024e8:	4b21      	ldr	r3, [pc, #132]	; (8002570 <MX_TIM21_Init+0xfc>)
 80024ea:	0011      	movs	r1, r2
 80024ec:	0018      	movs	r0, r3
 80024ee:	f003 fe0d 	bl	800610c <HAL_TIM_ConfigClockSource>
 80024f2:	1e03      	subs	r3, r0, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM21_Init+0x86>
  {
    Error_Handler();
 80024f6:	f7fe fda5 	bl	8001044 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 80024fa:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <MX_TIM21_Init+0xfc>)
 80024fc:	0018      	movs	r0, r3
 80024fe:	f003 f873 	bl	80055e8 <HAL_TIM_OC_Init>
 8002502:	1e03      	subs	r3, r0, #0
 8002504:	d001      	beq.n	800250a <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8002506:	f7fe fd9d 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250a:	2110      	movs	r1, #16
 800250c:	187b      	adds	r3, r7, r1
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002512:	187b      	adds	r3, r7, r1
 8002514:	2200      	movs	r2, #0
 8002516:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8002518:	187a      	adds	r2, r7, r1
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <MX_TIM21_Init+0xfc>)
 800251c:	0011      	movs	r1, r2
 800251e:	0018      	movs	r0, r3
 8002520:	f004 f9e2 	bl	80068e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002524:	1e03      	subs	r3, r0, #0
 8002526:	d001      	beq.n	800252c <MX_TIM21_Init+0xb8>
  {
    Error_Handler();
 8002528:	f7fe fd8c 	bl	8001044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800252c:	003b      	movs	r3, r7
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002532:	003b      	movs	r3, r7
 8002534:	2200      	movs	r2, #0
 8002536:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002538:	003b      	movs	r3, r7
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800253e:	003b      	movs	r3, r7
 8002540:	2200      	movs	r2, #0
 8002542:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002544:	0039      	movs	r1, r7
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <MX_TIM21_Init+0xfc>)
 8002548:	2200      	movs	r2, #0
 800254a:	0018      	movs	r0, r3
 800254c:	f003 fcc0 	bl	8005ed0 <HAL_TIM_OC_ConfigChannel>
 8002550:	1e03      	subs	r3, r0, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM21_Init+0xe4>
  {
    Error_Handler();
 8002554:	f7fe fd76 	bl	8001044 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim21, TIM_CHANNEL_1);
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <MX_TIM21_Init+0xfc>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	4b04      	ldr	r3, [pc, #16]	; (8002570 <MX_TIM21_Init+0xfc>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2108      	movs	r1, #8
 8002564:	430a      	orrs	r2, r1
 8002566:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b00a      	add	sp, #40	; 0x28
 800256e:	bd80      	pop	{r7, pc}
 8002570:	2000035c 	.word	0x2000035c
 8002574:	40010800 	.word	0x40010800
 8002578:	000003e7 	.word	0x000003e7

0800257c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	05db      	lsls	r3, r3, #23
 800258c:	429a      	cmp	r2, r3
 800258e:	d132      	bne.n	80025f6 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002590:	4b24      	ldr	r3, [pc, #144]	; (8002624 <HAL_TIM_Base_MspInit+0xa8>)
 8002592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002594:	4b23      	ldr	r3, [pc, #140]	; (8002624 <HAL_TIM_Base_MspInit+0xa8>)
 8002596:	2101      	movs	r1, #1
 8002598:	430a      	orrs	r2, r1
 800259a:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 800259c:	4b22      	ldr	r3, [pc, #136]	; (8002628 <HAL_TIM_Base_MspInit+0xac>)
 800259e:	4a23      	ldr	r2, [pc, #140]	; (800262c <HAL_TIM_Base_MspInit+0xb0>)
 80025a0:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
 80025a2:	4b21      	ldr	r3, [pc, #132]	; (8002628 <HAL_TIM_Base_MspInit+0xac>)
 80025a4:	2208      	movs	r2, #8
 80025a6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025a8:	4b1f      	ldr	r3, [pc, #124]	; (8002628 <HAL_TIM_Base_MspInit+0xac>)
 80025aa:	2210      	movs	r2, #16
 80025ac:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ae:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <HAL_TIM_Base_MspInit+0xac>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80025b4:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <HAL_TIM_Base_MspInit+0xac>)
 80025b6:	2280      	movs	r2, #128	; 0x80
 80025b8:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025ba:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <HAL_TIM_Base_MspInit+0xac>)
 80025bc:	2280      	movs	r2, #128	; 0x80
 80025be:	0052      	lsls	r2, r2, #1
 80025c0:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025c2:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_TIM_Base_MspInit+0xac>)
 80025c4:	2280      	movs	r2, #128	; 0x80
 80025c6:	00d2      	lsls	r2, r2, #3
 80025c8:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80025ca:	4b17      	ldr	r3, [pc, #92]	; (8002628 <HAL_TIM_Base_MspInit+0xac>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80025d0:	4b15      	ldr	r3, [pc, #84]	; (8002628 <HAL_TIM_Base_MspInit+0xac>)
 80025d2:	2280      	movs	r2, #128	; 0x80
 80025d4:	0152      	lsls	r2, r2, #5
 80025d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80025d8:	4b13      	ldr	r3, [pc, #76]	; (8002628 <HAL_TIM_Base_MspInit+0xac>)
 80025da:	0018      	movs	r0, r3
 80025dc:	f000 fcd6 	bl	8002f8c <HAL_DMA_Init>
 80025e0:	1e03      	subs	r3, r0, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 80025e4:	f7fe fd2e 	bl	8001044 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a0f      	ldr	r2, [pc, #60]	; (8002628 <HAL_TIM_Base_MspInit+0xac>)
 80025ec:	629a      	str	r2, [r3, #40]	; 0x28
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <HAL_TIM_Base_MspInit+0xac>)
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 80025f4:	e012      	b.n	800261c <HAL_TIM_Base_MspInit+0xa0>
  else if(tim_baseHandle->Instance==TIM21)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a0d      	ldr	r2, [pc, #52]	; (8002630 <HAL_TIM_Base_MspInit+0xb4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d10d      	bne.n	800261c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <HAL_TIM_Base_MspInit+0xa8>)
 8002602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002604:	4b07      	ldr	r3, [pc, #28]	; (8002624 <HAL_TIM_Base_MspInit+0xa8>)
 8002606:	2104      	movs	r1, #4
 8002608:	430a      	orrs	r2, r1
 800260a:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 800260c:	2200      	movs	r2, #0
 800260e:	2100      	movs	r1, #0
 8002610:	2014      	movs	r0, #20
 8002612:	f000 fc89 	bl	8002f28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8002616:	2014      	movs	r0, #20
 8002618:	f000 fc9b 	bl	8002f52 <HAL_NVIC_EnableIRQ>
}
 800261c:	46c0      	nop			; (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	b002      	add	sp, #8
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000
 8002628:	2000039c 	.word	0x2000039c
 800262c:	40020008 	.word	0x40020008
 8002630:	40010800 	.word	0x40010800

08002634 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b089      	sub	sp, #36	; 0x24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	240c      	movs	r4, #12
 800263e:	193b      	adds	r3, r7, r4
 8002640:	0018      	movs	r0, r3
 8002642:	2314      	movs	r3, #20
 8002644:	001a      	movs	r2, r3
 8002646:	2100      	movs	r1, #0
 8002648:	f004 f9ca 	bl	80069e0 <memset>
  if(timHandle->Instance==TIM2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	05db      	lsls	r3, r3, #23
 8002654:	429a      	cmp	r2, r3
 8002656:	d122      	bne.n	800269e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002658:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <HAL_TIM_MspPostInit+0x74>)
 800265a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800265c:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_TIM_MspPostInit+0x74>)
 800265e:	2101      	movs	r1, #1
 8002660:	430a      	orrs	r2, r1
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c
 8002664:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <HAL_TIM_MspPostInit+0x74>)
 8002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002668:	2201      	movs	r2, #1
 800266a:	4013      	ands	r3, r2
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002670:	0021      	movs	r1, r4
 8002672:	187b      	adds	r3, r7, r1
 8002674:	2204      	movs	r2, #4
 8002676:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	187b      	adds	r3, r7, r1
 800267a:	2202      	movs	r2, #2
 800267c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800267e:	187b      	adds	r3, r7, r1
 8002680:	2202      	movs	r2, #2
 8002682:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002684:	187b      	adds	r3, r7, r1
 8002686:	2202      	movs	r2, #2
 8002688:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800268a:	187b      	adds	r3, r7, r1
 800268c:	2202      	movs	r2, #2
 800268e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002690:	187a      	adds	r2, r7, r1
 8002692:	23a0      	movs	r3, #160	; 0xa0
 8002694:	05db      	lsls	r3, r3, #23
 8002696:	0011      	movs	r1, r2
 8002698:	0018      	movs	r0, r3
 800269a:	f000 fe79 	bl	8003390 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	46bd      	mov	sp, r7
 80026a2:	b009      	add	sp, #36	; 0x24
 80026a4:	bd90      	pop	{r4, r7, pc}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	40021000 	.word	0x40021000

080026ac <_Z16run_time_handlerv>:
struct time_struct data_to_RTC;

/**
 * @brief function is constantly called to get fresh time data from rtc - get time every 500ms
 */
void run_time_handler(void){
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
	static bool dls_flag_only = false;
	if(data_to_RTC.new_data==2){
 80026b0:	4b19      	ldr	r3, [pc, #100]	; (8002718 <_Z16run_time_handlerv+0x6c>)
 80026b2:	7a9b      	ldrb	r3, [r3, #10]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d107      	bne.n	80026c8 <_Z16run_time_handlerv+0x1c>
		data_to_RTC.new_data = 0;
 80026b8:	4b17      	ldr	r3, [pc, #92]	; (8002718 <_Z16run_time_handlerv+0x6c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	729a      	strb	r2, [r3, #10]
		write_date_i2c();
 80026be:	f000 f967 	bl	8002990 <_Z14write_date_i2cv>
		dls_flag_only = true;	//enable change flag only for next Daylight safe check
 80026c2:	4b16      	ldr	r3, [pc, #88]	; (800271c <_Z16run_time_handlerv+0x70>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
	}
	if(data_to_RTC.new_data==1){
 80026c8:	4b13      	ldr	r3, [pc, #76]	; (8002718 <_Z16run_time_handlerv+0x6c>)
 80026ca:	7a9b      	ldrb	r3, [r3, #10]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d107      	bne.n	80026e0 <_Z16run_time_handlerv+0x34>
		data_to_RTC.new_data = 0;
 80026d0:	4b11      	ldr	r3, [pc, #68]	; (8002718 <_Z16run_time_handlerv+0x6c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	729a      	strb	r2, [r3, #10]
		write_time_i2c();
 80026d6:	f000 f87d 	bl	80027d4 <_Z14write_time_i2cv>
		dls_flag_only = true;
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <_Z16run_time_handlerv+0x70>)
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]


	//TODO: add summertime
	//TODO: add plausibility check when safing date

	if(timeout(time_handler_timer)){
 80026e0:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <_Z16run_time_handlerv+0x74>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	0018      	movs	r0, r3
 80026e6:	f7fe fc9b 	bl	8001020 <timeout>
 80026ea:	1e03      	subs	r3, r0, #0
 80026ec:	d011      	beq.n	8002712 <_Z16run_time_handlerv+0x66>
		time_handler_timer = start_timer_ms(TIME_UPDATE_MS);
 80026ee:	2064      	movs	r0, #100	; 0x64
 80026f0:	f7fe fc86 	bl	8001000 <start_timer_ms>
 80026f4:	0002      	movs	r2, r0
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <_Z16run_time_handlerv+0x74>)
 80026f8:	601a      	str	r2, [r3, #0]

		read_date_i2c();
 80026fa:	f000 f8c9 	bl	8002890 <_Z13read_date_i2cv>
		read_time_i2c();
 80026fe:	f000 f811 	bl	8002724 <_Z13read_time_i2cv>
		dls_check(dls_flag_only);	//check for daylight saving + apply
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <_Z16run_time_handlerv+0x70>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	0018      	movs	r0, r3
 8002708:	f000 f9bc 	bl	8002a84 <_Z9dls_checkb>
		dls_flag_only = false;
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <_Z16run_time_handlerv+0x70>)
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]
	}
}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20000020 	.word	0x20000020
 800271c:	200003e8 	.word	0x200003e8
 8002720:	200003e4 	.word	0x200003e4

08002724 <_Z13read_time_i2cv>:

/**
 * @brief function to read time information from RTC info RAM
 * store read data in time_struct data_from_RTC
 */
void read_time_i2c(void){
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af02      	add	r7, sp, #8
	uint8_t temp[3];
	temp[0] = ADDR_SECONDS;	//start address for read operation
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&hi2c1, DS3231_MASTER_ADDRESS, (uint8_t *)temp, 1, 10);
 8002730:	1d3a      	adds	r2, r7, #4
 8002732:	4826      	ldr	r0, [pc, #152]	; (80027cc <_Z13read_time_i2cv+0xa8>)
 8002734:	230a      	movs	r3, #10
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	2301      	movs	r3, #1
 800273a:	21d1      	movs	r1, #209	; 0xd1
 800273c:	f001 f866 	bl	800380c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, DS3231_SLAVE_ADDRESS, (uint8_t *)temp, 3, 10);
 8002740:	1d3a      	adds	r2, r7, #4
 8002742:	4822      	ldr	r0, [pc, #136]	; (80027cc <_Z13read_time_i2cv+0xa8>)
 8002744:	230a      	movs	r3, #10
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	2303      	movs	r3, #3
 800274a:	21d0      	movs	r1, #208	; 0xd0
 800274c:	f001 f966 	bl	8003a1c <HAL_I2C_Master_Receive>

	data_from_RTC.seconds = ((temp[0]&0xf0)>>4)*10 + (temp[0]&0x0f);	//conversion from hex to dec
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	b2db      	uxtb	r3, r3
 8002758:	1c1a      	adds	r2, r3, #0
 800275a:	0092      	lsls	r2, r2, #2
 800275c:	18d3      	adds	r3, r2, r3
 800275e:	18db      	adds	r3, r3, r3
 8002760:	b2da      	uxtb	r2, r3
 8002762:	1d3b      	adds	r3, r7, #4
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	210f      	movs	r1, #15
 8002768:	400b      	ands	r3, r1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	18d3      	adds	r3, r2, r3
 800276e:	b2da      	uxtb	r2, r3
 8002770:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <_Z13read_time_i2cv+0xac>)
 8002772:	701a      	strb	r2, [r3, #0]
	data_from_RTC.minutes = ((temp[1]&0xf0)>>4)*10 + (temp[1]&0x0f);
 8002774:	1d3b      	adds	r3, r7, #4
 8002776:	785b      	ldrb	r3, [r3, #1]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	b2db      	uxtb	r3, r3
 800277c:	1c1a      	adds	r2, r3, #0
 800277e:	0092      	lsls	r2, r2, #2
 8002780:	18d3      	adds	r3, r2, r3
 8002782:	18db      	adds	r3, r3, r3
 8002784:	b2da      	uxtb	r2, r3
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	785b      	ldrb	r3, [r3, #1]
 800278a:	210f      	movs	r1, #15
 800278c:	400b      	ands	r3, r1
 800278e:	b2db      	uxtb	r3, r3
 8002790:	18d3      	adds	r3, r2, r3
 8002792:	b2da      	uxtb	r2, r3
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <_Z13read_time_i2cv+0xac>)
 8002796:	705a      	strb	r2, [r3, #1]
	data_from_RTC.hours = ((temp[2]&0x30)>>4)*10 + (temp[2]&0x0f);
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	789b      	ldrb	r3, [r3, #2]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2203      	movs	r2, #3
 80027a2:	4013      	ands	r3, r2
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	1c1a      	adds	r2, r3, #0
 80027a8:	0092      	lsls	r2, r2, #2
 80027aa:	18d3      	adds	r3, r2, r3
 80027ac:	18db      	adds	r3, r3, r3
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	789b      	ldrb	r3, [r3, #2]
 80027b4:	210f      	movs	r1, #15
 80027b6:	400b      	ands	r3, r1
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	18d3      	adds	r3, r2, r3
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <_Z13read_time_i2cv+0xac>)
 80027c0:	709a      	strb	r2, [r3, #2]

	//check for summer time

}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b002      	add	sp, #8
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	20000050 	.word	0x20000050
 80027d0:	20000014 	.word	0x20000014

080027d4 <_Z14write_time_i2cv>:

/**
 * @brief function to write time information from RAM into RTC
 * read data from data_to_RTC and transfer to RTC
 */
void write_time_i2c(void){
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af02      	add	r7, sp, #8
	uint8_t temp[4];

	//convert from summer time

	temp[0] = ADDR_SECONDS;	//start address for write operation
 80027da:	1d3b      	adds	r3, r7, #4
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
	temp[1] = ((data_to_RTC.seconds/10)<<4)|data_to_RTC.seconds%10;
 80027e0:	4b29      	ldr	r3, [pc, #164]	; (8002888 <_Z14write_time_i2cv+0xb4>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	210a      	movs	r1, #10
 80027e6:	0018      	movs	r0, r3
 80027e8:	f7fd fc8e 	bl	8000108 <__udivsi3>
 80027ec:	0003      	movs	r3, r0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	b25c      	sxtb	r4, r3
 80027f4:	4b24      	ldr	r3, [pc, #144]	; (8002888 <_Z14write_time_i2cv+0xb4>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	210a      	movs	r1, #10
 80027fa:	0018      	movs	r0, r3
 80027fc:	f7fd fd0a 	bl	8000214 <__aeabi_uidivmod>
 8002800:	000b      	movs	r3, r1
 8002802:	b2db      	uxtb	r3, r3
 8002804:	b25b      	sxtb	r3, r3
 8002806:	4323      	orrs	r3, r4
 8002808:	b25b      	sxtb	r3, r3
 800280a:	b2da      	uxtb	r2, r3
 800280c:	1d3b      	adds	r3, r7, #4
 800280e:	705a      	strb	r2, [r3, #1]
	temp[2] = ((data_to_RTC.minutes/10)<<4)|data_to_RTC.minutes%10;
 8002810:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <_Z14write_time_i2cv+0xb4>)
 8002812:	785b      	ldrb	r3, [r3, #1]
 8002814:	210a      	movs	r1, #10
 8002816:	0018      	movs	r0, r3
 8002818:	f7fd fc76 	bl	8000108 <__udivsi3>
 800281c:	0003      	movs	r3, r0
 800281e:	b2db      	uxtb	r3, r3
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	b25c      	sxtb	r4, r3
 8002824:	4b18      	ldr	r3, [pc, #96]	; (8002888 <_Z14write_time_i2cv+0xb4>)
 8002826:	785b      	ldrb	r3, [r3, #1]
 8002828:	210a      	movs	r1, #10
 800282a:	0018      	movs	r0, r3
 800282c:	f7fd fcf2 	bl	8000214 <__aeabi_uidivmod>
 8002830:	000b      	movs	r3, r1
 8002832:	b2db      	uxtb	r3, r3
 8002834:	b25b      	sxtb	r3, r3
 8002836:	4323      	orrs	r3, r4
 8002838:	b25b      	sxtb	r3, r3
 800283a:	b2da      	uxtb	r2, r3
 800283c:	1d3b      	adds	r3, r7, #4
 800283e:	709a      	strb	r2, [r3, #2]
	temp[3] = ((data_to_RTC.hours/10)<<4)|data_to_RTC.hours%10;
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <_Z14write_time_i2cv+0xb4>)
 8002842:	789b      	ldrb	r3, [r3, #2]
 8002844:	210a      	movs	r1, #10
 8002846:	0018      	movs	r0, r3
 8002848:	f7fd fc5e 	bl	8000108 <__udivsi3>
 800284c:	0003      	movs	r3, r0
 800284e:	b2db      	uxtb	r3, r3
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	b25c      	sxtb	r4, r3
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <_Z14write_time_i2cv+0xb4>)
 8002856:	789b      	ldrb	r3, [r3, #2]
 8002858:	210a      	movs	r1, #10
 800285a:	0018      	movs	r0, r3
 800285c:	f7fd fcda 	bl	8000214 <__aeabi_uidivmod>
 8002860:	000b      	movs	r3, r1
 8002862:	b2db      	uxtb	r3, r3
 8002864:	b25b      	sxtb	r3, r3
 8002866:	4323      	orrs	r3, r4
 8002868:	b25b      	sxtb	r3, r3
 800286a:	b2da      	uxtb	r2, r3
 800286c:	1d3b      	adds	r3, r7, #4
 800286e:	70da      	strb	r2, [r3, #3]

	HAL_I2C_Master_Transmit(&hi2c1, DS3231_MASTER_ADDRESS,(uint8_t *)temp, 4, 10);
 8002870:	1d3a      	adds	r2, r7, #4
 8002872:	4806      	ldr	r0, [pc, #24]	; (800288c <_Z14write_time_i2cv+0xb8>)
 8002874:	230a      	movs	r3, #10
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2304      	movs	r3, #4
 800287a:	21d1      	movs	r1, #209	; 0xd1
 800287c:	f000 ffc6 	bl	800380c <HAL_I2C_Master_Transmit>
}
 8002880:	46c0      	nop			; (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	b003      	add	sp, #12
 8002886:	bd90      	pop	{r4, r7, pc}
 8002888:	20000020 	.word	0x20000020
 800288c:	20000050 	.word	0x20000050

08002890 <_Z13read_date_i2cv>:

/**
 * @brief function to read date information from RTC info RAM
 * store read date in time_struct data_from_RTC
 */
void read_date_i2c(void){
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b085      	sub	sp, #20
 8002894:	af02      	add	r7, sp, #8
	uint8_t temp[4];
	temp[0] = ADDR_DAY;	//start address of read operation
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	2203      	movs	r2, #3
 800289a:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&hi2c1, DS3231_MASTER_ADDRESS, (uint8_t *)temp, 1, 10);
 800289c:	1d3a      	adds	r2, r7, #4
 800289e:	4839      	ldr	r0, [pc, #228]	; (8002984 <_Z13read_date_i2cv+0xf4>)
 80028a0:	230a      	movs	r3, #10
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2301      	movs	r3, #1
 80028a6:	21d1      	movs	r1, #209	; 0xd1
 80028a8:	f000 ffb0 	bl	800380c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, DS3231_SLAVE_ADDRESS, (uint8_t *)temp, 4, 10);
 80028ac:	1d3a      	adds	r2, r7, #4
 80028ae:	4835      	ldr	r0, [pc, #212]	; (8002984 <_Z13read_date_i2cv+0xf4>)
 80028b0:	230a      	movs	r3, #10
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	2304      	movs	r3, #4
 80028b6:	21d0      	movs	r1, #208	; 0xd0
 80028b8:	f001 f8b0 	bl	8003a1c <HAL_I2C_Master_Receive>

	data_from_RTC.day = temp[0];
 80028bc:	1d3b      	adds	r3, r7, #4
 80028be:	781a      	ldrb	r2, [r3, #0]
 80028c0:	4b31      	ldr	r3, [pc, #196]	; (8002988 <_Z13read_date_i2cv+0xf8>)
 80028c2:	70da      	strb	r2, [r3, #3]
	data_from_RTC.date = ((temp[1]&0x30)>>4)*10 + (temp[1]&0x0f);
 80028c4:	1d3b      	adds	r3, r7, #4
 80028c6:	785b      	ldrb	r3, [r3, #1]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2203      	movs	r2, #3
 80028ce:	4013      	ands	r3, r2
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	1c1a      	adds	r2, r3, #0
 80028d4:	0092      	lsls	r2, r2, #2
 80028d6:	18d3      	adds	r3, r2, r3
 80028d8:	18db      	adds	r3, r3, r3
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	785b      	ldrb	r3, [r3, #1]
 80028e0:	210f      	movs	r1, #15
 80028e2:	400b      	ands	r3, r1
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	18d3      	adds	r3, r2, r3
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4b27      	ldr	r3, [pc, #156]	; (8002988 <_Z13read_date_i2cv+0xf8>)
 80028ec:	711a      	strb	r2, [r3, #4]
	data_from_RTC.month = ((temp[2]&0x10)>>4)*10 + (temp[2]&0x0f);
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	789b      	ldrb	r3, [r3, #2]
 80028f2:	091b      	lsrs	r3, r3, #4
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2201      	movs	r2, #1
 80028f8:	4013      	ands	r3, r2
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	1c1a      	adds	r2, r3, #0
 80028fe:	0092      	lsls	r2, r2, #2
 8002900:	18d3      	adds	r3, r2, r3
 8002902:	18db      	adds	r3, r3, r3
 8002904:	b2da      	uxtb	r2, r3
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	789b      	ldrb	r3, [r3, #2]
 800290a:	210f      	movs	r1, #15
 800290c:	400b      	ands	r3, r1
 800290e:	b2db      	uxtb	r3, r3
 8002910:	18d3      	adds	r3, r2, r3
 8002912:	b2da      	uxtb	r2, r3
 8002914:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <_Z13read_date_i2cv+0xf8>)
 8002916:	715a      	strb	r2, [r3, #5]
	data_from_RTC.century = (temp[2] & 0x80) >> 7;	//if century == 1 --> year is bigger that 2000
 8002918:	1d3b      	adds	r3, r7, #4
 800291a:	789b      	ldrb	r3, [r3, #2]
 800291c:	b25b      	sxtb	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	09db      	lsrs	r3, r3, #7
 8002922:	b2da      	uxtb	r2, r3
 8002924:	4b18      	ldr	r3, [pc, #96]	; (8002988 <_Z13read_date_i2cv+0xf8>)
 8002926:	721a      	strb	r2, [r3, #8]
	data_from_RTC.year = 1900 + (data_from_RTC.century * 100);
 8002928:	4b17      	ldr	r3, [pc, #92]	; (8002988 <_Z13read_date_i2cv+0xf8>)
 800292a:	7a1b      	ldrb	r3, [r3, #8]
 800292c:	b29b      	uxth	r3, r3
 800292e:	2264      	movs	r2, #100	; 0x64
 8002930:	4353      	muls	r3, r2
 8002932:	b29b      	uxth	r3, r3
 8002934:	4a15      	ldr	r2, [pc, #84]	; (800298c <_Z13read_date_i2cv+0xfc>)
 8002936:	4694      	mov	ip, r2
 8002938:	4463      	add	r3, ip
 800293a:	b29a      	uxth	r2, r3
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <_Z13read_date_i2cv+0xf8>)
 800293e:	80da      	strh	r2, [r3, #6]
	data_from_RTC.year = data_from_RTC.year + (((temp[3]&0xf0)>>4)*10) + ((temp[3]&0x0f)%10);
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <_Z13read_date_i2cv+0xf8>)
 8002942:	88da      	ldrh	r2, [r3, #6]
 8002944:	1d3b      	adds	r3, r7, #4
 8002946:	78db      	ldrb	r3, [r3, #3]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	b2db      	uxtb	r3, r3
 800294c:	b29b      	uxth	r3, r3
 800294e:	1c19      	adds	r1, r3, #0
 8002950:	0089      	lsls	r1, r1, #2
 8002952:	18cb      	adds	r3, r1, r3
 8002954:	18db      	adds	r3, r3, r3
 8002956:	b29b      	uxth	r3, r3
 8002958:	18d3      	adds	r3, r2, r3
 800295a:	b29c      	uxth	r4, r3
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	78db      	ldrb	r3, [r3, #3]
 8002960:	220f      	movs	r2, #15
 8002962:	4013      	ands	r3, r2
 8002964:	b2db      	uxtb	r3, r3
 8002966:	210a      	movs	r1, #10
 8002968:	0018      	movs	r0, r3
 800296a:	f7fd fc53 	bl	8000214 <__aeabi_uidivmod>
 800296e:	000b      	movs	r3, r1
 8002970:	b2db      	uxtb	r3, r3
 8002972:	b29b      	uxth	r3, r3
 8002974:	18e3      	adds	r3, r4, r3
 8002976:	b29a      	uxth	r2, r3
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <_Z13read_date_i2cv+0xf8>)
 800297a:	80da      	strh	r2, [r3, #6]

	//check for summer time
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	b003      	add	sp, #12
 8002982:	bd90      	pop	{r4, r7, pc}
 8002984:	20000050 	.word	0x20000050
 8002988:	20000014 	.word	0x20000014
 800298c:	0000076c 	.word	0x0000076c

08002990 <_Z14write_date_i2cv>:

/**
 * @brief function to write date information from RAM into RTC
 * read data from data_to_RTC and transfer to RTC
 */
void write_date_i2c(void){
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b085      	sub	sp, #20
 8002994:	af02      	add	r7, sp, #8
	uint8_t temp[5]={0};
 8002996:	003b      	movs	r3, r7
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	2200      	movs	r2, #0
 800299e:	711a      	strb	r2, [r3, #4]

	//convert from summer time

	temp[0] = ADDR_DAY;	//start address for write operation
 80029a0:	003b      	movs	r3, r7
 80029a2:	2203      	movs	r2, #3
 80029a4:	701a      	strb	r2, [r3, #0]
	temp[1] = data_to_RTC.day;
 80029a6:	4b35      	ldr	r3, [pc, #212]	; (8002a7c <_Z14write_date_i2cv+0xec>)
 80029a8:	78da      	ldrb	r2, [r3, #3]
 80029aa:	003b      	movs	r3, r7
 80029ac:	705a      	strb	r2, [r3, #1]
	temp[2] = ((data_to_RTC.date/10)<<4)|data_to_RTC.date%10;
 80029ae:	4b33      	ldr	r3, [pc, #204]	; (8002a7c <_Z14write_date_i2cv+0xec>)
 80029b0:	791b      	ldrb	r3, [r3, #4]
 80029b2:	210a      	movs	r1, #10
 80029b4:	0018      	movs	r0, r3
 80029b6:	f7fd fba7 	bl	8000108 <__udivsi3>
 80029ba:	0003      	movs	r3, r0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	b25c      	sxtb	r4, r3
 80029c2:	4b2e      	ldr	r3, [pc, #184]	; (8002a7c <_Z14write_date_i2cv+0xec>)
 80029c4:	791b      	ldrb	r3, [r3, #4]
 80029c6:	210a      	movs	r1, #10
 80029c8:	0018      	movs	r0, r3
 80029ca:	f7fd fc23 	bl	8000214 <__aeabi_uidivmod>
 80029ce:	000b      	movs	r3, r1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	b25b      	sxtb	r3, r3
 80029d4:	4323      	orrs	r3, r4
 80029d6:	b25b      	sxtb	r3, r3
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	003b      	movs	r3, r7
 80029dc:	709a      	strb	r2, [r3, #2]
	temp[3] = ((data_to_RTC.month/10)<<4)|data_to_RTC.month%10 | (data_to_RTC.year/2000)<<7;
 80029de:	4b27      	ldr	r3, [pc, #156]	; (8002a7c <_Z14write_date_i2cv+0xec>)
 80029e0:	795b      	ldrb	r3, [r3, #5]
 80029e2:	210a      	movs	r1, #10
 80029e4:	0018      	movs	r0, r3
 80029e6:	f7fd fb8f 	bl	8000108 <__udivsi3>
 80029ea:	0003      	movs	r3, r0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	b25c      	sxtb	r4, r3
 80029f2:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <_Z14write_date_i2cv+0xec>)
 80029f4:	795b      	ldrb	r3, [r3, #5]
 80029f6:	210a      	movs	r1, #10
 80029f8:	0018      	movs	r0, r3
 80029fa:	f7fd fc0b 	bl	8000214 <__aeabi_uidivmod>
 80029fe:	000b      	movs	r3, r1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	b25b      	sxtb	r3, r3
 8002a04:	4323      	orrs	r3, r4
 8002a06:	b25c      	sxtb	r4, r3
 8002a08:	4b1c      	ldr	r3, [pc, #112]	; (8002a7c <_Z14write_date_i2cv+0xec>)
 8002a0a:	88db      	ldrh	r3, [r3, #6]
 8002a0c:	22fa      	movs	r2, #250	; 0xfa
 8002a0e:	00d1      	lsls	r1, r2, #3
 8002a10:	0018      	movs	r0, r3
 8002a12:	f7fd fb79 	bl	8000108 <__udivsi3>
 8002a16:	0003      	movs	r3, r0
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	01db      	lsls	r3, r3, #7
 8002a1c:	b25b      	sxtb	r3, r3
 8002a1e:	4323      	orrs	r3, r4
 8002a20:	b25b      	sxtb	r3, r3
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	003b      	movs	r3, r7
 8002a26:	70da      	strb	r2, [r3, #3]
	temp[4] = ((data_to_RTC.year %100) / 10)<<4 | data_to_RTC.year%10;
 8002a28:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <_Z14write_date_i2cv+0xec>)
 8002a2a:	88db      	ldrh	r3, [r3, #6]
 8002a2c:	2164      	movs	r1, #100	; 0x64
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f7fd fbf0 	bl	8000214 <__aeabi_uidivmod>
 8002a34:	000b      	movs	r3, r1
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	210a      	movs	r1, #10
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f7fd fb64 	bl	8000108 <__udivsi3>
 8002a40:	0003      	movs	r3, r0
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	b25c      	sxtb	r4, r3
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <_Z14write_date_i2cv+0xec>)
 8002a4a:	88db      	ldrh	r3, [r3, #6]
 8002a4c:	210a      	movs	r1, #10
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f7fd fbe0 	bl	8000214 <__aeabi_uidivmod>
 8002a54:	000b      	movs	r3, r1
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	b25b      	sxtb	r3, r3
 8002a5a:	4323      	orrs	r3, r4
 8002a5c:	b25b      	sxtb	r3, r3
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	003b      	movs	r3, r7
 8002a62:	711a      	strb	r2, [r3, #4]

	HAL_I2C_Master_Transmit(&hi2c1, DS3231_MASTER_ADDRESS, (uint8_t *)temp, 5, 10);
 8002a64:	003a      	movs	r2, r7
 8002a66:	4806      	ldr	r0, [pc, #24]	; (8002a80 <_Z14write_date_i2cv+0xf0>)
 8002a68:	230a      	movs	r3, #10
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	2305      	movs	r3, #5
 8002a6e:	21d1      	movs	r1, #209	; 0xd1
 8002a70:	f000 fecc 	bl	800380c <HAL_I2C_Master_Transmit>
}
 8002a74:	46c0      	nop			; (mov r8, r8)
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b003      	add	sp, #12
 8002a7a:	bd90      	pop	{r4, r7, pc}
 8002a7c:	20000020 	.word	0x20000020
 8002a80:	20000050 	.word	0x20000050

08002a84 <_Z9dls_checkb>:
 *  @brief function checks Flag, if day light saving is applied, applies if necessary, re/sets Flag if necessary
 *  @param flag_only: functions only alters the flag and not the actual time value inside the RTC
 *  @info: If DLS applies, the hour byte in the RTC is increased by one and the change is signalized by turning the
 *  ALARM 1 SECONDS Byte to 1 - this bit is used for the DLS FLAG (1 = DLS is applied, 0 = DLS is not applied)
 */
void dls_check(bool flag_only){
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	0002      	movs	r2, r0
 8002a8c:	1dfb      	adds	r3, r7, #7
 8002a8e:	701a      	strb	r2, [r3, #0]
	static bool dls_needed = false;
	static bool dls_active = false;
	uint8_t offset = 0;			//add hysterese behaviour for fall, when clock switches from 03:00 to 02:00 - code will reactivate dls, since dls is deactivated altough it should be activated based on time+date
 8002a90:	240f      	movs	r4, #15
 8002a92:	193b      	adds	r3, r7, r4
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]

	//read DLS bit
	dls_active = read_i2c_single(ADDR_A1SECONDS);
 8002a98:	2007      	movs	r0, #7
 8002a9a:	f000 f8db 	bl	8002c54 <_Z15read_i2c_singleh>
 8002a9e:	0003      	movs	r3, r0
 8002aa0:	1e5a      	subs	r2, r3, #1
 8002aa2:	4193      	sbcs	r3, r2
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4b58      	ldr	r3, [pc, #352]	; (8002c08 <_Z9dls_checkb+0x184>)
 8002aa8:	701a      	strb	r2, [r3, #0]
	if(dls_active==0x1){
 8002aaa:	4b57      	ldr	r3, [pc, #348]	; (8002c08 <_Z9dls_checkb+0x184>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d106      	bne.n	8002ac0 <_Z9dls_checkb+0x3c>
		offset = 1;
 8002ab2:	193b      	adds	r3, r7, r4
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
		data_from_RTC.summer_time = true;
 8002ab8:	4b54      	ldr	r3, [pc, #336]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	725a      	strb	r2, [r3, #9]
 8002abe:	e006      	b.n	8002ace <_Z9dls_checkb+0x4a>
	}
	else{
		offset = 0;
 8002ac0:	230f      	movs	r3, #15
 8002ac2:	18fb      	adds	r3, r7, r3
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
		data_from_RTC.summer_time = false;
 8002ac8:	4b50      	ldr	r3, [pc, #320]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	725a      	strb	r2, [r3, #9]
	}
	//check date + time: Should DLS be active?
	if((data_from_RTC.month == 3 && data_from_RTC.date>=25 && data_from_RTC.day==7 && data_from_RTC.hours>=2 )	//March, last sunday, later than 02:00
 8002ace:	4b4f      	ldr	r3, [pc, #316]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002ad0:	795b      	ldrb	r3, [r3, #5]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d10b      	bne.n	8002aee <_Z9dls_checkb+0x6a>
 8002ad6:	4b4d      	ldr	r3, [pc, #308]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002ad8:	791b      	ldrb	r3, [r3, #4]
 8002ada:	2b18      	cmp	r3, #24
 8002adc:	d907      	bls.n	8002aee <_Z9dls_checkb+0x6a>
 8002ade:	4b4b      	ldr	r3, [pc, #300]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002ae0:	78db      	ldrb	r3, [r3, #3]
 8002ae2:	2b07      	cmp	r3, #7
 8002ae4:	d103      	bne.n	8002aee <_Z9dls_checkb+0x6a>
 8002ae6:	4b49      	ldr	r3, [pc, #292]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002ae8:	789b      	ldrb	r3, [r3, #2]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d844      	bhi.n	8002b78 <_Z9dls_checkb+0xf4>
	 || (data_from_RTC.month == 3 && data_from_RTC.day<=6 && (data_from_RTC.date-data_from_RTC.day)>=25 )		//March after last sunday
 8002aee:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002af0:	795b      	ldrb	r3, [r3, #5]
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d10b      	bne.n	8002b0e <_Z9dls_checkb+0x8a>
 8002af6:	4b45      	ldr	r3, [pc, #276]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002af8:	78db      	ldrb	r3, [r3, #3]
 8002afa:	2b06      	cmp	r3, #6
 8002afc:	d807      	bhi.n	8002b0e <_Z9dls_checkb+0x8a>
 8002afe:	4b43      	ldr	r3, [pc, #268]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002b00:	791b      	ldrb	r3, [r3, #4]
 8002b02:	001a      	movs	r2, r3
 8002b04:	4b41      	ldr	r3, [pc, #260]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002b06:	78db      	ldrb	r3, [r3, #3]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b18      	cmp	r3, #24
 8002b0c:	dc34      	bgt.n	8002b78 <_Z9dls_checkb+0xf4>
	 || (data_from_RTC.month >= 4 && data_from_RTC.month <=9)													//April - September
 8002b0e:	4b3f      	ldr	r3, [pc, #252]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002b10:	795b      	ldrb	r3, [r3, #5]
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d903      	bls.n	8002b1e <_Z9dls_checkb+0x9a>
 8002b16:	4b3d      	ldr	r3, [pc, #244]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002b18:	795b      	ldrb	r3, [r3, #5]
 8002b1a:	2b09      	cmp	r3, #9
 8002b1c:	d92c      	bls.n	8002b78 <_Z9dls_checkb+0xf4>
	 || (data_from_RTC.month == 10 && ( (((data_from_RTC.date-data_from_RTC.day)<=24)&& data_from_RTC.day<=6) || (data_from_RTC.day==7 && data_from_RTC.date<=24)))
 8002b1e:	4b3b      	ldr	r3, [pc, #236]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002b20:	795b      	ldrb	r3, [r3, #5]
 8002b22:	2b0a      	cmp	r3, #10
 8002b24:	d113      	bne.n	8002b4e <_Z9dls_checkb+0xca>
 8002b26:	4b39      	ldr	r3, [pc, #228]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002b28:	791b      	ldrb	r3, [r3, #4]
 8002b2a:	001a      	movs	r2, r3
 8002b2c:	4b37      	ldr	r3, [pc, #220]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002b2e:	78db      	ldrb	r3, [r3, #3]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b18      	cmp	r3, #24
 8002b34:	dc03      	bgt.n	8002b3e <_Z9dls_checkb+0xba>
 8002b36:	4b35      	ldr	r3, [pc, #212]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002b38:	78db      	ldrb	r3, [r3, #3]
 8002b3a:	2b06      	cmp	r3, #6
 8002b3c:	d91c      	bls.n	8002b78 <_Z9dls_checkb+0xf4>
 8002b3e:	4b33      	ldr	r3, [pc, #204]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002b40:	78db      	ldrb	r3, [r3, #3]
 8002b42:	2b07      	cmp	r3, #7
 8002b44:	d103      	bne.n	8002b4e <_Z9dls_checkb+0xca>
 8002b46:	4b31      	ldr	r3, [pc, #196]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002b48:	791b      	ldrb	r3, [r3, #4]
 8002b4a:	2b18      	cmp	r3, #24
 8002b4c:	d914      	bls.n	8002b78 <_Z9dls_checkb+0xf4>
	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	//October till saturday befor last sunday
	 || (data_from_RTC.month == 10 && data_from_RTC.day == 7 && data_from_RTC.date >=25 && data_from_RTC.hours<=(1+offset))){
 8002b4e:	4b2f      	ldr	r3, [pc, #188]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002b50:	795b      	ldrb	r3, [r3, #5]
 8002b52:	2b0a      	cmp	r3, #10
 8002b54:	d114      	bne.n	8002b80 <_Z9dls_checkb+0xfc>
 8002b56:	4b2d      	ldr	r3, [pc, #180]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002b58:	78db      	ldrb	r3, [r3, #3]
 8002b5a:	2b07      	cmp	r3, #7
 8002b5c:	d110      	bne.n	8002b80 <_Z9dls_checkb+0xfc>
 8002b5e:	4b2b      	ldr	r3, [pc, #172]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002b60:	791b      	ldrb	r3, [r3, #4]
 8002b62:	2b18      	cmp	r3, #24
 8002b64:	d90c      	bls.n	8002b80 <_Z9dls_checkb+0xfc>
 8002b66:	4b29      	ldr	r3, [pc, #164]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002b68:	789b      	ldrb	r3, [r3, #2]
 8002b6a:	001a      	movs	r2, r3
 8002b6c:	230f      	movs	r3, #15
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	3301      	adds	r3, #1
 8002b74:	429a      	cmp	r2, r3
 8002b76:	dc03      	bgt.n	8002b80 <_Z9dls_checkb+0xfc>
	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	//October last sunday till 02:00
		dls_needed = true;
 8002b78:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <_Z9dls_checkb+0x18c>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	e002      	b.n	8002b86 <_Z9dls_checkb+0x102>
	}
	else{
		dls_needed = false;
 8002b80:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <_Z9dls_checkb+0x18c>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	701a      	strb	r2, [r3, #0]
	}

	//check if DLS bit should be applied: is DLS active?
	if(dls_active == false && dls_needed == true){
 8002b86:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <_Z9dls_checkb+0x184>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d119      	bne.n	8002bc2 <_Z9dls_checkb+0x13e>
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <_Z9dls_checkb+0x18c>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d115      	bne.n	8002bc2 <_Z9dls_checkb+0x13e>
		if(flag_only==false){
 8002b96:	1dfb      	adds	r3, r7, #7
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10d      	bne.n	8002bba <_Z9dls_checkb+0x136>
			write_i2c_single(ADDR_HOURS, data_from_RTC.hours+1);
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002ba0:	789b      	ldrb	r3, [r3, #2]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	2002      	movs	r0, #2
 8002baa:	f000 f833 	bl	8002c14 <_Z16write_i2c_singlehh>
			data_from_RTC.hours++;		//alter local variable, so no new read is required before new value is displayed
 8002bae:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002bb0:	789b      	ldrb	r3, [r3, #2]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002bb8:	709a      	strb	r2, [r3, #2]
			//increase RTC by one hour - should only happen when summer is reached, not through time set
		}
		write_i2c_single(ADDR_A1SECONDS, 0x1);	//set DLS FLAG
 8002bba:	2101      	movs	r1, #1
 8002bbc:	2007      	movs	r0, #7
 8002bbe:	f000 f829 	bl	8002c14 <_Z16write_i2c_singlehh>
	}
	if(dls_active == true && dls_needed == false){
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <_Z9dls_checkb+0x184>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d119      	bne.n	8002bfe <_Z9dls_checkb+0x17a>
 8002bca:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <_Z9dls_checkb+0x18c>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d115      	bne.n	8002bfe <_Z9dls_checkb+0x17a>
		if(flag_only == false){
 8002bd2:	1dfb      	adds	r3, r7, #7
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10d      	bne.n	8002bf6 <_Z9dls_checkb+0x172>
			write_i2c_single(ADDR_HOURS, data_from_RTC.hours-1);
 8002bda:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002bdc:	789b      	ldrb	r3, [r3, #2]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	0019      	movs	r1, r3
 8002be4:	2002      	movs	r0, #2
 8002be6:	f000 f815 	bl	8002c14 <_Z16write_i2c_singlehh>
			data_from_RTC.hours--;
 8002bea:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002bec:	789b      	ldrb	r3, [r3, #2]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <_Z9dls_checkb+0x188>)
 8002bf4:	709a      	strb	r2, [r3, #2]
			//decrease RTC by one hour - should only happen when winter is reached, not through time set
		}
		write_i2c_single(ADDR_A1SECONDS, 0x0);	//reset DLS FLAG
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	2007      	movs	r0, #7
 8002bfa:	f000 f80b 	bl	8002c14 <_Z16write_i2c_singlehh>
	}
}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	46bd      	mov	sp, r7
 8002c02:	b005      	add	sp, #20
 8002c04:	bd90      	pop	{r4, r7, pc}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	200003ea 	.word	0x200003ea
 8002c0c:	20000014 	.word	0x20000014
 8002c10:	200003e9 	.word	0x200003e9

08002c14 <_Z16write_i2c_singlehh>:
/**
 * @brief write single register
 * @param cmd: register address to which the data should be written
 * @param data: 8bit data which should be written to the register
 */
void write_i2c_single(uint8_t cmd, uint8_t data){
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	0002      	movs	r2, r0
 8002c1c:	1dfb      	adds	r3, r7, #7
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	1dbb      	adds	r3, r7, #6
 8002c22:	1c0a      	adds	r2, r1, #0
 8002c24:	701a      	strb	r2, [r3, #0]
	uint8_t data_t[2];
	data_t[0] = cmd;
 8002c26:	210c      	movs	r1, #12
 8002c28:	187b      	adds	r3, r7, r1
 8002c2a:	1dfa      	adds	r2, r7, #7
 8002c2c:	7812      	ldrb	r2, [r2, #0]
 8002c2e:	701a      	strb	r2, [r3, #0]
	data_t[1] = data;
 8002c30:	187b      	adds	r3, r7, r1
 8002c32:	1dba      	adds	r2, r7, #6
 8002c34:	7812      	ldrb	r2, [r2, #0]
 8002c36:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_MASTER_ADDRESS, (uint8_t *)data_t, 2, 100);
 8002c38:	187a      	adds	r2, r7, r1
 8002c3a:	4805      	ldr	r0, [pc, #20]	; (8002c50 <_Z16write_i2c_singlehh+0x3c>)
 8002c3c:	2364      	movs	r3, #100	; 0x64
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	2302      	movs	r3, #2
 8002c42:	21d1      	movs	r1, #209	; 0xd1
 8002c44:	f000 fde2 	bl	800380c <HAL_I2C_Master_Transmit>
}
 8002c48:	46c0      	nop			; (mov r8, r8)
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b004      	add	sp, #16
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000050 	.word	0x20000050

08002c54 <_Z15read_i2c_singleh>:
/**
 * @brief function to read one byte of data from specified register
 * @param cmd address which content should be read
 * @return data which is read from the specified register
 */
uint8_t read_i2c_single(uint8_t cmd){
 8002c54:	b590      	push	{r4, r7, lr}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	1dfb      	adds	r3, r7, #7
 8002c5e:	701a      	strb	r2, [r3, #0]
	uint8_t data_t[1];
	data_t[0] = cmd;
 8002c60:	210c      	movs	r1, #12
 8002c62:	187b      	adds	r3, r7, r1
 8002c64:	1dfa      	adds	r2, r7, #7
 8002c66:	7812      	ldrb	r2, [r2, #0]
 8002c68:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_MASTER_ADDRESS, (uint8_t *)data_t, 1, 10);
 8002c6a:	000c      	movs	r4, r1
 8002c6c:	193a      	adds	r2, r7, r4
 8002c6e:	480a      	ldr	r0, [pc, #40]	; (8002c98 <_Z15read_i2c_singleh+0x44>)
 8002c70:	230a      	movs	r3, #10
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	2301      	movs	r3, #1
 8002c76:	21d1      	movs	r1, #209	; 0xd1
 8002c78:	f000 fdc8 	bl	800380c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, DS3231_SLAVE_ADDRESS, (uint8_t *)data_t, 1, 10);
 8002c7c:	193a      	adds	r2, r7, r4
 8002c7e:	4806      	ldr	r0, [pc, #24]	; (8002c98 <_Z15read_i2c_singleh+0x44>)
 8002c80:	230a      	movs	r3, #10
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	2301      	movs	r3, #1
 8002c86:	21d0      	movs	r1, #208	; 0xd0
 8002c88:	f000 fec8 	bl	8003a1c <HAL_I2C_Master_Receive>
	return data_t[0];
 8002c8c:	193b      	adds	r3, r7, r4
 8002c8e:	781b      	ldrb	r3, [r3, #0]
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b005      	add	sp, #20
 8002c96:	bd90      	pop	{r4, r7, pc}
 8002c98:	20000050 	.word	0x20000050

08002c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002c9c:	480d      	ldr	r0, [pc, #52]	; (8002cd4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002c9e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ca0:	f7ff fb64 	bl	800236c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ca4:	480c      	ldr	r0, [pc, #48]	; (8002cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ca6:	490d      	ldr	r1, [pc, #52]	; (8002cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ca8:	4a0d      	ldr	r2, [pc, #52]	; (8002ce0 <LoopForever+0xe>)
  movs r3, #0
 8002caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cac:	e002      	b.n	8002cb4 <LoopCopyDataInit>

08002cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cb2:	3304      	adds	r3, #4

08002cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb8:	d3f9      	bcc.n	8002cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cba:	4a0a      	ldr	r2, [pc, #40]	; (8002ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cbc:	4c0a      	ldr	r4, [pc, #40]	; (8002ce8 <LoopForever+0x16>)
  movs r3, #0
 8002cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc0:	e001      	b.n	8002cc6 <LoopFillZerobss>

08002cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc4:	3204      	adds	r2, #4

08002cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc8:	d3fb      	bcc.n	8002cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cca:	f003 fe65 	bl	8006998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cce:	f7fe f8c5 	bl	8000e5c <main>

08002cd2 <LoopForever>:

LoopForever:
    b LoopForever
 8002cd2:	e7fe      	b.n	8002cd2 <LoopForever>
   ldr   r0, =_estack
 8002cd4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cdc:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8002ce0:	08006a4c 	.word	0x08006a4c
  ldr r2, =_sbss
 8002ce4:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8002ce8:	200003f0 	.word	0x200003f0

08002cec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cec:	e7fe      	b.n	8002cec <ADC1_COMP_IRQHandler>
	...

08002cf0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cf6:	1dfb      	adds	r3, r7, #7
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_Init+0x3c>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <HAL_Init+0x3c>)
 8002d02:	2140      	movs	r1, #64	; 0x40
 8002d04:	430a      	orrs	r2, r1
 8002d06:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d08:	2003      	movs	r0, #3
 8002d0a:	f000 f811 	bl	8002d30 <HAL_InitTick>
 8002d0e:	1e03      	subs	r3, r0, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002d12:	1dfb      	adds	r3, r7, #7
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
 8002d18:	e001      	b.n	8002d1e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d1a:	f7ff fae1 	bl	80022e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d1e:	1dfb      	adds	r3, r7, #7
 8002d20:	781b      	ldrb	r3, [r3, #0]
}
 8002d22:	0018      	movs	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b002      	add	sp, #8
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	40022000 	.word	0x40022000

08002d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d38:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <HAL_InitTick+0x5c>)
 8002d3a:	681c      	ldr	r4, [r3, #0]
 8002d3c:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <HAL_InitTick+0x60>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	0019      	movs	r1, r3
 8002d42:	23fa      	movs	r3, #250	; 0xfa
 8002d44:	0098      	lsls	r0, r3, #2
 8002d46:	f7fd f9df 	bl	8000108 <__udivsi3>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	0019      	movs	r1, r3
 8002d4e:	0020      	movs	r0, r4
 8002d50:	f7fd f9da 	bl	8000108 <__udivsi3>
 8002d54:	0003      	movs	r3, r0
 8002d56:	0018      	movs	r0, r3
 8002d58:	f000 f90b 	bl	8002f72 <HAL_SYSTICK_Config>
 8002d5c:	1e03      	subs	r3, r0, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e00f      	b.n	8002d84 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d80b      	bhi.n	8002d82 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	425b      	negs	r3, r3
 8002d70:	2200      	movs	r2, #0
 8002d72:	0018      	movs	r0, r3
 8002d74:	f000 f8d8 	bl	8002f28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d78:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <HAL_InitTick+0x64>)
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	e000      	b.n	8002d84 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
}
 8002d84:	0018      	movs	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b003      	add	sp, #12
 8002d8a:	bd90      	pop	{r4, r7, pc}
 8002d8c:	20000010 	.word	0x20000010
 8002d90:	20000030 	.word	0x20000030
 8002d94:	2000002c 	.word	0x2000002c

08002d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_IncTick+0x1c>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	001a      	movs	r2, r3
 8002da2:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_IncTick+0x20>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	18d2      	adds	r2, r2, r3
 8002da8:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <HAL_IncTick+0x20>)
 8002daa:	601a      	str	r2, [r3, #0]
}
 8002dac:	46c0      	nop			; (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	20000030 	.word	0x20000030
 8002db8:	200003ec 	.word	0x200003ec

08002dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc0:	4b02      	ldr	r3, [pc, #8]	; (8002dcc <HAL_GetTick+0x10>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
}
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	200003ec 	.word	0x200003ec

08002dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	1dfb      	adds	r3, r7, #7
 8002dda:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ddc:	1dfb      	adds	r3, r7, #7
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b7f      	cmp	r3, #127	; 0x7f
 8002de2:	d809      	bhi.n	8002df8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002de4:	1dfb      	adds	r3, r7, #7
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	001a      	movs	r2, r3
 8002dea:	231f      	movs	r3, #31
 8002dec:	401a      	ands	r2, r3
 8002dee:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <__NVIC_EnableIRQ+0x30>)
 8002df0:	2101      	movs	r1, #1
 8002df2:	4091      	lsls	r1, r2
 8002df4:	000a      	movs	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]
  }
}
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b002      	add	sp, #8
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	e000e100 	.word	0xe000e100

08002e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	6039      	str	r1, [r7, #0]
 8002e0e:	1dfb      	adds	r3, r7, #7
 8002e10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e12:	1dfb      	adds	r3, r7, #7
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b7f      	cmp	r3, #127	; 0x7f
 8002e18:	d828      	bhi.n	8002e6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e1a:	4a2f      	ldr	r2, [pc, #188]	; (8002ed8 <__NVIC_SetPriority+0xd4>)
 8002e1c:	1dfb      	adds	r3, r7, #7
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b25b      	sxtb	r3, r3
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	33c0      	adds	r3, #192	; 0xc0
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	589b      	ldr	r3, [r3, r2]
 8002e2a:	1dfa      	adds	r2, r7, #7
 8002e2c:	7812      	ldrb	r2, [r2, #0]
 8002e2e:	0011      	movs	r1, r2
 8002e30:	2203      	movs	r2, #3
 8002e32:	400a      	ands	r2, r1
 8002e34:	00d2      	lsls	r2, r2, #3
 8002e36:	21ff      	movs	r1, #255	; 0xff
 8002e38:	4091      	lsls	r1, r2
 8002e3a:	000a      	movs	r2, r1
 8002e3c:	43d2      	mvns	r2, r2
 8002e3e:	401a      	ands	r2, r3
 8002e40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	019b      	lsls	r3, r3, #6
 8002e46:	22ff      	movs	r2, #255	; 0xff
 8002e48:	401a      	ands	r2, r3
 8002e4a:	1dfb      	adds	r3, r7, #7
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	0018      	movs	r0, r3
 8002e50:	2303      	movs	r3, #3
 8002e52:	4003      	ands	r3, r0
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e58:	481f      	ldr	r0, [pc, #124]	; (8002ed8 <__NVIC_SetPriority+0xd4>)
 8002e5a:	1dfb      	adds	r3, r7, #7
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	b25b      	sxtb	r3, r3
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	430a      	orrs	r2, r1
 8002e64:	33c0      	adds	r3, #192	; 0xc0
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002e6a:	e031      	b.n	8002ed0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e6c:	4a1b      	ldr	r2, [pc, #108]	; (8002edc <__NVIC_SetPriority+0xd8>)
 8002e6e:	1dfb      	adds	r3, r7, #7
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	0019      	movs	r1, r3
 8002e74:	230f      	movs	r3, #15
 8002e76:	400b      	ands	r3, r1
 8002e78:	3b08      	subs	r3, #8
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	3306      	adds	r3, #6
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	18d3      	adds	r3, r2, r3
 8002e82:	3304      	adds	r3, #4
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	1dfa      	adds	r2, r7, #7
 8002e88:	7812      	ldrb	r2, [r2, #0]
 8002e8a:	0011      	movs	r1, r2
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	400a      	ands	r2, r1
 8002e90:	00d2      	lsls	r2, r2, #3
 8002e92:	21ff      	movs	r1, #255	; 0xff
 8002e94:	4091      	lsls	r1, r2
 8002e96:	000a      	movs	r2, r1
 8002e98:	43d2      	mvns	r2, r2
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	019b      	lsls	r3, r3, #6
 8002ea2:	22ff      	movs	r2, #255	; 0xff
 8002ea4:	401a      	ands	r2, r3
 8002ea6:	1dfb      	adds	r3, r7, #7
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	0018      	movs	r0, r3
 8002eac:	2303      	movs	r3, #3
 8002eae:	4003      	ands	r3, r0
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eb4:	4809      	ldr	r0, [pc, #36]	; (8002edc <__NVIC_SetPriority+0xd8>)
 8002eb6:	1dfb      	adds	r3, r7, #7
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	001c      	movs	r4, r3
 8002ebc:	230f      	movs	r3, #15
 8002ebe:	4023      	ands	r3, r4
 8002ec0:	3b08      	subs	r3, #8
 8002ec2:	089b      	lsrs	r3, r3, #2
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	3306      	adds	r3, #6
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	18c3      	adds	r3, r0, r3
 8002ecc:	3304      	adds	r3, #4
 8002ece:	601a      	str	r2, [r3, #0]
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b003      	add	sp, #12
 8002ed6:	bd90      	pop	{r4, r7, pc}
 8002ed8:	e000e100 	.word	0xe000e100
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	1e5a      	subs	r2, r3, #1
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	045b      	lsls	r3, r3, #17
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d301      	bcc.n	8002ef8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e010      	b.n	8002f1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef8:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <SysTick_Config+0x44>)
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	3a01      	subs	r2, #1
 8002efe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f00:	2301      	movs	r3, #1
 8002f02:	425b      	negs	r3, r3
 8002f04:	2103      	movs	r1, #3
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7ff ff7c 	bl	8002e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <SysTick_Config+0x44>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f12:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <SysTick_Config+0x44>)
 8002f14:	2207      	movs	r2, #7
 8002f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	b002      	add	sp, #8
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	e000e010 	.word	0xe000e010

08002f28 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	210f      	movs	r1, #15
 8002f34:	187b      	adds	r3, r7, r1
 8002f36:	1c02      	adds	r2, r0, #0
 8002f38:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	187b      	adds	r3, r7, r1
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	b25b      	sxtb	r3, r3
 8002f42:	0011      	movs	r1, r2
 8002f44:	0018      	movs	r0, r3
 8002f46:	f7ff ff5d 	bl	8002e04 <__NVIC_SetPriority>
}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b004      	add	sp, #16
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	0002      	movs	r2, r0
 8002f5a:	1dfb      	adds	r3, r7, #7
 8002f5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f5e:	1dfb      	adds	r3, r7, #7
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	b25b      	sxtb	r3, r3
 8002f64:	0018      	movs	r0, r3
 8002f66:	f7ff ff33 	bl	8002dd0 <__NVIC_EnableIRQ>
}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	b002      	add	sp, #8
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f7ff ffaf 	bl	8002ee0 <SysTick_Config>
 8002f82:	0003      	movs	r3, r0
}
 8002f84:	0018      	movs	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b002      	add	sp, #8
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e061      	b.n	8003062 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a32      	ldr	r2, [pc, #200]	; (800306c <HAL_DMA_Init+0xe0>)
 8002fa4:	4694      	mov	ip, r2
 8002fa6:	4463      	add	r3, ip
 8002fa8:	2114      	movs	r1, #20
 8002faa:	0018      	movs	r0, r3
 8002fac:	f7fd f8ac 	bl	8000108 <__udivsi3>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	009a      	lsls	r2, r3, #2
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a2d      	ldr	r2, [pc, #180]	; (8003070 <HAL_DMA_Init+0xe4>)
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2225      	movs	r2, #37	; 0x25
 8002fc2:	2102      	movs	r1, #2
 8002fc4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4a28      	ldr	r2, [pc, #160]	; (8003074 <HAL_DMA_Init+0xe8>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	01db      	lsls	r3, r3, #7
 8003014:	429a      	cmp	r2, r3
 8003016:	d018      	beq.n	800304a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003018:	4b17      	ldr	r3, [pc, #92]	; (8003078 <HAL_DMA_Init+0xec>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003020:	211c      	movs	r1, #28
 8003022:	400b      	ands	r3, r1
 8003024:	210f      	movs	r1, #15
 8003026:	4099      	lsls	r1, r3
 8003028:	000b      	movs	r3, r1
 800302a:	43d9      	mvns	r1, r3
 800302c:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_DMA_Init+0xec>)
 800302e:	400a      	ands	r2, r1
 8003030:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003032:	4b11      	ldr	r3, [pc, #68]	; (8003078 <HAL_DMA_Init+0xec>)
 8003034:	6819      	ldr	r1, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	201c      	movs	r0, #28
 8003040:	4003      	ands	r3, r0
 8003042:	409a      	lsls	r2, r3
 8003044:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <HAL_DMA_Init+0xec>)
 8003046:	430a      	orrs	r2, r1
 8003048:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2225      	movs	r2, #37	; 0x25
 8003054:	2101      	movs	r1, #1
 8003056:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2224      	movs	r2, #36	; 0x24
 800305c:	2100      	movs	r1, #0
 800305e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	0018      	movs	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	b004      	add	sp, #16
 8003068:	bd80      	pop	{r7, pc}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	bffdfff8 	.word	0xbffdfff8
 8003070:	40020000 	.word	0x40020000
 8003074:	ffff800f 	.word	0xffff800f
 8003078:	400200a8 	.word	0x400200a8

0800307c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800308a:	2317      	movs	r3, #23
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2224      	movs	r2, #36	; 0x24
 8003096:	5c9b      	ldrb	r3, [r3, r2]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_DMA_Start_IT+0x24>
 800309c:	2302      	movs	r3, #2
 800309e:	e04f      	b.n	8003140 <HAL_DMA_Start_IT+0xc4>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2224      	movs	r2, #36	; 0x24
 80030a4:	2101      	movs	r1, #1
 80030a6:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2225      	movs	r2, #37	; 0x25
 80030ac:	5c9b      	ldrb	r3, [r3, r2]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d13a      	bne.n	800312a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2225      	movs	r2, #37	; 0x25
 80030b8:	2102      	movs	r1, #2
 80030ba:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2101      	movs	r1, #1
 80030ce:	438a      	bics	r2, r1
 80030d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f92a 	bl	8003332 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d008      	beq.n	80030f8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	210e      	movs	r1, #14
 80030f2:	430a      	orrs	r2, r1
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	e00f      	b.n	8003118 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2104      	movs	r1, #4
 8003104:	438a      	bics	r2, r1
 8003106:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	210a      	movs	r1, #10
 8003114:	430a      	orrs	r2, r1
 8003116:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2101      	movs	r1, #1
 8003124:	430a      	orrs	r2, r1
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	e007      	b.n	800313a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2224      	movs	r2, #36	; 0x24
 800312e:	2100      	movs	r1, #0
 8003130:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003132:	2317      	movs	r3, #23
 8003134:	18fb      	adds	r3, r7, r3
 8003136:	2202      	movs	r2, #2
 8003138:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800313a:	2317      	movs	r3, #23
 800313c:	18fb      	adds	r3, r7, r3
 800313e:	781b      	ldrb	r3, [r3, #0]
}
 8003140:	0018      	movs	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	b006      	add	sp, #24
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003150:	210f      	movs	r1, #15
 8003152:	187b      	adds	r3, r7, r1
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2225      	movs	r2, #37	; 0x25
 800315c:	5c9b      	ldrb	r3, [r3, r2]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d006      	beq.n	8003172 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2204      	movs	r2, #4
 8003168:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800316a:	187b      	adds	r3, r7, r1
 800316c:	2201      	movs	r2, #1
 800316e:	701a      	strb	r2, [r3, #0]
 8003170:	e02a      	b.n	80031c8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	210e      	movs	r1, #14
 800317e:	438a      	bics	r2, r1
 8003180:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2101      	movs	r1, #1
 800318e:	438a      	bics	r2, r1
 8003190:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	221c      	movs	r2, #28
 8003198:	401a      	ands	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	2101      	movs	r1, #1
 80031a0:	4091      	lsls	r1, r2
 80031a2:	000a      	movs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2225      	movs	r2, #37	; 0x25
 80031aa:	2101      	movs	r1, #1
 80031ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2224      	movs	r2, #36	; 0x24
 80031b2:	2100      	movs	r1, #0
 80031b4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d004      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	0010      	movs	r0, r2
 80031c6:	4798      	blx	r3
    }
  }
  return status;
 80031c8:	230f      	movs	r3, #15
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	781b      	ldrb	r3, [r3, #0]
}
 80031ce:	0018      	movs	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b004      	add	sp, #16
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	221c      	movs	r2, #28
 80031f4:	4013      	ands	r3, r2
 80031f6:	2204      	movs	r2, #4
 80031f8:	409a      	lsls	r2, r3
 80031fa:	0013      	movs	r3, r2
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4013      	ands	r3, r2
 8003200:	d026      	beq.n	8003250 <HAL_DMA_IRQHandler+0x7a>
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2204      	movs	r2, #4
 8003206:	4013      	ands	r3, r2
 8003208:	d022      	beq.n	8003250 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2220      	movs	r2, #32
 8003212:	4013      	ands	r3, r2
 8003214:	d107      	bne.n	8003226 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2104      	movs	r1, #4
 8003222:	438a      	bics	r2, r1
 8003224:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	221c      	movs	r2, #28
 800322c:	401a      	ands	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	2104      	movs	r1, #4
 8003234:	4091      	lsls	r1, r2
 8003236:	000a      	movs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	2b00      	cmp	r3, #0
 8003240:	d100      	bne.n	8003244 <HAL_DMA_IRQHandler+0x6e>
 8003242:	e071      	b.n	8003328 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	0010      	movs	r0, r2
 800324c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800324e:	e06b      	b.n	8003328 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003254:	221c      	movs	r2, #28
 8003256:	4013      	ands	r3, r2
 8003258:	2202      	movs	r2, #2
 800325a:	409a      	lsls	r2, r3
 800325c:	0013      	movs	r3, r2
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4013      	ands	r3, r2
 8003262:	d02d      	beq.n	80032c0 <HAL_DMA_IRQHandler+0xea>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2202      	movs	r2, #2
 8003268:	4013      	ands	r3, r2
 800326a:	d029      	beq.n	80032c0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2220      	movs	r2, #32
 8003274:	4013      	ands	r3, r2
 8003276:	d10b      	bne.n	8003290 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	210a      	movs	r1, #10
 8003284:	438a      	bics	r2, r1
 8003286:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2225      	movs	r2, #37	; 0x25
 800328c:	2101      	movs	r1, #1
 800328e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003294:	221c      	movs	r2, #28
 8003296:	401a      	ands	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	2102      	movs	r1, #2
 800329e:	4091      	lsls	r1, r2
 80032a0:	000a      	movs	r2, r1
 80032a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2224      	movs	r2, #36	; 0x24
 80032a8:	2100      	movs	r1, #0
 80032aa:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d039      	beq.n	8003328 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	0010      	movs	r0, r2
 80032bc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80032be:	e033      	b.n	8003328 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c4:	221c      	movs	r2, #28
 80032c6:	4013      	ands	r3, r2
 80032c8:	2208      	movs	r2, #8
 80032ca:	409a      	lsls	r2, r3
 80032cc:	0013      	movs	r3, r2
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4013      	ands	r3, r2
 80032d2:	d02a      	beq.n	800332a <HAL_DMA_IRQHandler+0x154>
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2208      	movs	r2, #8
 80032d8:	4013      	ands	r3, r2
 80032da:	d026      	beq.n	800332a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	210e      	movs	r1, #14
 80032e8:	438a      	bics	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f0:	221c      	movs	r2, #28
 80032f2:	401a      	ands	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	2101      	movs	r1, #1
 80032fa:	4091      	lsls	r1, r2
 80032fc:	000a      	movs	r2, r1
 80032fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2225      	movs	r2, #37	; 0x25
 800330a:	2101      	movs	r1, #1
 800330c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2224      	movs	r2, #36	; 0x24
 8003312:	2100      	movs	r1, #0
 8003314:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	0010      	movs	r0, r2
 8003326:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003328:	46c0      	nop			; (mov r8, r8)
 800332a:	46c0      	nop			; (mov r8, r8)
}
 800332c:	46bd      	mov	sp, r7
 800332e:	b004      	add	sp, #16
 8003330:	bd80      	pop	{r7, pc}

08003332 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003344:	221c      	movs	r2, #28
 8003346:	401a      	ands	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	2101      	movs	r1, #1
 800334e:	4091      	lsls	r1, r2
 8003350:	000a      	movs	r2, r1
 8003352:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b10      	cmp	r3, #16
 8003362:	d108      	bne.n	8003376 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003374:	e007      	b.n	8003386 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	60da      	str	r2, [r3, #12]
}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	46bd      	mov	sp, r7
 800338a:	b004      	add	sp, #16
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80033a6:	e149      	b.n	800363c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2101      	movs	r1, #1
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4091      	lsls	r1, r2
 80033b2:	000a      	movs	r2, r1
 80033b4:	4013      	ands	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d100      	bne.n	80033c0 <HAL_GPIO_Init+0x30>
 80033be:	e13a      	b.n	8003636 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2203      	movs	r2, #3
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d005      	beq.n	80033d8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2203      	movs	r2, #3
 80033d2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d130      	bne.n	800343a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	2203      	movs	r2, #3
 80033e4:	409a      	lsls	r2, r3
 80033e6:	0013      	movs	r3, r2
 80033e8:	43da      	mvns	r2, r3
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4013      	ands	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	409a      	lsls	r2, r3
 80033fa:	0013      	movs	r3, r2
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800340e:	2201      	movs	r2, #1
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	409a      	lsls	r2, r3
 8003414:	0013      	movs	r3, r2
 8003416:	43da      	mvns	r2, r3
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4013      	ands	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	2201      	movs	r2, #1
 8003426:	401a      	ands	r2, r3
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	409a      	lsls	r2, r3
 800342c:	0013      	movs	r3, r2
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2203      	movs	r2, #3
 8003440:	4013      	ands	r3, r2
 8003442:	2b03      	cmp	r3, #3
 8003444:	d017      	beq.n	8003476 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	2203      	movs	r2, #3
 8003452:	409a      	lsls	r2, r3
 8003454:	0013      	movs	r3, r2
 8003456:	43da      	mvns	r2, r3
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	4013      	ands	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	409a      	lsls	r2, r3
 8003468:	0013      	movs	r3, r2
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2203      	movs	r2, #3
 800347c:	4013      	ands	r3, r2
 800347e:	2b02      	cmp	r3, #2
 8003480:	d123      	bne.n	80034ca <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	08da      	lsrs	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3208      	adds	r2, #8
 800348a:	0092      	lsls	r2, r2, #2
 800348c:	58d3      	ldr	r3, [r2, r3]
 800348e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2207      	movs	r2, #7
 8003494:	4013      	ands	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	220f      	movs	r2, #15
 800349a:	409a      	lsls	r2, r3
 800349c:	0013      	movs	r3, r2
 800349e:	43da      	mvns	r2, r3
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	4013      	ands	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2107      	movs	r1, #7
 80034ae:	400b      	ands	r3, r1
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	409a      	lsls	r2, r3
 80034b4:	0013      	movs	r3, r2
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	08da      	lsrs	r2, r3, #3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3208      	adds	r2, #8
 80034c4:	0092      	lsls	r2, r2, #2
 80034c6:	6939      	ldr	r1, [r7, #16]
 80034c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	2203      	movs	r2, #3
 80034d6:	409a      	lsls	r2, r3
 80034d8:	0013      	movs	r3, r2
 80034da:	43da      	mvns	r2, r3
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4013      	ands	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2203      	movs	r2, #3
 80034e8:	401a      	ands	r2, r3
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	409a      	lsls	r2, r3
 80034f0:	0013      	movs	r3, r2
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	23c0      	movs	r3, #192	; 0xc0
 8003504:	029b      	lsls	r3, r3, #10
 8003506:	4013      	ands	r3, r2
 8003508:	d100      	bne.n	800350c <HAL_GPIO_Init+0x17c>
 800350a:	e094      	b.n	8003636 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800350c:	4b51      	ldr	r3, [pc, #324]	; (8003654 <HAL_GPIO_Init+0x2c4>)
 800350e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003510:	4b50      	ldr	r3, [pc, #320]	; (8003654 <HAL_GPIO_Init+0x2c4>)
 8003512:	2101      	movs	r1, #1
 8003514:	430a      	orrs	r2, r1
 8003516:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003518:	4a4f      	ldr	r2, [pc, #316]	; (8003658 <HAL_GPIO_Init+0x2c8>)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	089b      	lsrs	r3, r3, #2
 800351e:	3302      	adds	r3, #2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	589b      	ldr	r3, [r3, r2]
 8003524:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2203      	movs	r2, #3
 800352a:	4013      	ands	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	220f      	movs	r2, #15
 8003530:	409a      	lsls	r2, r3
 8003532:	0013      	movs	r3, r2
 8003534:	43da      	mvns	r2, r3
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4013      	ands	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	23a0      	movs	r3, #160	; 0xa0
 8003540:	05db      	lsls	r3, r3, #23
 8003542:	429a      	cmp	r2, r3
 8003544:	d013      	beq.n	800356e <HAL_GPIO_Init+0x1de>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a44      	ldr	r2, [pc, #272]	; (800365c <HAL_GPIO_Init+0x2cc>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00d      	beq.n	800356a <HAL_GPIO_Init+0x1da>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a43      	ldr	r2, [pc, #268]	; (8003660 <HAL_GPIO_Init+0x2d0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d007      	beq.n	8003566 <HAL_GPIO_Init+0x1d6>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a42      	ldr	r2, [pc, #264]	; (8003664 <HAL_GPIO_Init+0x2d4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d101      	bne.n	8003562 <HAL_GPIO_Init+0x1d2>
 800355e:	2305      	movs	r3, #5
 8003560:	e006      	b.n	8003570 <HAL_GPIO_Init+0x1e0>
 8003562:	2306      	movs	r3, #6
 8003564:	e004      	b.n	8003570 <HAL_GPIO_Init+0x1e0>
 8003566:	2302      	movs	r3, #2
 8003568:	e002      	b.n	8003570 <HAL_GPIO_Init+0x1e0>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <HAL_GPIO_Init+0x1e0>
 800356e:	2300      	movs	r3, #0
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	2103      	movs	r1, #3
 8003574:	400a      	ands	r2, r1
 8003576:	0092      	lsls	r2, r2, #2
 8003578:	4093      	lsls	r3, r2
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003580:	4935      	ldr	r1, [pc, #212]	; (8003658 <HAL_GPIO_Init+0x2c8>)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	3302      	adds	r3, #2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800358e:	4b36      	ldr	r3, [pc, #216]	; (8003668 <HAL_GPIO_Init+0x2d8>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	43da      	mvns	r2, r3
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4013      	ands	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	035b      	lsls	r3, r3, #13
 80035a6:	4013      	ands	r3, r2
 80035a8:	d003      	beq.n	80035b2 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80035b2:	4b2d      	ldr	r3, [pc, #180]	; (8003668 <HAL_GPIO_Init+0x2d8>)
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80035b8:	4b2b      	ldr	r3, [pc, #172]	; (8003668 <HAL_GPIO_Init+0x2d8>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	43da      	mvns	r2, r3
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4013      	ands	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	039b      	lsls	r3, r3, #14
 80035d0:	4013      	ands	r3, r2
 80035d2:	d003      	beq.n	80035dc <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80035dc:	4b22      	ldr	r3, [pc, #136]	; (8003668 <HAL_GPIO_Init+0x2d8>)
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80035e2:	4b21      	ldr	r3, [pc, #132]	; (8003668 <HAL_GPIO_Init+0x2d8>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	43da      	mvns	r2, r3
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4013      	ands	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	029b      	lsls	r3, r3, #10
 80035fa:	4013      	ands	r3, r2
 80035fc:	d003      	beq.n	8003606 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003606:	4b18      	ldr	r3, [pc, #96]	; (8003668 <HAL_GPIO_Init+0x2d8>)
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800360c:	4b16      	ldr	r3, [pc, #88]	; (8003668 <HAL_GPIO_Init+0x2d8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	43da      	mvns	r2, r3
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	2380      	movs	r3, #128	; 0x80
 8003622:	025b      	lsls	r3, r3, #9
 8003624:	4013      	ands	r3, r2
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003630:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <HAL_GPIO_Init+0x2d8>)
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	3301      	adds	r3, #1
 800363a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	40da      	lsrs	r2, r3
 8003644:	1e13      	subs	r3, r2, #0
 8003646:	d000      	beq.n	800364a <HAL_GPIO_Init+0x2ba>
 8003648:	e6ae      	b.n	80033a8 <HAL_GPIO_Init+0x18>
  }
}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	46c0      	nop			; (mov r8, r8)
 800364e:	46bd      	mov	sp, r7
 8003650:	b006      	add	sp, #24
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40021000 	.word	0x40021000
 8003658:	40010000 	.word	0x40010000
 800365c:	50000400 	.word	0x50000400
 8003660:	50000800 	.word	0x50000800
 8003664:	50001c00 	.word	0x50001c00
 8003668:	40010400 	.word	0x40010400

0800366c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	000a      	movs	r2, r1
 8003676:	1cbb      	adds	r3, r7, #2
 8003678:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	1cba      	adds	r2, r7, #2
 8003680:	8812      	ldrh	r2, [r2, #0]
 8003682:	4013      	ands	r3, r2
 8003684:	d004      	beq.n	8003690 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003686:	230f      	movs	r3, #15
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	e003      	b.n	8003698 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003690:	230f      	movs	r3, #15
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003698:	230f      	movs	r3, #15
 800369a:	18fb      	adds	r3, r7, r3
 800369c:	781b      	ldrb	r3, [r3, #0]
}
 800369e:	0018      	movs	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b004      	add	sp, #16
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	0008      	movs	r0, r1
 80036b0:	0011      	movs	r1, r2
 80036b2:	1cbb      	adds	r3, r7, #2
 80036b4:	1c02      	adds	r2, r0, #0
 80036b6:	801a      	strh	r2, [r3, #0]
 80036b8:	1c7b      	adds	r3, r7, #1
 80036ba:	1c0a      	adds	r2, r1, #0
 80036bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036be:	1c7b      	adds	r3, r7, #1
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d004      	beq.n	80036d0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036c6:	1cbb      	adds	r3, r7, #2
 80036c8:	881a      	ldrh	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80036ce:	e003      	b.n	80036d8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80036d0:	1cbb      	adds	r3, r7, #2
 80036d2:	881a      	ldrh	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	b002      	add	sp, #8
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e082      	b.n	80037f8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2241      	movs	r2, #65	; 0x41
 80036f6:	5c9b      	ldrb	r3, [r3, r2]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d107      	bne.n	800370e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2240      	movs	r2, #64	; 0x40
 8003702:	2100      	movs	r1, #0
 8003704:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	0018      	movs	r0, r3
 800370a:	f7fd f883 	bl	8000814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2241      	movs	r2, #65	; 0x41
 8003712:	2124      	movs	r1, #36	; 0x24
 8003714:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2101      	movs	r1, #1
 8003722:	438a      	bics	r2, r1
 8003724:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4934      	ldr	r1, [pc, #208]	; (8003800 <HAL_I2C_Init+0x120>)
 8003730:	400a      	ands	r2, r1
 8003732:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4931      	ldr	r1, [pc, #196]	; (8003804 <HAL_I2C_Init+0x124>)
 8003740:	400a      	ands	r2, r1
 8003742:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d108      	bne.n	800375e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2180      	movs	r1, #128	; 0x80
 8003756:	0209      	lsls	r1, r1, #8
 8003758:	430a      	orrs	r2, r1
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	e007      	b.n	800376e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2184      	movs	r1, #132	; 0x84
 8003768:	0209      	lsls	r1, r1, #8
 800376a:	430a      	orrs	r2, r1
 800376c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d104      	bne.n	8003780 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2280      	movs	r2, #128	; 0x80
 800377c:	0112      	lsls	r2, r2, #4
 800377e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	491f      	ldr	r1, [pc, #124]	; (8003808 <HAL_I2C_Init+0x128>)
 800378c:	430a      	orrs	r2, r1
 800378e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	491a      	ldr	r1, [pc, #104]	; (8003804 <HAL_I2C_Init+0x124>)
 800379c:	400a      	ands	r2, r1
 800379e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	431a      	orrs	r2, r3
 80037aa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69d9      	ldr	r1, [r3, #28]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1a      	ldr	r2, [r3, #32]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2101      	movs	r1, #1
 80037d6:	430a      	orrs	r2, r1
 80037d8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2241      	movs	r2, #65	; 0x41
 80037e4:	2120      	movs	r1, #32
 80037e6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2242      	movs	r2, #66	; 0x42
 80037f2:	2100      	movs	r1, #0
 80037f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	0018      	movs	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b002      	add	sp, #8
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	f0ffffff 	.word	0xf0ffffff
 8003804:	ffff7fff 	.word	0xffff7fff
 8003808:	02008000 	.word	0x02008000

0800380c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b089      	sub	sp, #36	; 0x24
 8003810:	af02      	add	r7, sp, #8
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	0008      	movs	r0, r1
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	0019      	movs	r1, r3
 800381a:	230a      	movs	r3, #10
 800381c:	18fb      	adds	r3, r7, r3
 800381e:	1c02      	adds	r2, r0, #0
 8003820:	801a      	strh	r2, [r3, #0]
 8003822:	2308      	movs	r3, #8
 8003824:	18fb      	adds	r3, r7, r3
 8003826:	1c0a      	adds	r2, r1, #0
 8003828:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2241      	movs	r2, #65	; 0x41
 800382e:	5c9b      	ldrb	r3, [r3, r2]
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b20      	cmp	r3, #32
 8003834:	d000      	beq.n	8003838 <HAL_I2C_Master_Transmit+0x2c>
 8003836:	e0e7      	b.n	8003a08 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2240      	movs	r2, #64	; 0x40
 800383c:	5c9b      	ldrb	r3, [r3, r2]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_I2C_Master_Transmit+0x3a>
 8003842:	2302      	movs	r3, #2
 8003844:	e0e1      	b.n	8003a0a <HAL_I2C_Master_Transmit+0x1fe>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2240      	movs	r2, #64	; 0x40
 800384a:	2101      	movs	r1, #1
 800384c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800384e:	f7ff fab5 	bl	8002dbc <HAL_GetTick>
 8003852:	0003      	movs	r3, r0
 8003854:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	0219      	lsls	r1, r3, #8
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	2319      	movs	r3, #25
 8003862:	2201      	movs	r2, #1
 8003864:	f000 fa04 	bl	8003c70 <I2C_WaitOnFlagUntilTimeout>
 8003868:	1e03      	subs	r3, r0, #0
 800386a:	d001      	beq.n	8003870 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e0cc      	b.n	8003a0a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2241      	movs	r2, #65	; 0x41
 8003874:	2121      	movs	r1, #33	; 0x21
 8003876:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2242      	movs	r2, #66	; 0x42
 800387c:	2110      	movs	r1, #16
 800387e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2208      	movs	r2, #8
 8003890:	18ba      	adds	r2, r7, r2
 8003892:	8812      	ldrh	r2, [r2, #0]
 8003894:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2bff      	cmp	r3, #255	; 0xff
 80038a4:	d911      	bls.n	80038ca <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	22ff      	movs	r2, #255	; 0xff
 80038aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	2380      	movs	r3, #128	; 0x80
 80038b4:	045c      	lsls	r4, r3, #17
 80038b6:	230a      	movs	r3, #10
 80038b8:	18fb      	adds	r3, r7, r3
 80038ba:	8819      	ldrh	r1, [r3, #0]
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	4b55      	ldr	r3, [pc, #340]	; (8003a14 <HAL_I2C_Master_Transmit+0x208>)
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	0023      	movs	r3, r4
 80038c4:	f000 fc2e 	bl	8004124 <I2C_TransferConfig>
 80038c8:	e075      	b.n	80039b6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	049c      	lsls	r4, r3, #18
 80038de:	230a      	movs	r3, #10
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	8819      	ldrh	r1, [r3, #0]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	4b4b      	ldr	r3, [pc, #300]	; (8003a14 <HAL_I2C_Master_Transmit+0x208>)
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	0023      	movs	r3, r4
 80038ec:	f000 fc1a 	bl	8004124 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80038f0:	e061      	b.n	80039b6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	0018      	movs	r0, r3
 80038fa:	f000 fa07 	bl	8003d0c <I2C_WaitOnTXISFlagUntilTimeout>
 80038fe:	1e03      	subs	r3, r0, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e081      	b.n	8003a0a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	781a      	ldrb	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d03a      	beq.n	80039b6 <HAL_I2C_Master_Transmit+0x1aa>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003944:	2b00      	cmp	r3, #0
 8003946:	d136      	bne.n	80039b6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	0013      	movs	r3, r2
 8003952:	2200      	movs	r2, #0
 8003954:	2180      	movs	r1, #128	; 0x80
 8003956:	f000 f98b 	bl	8003c70 <I2C_WaitOnFlagUntilTimeout>
 800395a:	1e03      	subs	r3, r0, #0
 800395c:	d001      	beq.n	8003962 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e053      	b.n	8003a0a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	2bff      	cmp	r3, #255	; 0xff
 800396a:	d911      	bls.n	8003990 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	22ff      	movs	r2, #255	; 0xff
 8003970:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003976:	b2da      	uxtb	r2, r3
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	045c      	lsls	r4, r3, #17
 800397c:	230a      	movs	r3, #10
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	8819      	ldrh	r1, [r3, #0]
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	2300      	movs	r3, #0
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	0023      	movs	r3, r4
 800398a:	f000 fbcb 	bl	8004124 <I2C_TransferConfig>
 800398e:	e012      	b.n	80039b6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	049c      	lsls	r4, r3, #18
 80039a4:	230a      	movs	r3, #10
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	8819      	ldrh	r1, [r3, #0]
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	2300      	movs	r3, #0
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	0023      	movs	r3, r4
 80039b2:	f000 fbb7 	bl	8004124 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d198      	bne.n	80038f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	0018      	movs	r0, r3
 80039c8:	f000 f9e6 	bl	8003d98 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039cc:	1e03      	subs	r3, r0, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e01a      	b.n	8003a0a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2220      	movs	r2, #32
 80039da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	490c      	ldr	r1, [pc, #48]	; (8003a18 <HAL_I2C_Master_Transmit+0x20c>)
 80039e8:	400a      	ands	r2, r1
 80039ea:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2241      	movs	r2, #65	; 0x41
 80039f0:	2120      	movs	r1, #32
 80039f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2242      	movs	r2, #66	; 0x42
 80039f8:	2100      	movs	r1, #0
 80039fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2240      	movs	r2, #64	; 0x40
 8003a00:	2100      	movs	r1, #0
 8003a02:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e000      	b.n	8003a0a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003a08:	2302      	movs	r3, #2
  }
}
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	b007      	add	sp, #28
 8003a10:	bd90      	pop	{r4, r7, pc}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	80002000 	.word	0x80002000
 8003a18:	fe00e800 	.word	0xfe00e800

08003a1c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b089      	sub	sp, #36	; 0x24
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	0008      	movs	r0, r1
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	0019      	movs	r1, r3
 8003a2a:	230a      	movs	r3, #10
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	1c02      	adds	r2, r0, #0
 8003a30:	801a      	strh	r2, [r3, #0]
 8003a32:	2308      	movs	r3, #8
 8003a34:	18fb      	adds	r3, r7, r3
 8003a36:	1c0a      	adds	r2, r1, #0
 8003a38:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2241      	movs	r2, #65	; 0x41
 8003a3e:	5c9b      	ldrb	r3, [r3, r2]
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d000      	beq.n	8003a48 <HAL_I2C_Master_Receive+0x2c>
 8003a46:	e0e8      	b.n	8003c1a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2240      	movs	r2, #64	; 0x40
 8003a4c:	5c9b      	ldrb	r3, [r3, r2]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_I2C_Master_Receive+0x3a>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e0e2      	b.n	8003c1c <HAL_I2C_Master_Receive+0x200>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2240      	movs	r2, #64	; 0x40
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a5e:	f7ff f9ad 	bl	8002dbc <HAL_GetTick>
 8003a62:	0003      	movs	r3, r0
 8003a64:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a66:	2380      	movs	r3, #128	; 0x80
 8003a68:	0219      	lsls	r1, r3, #8
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	2319      	movs	r3, #25
 8003a72:	2201      	movs	r2, #1
 8003a74:	f000 f8fc 	bl	8003c70 <I2C_WaitOnFlagUntilTimeout>
 8003a78:	1e03      	subs	r3, r0, #0
 8003a7a:	d001      	beq.n	8003a80 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0cd      	b.n	8003c1c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2241      	movs	r2, #65	; 0x41
 8003a84:	2122      	movs	r1, #34	; 0x22
 8003a86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2242      	movs	r2, #66	; 0x42
 8003a8c:	2110      	movs	r1, #16
 8003a8e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2208      	movs	r2, #8
 8003aa0:	18ba      	adds	r2, r7, r2
 8003aa2:	8812      	ldrh	r2, [r2, #0]
 8003aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2bff      	cmp	r3, #255	; 0xff
 8003ab4:	d911      	bls.n	8003ada <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	22ff      	movs	r2, #255	; 0xff
 8003aba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	045c      	lsls	r4, r3, #17
 8003ac6:	230a      	movs	r3, #10
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	8819      	ldrh	r1, [r3, #0]
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	4b55      	ldr	r3, [pc, #340]	; (8003c24 <HAL_I2C_Master_Receive+0x208>)
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	0023      	movs	r3, r4
 8003ad4:	f000 fb26 	bl	8004124 <I2C_TransferConfig>
 8003ad8:	e076      	b.n	8003bc8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	049c      	lsls	r4, r3, #18
 8003aee:	230a      	movs	r3, #10
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	8819      	ldrh	r1, [r3, #0]
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	4b4b      	ldr	r3, [pc, #300]	; (8003c24 <HAL_I2C_Master_Receive+0x208>)
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	0023      	movs	r3, r4
 8003afc:	f000 fb12 	bl	8004124 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003b00:	e062      	b.n	8003bc8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f000 f989 	bl	8003e20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b0e:	1e03      	subs	r3, r0, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e082      	b.n	8003c1c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d03a      	beq.n	8003bc8 <HAL_I2C_Master_Receive+0x1ac>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d136      	bne.n	8003bc8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	0013      	movs	r3, r2
 8003b64:	2200      	movs	r2, #0
 8003b66:	2180      	movs	r1, #128	; 0x80
 8003b68:	f000 f882 	bl	8003c70 <I2C_WaitOnFlagUntilTimeout>
 8003b6c:	1e03      	subs	r3, r0, #0
 8003b6e:	d001      	beq.n	8003b74 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e053      	b.n	8003c1c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2bff      	cmp	r3, #255	; 0xff
 8003b7c:	d911      	bls.n	8003ba2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	22ff      	movs	r2, #255	; 0xff
 8003b82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	045c      	lsls	r4, r3, #17
 8003b8e:	230a      	movs	r3, #10
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	8819      	ldrh	r1, [r3, #0]
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	2300      	movs	r3, #0
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	0023      	movs	r3, r4
 8003b9c:	f000 fac2 	bl	8004124 <I2C_TransferConfig>
 8003ba0:	e012      	b.n	8003bc8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	2380      	movs	r3, #128	; 0x80
 8003bb4:	049c      	lsls	r4, r3, #18
 8003bb6:	230a      	movs	r3, #10
 8003bb8:	18fb      	adds	r3, r7, r3
 8003bba:	8819      	ldrh	r1, [r3, #0]
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	0023      	movs	r3, r4
 8003bc4:	f000 faae 	bl	8004124 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d197      	bne.n	8003b02 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f000 f8dd 	bl	8003d98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bde:	1e03      	subs	r3, r0, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e01a      	b.n	8003c1c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2220      	movs	r2, #32
 8003bec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	490b      	ldr	r1, [pc, #44]	; (8003c28 <HAL_I2C_Master_Receive+0x20c>)
 8003bfa:	400a      	ands	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2241      	movs	r2, #65	; 0x41
 8003c02:	2120      	movs	r1, #32
 8003c04:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2242      	movs	r2, #66	; 0x42
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2240      	movs	r2, #64	; 0x40
 8003c12:	2100      	movs	r1, #0
 8003c14:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	e000      	b.n	8003c1c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003c1a:	2302      	movs	r3, #2
  }
}
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b007      	add	sp, #28
 8003c22:	bd90      	pop	{r4, r7, pc}
 8003c24:	80002400 	.word	0x80002400
 8003c28:	fe00e800 	.word	0xfe00e800

08003c2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d103      	bne.n	8003c4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2200      	movs	r2, #0
 8003c48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	2201      	movs	r2, #1
 8003c52:	4013      	ands	r3, r2
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d007      	beq.n	8003c68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2101      	movs	r1, #1
 8003c64:	430a      	orrs	r2, r1
 8003c66:	619a      	str	r2, [r3, #24]
  }
}
 8003c68:	46c0      	nop			; (mov r8, r8)
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b002      	add	sp, #8
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	1dfb      	adds	r3, r7, #7
 8003c7e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c80:	e030      	b.n	8003ce4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	3301      	adds	r3, #1
 8003c86:	d02d      	beq.n	8003ce4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c88:	f7ff f898 	bl	8002dbc <HAL_GetTick>
 8003c8c:	0002      	movs	r2, r0
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d302      	bcc.n	8003c9e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d122      	bne.n	8003ce4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	425a      	negs	r2, r3
 8003cae:	4153      	adcs	r3, r2
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	001a      	movs	r2, r3
 8003cb4:	1dfb      	adds	r3, r7, #7
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d113      	bne.n	8003ce4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2241      	movs	r2, #65	; 0x41
 8003ccc:	2120      	movs	r1, #32
 8003cce:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2242      	movs	r2, #66	; 0x42
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2240      	movs	r2, #64	; 0x40
 8003cdc:	2100      	movs	r1, #0
 8003cde:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e00f      	b.n	8003d04 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	4013      	ands	r3, r2
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	425a      	negs	r2, r3
 8003cf4:	4153      	adcs	r3, r2
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	001a      	movs	r2, r3
 8003cfa:	1dfb      	adds	r3, r7, #7
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d0bf      	beq.n	8003c82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	0018      	movs	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	b004      	add	sp, #16
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d18:	e032      	b.n	8003d80 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	0018      	movs	r0, r3
 8003d22:	f000 f8ff 	bl	8003f24 <I2C_IsErrorOccurred>
 8003d26:	1e03      	subs	r3, r0, #0
 8003d28:	d001      	beq.n	8003d2e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e030      	b.n	8003d90 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	3301      	adds	r3, #1
 8003d32:	d025      	beq.n	8003d80 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d34:	f7ff f842 	bl	8002dbc <HAL_GetTick>
 8003d38:	0002      	movs	r2, r0
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d302      	bcc.n	8003d4a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d11a      	bne.n	8003d80 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	2202      	movs	r2, #2
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d013      	beq.n	8003d80 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2241      	movs	r2, #65	; 0x41
 8003d68:	2120      	movs	r1, #32
 8003d6a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2242      	movs	r2, #66	; 0x42
 8003d70:	2100      	movs	r1, #0
 8003d72:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2240      	movs	r2, #64	; 0x40
 8003d78:	2100      	movs	r1, #0
 8003d7a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e007      	b.n	8003d90 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2202      	movs	r2, #2
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d1c5      	bne.n	8003d1a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	0018      	movs	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b004      	add	sp, #16
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003da4:	e02f      	b.n	8003e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	0018      	movs	r0, r3
 8003dae:	f000 f8b9 	bl	8003f24 <I2C_IsErrorOccurred>
 8003db2:	1e03      	subs	r3, r0, #0
 8003db4:	d001      	beq.n	8003dba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e02d      	b.n	8003e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dba:	f7fe ffff 	bl	8002dbc <HAL_GetTick>
 8003dbe:	0002      	movs	r2, r0
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d302      	bcc.n	8003dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d11a      	bne.n	8003e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d013      	beq.n	8003e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	2220      	movs	r2, #32
 8003de4:	431a      	orrs	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2241      	movs	r2, #65	; 0x41
 8003dee:	2120      	movs	r1, #32
 8003df0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2242      	movs	r2, #66	; 0x42
 8003df6:	2100      	movs	r1, #0
 8003df8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2240      	movs	r2, #64	; 0x40
 8003dfe:	2100      	movs	r1, #0
 8003e00:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e007      	b.n	8003e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	d1c8      	bne.n	8003da6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	0018      	movs	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	b004      	add	sp, #16
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e2c:	e06b      	b.n	8003f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	0018      	movs	r0, r3
 8003e36:	f000 f875 	bl	8003f24 <I2C_IsErrorOccurred>
 8003e3a:	1e03      	subs	r3, r0, #0
 8003e3c:	d001      	beq.n	8003e42 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e069      	b.n	8003f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d138      	bne.n	8003ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	2204      	movs	r2, #4
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d105      	bne.n	8003e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	e055      	b.n	8003f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	2210      	movs	r2, #16
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b10      	cmp	r3, #16
 8003e76:	d107      	bne.n	8003e88 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2210      	movs	r2, #16
 8003e7e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2204      	movs	r2, #4
 8003e84:	645a      	str	r2, [r3, #68]	; 0x44
 8003e86:	e002      	b.n	8003e8e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2220      	movs	r2, #32
 8003e94:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	491f      	ldr	r1, [pc, #124]	; (8003f20 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003ea2:	400a      	ands	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2241      	movs	r2, #65	; 0x41
 8003eaa:	2120      	movs	r1, #32
 8003eac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2242      	movs	r2, #66	; 0x42
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2240      	movs	r2, #64	; 0x40
 8003eba:	2100      	movs	r1, #0
 8003ebc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e029      	b.n	8003f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec2:	f7fe ff7b 	bl	8002dbc <HAL_GetTick>
 8003ec6:	0002      	movs	r2, r0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d302      	bcc.n	8003ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d116      	bne.n	8003f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	2204      	movs	r2, #4
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d00f      	beq.n	8003f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	2220      	movs	r2, #32
 8003eec:	431a      	orrs	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2241      	movs	r2, #65	; 0x41
 8003ef6:	2120      	movs	r1, #32
 8003ef8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2240      	movs	r2, #64	; 0x40
 8003efe:	2100      	movs	r1, #0
 8003f00:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e007      	b.n	8003f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	2204      	movs	r2, #4
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d18c      	bne.n	8003e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	0018      	movs	r0, r3
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	b004      	add	sp, #16
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	fe00e800 	.word	0xfe00e800

08003f24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f24:	b590      	push	{r4, r7, lr}
 8003f26:	b08b      	sub	sp, #44	; 0x2c
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f30:	2327      	movs	r3, #39	; 0x27
 8003f32:	18fb      	adds	r3, r7, r3
 8003f34:	2200      	movs	r2, #0
 8003f36:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	2210      	movs	r2, #16
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d100      	bne.n	8003f52 <I2C_IsErrorOccurred+0x2e>
 8003f50:	e082      	b.n	8004058 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2210      	movs	r2, #16
 8003f58:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f5a:	e060      	b.n	800401e <I2C_IsErrorOccurred+0xfa>
 8003f5c:	2427      	movs	r4, #39	; 0x27
 8003f5e:	193b      	adds	r3, r7, r4
 8003f60:	193a      	adds	r2, r7, r4
 8003f62:	7812      	ldrb	r2, [r2, #0]
 8003f64:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	d058      	beq.n	800401e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f6c:	f7fe ff26 	bl	8002dbc <HAL_GetTick>
 8003f70:	0002      	movs	r2, r0
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d306      	bcc.n	8003f8a <I2C_IsErrorOccurred+0x66>
 8003f7c:	193b      	adds	r3, r7, r4
 8003f7e:	193a      	adds	r2, r7, r4
 8003f80:	7812      	ldrb	r2, [r2, #0]
 8003f82:	701a      	strb	r2, [r3, #0]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d149      	bne.n	800401e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	2380      	movs	r3, #128	; 0x80
 8003f92:	01db      	lsls	r3, r3, #7
 8003f94:	4013      	ands	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f98:	2013      	movs	r0, #19
 8003f9a:	183b      	adds	r3, r7, r0
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	2142      	movs	r1, #66	; 0x42
 8003fa0:	5c52      	ldrb	r2, [r2, r1]
 8003fa2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	2380      	movs	r3, #128	; 0x80
 8003fac:	021b      	lsls	r3, r3, #8
 8003fae:	401a      	ands	r2, r3
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	021b      	lsls	r3, r3, #8
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d126      	bne.n	8004006 <I2C_IsErrorOccurred+0xe2>
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	2380      	movs	r3, #128	; 0x80
 8003fbc:	01db      	lsls	r3, r3, #7
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d021      	beq.n	8004006 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003fc2:	183b      	adds	r3, r7, r0
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	2b20      	cmp	r3, #32
 8003fc8:	d01d      	beq.n	8004006 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2180      	movs	r1, #128	; 0x80
 8003fd6:	01c9      	lsls	r1, r1, #7
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003fdc:	f7fe feee 	bl	8002dbc <HAL_GetTick>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fe4:	e00f      	b.n	8004006 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003fe6:	f7fe fee9 	bl	8002dbc <HAL_GetTick>
 8003fea:	0002      	movs	r2, r0
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b19      	cmp	r3, #25
 8003ff2:	d908      	bls.n	8004006 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ffc:	2327      	movs	r3, #39	; 0x27
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	2201      	movs	r2, #1
 8004002:	701a      	strb	r2, [r3, #0]

              break;
 8004004:	e00b      	b.n	800401e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	2220      	movs	r2, #32
 800400e:	4013      	ands	r3, r2
 8004010:	2127      	movs	r1, #39	; 0x27
 8004012:	187a      	adds	r2, r7, r1
 8004014:	1879      	adds	r1, r7, r1
 8004016:	7809      	ldrb	r1, [r1, #0]
 8004018:	7011      	strb	r1, [r2, #0]
 800401a:	2b20      	cmp	r3, #32
 800401c:	d1e3      	bne.n	8003fe6 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	2220      	movs	r2, #32
 8004026:	4013      	ands	r3, r2
 8004028:	2b20      	cmp	r3, #32
 800402a:	d004      	beq.n	8004036 <I2C_IsErrorOccurred+0x112>
 800402c:	2327      	movs	r3, #39	; 0x27
 800402e:	18fb      	adds	r3, r7, r3
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d092      	beq.n	8003f5c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004036:	2327      	movs	r3, #39	; 0x27
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d103      	bne.n	8004048 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2220      	movs	r2, #32
 8004046:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	2204      	movs	r2, #4
 800404c:	4313      	orrs	r3, r2
 800404e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004050:	2327      	movs	r3, #39	; 0x27
 8004052:	18fb      	adds	r3, r7, r3
 8004054:	2201      	movs	r2, #1
 8004056:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	4013      	ands	r3, r2
 8004068:	d00c      	beq.n	8004084 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	2201      	movs	r2, #1
 800406e:	4313      	orrs	r3, r2
 8004070:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2280      	movs	r2, #128	; 0x80
 8004078:	0052      	lsls	r2, r2, #1
 800407a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800407c:	2327      	movs	r3, #39	; 0x27
 800407e:	18fb      	adds	r3, r7, r3
 8004080:	2201      	movs	r2, #1
 8004082:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	2380      	movs	r3, #128	; 0x80
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4013      	ands	r3, r2
 800408c:	d00c      	beq.n	80040a8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	2208      	movs	r2, #8
 8004092:	4313      	orrs	r3, r2
 8004094:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2280      	movs	r2, #128	; 0x80
 800409c:	00d2      	lsls	r2, r2, #3
 800409e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040a0:	2327      	movs	r3, #39	; 0x27
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	2201      	movs	r2, #1
 80040a6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	2380      	movs	r3, #128	; 0x80
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4013      	ands	r3, r2
 80040b0:	d00c      	beq.n	80040cc <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	2202      	movs	r2, #2
 80040b6:	4313      	orrs	r3, r2
 80040b8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2280      	movs	r2, #128	; 0x80
 80040c0:	0092      	lsls	r2, r2, #2
 80040c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040c4:	2327      	movs	r3, #39	; 0x27
 80040c6:	18fb      	adds	r3, r7, r3
 80040c8:	2201      	movs	r2, #1
 80040ca:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80040cc:	2327      	movs	r3, #39	; 0x27
 80040ce:	18fb      	adds	r3, r7, r3
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d01d      	beq.n	8004112 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	0018      	movs	r0, r3
 80040da:	f7ff fda7 	bl	8003c2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	490d      	ldr	r1, [pc, #52]	; (8004120 <I2C_IsErrorOccurred+0x1fc>)
 80040ea:	400a      	ands	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	431a      	orrs	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2241      	movs	r2, #65	; 0x41
 80040fe:	2120      	movs	r1, #32
 8004100:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2242      	movs	r2, #66	; 0x42
 8004106:	2100      	movs	r1, #0
 8004108:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2240      	movs	r2, #64	; 0x40
 800410e:	2100      	movs	r1, #0
 8004110:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004112:	2327      	movs	r3, #39	; 0x27
 8004114:	18fb      	adds	r3, r7, r3
 8004116:	781b      	ldrb	r3, [r3, #0]
}
 8004118:	0018      	movs	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	b00b      	add	sp, #44	; 0x2c
 800411e:	bd90      	pop	{r4, r7, pc}
 8004120:	fe00e800 	.word	0xfe00e800

08004124 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004124:	b590      	push	{r4, r7, lr}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	0008      	movs	r0, r1
 800412e:	0011      	movs	r1, r2
 8004130:	607b      	str	r3, [r7, #4]
 8004132:	240a      	movs	r4, #10
 8004134:	193b      	adds	r3, r7, r4
 8004136:	1c02      	adds	r2, r0, #0
 8004138:	801a      	strh	r2, [r3, #0]
 800413a:	2009      	movs	r0, #9
 800413c:	183b      	adds	r3, r7, r0
 800413e:	1c0a      	adds	r2, r1, #0
 8004140:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004142:	193b      	adds	r3, r7, r4
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	059b      	lsls	r3, r3, #22
 8004148:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800414a:	183b      	adds	r3, r7, r0
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	0419      	lsls	r1, r3, #16
 8004150:	23ff      	movs	r3, #255	; 0xff
 8004152:	041b      	lsls	r3, r3, #16
 8004154:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004156:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	4313      	orrs	r3, r2
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	085b      	lsrs	r3, r3, #1
 8004164:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800416e:	0d51      	lsrs	r1, r2, #21
 8004170:	2280      	movs	r2, #128	; 0x80
 8004172:	00d2      	lsls	r2, r2, #3
 8004174:	400a      	ands	r2, r1
 8004176:	4907      	ldr	r1, [pc, #28]	; (8004194 <I2C_TransferConfig+0x70>)
 8004178:	430a      	orrs	r2, r1
 800417a:	43d2      	mvns	r2, r2
 800417c:	401a      	ands	r2, r3
 800417e:	0011      	movs	r1, r2
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	46bd      	mov	sp, r7
 800418e:	b007      	add	sp, #28
 8004190:	bd90      	pop	{r4, r7, pc}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	03ff63ff 	.word	0x03ff63ff

08004198 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2241      	movs	r2, #65	; 0x41
 80041a6:	5c9b      	ldrb	r3, [r3, r2]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d138      	bne.n	8004220 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2240      	movs	r2, #64	; 0x40
 80041b2:	5c9b      	ldrb	r3, [r3, r2]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e032      	b.n	8004222 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2240      	movs	r2, #64	; 0x40
 80041c0:	2101      	movs	r1, #1
 80041c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2241      	movs	r2, #65	; 0x41
 80041c8:	2124      	movs	r1, #36	; 0x24
 80041ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2101      	movs	r1, #1
 80041d8:	438a      	bics	r2, r1
 80041da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4911      	ldr	r1, [pc, #68]	; (800422c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80041e8:	400a      	ands	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6819      	ldr	r1, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2101      	movs	r1, #1
 8004208:	430a      	orrs	r2, r1
 800420a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2241      	movs	r2, #65	; 0x41
 8004210:	2120      	movs	r1, #32
 8004212:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2240      	movs	r2, #64	; 0x40
 8004218:	2100      	movs	r1, #0
 800421a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	e000      	b.n	8004222 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004220:	2302      	movs	r3, #2
  }
}
 8004222:	0018      	movs	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	b002      	add	sp, #8
 8004228:	bd80      	pop	{r7, pc}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	ffffefff 	.word	0xffffefff

08004230 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2241      	movs	r2, #65	; 0x41
 800423e:	5c9b      	ldrb	r3, [r3, r2]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b20      	cmp	r3, #32
 8004244:	d139      	bne.n	80042ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2240      	movs	r2, #64	; 0x40
 800424a:	5c9b      	ldrb	r3, [r3, r2]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004250:	2302      	movs	r3, #2
 8004252:	e033      	b.n	80042bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2240      	movs	r2, #64	; 0x40
 8004258:	2101      	movs	r1, #1
 800425a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2241      	movs	r2, #65	; 0x41
 8004260:	2124      	movs	r1, #36	; 0x24
 8004262:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2101      	movs	r1, #1
 8004270:	438a      	bics	r2, r1
 8004272:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4a11      	ldr	r2, [pc, #68]	; (80042c4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004280:	4013      	ands	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2101      	movs	r1, #1
 80042a2:	430a      	orrs	r2, r1
 80042a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2241      	movs	r2, #65	; 0x41
 80042aa:	2120      	movs	r1, #32
 80042ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2240      	movs	r2, #64	; 0x40
 80042b2:	2100      	movs	r1, #0
 80042b4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	e000      	b.n	80042bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042ba:	2302      	movs	r3, #2
  }
}
 80042bc:	0018      	movs	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	b004      	add	sp, #16
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	fffff0ff 	.word	0xfffff0ff

080042c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c8:	b5b0      	push	{r4, r5, r7, lr}
 80042ca:	b08a      	sub	sp, #40	; 0x28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d102      	bne.n	80042dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f000 fb6c 	bl	80049b4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042dc:	4bc8      	ldr	r3, [pc, #800]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	220c      	movs	r2, #12
 80042e2:	4013      	ands	r3, r2
 80042e4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042e6:	4bc6      	ldr	r3, [pc, #792]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	025b      	lsls	r3, r3, #9
 80042ee:	4013      	ands	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2201      	movs	r2, #1
 80042f8:	4013      	ands	r3, r2
 80042fa:	d100      	bne.n	80042fe <HAL_RCC_OscConfig+0x36>
 80042fc:	e07d      	b.n	80043fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	2b08      	cmp	r3, #8
 8004302:	d007      	beq.n	8004314 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	2b0c      	cmp	r3, #12
 8004308:	d112      	bne.n	8004330 <HAL_RCC_OscConfig+0x68>
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	025b      	lsls	r3, r3, #9
 8004310:	429a      	cmp	r2, r3
 8004312:	d10d      	bne.n	8004330 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004314:	4bba      	ldr	r3, [pc, #744]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	2380      	movs	r3, #128	; 0x80
 800431a:	029b      	lsls	r3, r3, #10
 800431c:	4013      	ands	r3, r2
 800431e:	d100      	bne.n	8004322 <HAL_RCC_OscConfig+0x5a>
 8004320:	e06a      	b.n	80043f8 <HAL_RCC_OscConfig+0x130>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d166      	bne.n	80043f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	f000 fb42 	bl	80049b4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	025b      	lsls	r3, r3, #9
 8004338:	429a      	cmp	r2, r3
 800433a:	d107      	bne.n	800434c <HAL_RCC_OscConfig+0x84>
 800433c:	4bb0      	ldr	r3, [pc, #704]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	4baf      	ldr	r3, [pc, #700]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 8004342:	2180      	movs	r1, #128	; 0x80
 8004344:	0249      	lsls	r1, r1, #9
 8004346:	430a      	orrs	r2, r1
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	e027      	b.n	800439c <HAL_RCC_OscConfig+0xd4>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	23a0      	movs	r3, #160	; 0xa0
 8004352:	02db      	lsls	r3, r3, #11
 8004354:	429a      	cmp	r2, r3
 8004356:	d10e      	bne.n	8004376 <HAL_RCC_OscConfig+0xae>
 8004358:	4ba9      	ldr	r3, [pc, #676]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	4ba8      	ldr	r3, [pc, #672]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 800435e:	2180      	movs	r1, #128	; 0x80
 8004360:	02c9      	lsls	r1, r1, #11
 8004362:	430a      	orrs	r2, r1
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	4ba6      	ldr	r3, [pc, #664]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4ba5      	ldr	r3, [pc, #660]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 800436c:	2180      	movs	r1, #128	; 0x80
 800436e:	0249      	lsls	r1, r1, #9
 8004370:	430a      	orrs	r2, r1
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	e012      	b.n	800439c <HAL_RCC_OscConfig+0xd4>
 8004376:	4ba2      	ldr	r3, [pc, #648]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	4ba1      	ldr	r3, [pc, #644]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 800437c:	49a1      	ldr	r1, [pc, #644]	; (8004604 <HAL_RCC_OscConfig+0x33c>)
 800437e:	400a      	ands	r2, r1
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	4b9f      	ldr	r3, [pc, #636]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	2380      	movs	r3, #128	; 0x80
 8004388:	025b      	lsls	r3, r3, #9
 800438a:	4013      	ands	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4b9b      	ldr	r3, [pc, #620]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4b9a      	ldr	r3, [pc, #616]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 8004396:	499c      	ldr	r1, [pc, #624]	; (8004608 <HAL_RCC_OscConfig+0x340>)
 8004398:	400a      	ands	r2, r1
 800439a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d014      	beq.n	80043ce <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7fe fd0a 	bl	8002dbc <HAL_GetTick>
 80043a8:	0003      	movs	r3, r0
 80043aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043ae:	f7fe fd05 	bl	8002dbc <HAL_GetTick>
 80043b2:	0002      	movs	r2, r0
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b64      	cmp	r3, #100	; 0x64
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e2f9      	b.n	80049b4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043c0:	4b8f      	ldr	r3, [pc, #572]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	2380      	movs	r3, #128	; 0x80
 80043c6:	029b      	lsls	r3, r3, #10
 80043c8:	4013      	ands	r3, r2
 80043ca:	d0f0      	beq.n	80043ae <HAL_RCC_OscConfig+0xe6>
 80043cc:	e015      	b.n	80043fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ce:	f7fe fcf5 	bl	8002dbc <HAL_GetTick>
 80043d2:	0003      	movs	r3, r0
 80043d4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043d8:	f7fe fcf0 	bl	8002dbc <HAL_GetTick>
 80043dc:	0002      	movs	r2, r0
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b64      	cmp	r3, #100	; 0x64
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e2e4      	b.n	80049b4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043ea:	4b85      	ldr	r3, [pc, #532]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	2380      	movs	r3, #128	; 0x80
 80043f0:	029b      	lsls	r3, r3, #10
 80043f2:	4013      	ands	r3, r2
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0x110>
 80043f6:	e000      	b.n	80043fa <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2202      	movs	r2, #2
 8004400:	4013      	ands	r3, r2
 8004402:	d100      	bne.n	8004406 <HAL_RCC_OscConfig+0x13e>
 8004404:	e099      	b.n	800453a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	2220      	movs	r2, #32
 8004410:	4013      	ands	r3, r2
 8004412:	d009      	beq.n	8004428 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004414:	4b7a      	ldr	r3, [pc, #488]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4b79      	ldr	r3, [pc, #484]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 800441a:	2120      	movs	r1, #32
 800441c:	430a      	orrs	r2, r1
 800441e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	2220      	movs	r2, #32
 8004424:	4393      	bics	r3, r2
 8004426:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	2b04      	cmp	r3, #4
 800442c:	d005      	beq.n	800443a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	2b0c      	cmp	r3, #12
 8004432:	d13e      	bne.n	80044b2 <HAL_RCC_OscConfig+0x1ea>
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d13b      	bne.n	80044b2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800443a:	4b71      	ldr	r3, [pc, #452]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2204      	movs	r2, #4
 8004440:	4013      	ands	r3, r2
 8004442:	d004      	beq.n	800444e <HAL_RCC_OscConfig+0x186>
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e2b2      	b.n	80049b4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800444e:	4b6c      	ldr	r3, [pc, #432]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	4a6e      	ldr	r2, [pc, #440]	; (800460c <HAL_RCC_OscConfig+0x344>)
 8004454:	4013      	ands	r3, r2
 8004456:	0019      	movs	r1, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	021a      	lsls	r2, r3, #8
 800445e:	4b68      	ldr	r3, [pc, #416]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 8004460:	430a      	orrs	r2, r1
 8004462:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004464:	4b66      	ldr	r3, [pc, #408]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2209      	movs	r2, #9
 800446a:	4393      	bics	r3, r2
 800446c:	0019      	movs	r1, r3
 800446e:	4b64      	ldr	r3, [pc, #400]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 8004470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004472:	430a      	orrs	r2, r1
 8004474:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004476:	f000 fbeb 	bl	8004c50 <HAL_RCC_GetSysClockFreq>
 800447a:	0001      	movs	r1, r0
 800447c:	4b60      	ldr	r3, [pc, #384]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	220f      	movs	r2, #15
 8004484:	4013      	ands	r3, r2
 8004486:	4a62      	ldr	r2, [pc, #392]	; (8004610 <HAL_RCC_OscConfig+0x348>)
 8004488:	5cd3      	ldrb	r3, [r2, r3]
 800448a:	000a      	movs	r2, r1
 800448c:	40da      	lsrs	r2, r3
 800448e:	4b61      	ldr	r3, [pc, #388]	; (8004614 <HAL_RCC_OscConfig+0x34c>)
 8004490:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004492:	4b61      	ldr	r3, [pc, #388]	; (8004618 <HAL_RCC_OscConfig+0x350>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2513      	movs	r5, #19
 8004498:	197c      	adds	r4, r7, r5
 800449a:	0018      	movs	r0, r3
 800449c:	f7fe fc48 	bl	8002d30 <HAL_InitTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80044a4:	197b      	adds	r3, r7, r5
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d046      	beq.n	800453a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80044ac:	197b      	adds	r3, r7, r5
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	e280      	b.n	80049b4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d027      	beq.n	8004508 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80044b8:	4b51      	ldr	r3, [pc, #324]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2209      	movs	r2, #9
 80044be:	4393      	bics	r3, r2
 80044c0:	0019      	movs	r1, r3
 80044c2:	4b4f      	ldr	r3, [pc, #316]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 80044c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c6:	430a      	orrs	r2, r1
 80044c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ca:	f7fe fc77 	bl	8002dbc <HAL_GetTick>
 80044ce:	0003      	movs	r3, r0
 80044d0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044d4:	f7fe fc72 	bl	8002dbc <HAL_GetTick>
 80044d8:	0002      	movs	r2, r0
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e266      	b.n	80049b4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044e6:	4b46      	ldr	r3, [pc, #280]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2204      	movs	r2, #4
 80044ec:	4013      	ands	r3, r2
 80044ee:	d0f1      	beq.n	80044d4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f0:	4b43      	ldr	r3, [pc, #268]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	4a45      	ldr	r2, [pc, #276]	; (800460c <HAL_RCC_OscConfig+0x344>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	0019      	movs	r1, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	021a      	lsls	r2, r3, #8
 8004500:	4b3f      	ldr	r3, [pc, #252]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
 8004506:	e018      	b.n	800453a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004508:	4b3d      	ldr	r3, [pc, #244]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	4b3c      	ldr	r3, [pc, #240]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 800450e:	2101      	movs	r1, #1
 8004510:	438a      	bics	r2, r1
 8004512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004514:	f7fe fc52 	bl	8002dbc <HAL_GetTick>
 8004518:	0003      	movs	r3, r0
 800451a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800451e:	f7fe fc4d 	bl	8002dbc <HAL_GetTick>
 8004522:	0002      	movs	r2, r0
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e241      	b.n	80049b4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004530:	4b33      	ldr	r3, [pc, #204]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2204      	movs	r2, #4
 8004536:	4013      	ands	r3, r2
 8004538:	d1f1      	bne.n	800451e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2210      	movs	r2, #16
 8004540:	4013      	ands	r3, r2
 8004542:	d100      	bne.n	8004546 <HAL_RCC_OscConfig+0x27e>
 8004544:	e0a1      	b.n	800468a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d140      	bne.n	80045ce <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800454c:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	2380      	movs	r3, #128	; 0x80
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4013      	ands	r3, r2
 8004556:	d005      	beq.n	8004564 <HAL_RCC_OscConfig+0x29c>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e227      	b.n	80049b4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004564:	4b26      	ldr	r3, [pc, #152]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	4a2c      	ldr	r2, [pc, #176]	; (800461c <HAL_RCC_OscConfig+0x354>)
 800456a:	4013      	ands	r3, r2
 800456c:	0019      	movs	r1, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1a      	ldr	r2, [r3, #32]
 8004572:	4b23      	ldr	r3, [pc, #140]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 8004574:	430a      	orrs	r2, r1
 8004576:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004578:	4b21      	ldr	r3, [pc, #132]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	0a19      	lsrs	r1, r3, #8
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	061a      	lsls	r2, r3, #24
 8004586:	4b1e      	ldr	r3, [pc, #120]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 8004588:	430a      	orrs	r2, r1
 800458a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	0b5b      	lsrs	r3, r3, #13
 8004592:	3301      	adds	r3, #1
 8004594:	2280      	movs	r2, #128	; 0x80
 8004596:	0212      	lsls	r2, r2, #8
 8004598:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800459a:	4b19      	ldr	r3, [pc, #100]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	091b      	lsrs	r3, r3, #4
 80045a0:	210f      	movs	r1, #15
 80045a2:	400b      	ands	r3, r1
 80045a4:	491a      	ldr	r1, [pc, #104]	; (8004610 <HAL_RCC_OscConfig+0x348>)
 80045a6:	5ccb      	ldrb	r3, [r1, r3]
 80045a8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80045aa:	4b1a      	ldr	r3, [pc, #104]	; (8004614 <HAL_RCC_OscConfig+0x34c>)
 80045ac:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80045ae:	4b1a      	ldr	r3, [pc, #104]	; (8004618 <HAL_RCC_OscConfig+0x350>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2513      	movs	r5, #19
 80045b4:	197c      	adds	r4, r7, r5
 80045b6:	0018      	movs	r0, r3
 80045b8:	f7fe fbba 	bl	8002d30 <HAL_InitTick>
 80045bc:	0003      	movs	r3, r0
 80045be:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80045c0:	197b      	adds	r3, r7, r5
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d060      	beq.n	800468a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80045c8:	197b      	adds	r3, r7, r5
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	e1f2      	b.n	80049b4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d03f      	beq.n	8004656 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4b09      	ldr	r3, [pc, #36]	; (8004600 <HAL_RCC_OscConfig+0x338>)
 80045dc:	2180      	movs	r1, #128	; 0x80
 80045de:	0049      	lsls	r1, r1, #1
 80045e0:	430a      	orrs	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e4:	f7fe fbea 	bl	8002dbc <HAL_GetTick>
 80045e8:	0003      	movs	r3, r0
 80045ea:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045ec:	e018      	b.n	8004620 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045ee:	f7fe fbe5 	bl	8002dbc <HAL_GetTick>
 80045f2:	0002      	movs	r2, r0
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d911      	bls.n	8004620 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e1d9      	b.n	80049b4 <HAL_RCC_OscConfig+0x6ec>
 8004600:	40021000 	.word	0x40021000
 8004604:	fffeffff 	.word	0xfffeffff
 8004608:	fffbffff 	.word	0xfffbffff
 800460c:	ffffe0ff 	.word	0xffffe0ff
 8004610:	08006a20 	.word	0x08006a20
 8004614:	20000010 	.word	0x20000010
 8004618:	2000002c 	.word	0x2000002c
 800461c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004620:	4bc9      	ldr	r3, [pc, #804]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	2380      	movs	r3, #128	; 0x80
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4013      	ands	r3, r2
 800462a:	d0e0      	beq.n	80045ee <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800462c:	4bc6      	ldr	r3, [pc, #792]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	4ac6      	ldr	r2, [pc, #792]	; (800494c <HAL_RCC_OscConfig+0x684>)
 8004632:	4013      	ands	r3, r2
 8004634:	0019      	movs	r1, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1a      	ldr	r2, [r3, #32]
 800463a:	4bc3      	ldr	r3, [pc, #780]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 800463c:	430a      	orrs	r2, r1
 800463e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004640:	4bc1      	ldr	r3, [pc, #772]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	021b      	lsls	r3, r3, #8
 8004646:	0a19      	lsrs	r1, r3, #8
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	061a      	lsls	r2, r3, #24
 800464e:	4bbe      	ldr	r3, [pc, #760]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
 8004654:	e019      	b.n	800468a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004656:	4bbc      	ldr	r3, [pc, #752]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	4bbb      	ldr	r3, [pc, #748]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 800465c:	49bc      	ldr	r1, [pc, #752]	; (8004950 <HAL_RCC_OscConfig+0x688>)
 800465e:	400a      	ands	r2, r1
 8004660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004662:	f7fe fbab 	bl	8002dbc <HAL_GetTick>
 8004666:	0003      	movs	r3, r0
 8004668:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800466c:	f7fe fba6 	bl	8002dbc <HAL_GetTick>
 8004670:	0002      	movs	r2, r0
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e19a      	b.n	80049b4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800467e:	4bb2      	ldr	r3, [pc, #712]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	2380      	movs	r3, #128	; 0x80
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4013      	ands	r3, r2
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2208      	movs	r2, #8
 8004690:	4013      	ands	r3, r2
 8004692:	d036      	beq.n	8004702 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d019      	beq.n	80046d0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800469c:	4baa      	ldr	r3, [pc, #680]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 800469e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046a0:	4ba9      	ldr	r3, [pc, #676]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 80046a2:	2101      	movs	r1, #1
 80046a4:	430a      	orrs	r2, r1
 80046a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a8:	f7fe fb88 	bl	8002dbc <HAL_GetTick>
 80046ac:	0003      	movs	r3, r0
 80046ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046b2:	f7fe fb83 	bl	8002dbc <HAL_GetTick>
 80046b6:	0002      	movs	r2, r0
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e177      	b.n	80049b4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046c4:	4ba0      	ldr	r3, [pc, #640]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 80046c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c8:	2202      	movs	r2, #2
 80046ca:	4013      	ands	r3, r2
 80046cc:	d0f1      	beq.n	80046b2 <HAL_RCC_OscConfig+0x3ea>
 80046ce:	e018      	b.n	8004702 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046d0:	4b9d      	ldr	r3, [pc, #628]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 80046d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046d4:	4b9c      	ldr	r3, [pc, #624]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 80046d6:	2101      	movs	r1, #1
 80046d8:	438a      	bics	r2, r1
 80046da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046dc:	f7fe fb6e 	bl	8002dbc <HAL_GetTick>
 80046e0:	0003      	movs	r3, r0
 80046e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046e6:	f7fe fb69 	bl	8002dbc <HAL_GetTick>
 80046ea:	0002      	movs	r2, r0
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e15d      	b.n	80049b4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046f8:	4b93      	ldr	r3, [pc, #588]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 80046fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fc:	2202      	movs	r2, #2
 80046fe:	4013      	ands	r3, r2
 8004700:	d1f1      	bne.n	80046e6 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2204      	movs	r2, #4
 8004708:	4013      	ands	r3, r2
 800470a:	d100      	bne.n	800470e <HAL_RCC_OscConfig+0x446>
 800470c:	e0ae      	b.n	800486c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800470e:	2023      	movs	r0, #35	; 0x23
 8004710:	183b      	adds	r3, r7, r0
 8004712:	2200      	movs	r2, #0
 8004714:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004716:	4b8c      	ldr	r3, [pc, #560]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 8004718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800471a:	2380      	movs	r3, #128	; 0x80
 800471c:	055b      	lsls	r3, r3, #21
 800471e:	4013      	ands	r3, r2
 8004720:	d109      	bne.n	8004736 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004722:	4b89      	ldr	r3, [pc, #548]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 8004724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004726:	4b88      	ldr	r3, [pc, #544]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 8004728:	2180      	movs	r1, #128	; 0x80
 800472a:	0549      	lsls	r1, r1, #21
 800472c:	430a      	orrs	r2, r1
 800472e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004730:	183b      	adds	r3, r7, r0
 8004732:	2201      	movs	r2, #1
 8004734:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004736:	4b87      	ldr	r3, [pc, #540]	; (8004954 <HAL_RCC_OscConfig+0x68c>)
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4013      	ands	r3, r2
 8004740:	d11a      	bne.n	8004778 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004742:	4b84      	ldr	r3, [pc, #528]	; (8004954 <HAL_RCC_OscConfig+0x68c>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	4b83      	ldr	r3, [pc, #524]	; (8004954 <HAL_RCC_OscConfig+0x68c>)
 8004748:	2180      	movs	r1, #128	; 0x80
 800474a:	0049      	lsls	r1, r1, #1
 800474c:	430a      	orrs	r2, r1
 800474e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004750:	f7fe fb34 	bl	8002dbc <HAL_GetTick>
 8004754:	0003      	movs	r3, r0
 8004756:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475a:	f7fe fb2f 	bl	8002dbc <HAL_GetTick>
 800475e:	0002      	movs	r2, r0
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b64      	cmp	r3, #100	; 0x64
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e123      	b.n	80049b4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476c:	4b79      	ldr	r3, [pc, #484]	; (8004954 <HAL_RCC_OscConfig+0x68c>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	2380      	movs	r3, #128	; 0x80
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	4013      	ands	r3, r2
 8004776:	d0f0      	beq.n	800475a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	2380      	movs	r3, #128	; 0x80
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	429a      	cmp	r2, r3
 8004782:	d107      	bne.n	8004794 <HAL_RCC_OscConfig+0x4cc>
 8004784:	4b70      	ldr	r3, [pc, #448]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 8004786:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004788:	4b6f      	ldr	r3, [pc, #444]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 800478a:	2180      	movs	r1, #128	; 0x80
 800478c:	0049      	lsls	r1, r1, #1
 800478e:	430a      	orrs	r2, r1
 8004790:	651a      	str	r2, [r3, #80]	; 0x50
 8004792:	e031      	b.n	80047f8 <HAL_RCC_OscConfig+0x530>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10c      	bne.n	80047b6 <HAL_RCC_OscConfig+0x4ee>
 800479c:	4b6a      	ldr	r3, [pc, #424]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 800479e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047a0:	4b69      	ldr	r3, [pc, #420]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 80047a2:	496b      	ldr	r1, [pc, #428]	; (8004950 <HAL_RCC_OscConfig+0x688>)
 80047a4:	400a      	ands	r2, r1
 80047a6:	651a      	str	r2, [r3, #80]	; 0x50
 80047a8:	4b67      	ldr	r3, [pc, #412]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 80047aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047ac:	4b66      	ldr	r3, [pc, #408]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 80047ae:	496a      	ldr	r1, [pc, #424]	; (8004958 <HAL_RCC_OscConfig+0x690>)
 80047b0:	400a      	ands	r2, r1
 80047b2:	651a      	str	r2, [r3, #80]	; 0x50
 80047b4:	e020      	b.n	80047f8 <HAL_RCC_OscConfig+0x530>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	23a0      	movs	r3, #160	; 0xa0
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	429a      	cmp	r2, r3
 80047c0:	d10e      	bne.n	80047e0 <HAL_RCC_OscConfig+0x518>
 80047c2:	4b61      	ldr	r3, [pc, #388]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 80047c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047c6:	4b60      	ldr	r3, [pc, #384]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 80047c8:	2180      	movs	r1, #128	; 0x80
 80047ca:	00c9      	lsls	r1, r1, #3
 80047cc:	430a      	orrs	r2, r1
 80047ce:	651a      	str	r2, [r3, #80]	; 0x50
 80047d0:	4b5d      	ldr	r3, [pc, #372]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 80047d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047d4:	4b5c      	ldr	r3, [pc, #368]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 80047d6:	2180      	movs	r1, #128	; 0x80
 80047d8:	0049      	lsls	r1, r1, #1
 80047da:	430a      	orrs	r2, r1
 80047dc:	651a      	str	r2, [r3, #80]	; 0x50
 80047de:	e00b      	b.n	80047f8 <HAL_RCC_OscConfig+0x530>
 80047e0:	4b59      	ldr	r3, [pc, #356]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 80047e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047e4:	4b58      	ldr	r3, [pc, #352]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 80047e6:	495a      	ldr	r1, [pc, #360]	; (8004950 <HAL_RCC_OscConfig+0x688>)
 80047e8:	400a      	ands	r2, r1
 80047ea:	651a      	str	r2, [r3, #80]	; 0x50
 80047ec:	4b56      	ldr	r3, [pc, #344]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 80047ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047f0:	4b55      	ldr	r3, [pc, #340]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 80047f2:	4959      	ldr	r1, [pc, #356]	; (8004958 <HAL_RCC_OscConfig+0x690>)
 80047f4:	400a      	ands	r2, r1
 80047f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d015      	beq.n	800482c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004800:	f7fe fadc 	bl	8002dbc <HAL_GetTick>
 8004804:	0003      	movs	r3, r0
 8004806:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004808:	e009      	b.n	800481e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800480a:	f7fe fad7 	bl	8002dbc <HAL_GetTick>
 800480e:	0002      	movs	r2, r0
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	4a51      	ldr	r2, [pc, #324]	; (800495c <HAL_RCC_OscConfig+0x694>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e0ca      	b.n	80049b4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800481e:	4b4a      	ldr	r3, [pc, #296]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 8004820:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004822:	2380      	movs	r3, #128	; 0x80
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4013      	ands	r3, r2
 8004828:	d0ef      	beq.n	800480a <HAL_RCC_OscConfig+0x542>
 800482a:	e014      	b.n	8004856 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800482c:	f7fe fac6 	bl	8002dbc <HAL_GetTick>
 8004830:	0003      	movs	r3, r0
 8004832:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004834:	e009      	b.n	800484a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004836:	f7fe fac1 	bl	8002dbc <HAL_GetTick>
 800483a:	0002      	movs	r2, r0
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	4a46      	ldr	r2, [pc, #280]	; (800495c <HAL_RCC_OscConfig+0x694>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e0b4      	b.n	80049b4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800484a:	4b3f      	ldr	r3, [pc, #252]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 800484c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800484e:	2380      	movs	r3, #128	; 0x80
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4013      	ands	r3, r2
 8004854:	d1ef      	bne.n	8004836 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004856:	2323      	movs	r3, #35	; 0x23
 8004858:	18fb      	adds	r3, r7, r3
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d105      	bne.n	800486c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004860:	4b39      	ldr	r3, [pc, #228]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 8004862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004864:	4b38      	ldr	r3, [pc, #224]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 8004866:	493e      	ldr	r1, [pc, #248]	; (8004960 <HAL_RCC_OscConfig+0x698>)
 8004868:	400a      	ands	r2, r1
 800486a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	2b00      	cmp	r3, #0
 8004872:	d100      	bne.n	8004876 <HAL_RCC_OscConfig+0x5ae>
 8004874:	e09d      	b.n	80049b2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	2b0c      	cmp	r3, #12
 800487a:	d100      	bne.n	800487e <HAL_RCC_OscConfig+0x5b6>
 800487c:	e076      	b.n	800496c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	2b02      	cmp	r3, #2
 8004884:	d145      	bne.n	8004912 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004886:	4b30      	ldr	r3, [pc, #192]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4b2f      	ldr	r3, [pc, #188]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 800488c:	4935      	ldr	r1, [pc, #212]	; (8004964 <HAL_RCC_OscConfig+0x69c>)
 800488e:	400a      	ands	r2, r1
 8004890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004892:	f7fe fa93 	bl	8002dbc <HAL_GetTick>
 8004896:	0003      	movs	r3, r0
 8004898:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800489c:	f7fe fa8e 	bl	8002dbc <HAL_GetTick>
 80048a0:	0002      	movs	r2, r0
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e082      	b.n	80049b4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80048ae:	4b26      	ldr	r3, [pc, #152]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	2380      	movs	r3, #128	; 0x80
 80048b4:	049b      	lsls	r3, r3, #18
 80048b6:	4013      	ands	r3, r2
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ba:	4b23      	ldr	r3, [pc, #140]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	4a2a      	ldr	r2, [pc, #168]	; (8004968 <HAL_RCC_OscConfig+0x6a0>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	0019      	movs	r1, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d2:	431a      	orrs	r2, r3
 80048d4:	4b1c      	ldr	r3, [pc, #112]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 80048d6:	430a      	orrs	r2, r1
 80048d8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048da:	4b1b      	ldr	r3, [pc, #108]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 80048e0:	2180      	movs	r1, #128	; 0x80
 80048e2:	0449      	lsls	r1, r1, #17
 80048e4:	430a      	orrs	r2, r1
 80048e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e8:	f7fe fa68 	bl	8002dbc <HAL_GetTick>
 80048ec:	0003      	movs	r3, r0
 80048ee:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f2:	f7fe fa63 	bl	8002dbc <HAL_GetTick>
 80048f6:	0002      	movs	r2, r0
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e057      	b.n	80049b4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004904:	4b10      	ldr	r3, [pc, #64]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	049b      	lsls	r3, r3, #18
 800490c:	4013      	ands	r3, r2
 800490e:	d0f0      	beq.n	80048f2 <HAL_RCC_OscConfig+0x62a>
 8004910:	e04f      	b.n	80049b2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004912:	4b0d      	ldr	r3, [pc, #52]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 8004918:	4912      	ldr	r1, [pc, #72]	; (8004964 <HAL_RCC_OscConfig+0x69c>)
 800491a:	400a      	ands	r2, r1
 800491c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491e:	f7fe fa4d 	bl	8002dbc <HAL_GetTick>
 8004922:	0003      	movs	r3, r0
 8004924:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004928:	f7fe fa48 	bl	8002dbc <HAL_GetTick>
 800492c:	0002      	movs	r2, r0
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e03c      	b.n	80049b4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800493a:	4b03      	ldr	r3, [pc, #12]	; (8004948 <HAL_RCC_OscConfig+0x680>)
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	2380      	movs	r3, #128	; 0x80
 8004940:	049b      	lsls	r3, r3, #18
 8004942:	4013      	ands	r3, r2
 8004944:	d1f0      	bne.n	8004928 <HAL_RCC_OscConfig+0x660>
 8004946:	e034      	b.n	80049b2 <HAL_RCC_OscConfig+0x6ea>
 8004948:	40021000 	.word	0x40021000
 800494c:	ffff1fff 	.word	0xffff1fff
 8004950:	fffffeff 	.word	0xfffffeff
 8004954:	40007000 	.word	0x40007000
 8004958:	fffffbff 	.word	0xfffffbff
 800495c:	00001388 	.word	0x00001388
 8004960:	efffffff 	.word	0xefffffff
 8004964:	feffffff 	.word	0xfeffffff
 8004968:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e01d      	b.n	80049b4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004978:	4b10      	ldr	r3, [pc, #64]	; (80049bc <HAL_RCC_OscConfig+0x6f4>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	2380      	movs	r3, #128	; 0x80
 8004982:	025b      	lsls	r3, r3, #9
 8004984:	401a      	ands	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	429a      	cmp	r2, r3
 800498c:	d10f      	bne.n	80049ae <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	23f0      	movs	r3, #240	; 0xf0
 8004992:	039b      	lsls	r3, r3, #14
 8004994:	401a      	ands	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499a:	429a      	cmp	r2, r3
 800499c:	d107      	bne.n	80049ae <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	23c0      	movs	r3, #192	; 0xc0
 80049a2:	041b      	lsls	r3, r3, #16
 80049a4:	401a      	ands	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d001      	beq.n	80049b2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	0018      	movs	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b00a      	add	sp, #40	; 0x28
 80049ba:	bdb0      	pop	{r4, r5, r7, pc}
 80049bc:	40021000 	.word	0x40021000

080049c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c0:	b5b0      	push	{r4, r5, r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e128      	b.n	8004c26 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049d4:	4b96      	ldr	r3, [pc, #600]	; (8004c30 <HAL_RCC_ClockConfig+0x270>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2201      	movs	r2, #1
 80049da:	4013      	ands	r3, r2
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d91e      	bls.n	8004a20 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e2:	4b93      	ldr	r3, [pc, #588]	; (8004c30 <HAL_RCC_ClockConfig+0x270>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2201      	movs	r2, #1
 80049e8:	4393      	bics	r3, r2
 80049ea:	0019      	movs	r1, r3
 80049ec:	4b90      	ldr	r3, [pc, #576]	; (8004c30 <HAL_RCC_ClockConfig+0x270>)
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049f4:	f7fe f9e2 	bl	8002dbc <HAL_GetTick>
 80049f8:	0003      	movs	r3, r0
 80049fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fc:	e009      	b.n	8004a12 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049fe:	f7fe f9dd 	bl	8002dbc <HAL_GetTick>
 8004a02:	0002      	movs	r2, r0
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	4a8a      	ldr	r2, [pc, #552]	; (8004c34 <HAL_RCC_ClockConfig+0x274>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e109      	b.n	8004c26 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a12:	4b87      	ldr	r3, [pc, #540]	; (8004c30 <HAL_RCC_ClockConfig+0x270>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2201      	movs	r2, #1
 8004a18:	4013      	ands	r3, r2
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d1ee      	bne.n	80049fe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2202      	movs	r2, #2
 8004a26:	4013      	ands	r3, r2
 8004a28:	d009      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a2a:	4b83      	ldr	r3, [pc, #524]	; (8004c38 <HAL_RCC_ClockConfig+0x278>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	22f0      	movs	r2, #240	; 0xf0
 8004a30:	4393      	bics	r3, r2
 8004a32:	0019      	movs	r1, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	4b7f      	ldr	r3, [pc, #508]	; (8004c38 <HAL_RCC_ClockConfig+0x278>)
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2201      	movs	r2, #1
 8004a44:	4013      	ands	r3, r2
 8004a46:	d100      	bne.n	8004a4a <HAL_RCC_ClockConfig+0x8a>
 8004a48:	e089      	b.n	8004b5e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d107      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a52:	4b79      	ldr	r3, [pc, #484]	; (8004c38 <HAL_RCC_ClockConfig+0x278>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	2380      	movs	r3, #128	; 0x80
 8004a58:	029b      	lsls	r3, r3, #10
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d120      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e0e1      	b.n	8004c26 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d107      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a6a:	4b73      	ldr	r3, [pc, #460]	; (8004c38 <HAL_RCC_ClockConfig+0x278>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	2380      	movs	r3, #128	; 0x80
 8004a70:	049b      	lsls	r3, r3, #18
 8004a72:	4013      	ands	r3, r2
 8004a74:	d114      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e0d5      	b.n	8004c26 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d106      	bne.n	8004a90 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a82:	4b6d      	ldr	r3, [pc, #436]	; (8004c38 <HAL_RCC_ClockConfig+0x278>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2204      	movs	r2, #4
 8004a88:	4013      	ands	r3, r2
 8004a8a:	d109      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0ca      	b.n	8004c26 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004a90:	4b69      	ldr	r3, [pc, #420]	; (8004c38 <HAL_RCC_ClockConfig+0x278>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	2380      	movs	r3, #128	; 0x80
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e0c2      	b.n	8004c26 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aa0:	4b65      	ldr	r3, [pc, #404]	; (8004c38 <HAL_RCC_ClockConfig+0x278>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	2203      	movs	r2, #3
 8004aa6:	4393      	bics	r3, r2
 8004aa8:	0019      	movs	r1, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	4b62      	ldr	r3, [pc, #392]	; (8004c38 <HAL_RCC_ClockConfig+0x278>)
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ab4:	f7fe f982 	bl	8002dbc <HAL_GetTick>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d111      	bne.n	8004ae8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ac4:	e009      	b.n	8004ada <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac6:	f7fe f979 	bl	8002dbc <HAL_GetTick>
 8004aca:	0002      	movs	r2, r0
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	4a58      	ldr	r2, [pc, #352]	; (8004c34 <HAL_RCC_ClockConfig+0x274>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e0a5      	b.n	8004c26 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ada:	4b57      	ldr	r3, [pc, #348]	; (8004c38 <HAL_RCC_ClockConfig+0x278>)
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	220c      	movs	r2, #12
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d1ef      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0x106>
 8004ae6:	e03a      	b.n	8004b5e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d111      	bne.n	8004b14 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004af0:	e009      	b.n	8004b06 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af2:	f7fe f963 	bl	8002dbc <HAL_GetTick>
 8004af6:	0002      	movs	r2, r0
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	4a4d      	ldr	r2, [pc, #308]	; (8004c34 <HAL_RCC_ClockConfig+0x274>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e08f      	b.n	8004c26 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b06:	4b4c      	ldr	r3, [pc, #304]	; (8004c38 <HAL_RCC_ClockConfig+0x278>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	220c      	movs	r2, #12
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	2b0c      	cmp	r3, #12
 8004b10:	d1ef      	bne.n	8004af2 <HAL_RCC_ClockConfig+0x132>
 8004b12:	e024      	b.n	8004b5e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d11b      	bne.n	8004b54 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b1c:	e009      	b.n	8004b32 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b1e:	f7fe f94d 	bl	8002dbc <HAL_GetTick>
 8004b22:	0002      	movs	r2, r0
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	4a42      	ldr	r2, [pc, #264]	; (8004c34 <HAL_RCC_ClockConfig+0x274>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e079      	b.n	8004c26 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b32:	4b41      	ldr	r3, [pc, #260]	; (8004c38 <HAL_RCC_ClockConfig+0x278>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	220c      	movs	r2, #12
 8004b38:	4013      	ands	r3, r2
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d1ef      	bne.n	8004b1e <HAL_RCC_ClockConfig+0x15e>
 8004b3e:	e00e      	b.n	8004b5e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b40:	f7fe f93c 	bl	8002dbc <HAL_GetTick>
 8004b44:	0002      	movs	r2, r0
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	4a3a      	ldr	r2, [pc, #232]	; (8004c34 <HAL_RCC_ClockConfig+0x274>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e068      	b.n	8004c26 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b54:	4b38      	ldr	r3, [pc, #224]	; (8004c38 <HAL_RCC_ClockConfig+0x278>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	220c      	movs	r2, #12
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d1f0      	bne.n	8004b40 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b5e:	4b34      	ldr	r3, [pc, #208]	; (8004c30 <HAL_RCC_ClockConfig+0x270>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2201      	movs	r2, #1
 8004b64:	4013      	ands	r3, r2
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d21e      	bcs.n	8004baa <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6c:	4b30      	ldr	r3, [pc, #192]	; (8004c30 <HAL_RCC_ClockConfig+0x270>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2201      	movs	r2, #1
 8004b72:	4393      	bics	r3, r2
 8004b74:	0019      	movs	r1, r3
 8004b76:	4b2e      	ldr	r3, [pc, #184]	; (8004c30 <HAL_RCC_ClockConfig+0x270>)
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b7e:	f7fe f91d 	bl	8002dbc <HAL_GetTick>
 8004b82:	0003      	movs	r3, r0
 8004b84:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b86:	e009      	b.n	8004b9c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b88:	f7fe f918 	bl	8002dbc <HAL_GetTick>
 8004b8c:	0002      	movs	r2, r0
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	4a28      	ldr	r2, [pc, #160]	; (8004c34 <HAL_RCC_ClockConfig+0x274>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e044      	b.n	8004c26 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9c:	4b24      	ldr	r3, [pc, #144]	; (8004c30 <HAL_RCC_ClockConfig+0x270>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d1ee      	bne.n	8004b88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2204      	movs	r2, #4
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	d009      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bb4:	4b20      	ldr	r3, [pc, #128]	; (8004c38 <HAL_RCC_ClockConfig+0x278>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	4a20      	ldr	r2, [pc, #128]	; (8004c3c <HAL_RCC_ClockConfig+0x27c>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	0019      	movs	r1, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	4b1d      	ldr	r3, [pc, #116]	; (8004c38 <HAL_RCC_ClockConfig+0x278>)
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2208      	movs	r2, #8
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d00a      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bd2:	4b19      	ldr	r3, [pc, #100]	; (8004c38 <HAL_RCC_ClockConfig+0x278>)
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	4a1a      	ldr	r2, [pc, #104]	; (8004c40 <HAL_RCC_ClockConfig+0x280>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	0019      	movs	r1, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	00da      	lsls	r2, r3, #3
 8004be2:	4b15      	ldr	r3, [pc, #84]	; (8004c38 <HAL_RCC_ClockConfig+0x278>)
 8004be4:	430a      	orrs	r2, r1
 8004be6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004be8:	f000 f832 	bl	8004c50 <HAL_RCC_GetSysClockFreq>
 8004bec:	0001      	movs	r1, r0
 8004bee:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <HAL_RCC_ClockConfig+0x278>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	091b      	lsrs	r3, r3, #4
 8004bf4:	220f      	movs	r2, #15
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	4a12      	ldr	r2, [pc, #72]	; (8004c44 <HAL_RCC_ClockConfig+0x284>)
 8004bfa:	5cd3      	ldrb	r3, [r2, r3]
 8004bfc:	000a      	movs	r2, r1
 8004bfe:	40da      	lsrs	r2, r3
 8004c00:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <HAL_RCC_ClockConfig+0x288>)
 8004c02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c04:	4b11      	ldr	r3, [pc, #68]	; (8004c4c <HAL_RCC_ClockConfig+0x28c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	250b      	movs	r5, #11
 8004c0a:	197c      	adds	r4, r7, r5
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f7fe f88f 	bl	8002d30 <HAL_InitTick>
 8004c12:	0003      	movs	r3, r0
 8004c14:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004c16:	197b      	adds	r3, r7, r5
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004c1e:	197b      	adds	r3, r7, r5
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	e000      	b.n	8004c26 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	0018      	movs	r0, r3
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	b004      	add	sp, #16
 8004c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	40022000 	.word	0x40022000
 8004c34:	00001388 	.word	0x00001388
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	fffff8ff 	.word	0xfffff8ff
 8004c40:	ffffc7ff 	.word	0xffffc7ff
 8004c44:	08006a20 	.word	0x08006a20
 8004c48:	20000010 	.word	0x20000010
 8004c4c:	2000002c 	.word	0x2000002c

08004c50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c50:	b5b0      	push	{r4, r5, r7, lr}
 8004c52:	b08e      	sub	sp, #56	; 0x38
 8004c54:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004c56:	4b4c      	ldr	r3, [pc, #304]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x138>)
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c5e:	230c      	movs	r3, #12
 8004c60:	4013      	ands	r3, r2
 8004c62:	2b0c      	cmp	r3, #12
 8004c64:	d014      	beq.n	8004c90 <HAL_RCC_GetSysClockFreq+0x40>
 8004c66:	d900      	bls.n	8004c6a <HAL_RCC_GetSysClockFreq+0x1a>
 8004c68:	e07b      	b.n	8004d62 <HAL_RCC_GetSysClockFreq+0x112>
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d002      	beq.n	8004c74 <HAL_RCC_GetSysClockFreq+0x24>
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d00b      	beq.n	8004c8a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c72:	e076      	b.n	8004d62 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004c74:	4b44      	ldr	r3, [pc, #272]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x138>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2210      	movs	r2, #16
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d002      	beq.n	8004c84 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004c7e:	4b43      	ldr	r3, [pc, #268]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x13c>)
 8004c80:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004c82:	e07c      	b.n	8004d7e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004c84:	4b42      	ldr	r3, [pc, #264]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x140>)
 8004c86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c88:	e079      	b.n	8004d7e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c8a:	4b42      	ldr	r3, [pc, #264]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x144>)
 8004c8c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c8e:	e076      	b.n	8004d7e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c92:	0c9a      	lsrs	r2, r3, #18
 8004c94:	230f      	movs	r3, #15
 8004c96:	401a      	ands	r2, r3
 8004c98:	4b3f      	ldr	r3, [pc, #252]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x148>)
 8004c9a:	5c9b      	ldrb	r3, [r3, r2]
 8004c9c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca0:	0d9a      	lsrs	r2, r3, #22
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004caa:	4b37      	ldr	r3, [pc, #220]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x138>)
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	2380      	movs	r3, #128	; 0x80
 8004cb0:	025b      	lsls	r3, r3, #9
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	d01a      	beq.n	8004cec <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb8:	61bb      	str	r3, [r7, #24]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61fb      	str	r3, [r7, #28]
 8004cbe:	4a35      	ldr	r2, [pc, #212]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x144>)
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	69b8      	ldr	r0, [r7, #24]
 8004cc4:	69f9      	ldr	r1, [r7, #28]
 8004cc6:	f7fb fbb5 	bl	8000434 <__aeabi_lmul>
 8004cca:	0002      	movs	r2, r0
 8004ccc:	000b      	movs	r3, r1
 8004cce:	0010      	movs	r0, r2
 8004cd0:	0019      	movs	r1, r3
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f7fb fb89 	bl	80003f4 <__aeabi_uldivmod>
 8004ce2:	0002      	movs	r2, r0
 8004ce4:	000b      	movs	r3, r1
 8004ce6:	0013      	movs	r3, r2
 8004ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cea:	e037      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004cec:	4b26      	ldr	r3, [pc, #152]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x138>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2210      	movs	r2, #16
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	d01a      	beq.n	8004d2c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf8:	60bb      	str	r3, [r7, #8]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	4a23      	ldr	r2, [pc, #140]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x13c>)
 8004d00:	2300      	movs	r3, #0
 8004d02:	68b8      	ldr	r0, [r7, #8]
 8004d04:	68f9      	ldr	r1, [r7, #12]
 8004d06:	f7fb fb95 	bl	8000434 <__aeabi_lmul>
 8004d0a:	0002      	movs	r2, r0
 8004d0c:	000b      	movs	r3, r1
 8004d0e:	0010      	movs	r0, r2
 8004d10:	0019      	movs	r1, r3
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	603b      	str	r3, [r7, #0]
 8004d16:	2300      	movs	r3, #0
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f7fb fb69 	bl	80003f4 <__aeabi_uldivmod>
 8004d22:	0002      	movs	r2, r0
 8004d24:	000b      	movs	r3, r1
 8004d26:	0013      	movs	r3, r2
 8004d28:	637b      	str	r3, [r7, #52]	; 0x34
 8004d2a:	e017      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	0018      	movs	r0, r3
 8004d30:	2300      	movs	r3, #0
 8004d32:	0019      	movs	r1, r3
 8004d34:	4a16      	ldr	r2, [pc, #88]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x140>)
 8004d36:	2300      	movs	r3, #0
 8004d38:	f7fb fb7c 	bl	8000434 <__aeabi_lmul>
 8004d3c:	0002      	movs	r2, r0
 8004d3e:	000b      	movs	r3, r1
 8004d40:	0010      	movs	r0, r2
 8004d42:	0019      	movs	r1, r3
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	001c      	movs	r4, r3
 8004d48:	2300      	movs	r3, #0
 8004d4a:	001d      	movs	r5, r3
 8004d4c:	0022      	movs	r2, r4
 8004d4e:	002b      	movs	r3, r5
 8004d50:	f7fb fb50 	bl	80003f4 <__aeabi_uldivmod>
 8004d54:	0002      	movs	r2, r0
 8004d56:	000b      	movs	r3, r1
 8004d58:	0013      	movs	r3, r2
 8004d5a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d60:	e00d      	b.n	8004d7e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004d62:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x138>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	0b5b      	lsrs	r3, r3, #13
 8004d68:	2207      	movs	r2, #7
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	3301      	adds	r3, #1
 8004d72:	2280      	movs	r2, #128	; 0x80
 8004d74:	0212      	lsls	r2, r2, #8
 8004d76:	409a      	lsls	r2, r3
 8004d78:	0013      	movs	r3, r2
 8004d7a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d7c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004d80:	0018      	movs	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b00e      	add	sp, #56	; 0x38
 8004d86:	bdb0      	pop	{r4, r5, r7, pc}
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	003d0900 	.word	0x003d0900
 8004d90:	00f42400 	.word	0x00f42400
 8004d94:	007a1200 	.word	0x007a1200
 8004d98:	08006a30 	.word	0x08006a30

08004d9c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004da4:	2017      	movs	r0, #23
 8004da6:	183b      	adds	r3, r7, r0
 8004da8:	2200      	movs	r2, #0
 8004daa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2220      	movs	r2, #32
 8004db2:	4013      	ands	r3, r2
 8004db4:	d100      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004db6:	e0c7      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004db8:	4b84      	ldr	r3, [pc, #528]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dbc:	2380      	movs	r3, #128	; 0x80
 8004dbe:	055b      	lsls	r3, r3, #21
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	d109      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dc4:	4b81      	ldr	r3, [pc, #516]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dc8:	4b80      	ldr	r3, [pc, #512]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004dca:	2180      	movs	r1, #128	; 0x80
 8004dcc:	0549      	lsls	r1, r1, #21
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004dd2:	183b      	adds	r3, r7, r0
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd8:	4b7d      	ldr	r3, [pc, #500]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	2380      	movs	r3, #128	; 0x80
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	4013      	ands	r3, r2
 8004de2:	d11a      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004de4:	4b7a      	ldr	r3, [pc, #488]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	4b79      	ldr	r3, [pc, #484]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004dea:	2180      	movs	r1, #128	; 0x80
 8004dec:	0049      	lsls	r1, r1, #1
 8004dee:	430a      	orrs	r2, r1
 8004df0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004df2:	f7fd ffe3 	bl	8002dbc <HAL_GetTick>
 8004df6:	0003      	movs	r3, r0
 8004df8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dfa:	e008      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dfc:	f7fd ffde 	bl	8002dbc <HAL_GetTick>
 8004e00:	0002      	movs	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b64      	cmp	r3, #100	; 0x64
 8004e08:	d901      	bls.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e0d9      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e0e:	4b70      	ldr	r3, [pc, #448]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	2380      	movs	r3, #128	; 0x80
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	4013      	ands	r3, r2
 8004e18:	d0f0      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004e1a:	4b6c      	ldr	r3, [pc, #432]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	23c0      	movs	r3, #192	; 0xc0
 8004e20:	039b      	lsls	r3, r3, #14
 8004e22:	4013      	ands	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	23c0      	movs	r3, #192	; 0xc0
 8004e2c:	039b      	lsls	r3, r3, #14
 8004e2e:	4013      	ands	r3, r2
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d013      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	23c0      	movs	r3, #192	; 0xc0
 8004e3c:	029b      	lsls	r3, r3, #10
 8004e3e:	401a      	ands	r2, r3
 8004e40:	23c0      	movs	r3, #192	; 0xc0
 8004e42:	029b      	lsls	r3, r3, #10
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d10a      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004e48:	4b60      	ldr	r3, [pc, #384]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	2380      	movs	r3, #128	; 0x80
 8004e4e:	029b      	lsls	r3, r3, #10
 8004e50:	401a      	ands	r2, r3
 8004e52:	2380      	movs	r3, #128	; 0x80
 8004e54:	029b      	lsls	r3, r3, #10
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d101      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e0b1      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004e5e:	4b5b      	ldr	r3, [pc, #364]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004e60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e62:	23c0      	movs	r3, #192	; 0xc0
 8004e64:	029b      	lsls	r3, r3, #10
 8004e66:	4013      	ands	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d03b      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	23c0      	movs	r3, #192	; 0xc0
 8004e76:	029b      	lsls	r3, r3, #10
 8004e78:	4013      	ands	r3, r2
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d033      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2220      	movs	r2, #32
 8004e86:	4013      	ands	r3, r2
 8004e88:	d02e      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004e8a:	4b50      	ldr	r3, [pc, #320]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e8e:	4a51      	ldr	r2, [pc, #324]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e94:	4b4d      	ldr	r3, [pc, #308]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004e96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e98:	4b4c      	ldr	r3, [pc, #304]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004e9a:	2180      	movs	r1, #128	; 0x80
 8004e9c:	0309      	lsls	r1, r1, #12
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ea2:	4b4a      	ldr	r3, [pc, #296]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004ea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ea6:	4b49      	ldr	r3, [pc, #292]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004ea8:	494b      	ldr	r1, [pc, #300]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004eaa:	400a      	ands	r2, r1
 8004eac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004eae:	4b47      	ldr	r3, [pc, #284]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	2380      	movs	r3, #128	; 0x80
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	4013      	ands	r3, r2
 8004ebc:	d014      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ebe:	f7fd ff7d 	bl	8002dbc <HAL_GetTick>
 8004ec2:	0003      	movs	r3, r0
 8004ec4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ec6:	e009      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ec8:	f7fd ff78 	bl	8002dbc <HAL_GetTick>
 8004ecc:	0002      	movs	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	4a42      	ldr	r2, [pc, #264]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e072      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004edc:	4b3b      	ldr	r3, [pc, #236]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004ede:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ee0:	2380      	movs	r3, #128	; 0x80
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d0ef      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2220      	movs	r2, #32
 8004eee:	4013      	ands	r3, r2
 8004ef0:	d01f      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	23c0      	movs	r3, #192	; 0xc0
 8004ef8:	029b      	lsls	r3, r3, #10
 8004efa:	401a      	ands	r2, r3
 8004efc:	23c0      	movs	r3, #192	; 0xc0
 8004efe:	029b      	lsls	r3, r3, #10
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d10c      	bne.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004f04:	4b31      	ldr	r3, [pc, #196]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a35      	ldr	r2, [pc, #212]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	0019      	movs	r1, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	23c0      	movs	r3, #192	; 0xc0
 8004f14:	039b      	lsls	r3, r3, #14
 8004f16:	401a      	ands	r2, r3
 8004f18:	4b2c      	ldr	r3, [pc, #176]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	4b2b      	ldr	r3, [pc, #172]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f20:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	23c0      	movs	r3, #192	; 0xc0
 8004f28:	029b      	lsls	r3, r3, #10
 8004f2a:	401a      	ands	r2, r3
 8004f2c:	4b27      	ldr	r3, [pc, #156]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f32:	2317      	movs	r3, #23
 8004f34:	18fb      	adds	r3, r7, r3
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d105      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f3c:	4b23      	ldr	r3, [pc, #140]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f40:	4b22      	ldr	r3, [pc, #136]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f42:	4928      	ldr	r1, [pc, #160]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f44:	400a      	ands	r2, r1
 8004f46:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d009      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f52:	4b1e      	ldr	r3, [pc, #120]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f56:	220c      	movs	r2, #12
 8004f58:	4393      	bics	r3, r2
 8004f5a:	0019      	movs	r1, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	4b1a      	ldr	r3, [pc, #104]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f62:	430a      	orrs	r2, r1
 8004f64:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2204      	movs	r2, #4
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	d009      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f70:	4b16      	ldr	r3, [pc, #88]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f74:	4a1c      	ldr	r2, [pc, #112]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	0019      	movs	r1, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	4b13      	ldr	r3, [pc, #76]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f80:	430a      	orrs	r2, r1
 8004f82:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2208      	movs	r2, #8
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	d009      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f8e:	4b0f      	ldr	r3, [pc, #60]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f92:	4a16      	ldr	r2, [pc, #88]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	0019      	movs	r1, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2280      	movs	r2, #128	; 0x80
 8004fa8:	4013      	ands	r3, r2
 8004faa:	d009      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004fac:	4b07      	ldr	r3, [pc, #28]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb0:	4a0f      	ldr	r2, [pc, #60]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	0019      	movs	r1, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695a      	ldr	r2, [r3, #20]
 8004fba:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	b006      	add	sp, #24
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	40007000 	.word	0x40007000
 8004fd4:	fffcffff 	.word	0xfffcffff
 8004fd8:	fff7ffff 	.word	0xfff7ffff
 8004fdc:	00001388 	.word	0x00001388
 8004fe0:	ffcfffff 	.word	0xffcfffff
 8004fe4:	efffffff 	.word	0xefffffff
 8004fe8:	fffff3ff 	.word	0xfffff3ff
 8004fec:	ffffcfff 	.word	0xffffcfff
 8004ff0:	fff3ffff 	.word	0xfff3ffff

08004ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e07b      	b.n	80050fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	2b00      	cmp	r3, #0
 800500c:	d109      	bne.n	8005022 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	2382      	movs	r3, #130	; 0x82
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	429a      	cmp	r2, r3
 8005018:	d009      	beq.n	800502e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	61da      	str	r2, [r3, #28]
 8005020:	e005      	b.n	800502e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2251      	movs	r2, #81	; 0x51
 8005038:	5c9b      	ldrb	r3, [r3, r2]
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	d107      	bne.n	8005050 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2250      	movs	r2, #80	; 0x50
 8005044:	2100      	movs	r1, #0
 8005046:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	0018      	movs	r0, r3
 800504c:	f7fd f904 	bl	8002258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2251      	movs	r2, #81	; 0x51
 8005054:	2102      	movs	r1, #2
 8005056:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2140      	movs	r1, #64	; 0x40
 8005064:	438a      	bics	r2, r1
 8005066:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	2382      	movs	r3, #130	; 0x82
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	401a      	ands	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6899      	ldr	r1, [r3, #8]
 8005076:	2384      	movs	r3, #132	; 0x84
 8005078:	021b      	lsls	r3, r3, #8
 800507a:	400b      	ands	r3, r1
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68d9      	ldr	r1, [r3, #12]
 8005082:	2380      	movs	r3, #128	; 0x80
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	400b      	ands	r3, r1
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	2102      	movs	r1, #2
 8005090:	400b      	ands	r3, r1
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	2101      	movs	r1, #1
 800509a:	400b      	ands	r3, r1
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6999      	ldr	r1, [r3, #24]
 80050a2:	2380      	movs	r3, #128	; 0x80
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	400b      	ands	r3, r1
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	2138      	movs	r1, #56	; 0x38
 80050b0:	400b      	ands	r3, r1
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	2180      	movs	r1, #128	; 0x80
 80050ba:	400b      	ands	r3, r1
 80050bc:	431a      	orrs	r2, r3
 80050be:	0011      	movs	r1, r2
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050c4:	2380      	movs	r3, #128	; 0x80
 80050c6:	019b      	lsls	r3, r3, #6
 80050c8:	401a      	ands	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	0c1b      	lsrs	r3, r3, #16
 80050d8:	2204      	movs	r2, #4
 80050da:	4013      	ands	r3, r2
 80050dc:	0019      	movs	r1, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	2210      	movs	r2, #16
 80050e4:	401a      	ands	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2251      	movs	r2, #81	; 0x51
 80050f8:	2101      	movs	r1, #1
 80050fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	0018      	movs	r0, r3
 8005100:	46bd      	mov	sp, r7
 8005102:	b002      	add	sp, #8
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b088      	sub	sp, #32
 800510a:	af00      	add	r7, sp, #0
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	603b      	str	r3, [r7, #0]
 8005112:	1dbb      	adds	r3, r7, #6
 8005114:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005116:	231f      	movs	r3, #31
 8005118:	18fb      	adds	r3, r7, r3
 800511a:	2200      	movs	r2, #0
 800511c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2250      	movs	r2, #80	; 0x50
 8005122:	5c9b      	ldrb	r3, [r3, r2]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_SPI_Transmit+0x26>
 8005128:	2302      	movs	r3, #2
 800512a:	e145      	b.n	80053b8 <HAL_SPI_Transmit+0x2b2>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2250      	movs	r2, #80	; 0x50
 8005130:	2101      	movs	r1, #1
 8005132:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005134:	f7fd fe42 	bl	8002dbc <HAL_GetTick>
 8005138:	0003      	movs	r3, r0
 800513a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800513c:	2316      	movs	r3, #22
 800513e:	18fb      	adds	r3, r7, r3
 8005140:	1dba      	adds	r2, r7, #6
 8005142:	8812      	ldrh	r2, [r2, #0]
 8005144:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2251      	movs	r2, #81	; 0x51
 800514a:	5c9b      	ldrb	r3, [r3, r2]
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b01      	cmp	r3, #1
 8005150:	d004      	beq.n	800515c <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005152:	231f      	movs	r3, #31
 8005154:	18fb      	adds	r3, r7, r3
 8005156:	2202      	movs	r2, #2
 8005158:	701a      	strb	r2, [r3, #0]
    goto error;
 800515a:	e126      	b.n	80053aa <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_SPI_Transmit+0x64>
 8005162:	1dbb      	adds	r3, r7, #6
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d104      	bne.n	8005174 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800516a:	231f      	movs	r3, #31
 800516c:	18fb      	adds	r3, r7, r3
 800516e:	2201      	movs	r2, #1
 8005170:	701a      	strb	r2, [r3, #0]
    goto error;
 8005172:	e11a      	b.n	80053aa <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2251      	movs	r2, #81	; 0x51
 8005178:	2103      	movs	r1, #3
 800517a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	1dba      	adds	r2, r7, #6
 800518c:	8812      	ldrh	r2, [r2, #0]
 800518e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	1dba      	adds	r2, r7, #6
 8005194:	8812      	ldrh	r2, [r2, #0]
 8005196:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	2380      	movs	r3, #128	; 0x80
 80051bc:	021b      	lsls	r3, r3, #8
 80051be:	429a      	cmp	r2, r3
 80051c0:	d110      	bne.n	80051e4 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2140      	movs	r1, #64	; 0x40
 80051ce:	438a      	bics	r2, r1
 80051d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2180      	movs	r1, #128	; 0x80
 80051de:	01c9      	lsls	r1, r1, #7
 80051e0:	430a      	orrs	r2, r1
 80051e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2240      	movs	r2, #64	; 0x40
 80051ec:	4013      	ands	r3, r2
 80051ee:	2b40      	cmp	r3, #64	; 0x40
 80051f0:	d007      	beq.n	8005202 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2140      	movs	r1, #64	; 0x40
 80051fe:	430a      	orrs	r2, r1
 8005200:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	2380      	movs	r3, #128	; 0x80
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	429a      	cmp	r2, r3
 800520c:	d152      	bne.n	80052b4 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d004      	beq.n	8005220 <HAL_SPI_Transmit+0x11a>
 8005216:	2316      	movs	r3, #22
 8005218:	18fb      	adds	r3, r7, r3
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d143      	bne.n	80052a8 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005224:	881a      	ldrh	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005230:	1c9a      	adds	r2, r3, #2
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005244:	e030      	b.n	80052a8 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	2202      	movs	r2, #2
 800524e:	4013      	ands	r3, r2
 8005250:	2b02      	cmp	r3, #2
 8005252:	d112      	bne.n	800527a <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005258:	881a      	ldrh	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005264:	1c9a      	adds	r2, r3, #2
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	86da      	strh	r2, [r3, #54]	; 0x36
 8005278:	e016      	b.n	80052a8 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800527a:	f7fd fd9f 	bl	8002dbc <HAL_GetTick>
 800527e:	0002      	movs	r2, r0
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d802      	bhi.n	8005290 <HAL_SPI_Transmit+0x18a>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	3301      	adds	r3, #1
 800528e:	d102      	bne.n	8005296 <HAL_SPI_Transmit+0x190>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d108      	bne.n	80052a8 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8005296:	231f      	movs	r3, #31
 8005298:	18fb      	adds	r3, r7, r3
 800529a:	2203      	movs	r2, #3
 800529c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2251      	movs	r2, #81	; 0x51
 80052a2:	2101      	movs	r1, #1
 80052a4:	5499      	strb	r1, [r3, r2]
          goto error;
 80052a6:	e080      	b.n	80053aa <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1c9      	bne.n	8005246 <HAL_SPI_Transmit+0x140>
 80052b2:	e053      	b.n	800535c <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d004      	beq.n	80052c6 <HAL_SPI_Transmit+0x1c0>
 80052bc:	2316      	movs	r3, #22
 80052be:	18fb      	adds	r3, r7, r3
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d145      	bne.n	8005352 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	330c      	adds	r3, #12
 80052d0:	7812      	ldrb	r2, [r2, #0]
 80052d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80052ec:	e031      	b.n	8005352 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2202      	movs	r2, #2
 80052f6:	4013      	ands	r3, r2
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d113      	bne.n	8005324 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	330c      	adds	r3, #12
 8005306:	7812      	ldrb	r2, [r2, #0]
 8005308:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005318:	b29b      	uxth	r3, r3
 800531a:	3b01      	subs	r3, #1
 800531c:	b29a      	uxth	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	86da      	strh	r2, [r3, #54]	; 0x36
 8005322:	e016      	b.n	8005352 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005324:	f7fd fd4a 	bl	8002dbc <HAL_GetTick>
 8005328:	0002      	movs	r2, r0
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d802      	bhi.n	800533a <HAL_SPI_Transmit+0x234>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	3301      	adds	r3, #1
 8005338:	d102      	bne.n	8005340 <HAL_SPI_Transmit+0x23a>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d108      	bne.n	8005352 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8005340:	231f      	movs	r3, #31
 8005342:	18fb      	adds	r3, r7, r3
 8005344:	2203      	movs	r2, #3
 8005346:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2251      	movs	r2, #81	; 0x51
 800534c:	2101      	movs	r1, #1
 800534e:	5499      	strb	r1, [r3, r2]
          goto error;
 8005350:	e02b      	b.n	80053aa <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005356:	b29b      	uxth	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1c8      	bne.n	80052ee <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	6839      	ldr	r1, [r7, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	0018      	movs	r0, r3
 8005364:	f000 f8ba 	bl	80054dc <SPI_EndRxTxTransaction>
 8005368:	1e03      	subs	r3, r0, #0
 800536a:	d002      	beq.n	8005372 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2220      	movs	r2, #32
 8005370:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10a      	bne.n	8005390 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800537a:	2300      	movs	r3, #0
 800537c:	613b      	str	r3, [r7, #16]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005394:	2b00      	cmp	r3, #0
 8005396:	d004      	beq.n	80053a2 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8005398:	231f      	movs	r3, #31
 800539a:	18fb      	adds	r3, r7, r3
 800539c:	2201      	movs	r2, #1
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	e003      	b.n	80053aa <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2251      	movs	r2, #81	; 0x51
 80053a6:	2101      	movs	r1, #1
 80053a8:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2250      	movs	r2, #80	; 0x50
 80053ae:	2100      	movs	r1, #0
 80053b0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80053b2:	231f      	movs	r3, #31
 80053b4:	18fb      	adds	r3, r7, r3
 80053b6:	781b      	ldrb	r3, [r3, #0]
}
 80053b8:	0018      	movs	r0, r3
 80053ba:	46bd      	mov	sp, r7
 80053bc:	b008      	add	sp, #32
 80053be:	bd80      	pop	{r7, pc}

080053c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	1dfb      	adds	r3, r7, #7
 80053ce:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053d0:	f7fd fcf4 	bl	8002dbc <HAL_GetTick>
 80053d4:	0002      	movs	r2, r0
 80053d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d8:	1a9b      	subs	r3, r3, r2
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	18d3      	adds	r3, r2, r3
 80053de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053e0:	f7fd fcec 	bl	8002dbc <HAL_GetTick>
 80053e4:	0003      	movs	r3, r0
 80053e6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053e8:	4b3a      	ldr	r3, [pc, #232]	; (80054d4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	015b      	lsls	r3, r3, #5
 80053ee:	0d1b      	lsrs	r3, r3, #20
 80053f0:	69fa      	ldr	r2, [r7, #28]
 80053f2:	4353      	muls	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053f6:	e058      	b.n	80054aa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	3301      	adds	r3, #1
 80053fc:	d055      	beq.n	80054aa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053fe:	f7fd fcdd 	bl	8002dbc <HAL_GetTick>
 8005402:	0002      	movs	r2, r0
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	69fa      	ldr	r2, [r7, #28]
 800540a:	429a      	cmp	r2, r3
 800540c:	d902      	bls.n	8005414 <SPI_WaitFlagStateUntilTimeout+0x54>
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d142      	bne.n	800549a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	21e0      	movs	r1, #224	; 0xe0
 8005420:	438a      	bics	r2, r1
 8005422:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	2382      	movs	r3, #130	; 0x82
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	429a      	cmp	r2, r3
 800542e:	d113      	bne.n	8005458 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	2380      	movs	r3, #128	; 0x80
 8005436:	021b      	lsls	r3, r3, #8
 8005438:	429a      	cmp	r2, r3
 800543a:	d005      	beq.n	8005448 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	2380      	movs	r3, #128	; 0x80
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	429a      	cmp	r2, r3
 8005446:	d107      	bne.n	8005458 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2140      	movs	r1, #64	; 0x40
 8005454:	438a      	bics	r2, r1
 8005456:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800545c:	2380      	movs	r3, #128	; 0x80
 800545e:	019b      	lsls	r3, r3, #6
 8005460:	429a      	cmp	r2, r3
 8005462:	d110      	bne.n	8005486 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	491a      	ldr	r1, [pc, #104]	; (80054d8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005470:	400a      	ands	r2, r1
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2180      	movs	r1, #128	; 0x80
 8005480:	0189      	lsls	r1, r1, #6
 8005482:	430a      	orrs	r2, r1
 8005484:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2251      	movs	r2, #81	; 0x51
 800548a:	2101      	movs	r1, #1
 800548c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2250      	movs	r2, #80	; 0x50
 8005492:	2100      	movs	r1, #0
 8005494:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e017      	b.n	80054ca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	4013      	ands	r3, r2
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	425a      	negs	r2, r3
 80054ba:	4153      	adcs	r3, r2
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	001a      	movs	r2, r3
 80054c0:	1dfb      	adds	r3, r7, #7
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d197      	bne.n	80053f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	0018      	movs	r0, r3
 80054cc:	46bd      	mov	sp, r7
 80054ce:	b008      	add	sp, #32
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	20000010 	.word	0x20000010
 80054d8:	ffffdfff 	.word	0xffffdfff

080054dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af02      	add	r7, sp, #8
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054e8:	4b1d      	ldr	r3, [pc, #116]	; (8005560 <SPI_EndRxTxTransaction+0x84>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	491d      	ldr	r1, [pc, #116]	; (8005564 <SPI_EndRxTxTransaction+0x88>)
 80054ee:	0018      	movs	r0, r3
 80054f0:	f7fa fe0a 	bl	8000108 <__udivsi3>
 80054f4:	0003      	movs	r3, r0
 80054f6:	001a      	movs	r2, r3
 80054f8:	0013      	movs	r3, r2
 80054fa:	015b      	lsls	r3, r3, #5
 80054fc:	1a9b      	subs	r3, r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	189b      	adds	r3, r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	2382      	movs	r3, #130	; 0x82
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	429a      	cmp	r2, r3
 8005510:	d112      	bne.n	8005538 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	0013      	movs	r3, r2
 800551c:	2200      	movs	r2, #0
 800551e:	2180      	movs	r1, #128	; 0x80
 8005520:	f7ff ff4e 	bl	80053c0 <SPI_WaitFlagStateUntilTimeout>
 8005524:	1e03      	subs	r3, r0, #0
 8005526:	d016      	beq.n	8005556 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552c:	2220      	movs	r2, #32
 800552e:	431a      	orrs	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e00f      	b.n	8005558 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	3b01      	subs	r3, #1
 8005542:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2280      	movs	r2, #128	; 0x80
 800554c:	4013      	ands	r3, r2
 800554e:	2b80      	cmp	r3, #128	; 0x80
 8005550:	d0f2      	beq.n	8005538 <SPI_EndRxTxTransaction+0x5c>
 8005552:	e000      	b.n	8005556 <SPI_EndRxTxTransaction+0x7a>
        break;
 8005554:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	0018      	movs	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	b006      	add	sp, #24
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20000010 	.word	0x20000010
 8005564:	016e3600 	.word	0x016e3600

08005568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e032      	b.n	80055e0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2239      	movs	r2, #57	; 0x39
 800557e:	5c9b      	ldrb	r3, [r3, r2]
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d107      	bne.n	8005596 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2238      	movs	r2, #56	; 0x38
 800558a:	2100      	movs	r1, #0
 800558c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	0018      	movs	r0, r3
 8005592:	f7fc fff3 	bl	800257c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2239      	movs	r2, #57	; 0x39
 800559a:	2102      	movs	r1, #2
 800559c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	3304      	adds	r3, #4
 80055a6:	0019      	movs	r1, r3
 80055a8:	0010      	movs	r0, r2
 80055aa:	f000 ff87 	bl	80064bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	223e      	movs	r2, #62	; 0x3e
 80055b2:	2101      	movs	r1, #1
 80055b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	223a      	movs	r2, #58	; 0x3a
 80055ba:	2101      	movs	r1, #1
 80055bc:	5499      	strb	r1, [r3, r2]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	223b      	movs	r2, #59	; 0x3b
 80055c2:	2101      	movs	r1, #1
 80055c4:	5499      	strb	r1, [r3, r2]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	223c      	movs	r2, #60	; 0x3c
 80055ca:	2101      	movs	r1, #1
 80055cc:	5499      	strb	r1, [r3, r2]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	223d      	movs	r2, #61	; 0x3d
 80055d2:	2101      	movs	r1, #1
 80055d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2239      	movs	r2, #57	; 0x39
 80055da:	2101      	movs	r1, #1
 80055dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	0018      	movs	r0, r3
 80055e2:	46bd      	mov	sp, r7
 80055e4:	b002      	add	sp, #8
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e032      	b.n	8005660 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2239      	movs	r2, #57	; 0x39
 80055fe:	5c9b      	ldrb	r3, [r3, r2]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d107      	bne.n	8005616 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2238      	movs	r2, #56	; 0x38
 800560a:	2100      	movs	r1, #0
 800560c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	0018      	movs	r0, r3
 8005612:	f000 f829 	bl	8005668 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2239      	movs	r2, #57	; 0x39
 800561a:	2102      	movs	r1, #2
 800561c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3304      	adds	r3, #4
 8005626:	0019      	movs	r1, r3
 8005628:	0010      	movs	r0, r2
 800562a:	f000 ff47 	bl	80064bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	223e      	movs	r2, #62	; 0x3e
 8005632:	2101      	movs	r1, #1
 8005634:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	223a      	movs	r2, #58	; 0x3a
 800563a:	2101      	movs	r1, #1
 800563c:	5499      	strb	r1, [r3, r2]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	223b      	movs	r2, #59	; 0x3b
 8005642:	2101      	movs	r1, #1
 8005644:	5499      	strb	r1, [r3, r2]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	223c      	movs	r2, #60	; 0x3c
 800564a:	2101      	movs	r1, #1
 800564c:	5499      	strb	r1, [r3, r2]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	223d      	movs	r2, #61	; 0x3d
 8005652:	2101      	movs	r1, #1
 8005654:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2239      	movs	r2, #57	; 0x39
 800565a:	2101      	movs	r1, #1
 800565c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	0018      	movs	r0, r3
 8005662:	46bd      	mov	sp, r7
 8005664:	b002      	add	sp, #8
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005670:	46c0      	nop			; (mov r8, r8)
 8005672:	46bd      	mov	sp, r7
 8005674:	b002      	add	sp, #8
 8005676:	bd80      	pop	{r7, pc}

08005678 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005682:	230f      	movs	r3, #15
 8005684:	18fb      	adds	r3, r7, r3
 8005686:	2200      	movs	r2, #0
 8005688:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d108      	bne.n	80056a2 <HAL_TIM_OC_Start_IT+0x2a>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	223a      	movs	r2, #58	; 0x3a
 8005694:	5c9b      	ldrb	r3, [r3, r2]
 8005696:	b2db      	uxtb	r3, r3
 8005698:	3b01      	subs	r3, #1
 800569a:	1e5a      	subs	r2, r3, #1
 800569c:	4193      	sbcs	r3, r2
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	e01f      	b.n	80056e2 <HAL_TIM_OC_Start_IT+0x6a>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d108      	bne.n	80056ba <HAL_TIM_OC_Start_IT+0x42>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	223b      	movs	r2, #59	; 0x3b
 80056ac:	5c9b      	ldrb	r3, [r3, r2]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	3b01      	subs	r3, #1
 80056b2:	1e5a      	subs	r2, r3, #1
 80056b4:	4193      	sbcs	r3, r2
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	e013      	b.n	80056e2 <HAL_TIM_OC_Start_IT+0x6a>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d108      	bne.n	80056d2 <HAL_TIM_OC_Start_IT+0x5a>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	223c      	movs	r2, #60	; 0x3c
 80056c4:	5c9b      	ldrb	r3, [r3, r2]
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	1e5a      	subs	r2, r3, #1
 80056cc:	4193      	sbcs	r3, r2
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	e007      	b.n	80056e2 <HAL_TIM_OC_Start_IT+0x6a>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	223d      	movs	r2, #61	; 0x3d
 80056d6:	5c9b      	ldrb	r3, [r3, r2]
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	1e5a      	subs	r2, r3, #1
 80056de:	4193      	sbcs	r3, r2
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e090      	b.n	800580c <HAL_TIM_OC_Start_IT+0x194>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d104      	bne.n	80056fa <HAL_TIM_OC_Start_IT+0x82>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	223a      	movs	r2, #58	; 0x3a
 80056f4:	2102      	movs	r1, #2
 80056f6:	5499      	strb	r1, [r3, r2]
 80056f8:	e013      	b.n	8005722 <HAL_TIM_OC_Start_IT+0xaa>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d104      	bne.n	800570a <HAL_TIM_OC_Start_IT+0x92>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	223b      	movs	r2, #59	; 0x3b
 8005704:	2102      	movs	r1, #2
 8005706:	5499      	strb	r1, [r3, r2]
 8005708:	e00b      	b.n	8005722 <HAL_TIM_OC_Start_IT+0xaa>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2b08      	cmp	r3, #8
 800570e:	d104      	bne.n	800571a <HAL_TIM_OC_Start_IT+0xa2>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	223c      	movs	r2, #60	; 0x3c
 8005714:	2102      	movs	r1, #2
 8005716:	5499      	strb	r1, [r3, r2]
 8005718:	e003      	b.n	8005722 <HAL_TIM_OC_Start_IT+0xaa>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	223d      	movs	r2, #61	; 0x3d
 800571e:	2102      	movs	r1, #2
 8005720:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b0c      	cmp	r3, #12
 8005726:	d02a      	beq.n	800577e <HAL_TIM_OC_Start_IT+0x106>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b0c      	cmp	r3, #12
 800572c:	d830      	bhi.n	8005790 <HAL_TIM_OC_Start_IT+0x118>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b08      	cmp	r3, #8
 8005732:	d01b      	beq.n	800576c <HAL_TIM_OC_Start_IT+0xf4>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b08      	cmp	r3, #8
 8005738:	d82a      	bhi.n	8005790 <HAL_TIM_OC_Start_IT+0x118>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <HAL_TIM_OC_Start_IT+0xd0>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2b04      	cmp	r3, #4
 8005744:	d009      	beq.n	800575a <HAL_TIM_OC_Start_IT+0xe2>
 8005746:	e023      	b.n	8005790 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2102      	movs	r1, #2
 8005754:	430a      	orrs	r2, r1
 8005756:	60da      	str	r2, [r3, #12]
      break;
 8005758:	e01f      	b.n	800579a <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2104      	movs	r1, #4
 8005766:	430a      	orrs	r2, r1
 8005768:	60da      	str	r2, [r3, #12]
      break;
 800576a:	e016      	b.n	800579a <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2108      	movs	r1, #8
 8005778:	430a      	orrs	r2, r1
 800577a:	60da      	str	r2, [r3, #12]
      break;
 800577c:	e00d      	b.n	800579a <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68da      	ldr	r2, [r3, #12]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2110      	movs	r1, #16
 800578a:	430a      	orrs	r2, r1
 800578c:	60da      	str	r2, [r3, #12]
      break;
 800578e:	e004      	b.n	800579a <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8005790:	230f      	movs	r3, #15
 8005792:	18fb      	adds	r3, r7, r3
 8005794:	2201      	movs	r2, #1
 8005796:	701a      	strb	r2, [r3, #0]
      break;
 8005798:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800579a:	230f      	movs	r3, #15
 800579c:	18fb      	adds	r3, r7, r3
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d130      	bne.n	8005806 <HAL_TIM_OC_Start_IT+0x18e>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6839      	ldr	r1, [r7, #0]
 80057aa:	2201      	movs	r2, #1
 80057ac:	0018      	movs	r0, r3
 80057ae:	f001 f877 	bl	80068a0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	2380      	movs	r3, #128	; 0x80
 80057b8:	05db      	lsls	r3, r3, #23
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d009      	beq.n	80057d2 <HAL_TIM_OC_Start_IT+0x15a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a14      	ldr	r2, [pc, #80]	; (8005814 <HAL_TIM_OC_Start_IT+0x19c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d004      	beq.n	80057d2 <HAL_TIM_OC_Start_IT+0x15a>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a12      	ldr	r2, [pc, #72]	; (8005818 <HAL_TIM_OC_Start_IT+0x1a0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d111      	bne.n	80057f6 <HAL_TIM_OC_Start_IT+0x17e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	2207      	movs	r2, #7
 80057da:	4013      	ands	r3, r2
 80057dc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2b06      	cmp	r3, #6
 80057e2:	d010      	beq.n	8005806 <HAL_TIM_OC_Start_IT+0x18e>
      {
        __HAL_TIM_ENABLE(htim);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2101      	movs	r1, #1
 80057f0:	430a      	orrs	r2, r1
 80057f2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f4:	e007      	b.n	8005806 <HAL_TIM_OC_Start_IT+0x18e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2101      	movs	r1, #1
 8005802:	430a      	orrs	r2, r1
 8005804:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005806:	230f      	movs	r3, #15
 8005808:	18fb      	adds	r3, r7, r3
 800580a:	781b      	ldrb	r3, [r3, #0]
}
 800580c:	0018      	movs	r0, r3
 800580e:	46bd      	mov	sp, r7
 8005810:	b004      	add	sp, #16
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40010800 	.word	0x40010800
 8005818:	40011400 	.word	0x40011400

0800581c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e032      	b.n	8005894 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2239      	movs	r2, #57	; 0x39
 8005832:	5c9b      	ldrb	r3, [r3, r2]
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d107      	bne.n	800584a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2238      	movs	r2, #56	; 0x38
 800583e:	2100      	movs	r1, #0
 8005840:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	0018      	movs	r0, r3
 8005846:	f000 f829 	bl	800589c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2239      	movs	r2, #57	; 0x39
 800584e:	2102      	movs	r1, #2
 8005850:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3304      	adds	r3, #4
 800585a:	0019      	movs	r1, r3
 800585c:	0010      	movs	r0, r2
 800585e:	f000 fe2d 	bl	80064bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	223e      	movs	r2, #62	; 0x3e
 8005866:	2101      	movs	r1, #1
 8005868:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	223a      	movs	r2, #58	; 0x3a
 800586e:	2101      	movs	r1, #1
 8005870:	5499      	strb	r1, [r3, r2]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	223b      	movs	r2, #59	; 0x3b
 8005876:	2101      	movs	r1, #1
 8005878:	5499      	strb	r1, [r3, r2]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	223c      	movs	r2, #60	; 0x3c
 800587e:	2101      	movs	r1, #1
 8005880:	5499      	strb	r1, [r3, r2]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	223d      	movs	r2, #61	; 0x3d
 8005886:	2101      	movs	r1, #1
 8005888:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2239      	movs	r2, #57	; 0x39
 800588e:	2101      	movs	r1, #1
 8005890:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	0018      	movs	r0, r3
 8005896:	46bd      	mov	sp, r7
 8005898:	b002      	add	sp, #8
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80058a4:	46c0      	nop			; (mov r8, r8)
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b002      	add	sp, #8
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	001a      	movs	r2, r3
 80058ba:	1cbb      	adds	r3, r7, #2
 80058bc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058be:	2317      	movs	r3, #23
 80058c0:	18fb      	adds	r3, r7, r3
 80058c2:	2200      	movs	r2, #0
 80058c4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d108      	bne.n	80058de <HAL_TIM_PWM_Start_DMA+0x32>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	223a      	movs	r2, #58	; 0x3a
 80058d0:	5c9b      	ldrb	r3, [r3, r2]
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	3b02      	subs	r3, #2
 80058d6:	425a      	negs	r2, r3
 80058d8:	4153      	adcs	r3, r2
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	e01f      	b.n	800591e <HAL_TIM_PWM_Start_DMA+0x72>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d108      	bne.n	80058f6 <HAL_TIM_PWM_Start_DMA+0x4a>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	223b      	movs	r2, #59	; 0x3b
 80058e8:	5c9b      	ldrb	r3, [r3, r2]
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	3b02      	subs	r3, #2
 80058ee:	425a      	negs	r2, r3
 80058f0:	4153      	adcs	r3, r2
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	e013      	b.n	800591e <HAL_TIM_PWM_Start_DMA+0x72>
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	d108      	bne.n	800590e <HAL_TIM_PWM_Start_DMA+0x62>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	223c      	movs	r2, #60	; 0x3c
 8005900:	5c9b      	ldrb	r3, [r3, r2]
 8005902:	b2db      	uxtb	r3, r3
 8005904:	3b02      	subs	r3, #2
 8005906:	425a      	negs	r2, r3
 8005908:	4153      	adcs	r3, r2
 800590a:	b2db      	uxtb	r3, r3
 800590c:	e007      	b.n	800591e <HAL_TIM_PWM_Start_DMA+0x72>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	223d      	movs	r2, #61	; 0x3d
 8005912:	5c9b      	ldrb	r3, [r3, r2]
 8005914:	b2db      	uxtb	r3, r3
 8005916:	3b02      	subs	r3, #2
 8005918:	425a      	negs	r2, r3
 800591a:	4153      	adcs	r3, r2
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005922:	2302      	movs	r3, #2
 8005924:	e13d      	b.n	8005ba2 <HAL_TIM_PWM_Start_DMA+0x2f6>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d108      	bne.n	800593e <HAL_TIM_PWM_Start_DMA+0x92>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	223a      	movs	r2, #58	; 0x3a
 8005930:	5c9b      	ldrb	r3, [r3, r2]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	3b01      	subs	r3, #1
 8005936:	425a      	negs	r2, r3
 8005938:	4153      	adcs	r3, r2
 800593a:	b2db      	uxtb	r3, r3
 800593c:	e01f      	b.n	800597e <HAL_TIM_PWM_Start_DMA+0xd2>
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b04      	cmp	r3, #4
 8005942:	d108      	bne.n	8005956 <HAL_TIM_PWM_Start_DMA+0xaa>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	223b      	movs	r2, #59	; 0x3b
 8005948:	5c9b      	ldrb	r3, [r3, r2]
 800594a:	b2db      	uxtb	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	425a      	negs	r2, r3
 8005950:	4153      	adcs	r3, r2
 8005952:	b2db      	uxtb	r3, r3
 8005954:	e013      	b.n	800597e <HAL_TIM_PWM_Start_DMA+0xd2>
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b08      	cmp	r3, #8
 800595a:	d108      	bne.n	800596e <HAL_TIM_PWM_Start_DMA+0xc2>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	223c      	movs	r2, #60	; 0x3c
 8005960:	5c9b      	ldrb	r3, [r3, r2]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	425a      	negs	r2, r3
 8005968:	4153      	adcs	r3, r2
 800596a:	b2db      	uxtb	r3, r3
 800596c:	e007      	b.n	800597e <HAL_TIM_PWM_Start_DMA+0xd2>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	223d      	movs	r2, #61	; 0x3d
 8005972:	5c9b      	ldrb	r3, [r3, r2]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	3b01      	subs	r3, #1
 8005978:	425a      	negs	r2, r3
 800597a:	4153      	adcs	r3, r2
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d025      	beq.n	80059ce <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_TIM_PWM_Start_DMA+0xe4>
 8005988:	1cbb      	adds	r3, r7, #2
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e106      	b.n	8005ba2 <HAL_TIM_PWM_Start_DMA+0x2f6>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d104      	bne.n	80059a4 <HAL_TIM_PWM_Start_DMA+0xf8>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	223a      	movs	r2, #58	; 0x3a
 800599e:	2102      	movs	r1, #2
 80059a0:	5499      	strb	r1, [r3, r2]
 80059a2:	e016      	b.n	80059d2 <HAL_TIM_PWM_Start_DMA+0x126>
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d104      	bne.n	80059b4 <HAL_TIM_PWM_Start_DMA+0x108>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	223b      	movs	r2, #59	; 0x3b
 80059ae:	2102      	movs	r1, #2
 80059b0:	5499      	strb	r1, [r3, r2]
 80059b2:	e00e      	b.n	80059d2 <HAL_TIM_PWM_Start_DMA+0x126>
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	d104      	bne.n	80059c4 <HAL_TIM_PWM_Start_DMA+0x118>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	223c      	movs	r2, #60	; 0x3c
 80059be:	2102      	movs	r1, #2
 80059c0:	5499      	strb	r1, [r3, r2]
 80059c2:	e006      	b.n	80059d2 <HAL_TIM_PWM_Start_DMA+0x126>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	223d      	movs	r2, #61	; 0x3d
 80059c8:	2102      	movs	r1, #2
 80059ca:	5499      	strb	r1, [r3, r2]
 80059cc:	e001      	b.n	80059d2 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e0e7      	b.n	8005ba2 <HAL_TIM_PWM_Start_DMA+0x2f6>
  }

  switch (Channel)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2b0c      	cmp	r3, #12
 80059d6:	d100      	bne.n	80059da <HAL_TIM_PWM_Start_DMA+0x12e>
 80059d8:	e080      	b.n	8005adc <HAL_TIM_PWM_Start_DMA+0x230>
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2b0c      	cmp	r3, #12
 80059de:	d900      	bls.n	80059e2 <HAL_TIM_PWM_Start_DMA+0x136>
 80059e0:	e0a1      	b.n	8005b26 <HAL_TIM_PWM_Start_DMA+0x27a>
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d054      	beq.n	8005a92 <HAL_TIM_PWM_Start_DMA+0x1e6>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2b08      	cmp	r3, #8
 80059ec:	d900      	bls.n	80059f0 <HAL_TIM_PWM_Start_DMA+0x144>
 80059ee:	e09a      	b.n	8005b26 <HAL_TIM_PWM_Start_DMA+0x27a>
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_TIM_PWM_Start_DMA+0x152>
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d025      	beq.n	8005a48 <HAL_TIM_PWM_Start_DMA+0x19c>
 80059fc:	e093      	b.n	8005b26 <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	4a6a      	ldr	r2, [pc, #424]	; (8005bac <HAL_TIM_PWM_Start_DMA+0x300>)
 8005a04:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	4a69      	ldr	r2, [pc, #420]	; (8005bb0 <HAL_TIM_PWM_Start_DMA+0x304>)
 8005a0c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	4a68      	ldr	r2, [pc, #416]	; (8005bb4 <HAL_TIM_PWM_Start_DMA+0x308>)
 8005a14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a18      	ldr	r0, [r3, #32]
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3334      	adds	r3, #52	; 0x34
 8005a22:	001a      	movs	r2, r3
 8005a24:	1cbb      	adds	r3, r7, #2
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	f7fd fb28 	bl	800307c <HAL_DMA_Start_IT>
 8005a2c:	1e03      	subs	r3, r0, #0
 8005a2e:	d001      	beq.n	8005a34 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e0b6      	b.n	8005ba2 <HAL_TIM_PWM_Start_DMA+0x2f6>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2180      	movs	r1, #128	; 0x80
 8005a40:	0089      	lsls	r1, r1, #2
 8005a42:	430a      	orrs	r2, r1
 8005a44:	60da      	str	r2, [r3, #12]
      break;
 8005a46:	e073      	b.n	8005b30 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	4a57      	ldr	r2, [pc, #348]	; (8005bac <HAL_TIM_PWM_Start_DMA+0x300>)
 8005a4e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	4a56      	ldr	r2, [pc, #344]	; (8005bb0 <HAL_TIM_PWM_Start_DMA+0x304>)
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	4a55      	ldr	r2, [pc, #340]	; (8005bb4 <HAL_TIM_PWM_Start_DMA+0x308>)
 8005a5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005a64:	6879      	ldr	r1, [r7, #4]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3338      	adds	r3, #56	; 0x38
 8005a6c:	001a      	movs	r2, r3
 8005a6e:	1cbb      	adds	r3, r7, #2
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	f7fd fb03 	bl	800307c <HAL_DMA_Start_IT>
 8005a76:	1e03      	subs	r3, r0, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e091      	b.n	8005ba2 <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68da      	ldr	r2, [r3, #12]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2180      	movs	r1, #128	; 0x80
 8005a8a:	00c9      	lsls	r1, r1, #3
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	60da      	str	r2, [r3, #12]
      break;
 8005a90:	e04e      	b.n	8005b30 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a96:	4a45      	ldr	r2, [pc, #276]	; (8005bac <HAL_TIM_PWM_Start_DMA+0x300>)
 8005a98:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9e:	4a44      	ldr	r2, [pc, #272]	; (8005bb0 <HAL_TIM_PWM_Start_DMA+0x304>)
 8005aa0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa6:	4a43      	ldr	r2, [pc, #268]	; (8005bb4 <HAL_TIM_PWM_Start_DMA+0x308>)
 8005aa8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	333c      	adds	r3, #60	; 0x3c
 8005ab6:	001a      	movs	r2, r3
 8005ab8:	1cbb      	adds	r3, r7, #2
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	f7fd fade 	bl	800307c <HAL_DMA_Start_IT>
 8005ac0:	1e03      	subs	r3, r0, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e06c      	b.n	8005ba2 <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2180      	movs	r1, #128	; 0x80
 8005ad4:	0109      	lsls	r1, r1, #4
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	60da      	str	r2, [r3, #12]
      break;
 8005ada:	e029      	b.n	8005b30 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	4a32      	ldr	r2, [pc, #200]	; (8005bac <HAL_TIM_PWM_Start_DMA+0x300>)
 8005ae2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	4a31      	ldr	r2, [pc, #196]	; (8005bb0 <HAL_TIM_PWM_Start_DMA+0x304>)
 8005aea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	4a30      	ldr	r2, [pc, #192]	; (8005bb4 <HAL_TIM_PWM_Start_DMA+0x308>)
 8005af2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005af8:	6879      	ldr	r1, [r7, #4]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3340      	adds	r3, #64	; 0x40
 8005b00:	001a      	movs	r2, r3
 8005b02:	1cbb      	adds	r3, r7, #2
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	f7fd fab9 	bl	800307c <HAL_DMA_Start_IT>
 8005b0a:	1e03      	subs	r3, r0, #0
 8005b0c:	d001      	beq.n	8005b12 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e047      	b.n	8005ba2 <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2180      	movs	r1, #128	; 0x80
 8005b1e:	0149      	lsls	r1, r1, #5
 8005b20:	430a      	orrs	r2, r1
 8005b22:	60da      	str	r2, [r3, #12]
      break;
 8005b24:	e004      	b.n	8005b30 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8005b26:	2317      	movs	r3, #23
 8005b28:	18fb      	adds	r3, r7, r3
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	701a      	strb	r2, [r3, #0]
      break;
 8005b2e:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005b30:	2317      	movs	r3, #23
 8005b32:	18fb      	adds	r3, r7, r3
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d130      	bne.n	8005b9c <HAL_TIM_PWM_Start_DMA+0x2f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68b9      	ldr	r1, [r7, #8]
 8005b40:	2201      	movs	r2, #1
 8005b42:	0018      	movs	r0, r3
 8005b44:	f000 feac 	bl	80068a0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	2380      	movs	r3, #128	; 0x80
 8005b4e:	05db      	lsls	r3, r3, #23
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d009      	beq.n	8005b68 <HAL_TIM_PWM_Start_DMA+0x2bc>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a17      	ldr	r2, [pc, #92]	; (8005bb8 <HAL_TIM_PWM_Start_DMA+0x30c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d004      	beq.n	8005b68 <HAL_TIM_PWM_Start_DMA+0x2bc>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a16      	ldr	r2, [pc, #88]	; (8005bbc <HAL_TIM_PWM_Start_DMA+0x310>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d111      	bne.n	8005b8c <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	2207      	movs	r2, #7
 8005b70:	4013      	ands	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	2b06      	cmp	r3, #6
 8005b78:	d010      	beq.n	8005b9c <HAL_TIM_PWM_Start_DMA+0x2f0>
      {
        __HAL_TIM_ENABLE(htim);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2101      	movs	r1, #1
 8005b86:	430a      	orrs	r2, r1
 8005b88:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8a:	e007      	b.n	8005b9c <HAL_TIM_PWM_Start_DMA+0x2f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2101      	movs	r1, #1
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005b9c:	2317      	movs	r3, #23
 8005b9e:	18fb      	adds	r3, r7, r3
 8005ba0:	781b      	ldrb	r3, [r3, #0]
}
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	b006      	add	sp, #24
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	46c0      	nop			; (mov r8, r8)
 8005bac:	080063a9 	.word	0x080063a9
 8005bb0:	08006453 	.word	0x08006453
 8005bb4:	08006315 	.word	0x08006315
 8005bb8:	40010800 	.word	0x40010800
 8005bbc:	40011400 	.word	0x40011400

08005bc0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bca:	230f      	movs	r3, #15
 8005bcc:	18fb      	adds	r3, r7, r3
 8005bce:	2200      	movs	r2, #0
 8005bd0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b0c      	cmp	r3, #12
 8005bd6:	d039      	beq.n	8005c4c <HAL_TIM_PWM_Stop_DMA+0x8c>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b0c      	cmp	r3, #12
 8005bdc:	d844      	bhi.n	8005c68 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d025      	beq.n	8005c30 <HAL_TIM_PWM_Stop_DMA+0x70>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b08      	cmp	r3, #8
 8005be8:	d83e      	bhi.n	8005c68 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <HAL_TIM_PWM_Stop_DMA+0x38>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d00e      	beq.n	8005c14 <HAL_TIM_PWM_Stop_DMA+0x54>
 8005bf6:	e037      	b.n	8005c68 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	493a      	ldr	r1, [pc, #232]	; (8005cec <HAL_TIM_PWM_Stop_DMA+0x12c>)
 8005c04:	400a      	ands	r2, r1
 8005c06:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f7fd fa9b 	bl	8003148 <HAL_DMA_Abort_IT>
      break;
 8005c12:	e02e      	b.n	8005c72 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4934      	ldr	r1, [pc, #208]	; (8005cf0 <HAL_TIM_PWM_Stop_DMA+0x130>)
 8005c20:	400a      	ands	r2, r1
 8005c22:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	0018      	movs	r0, r3
 8005c2a:	f7fd fa8d 	bl	8003148 <HAL_DMA_Abort_IT>
      break;
 8005c2e:	e020      	b.n	8005c72 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	492e      	ldr	r1, [pc, #184]	; (8005cf4 <HAL_TIM_PWM_Stop_DMA+0x134>)
 8005c3c:	400a      	ands	r2, r1
 8005c3e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c44:	0018      	movs	r0, r3
 8005c46:	f7fd fa7f 	bl	8003148 <HAL_DMA_Abort_IT>
      break;
 8005c4a:	e012      	b.n	8005c72 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4928      	ldr	r1, [pc, #160]	; (8005cf8 <HAL_TIM_PWM_Stop_DMA+0x138>)
 8005c58:	400a      	ands	r2, r1
 8005c5a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	0018      	movs	r0, r3
 8005c62:	f7fd fa71 	bl	8003148 <HAL_DMA_Abort_IT>
      break;
 8005c66:	e004      	b.n	8005c72 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8005c68:	230f      	movs	r3, #15
 8005c6a:	18fb      	adds	r3, r7, r3
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	701a      	strb	r2, [r3, #0]
      break;
 8005c70:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005c72:	230f      	movs	r3, #15
 8005c74:	18fb      	adds	r3, r7, r3
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d130      	bne.n	8005cde <HAL_TIM_PWM_Stop_DMA+0x11e>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6839      	ldr	r1, [r7, #0]
 8005c82:	2200      	movs	r2, #0
 8005c84:	0018      	movs	r0, r3
 8005c86:	f000 fe0b 	bl	80068a0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	4a1a      	ldr	r2, [pc, #104]	; (8005cfc <HAL_TIM_PWM_Stop_DMA+0x13c>)
 8005c92:	4013      	ands	r3, r2
 8005c94:	d107      	bne.n	8005ca6 <HAL_TIM_PWM_Stop_DMA+0xe6>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	438a      	bics	r2, r1
 8005ca4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d104      	bne.n	8005cb6 <HAL_TIM_PWM_Stop_DMA+0xf6>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	223a      	movs	r2, #58	; 0x3a
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	5499      	strb	r1, [r3, r2]
 8005cb4:	e013      	b.n	8005cde <HAL_TIM_PWM_Stop_DMA+0x11e>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d104      	bne.n	8005cc6 <HAL_TIM_PWM_Stop_DMA+0x106>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	223b      	movs	r2, #59	; 0x3b
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	5499      	strb	r1, [r3, r2]
 8005cc4:	e00b      	b.n	8005cde <HAL_TIM_PWM_Stop_DMA+0x11e>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d104      	bne.n	8005cd6 <HAL_TIM_PWM_Stop_DMA+0x116>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	223c      	movs	r2, #60	; 0x3c
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	5499      	strb	r1, [r3, r2]
 8005cd4:	e003      	b.n	8005cde <HAL_TIM_PWM_Stop_DMA+0x11e>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	223d      	movs	r2, #61	; 0x3d
 8005cda:	2101      	movs	r1, #1
 8005cdc:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8005cde:	230f      	movs	r3, #15
 8005ce0:	18fb      	adds	r3, r7, r3
 8005ce2:	781b      	ldrb	r3, [r3, #0]
}
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	b004      	add	sp, #16
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	fffffdff 	.word	0xfffffdff
 8005cf0:	fffffbff 	.word	0xfffffbff
 8005cf4:	fffff7ff 	.word	0xfffff7ff
 8005cf8:	ffffefff 	.word	0xffffefff
 8005cfc:	00001111 	.word	0x00001111

08005d00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	4013      	ands	r3, r2
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d124      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	4013      	ands	r3, r2
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d11d      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2203      	movs	r2, #3
 8005d2a:	4252      	negs	r2, r2
 8005d2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	2203      	movs	r2, #3
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	d004      	beq.n	8005d4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	0018      	movs	r0, r3
 8005d44:	f000 fac6 	bl	80062d4 <HAL_TIM_IC_CaptureCallback>
 8005d48:	e007      	b.n	8005d5a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f000 fab9 	bl	80062c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	0018      	movs	r0, r3
 8005d56:	f7fb f86d 	bl	8000e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	2204      	movs	r2, #4
 8005d68:	4013      	ands	r3, r2
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d125      	bne.n	8005dba <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	2204      	movs	r2, #4
 8005d76:	4013      	ands	r3, r2
 8005d78:	2b04      	cmp	r3, #4
 8005d7a:	d11e      	bne.n	8005dba <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2205      	movs	r2, #5
 8005d82:	4252      	negs	r2, r2
 8005d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	23c0      	movs	r3, #192	; 0xc0
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4013      	ands	r3, r2
 8005d98:	d004      	beq.n	8005da4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	f000 fa99 	bl	80062d4 <HAL_TIM_IC_CaptureCallback>
 8005da2:	e007      	b.n	8005db4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	0018      	movs	r0, r3
 8005da8:	f000 fa8c 	bl	80062c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	0018      	movs	r0, r3
 8005db0:	f7fb f840 	bl	8000e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	2208      	movs	r2, #8
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d124      	bne.n	8005e12 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	2208      	movs	r2, #8
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	d11d      	bne.n	8005e12 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2209      	movs	r2, #9
 8005ddc:	4252      	negs	r2, r2
 8005dde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2204      	movs	r2, #4
 8005de4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	2203      	movs	r2, #3
 8005dee:	4013      	ands	r3, r2
 8005df0:	d004      	beq.n	8005dfc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	0018      	movs	r0, r3
 8005df6:	f000 fa6d 	bl	80062d4 <HAL_TIM_IC_CaptureCallback>
 8005dfa:	e007      	b.n	8005e0c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	0018      	movs	r0, r3
 8005e00:	f000 fa60 	bl	80062c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	0018      	movs	r0, r3
 8005e08:	f7fb f814 	bl	8000e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	2210      	movs	r2, #16
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	2b10      	cmp	r3, #16
 8005e1e:	d125      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	2210      	movs	r2, #16
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2b10      	cmp	r3, #16
 8005e2c:	d11e      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2211      	movs	r2, #17
 8005e34:	4252      	negs	r2, r2
 8005e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2208      	movs	r2, #8
 8005e3c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69da      	ldr	r2, [r3, #28]
 8005e44:	23c0      	movs	r3, #192	; 0xc0
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4013      	ands	r3, r2
 8005e4a:	d004      	beq.n	8005e56 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	0018      	movs	r0, r3
 8005e50:	f000 fa40 	bl	80062d4 <HAL_TIM_IC_CaptureCallback>
 8005e54:	e007      	b.n	8005e66 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f000 fa33 	bl	80062c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	0018      	movs	r0, r3
 8005e62:	f7fa ffe7 	bl	8000e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	2201      	movs	r2, #1
 8005e74:	4013      	ands	r3, r2
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d10f      	bne.n	8005e9a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d108      	bne.n	8005e9a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	4252      	negs	r2, r2
 8005e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	0018      	movs	r0, r3
 8005e96:	f000 fa0d 	bl	80062b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	2240      	movs	r2, #64	; 0x40
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	2b40      	cmp	r3, #64	; 0x40
 8005ea6:	d10f      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	2240      	movs	r2, #64	; 0x40
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	2b40      	cmp	r3, #64	; 0x40
 8005eb4:	d108      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2241      	movs	r2, #65	; 0x41
 8005ebc:	4252      	negs	r2, r2
 8005ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	f000 fa16 	bl	80062f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ec8:	46c0      	nop			; (mov r8, r8)
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	b002      	add	sp, #8
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005edc:	2317      	movs	r3, #23
 8005ede:	18fb      	adds	r3, r7, r3
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2238      	movs	r2, #56	; 0x38
 8005ee8:	5c9b      	ldrb	r3, [r3, r2]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <HAL_TIM_OC_ConfigChannel+0x22>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	e042      	b.n	8005f78 <HAL_TIM_OC_ConfigChannel+0xa8>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2238      	movs	r2, #56	; 0x38
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b0c      	cmp	r3, #12
 8005efe:	d027      	beq.n	8005f50 <HAL_TIM_OC_ConfigChannel+0x80>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b0c      	cmp	r3, #12
 8005f04:	d82c      	bhi.n	8005f60 <HAL_TIM_OC_ConfigChannel+0x90>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d019      	beq.n	8005f40 <HAL_TIM_OC_ConfigChannel+0x70>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b08      	cmp	r3, #8
 8005f10:	d826      	bhi.n	8005f60 <HAL_TIM_OC_ConfigChannel+0x90>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <HAL_TIM_OC_ConfigChannel+0x50>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	d008      	beq.n	8005f30 <HAL_TIM_OC_ConfigChannel+0x60>
 8005f1e:	e01f      	b.n	8005f60 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	0011      	movs	r1, r2
 8005f28:	0018      	movs	r0, r3
 8005f2a:	f000 fb1b 	bl	8006564 <TIM_OC1_SetConfig>
      break;
 8005f2e:	e01c      	b.n	8005f6a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	0011      	movs	r1, r2
 8005f38:	0018      	movs	r0, r3
 8005f3a:	f000 fb4f 	bl	80065dc <TIM_OC2_SetConfig>
      break;
 8005f3e:	e014      	b.n	8005f6a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	0011      	movs	r1, r2
 8005f48:	0018      	movs	r0, r3
 8005f4a:	f000 fb89 	bl	8006660 <TIM_OC3_SetConfig>
      break;
 8005f4e:	e00c      	b.n	8005f6a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	0011      	movs	r1, r2
 8005f58:	0018      	movs	r0, r3
 8005f5a:	f000 fbc1 	bl	80066e0 <TIM_OC4_SetConfig>
      break;
 8005f5e:	e004      	b.n	8005f6a <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8005f60:	2317      	movs	r3, #23
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	2201      	movs	r2, #1
 8005f66:	701a      	strb	r2, [r3, #0]
      break;
 8005f68:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2238      	movs	r2, #56	; 0x38
 8005f6e:	2100      	movs	r1, #0
 8005f70:	5499      	strb	r1, [r3, r2]

  return status;
 8005f72:	2317      	movs	r3, #23
 8005f74:	18fb      	adds	r3, r7, r3
 8005f76:	781b      	ldrb	r3, [r3, #0]
}
 8005f78:	0018      	movs	r0, r3
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	b006      	add	sp, #24
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f8c:	2317      	movs	r3, #23
 8005f8e:	18fb      	adds	r3, r7, r3
 8005f90:	2200      	movs	r2, #0
 8005f92:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2238      	movs	r2, #56	; 0x38
 8005f98:	5c9b      	ldrb	r3, [r3, r2]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d101      	bne.n	8005fa2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	e0ad      	b.n	80060fe <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2238      	movs	r2, #56	; 0x38
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b0c      	cmp	r3, #12
 8005fae:	d100      	bne.n	8005fb2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005fb0:	e076      	b.n	80060a0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b0c      	cmp	r3, #12
 8005fb6:	d900      	bls.n	8005fba <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005fb8:	e095      	b.n	80060e6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b08      	cmp	r3, #8
 8005fbe:	d04e      	beq.n	800605e <HAL_TIM_PWM_ConfigChannel+0xde>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b08      	cmp	r3, #8
 8005fc4:	d900      	bls.n	8005fc8 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005fc6:	e08e      	b.n	80060e6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_TIM_PWM_ConfigChannel+0x56>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d021      	beq.n	8006018 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005fd4:	e087      	b.n	80060e6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	0011      	movs	r1, r2
 8005fde:	0018      	movs	r0, r3
 8005fe0:	f000 fac0 	bl	8006564 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699a      	ldr	r2, [r3, #24]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2108      	movs	r1, #8
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699a      	ldr	r2, [r3, #24]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2104      	movs	r1, #4
 8006000:	438a      	bics	r2, r1
 8006002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6999      	ldr	r1, [r3, #24]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	619a      	str	r2, [r3, #24]
      break;
 8006016:	e06b      	b.n	80060f0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	0011      	movs	r1, r2
 8006020:	0018      	movs	r0, r3
 8006022:	f000 fadb 	bl	80065dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	699a      	ldr	r2, [r3, #24]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2180      	movs	r1, #128	; 0x80
 8006032:	0109      	lsls	r1, r1, #4
 8006034:	430a      	orrs	r2, r1
 8006036:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	699a      	ldr	r2, [r3, #24]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4931      	ldr	r1, [pc, #196]	; (8006108 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006044:	400a      	ands	r2, r1
 8006046:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6999      	ldr	r1, [r3, #24]
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	021a      	lsls	r2, r3, #8
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	619a      	str	r2, [r3, #24]
      break;
 800605c:	e048      	b.n	80060f0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	0011      	movs	r1, r2
 8006066:	0018      	movs	r0, r3
 8006068:	f000 fafa 	bl	8006660 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	69da      	ldr	r2, [r3, #28]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2108      	movs	r1, #8
 8006078:	430a      	orrs	r2, r1
 800607a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	69da      	ldr	r2, [r3, #28]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2104      	movs	r1, #4
 8006088:	438a      	bics	r2, r1
 800608a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	69d9      	ldr	r1, [r3, #28]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	61da      	str	r2, [r3, #28]
      break;
 800609e:	e027      	b.n	80060f0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	0011      	movs	r1, r2
 80060a8:	0018      	movs	r0, r3
 80060aa:	f000 fb19 	bl	80066e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69da      	ldr	r2, [r3, #28]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2180      	movs	r1, #128	; 0x80
 80060ba:	0109      	lsls	r1, r1, #4
 80060bc:	430a      	orrs	r2, r1
 80060be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	69da      	ldr	r2, [r3, #28]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	490f      	ldr	r1, [pc, #60]	; (8006108 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80060cc:	400a      	ands	r2, r1
 80060ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	69d9      	ldr	r1, [r3, #28]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	021a      	lsls	r2, r3, #8
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	61da      	str	r2, [r3, #28]
      break;
 80060e4:	e004      	b.n	80060f0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80060e6:	2317      	movs	r3, #23
 80060e8:	18fb      	adds	r3, r7, r3
 80060ea:	2201      	movs	r2, #1
 80060ec:	701a      	strb	r2, [r3, #0]
      break;
 80060ee:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2238      	movs	r2, #56	; 0x38
 80060f4:	2100      	movs	r1, #0
 80060f6:	5499      	strb	r1, [r3, r2]

  return status;
 80060f8:	2317      	movs	r3, #23
 80060fa:	18fb      	adds	r3, r7, r3
 80060fc:	781b      	ldrb	r3, [r3, #0]
}
 80060fe:	0018      	movs	r0, r3
 8006100:	46bd      	mov	sp, r7
 8006102:	b006      	add	sp, #24
 8006104:	bd80      	pop	{r7, pc}
 8006106:	46c0      	nop			; (mov r8, r8)
 8006108:	fffffbff 	.word	0xfffffbff

0800610c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006116:	230f      	movs	r3, #15
 8006118:	18fb      	adds	r3, r7, r3
 800611a:	2200      	movs	r2, #0
 800611c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2238      	movs	r2, #56	; 0x38
 8006122:	5c9b      	ldrb	r3, [r3, r2]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d101      	bne.n	800612c <HAL_TIM_ConfigClockSource+0x20>
 8006128:	2302      	movs	r3, #2
 800612a:	e0bc      	b.n	80062a6 <HAL_TIM_ConfigClockSource+0x19a>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2238      	movs	r2, #56	; 0x38
 8006130:	2101      	movs	r1, #1
 8006132:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2239      	movs	r2, #57	; 0x39
 8006138:	2102      	movs	r1, #2
 800613a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2277      	movs	r2, #119	; 0x77
 8006148:	4393      	bics	r3, r2
 800614a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	4a58      	ldr	r2, [pc, #352]	; (80062b0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006150:	4013      	ands	r3, r2
 8006152:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2280      	movs	r2, #128	; 0x80
 8006162:	0192      	lsls	r2, r2, #6
 8006164:	4293      	cmp	r3, r2
 8006166:	d040      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0xde>
 8006168:	2280      	movs	r2, #128	; 0x80
 800616a:	0192      	lsls	r2, r2, #6
 800616c:	4293      	cmp	r3, r2
 800616e:	d900      	bls.n	8006172 <HAL_TIM_ConfigClockSource+0x66>
 8006170:	e088      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x178>
 8006172:	2280      	movs	r2, #128	; 0x80
 8006174:	0152      	lsls	r2, r2, #5
 8006176:	4293      	cmp	r3, r2
 8006178:	d100      	bne.n	800617c <HAL_TIM_ConfigClockSource+0x70>
 800617a:	e088      	b.n	800628e <HAL_TIM_ConfigClockSource+0x182>
 800617c:	2280      	movs	r2, #128	; 0x80
 800617e:	0152      	lsls	r2, r2, #5
 8006180:	4293      	cmp	r3, r2
 8006182:	d900      	bls.n	8006186 <HAL_TIM_ConfigClockSource+0x7a>
 8006184:	e07e      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x178>
 8006186:	2b70      	cmp	r3, #112	; 0x70
 8006188:	d018      	beq.n	80061bc <HAL_TIM_ConfigClockSource+0xb0>
 800618a:	d900      	bls.n	800618e <HAL_TIM_ConfigClockSource+0x82>
 800618c:	e07a      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x178>
 800618e:	2b60      	cmp	r3, #96	; 0x60
 8006190:	d04f      	beq.n	8006232 <HAL_TIM_ConfigClockSource+0x126>
 8006192:	d900      	bls.n	8006196 <HAL_TIM_ConfigClockSource+0x8a>
 8006194:	e076      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x178>
 8006196:	2b50      	cmp	r3, #80	; 0x50
 8006198:	d03b      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0x106>
 800619a:	d900      	bls.n	800619e <HAL_TIM_ConfigClockSource+0x92>
 800619c:	e072      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x178>
 800619e:	2b40      	cmp	r3, #64	; 0x40
 80061a0:	d057      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0x146>
 80061a2:	d900      	bls.n	80061a6 <HAL_TIM_ConfigClockSource+0x9a>
 80061a4:	e06e      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x178>
 80061a6:	2b30      	cmp	r3, #48	; 0x30
 80061a8:	d063      	beq.n	8006272 <HAL_TIM_ConfigClockSource+0x166>
 80061aa:	d86b      	bhi.n	8006284 <HAL_TIM_ConfigClockSource+0x178>
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	d060      	beq.n	8006272 <HAL_TIM_ConfigClockSource+0x166>
 80061b0:	d868      	bhi.n	8006284 <HAL_TIM_ConfigClockSource+0x178>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d05d      	beq.n	8006272 <HAL_TIM_ConfigClockSource+0x166>
 80061b6:	2b10      	cmp	r3, #16
 80061b8:	d05b      	beq.n	8006272 <HAL_TIM_ConfigClockSource+0x166>
 80061ba:	e063      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6818      	ldr	r0, [r3, #0]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	6899      	ldr	r1, [r3, #8]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f000 fb48 	bl	8006860 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2277      	movs	r2, #119	; 0x77
 80061dc:	4313      	orrs	r3, r2
 80061de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	609a      	str	r2, [r3, #8]
      break;
 80061e8:	e052      	b.n	8006290 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6818      	ldr	r0, [r3, #0]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	6899      	ldr	r1, [r3, #8]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f000 fb31 	bl	8006860 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2180      	movs	r1, #128	; 0x80
 800620a:	01c9      	lsls	r1, r1, #7
 800620c:	430a      	orrs	r2, r1
 800620e:	609a      	str	r2, [r3, #8]
      break;
 8006210:	e03e      	b.n	8006290 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	6859      	ldr	r1, [r3, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	001a      	movs	r2, r3
 8006220:	f000 faa4 	bl	800676c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2150      	movs	r1, #80	; 0x50
 800622a:	0018      	movs	r0, r3
 800622c:	f000 fafe 	bl	800682c <TIM_ITRx_SetConfig>
      break;
 8006230:	e02e      	b.n	8006290 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	6859      	ldr	r1, [r3, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	001a      	movs	r2, r3
 8006240:	f000 fac2 	bl	80067c8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2160      	movs	r1, #96	; 0x60
 800624a:	0018      	movs	r0, r3
 800624c:	f000 faee 	bl	800682c <TIM_ITRx_SetConfig>
      break;
 8006250:	e01e      	b.n	8006290 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6818      	ldr	r0, [r3, #0]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	6859      	ldr	r1, [r3, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	001a      	movs	r2, r3
 8006260:	f000 fa84 	bl	800676c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2140      	movs	r1, #64	; 0x40
 800626a:	0018      	movs	r0, r3
 800626c:	f000 fade 	bl	800682c <TIM_ITRx_SetConfig>
      break;
 8006270:	e00e      	b.n	8006290 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	0019      	movs	r1, r3
 800627c:	0010      	movs	r0, r2
 800627e:	f000 fad5 	bl	800682c <TIM_ITRx_SetConfig>
      break;
 8006282:	e005      	b.n	8006290 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006284:	230f      	movs	r3, #15
 8006286:	18fb      	adds	r3, r7, r3
 8006288:	2201      	movs	r2, #1
 800628a:	701a      	strb	r2, [r3, #0]
      break;
 800628c:	e000      	b.n	8006290 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800628e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2239      	movs	r2, #57	; 0x39
 8006294:	2101      	movs	r1, #1
 8006296:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2238      	movs	r2, #56	; 0x38
 800629c:	2100      	movs	r1, #0
 800629e:	5499      	strb	r1, [r3, r2]

  return status;
 80062a0:	230f      	movs	r3, #15
 80062a2:	18fb      	adds	r3, r7, r3
 80062a4:	781b      	ldrb	r3, [r3, #0]
}
 80062a6:	0018      	movs	r0, r3
 80062a8:	46bd      	mov	sp, r7
 80062aa:	b004      	add	sp, #16
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	46c0      	nop			; (mov r8, r8)
 80062b0:	ffff00ff 	.word	0xffff00ff

080062b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80062bc:	46c0      	nop			; (mov r8, r8)
 80062be:	46bd      	mov	sp, r7
 80062c0:	b002      	add	sp, #8
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062cc:	46c0      	nop			; (mov r8, r8)
 80062ce:	46bd      	mov	sp, r7
 80062d0:	b002      	add	sp, #8
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062dc:	46c0      	nop			; (mov r8, r8)
 80062de:	46bd      	mov	sp, r7
 80062e0:	b002      	add	sp, #8
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80062ec:	46c0      	nop			; (mov r8, r8)
 80062ee:	46bd      	mov	sp, r7
 80062f0:	b002      	add	sp, #8
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062fc:	46c0      	nop			; (mov r8, r8)
 80062fe:	46bd      	mov	sp, r7
 8006300:	b002      	add	sp, #8
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800630c:	46c0      	nop			; (mov r8, r8)
 800630e:	46bd      	mov	sp, r7
 8006310:	b002      	add	sp, #8
 8006312:	bd80      	pop	{r7, pc}

08006314 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006320:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	429a      	cmp	r2, r3
 800632a:	d107      	bne.n	800633c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2201      	movs	r2, #1
 8006330:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	223a      	movs	r2, #58	; 0x3a
 8006336:	2101      	movs	r1, #1
 8006338:	5499      	strb	r1, [r3, r2]
 800633a:	e02a      	b.n	8006392 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	429a      	cmp	r2, r3
 8006344:	d107      	bne.n	8006356 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2202      	movs	r2, #2
 800634a:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	223b      	movs	r2, #59	; 0x3b
 8006350:	2101      	movs	r1, #1
 8006352:	5499      	strb	r1, [r3, r2]
 8006354:	e01d      	b.n	8006392 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	429a      	cmp	r2, r3
 800635e:	d107      	bne.n	8006370 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2204      	movs	r2, #4
 8006364:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	223c      	movs	r2, #60	; 0x3c
 800636a:	2101      	movs	r1, #1
 800636c:	5499      	strb	r1, [r3, r2]
 800636e:	e010      	b.n	8006392 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	429a      	cmp	r2, r3
 8006378:	d107      	bne.n	800638a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2208      	movs	r2, #8
 800637e:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	223d      	movs	r2, #61	; 0x3d
 8006384:	2101      	movs	r1, #1
 8006386:	5499      	strb	r1, [r3, r2]
 8006388:	e003      	b.n	8006392 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2239      	movs	r2, #57	; 0x39
 800638e:	2101      	movs	r1, #1
 8006390:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	0018      	movs	r0, r3
 8006396:	f7ff ffb5 	bl	8006304 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	761a      	strb	r2, [r3, #24]
}
 80063a0:	46c0      	nop			; (mov r8, r8)
 80063a2:	46bd      	mov	sp, r7
 80063a4:	b004      	add	sp, #16
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d10b      	bne.n	80063d8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2201      	movs	r2, #1
 80063c4:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d136      	bne.n	800643c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	223a      	movs	r2, #58	; 0x3a
 80063d2:	2101      	movs	r1, #1
 80063d4:	5499      	strb	r1, [r3, r2]
 80063d6:	e031      	b.n	800643c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d10b      	bne.n	80063fa <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2202      	movs	r2, #2
 80063e6:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	69db      	ldr	r3, [r3, #28]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d125      	bne.n	800643c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	223b      	movs	r2, #59	; 0x3b
 80063f4:	2101      	movs	r1, #1
 80063f6:	5499      	strb	r1, [r3, r2]
 80063f8:	e020      	b.n	800643c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	429a      	cmp	r2, r3
 8006402:	d10b      	bne.n	800641c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2204      	movs	r2, #4
 8006408:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d114      	bne.n	800643c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	223c      	movs	r2, #60	; 0x3c
 8006416:	2101      	movs	r1, #1
 8006418:	5499      	strb	r1, [r3, r2]
 800641a:	e00f      	b.n	800643c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	429a      	cmp	r2, r3
 8006424:	d10a      	bne.n	800643c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2208      	movs	r2, #8
 800642a:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d103      	bne.n	800643c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	223d      	movs	r2, #61	; 0x3d
 8006438:	2101      	movs	r1, #1
 800643a:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	0018      	movs	r0, r3
 8006440:	f7fa fcf8 	bl	8000e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	761a      	strb	r2, [r3, #24]
}
 800644a:	46c0      	nop			; (mov r8, r8)
 800644c:	46bd      	mov	sp, r7
 800644e:	b004      	add	sp, #16
 8006450:	bd80      	pop	{r7, pc}

08006452 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	429a      	cmp	r2, r3
 8006468:	d103      	bne.n	8006472 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	761a      	strb	r2, [r3, #24]
 8006470:	e019      	b.n	80064a6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	429a      	cmp	r2, r3
 800647a:	d103      	bne.n	8006484 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2202      	movs	r2, #2
 8006480:	761a      	strb	r2, [r3, #24]
 8006482:	e010      	b.n	80064a6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	429a      	cmp	r2, r3
 800648c:	d103      	bne.n	8006496 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2204      	movs	r2, #4
 8006492:	761a      	strb	r2, [r3, #24]
 8006494:	e007      	b.n	80064a6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	429a      	cmp	r2, r3
 800649e:	d102      	bne.n	80064a6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2208      	movs	r2, #8
 80064a4:	761a      	strb	r2, [r3, #24]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	0018      	movs	r0, r3
 80064aa:	f7ff ff1b 	bl	80062e4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	761a      	strb	r2, [r3, #24]
}
 80064b4:	46c0      	nop			; (mov r8, r8)
 80064b6:	46bd      	mov	sp, r7
 80064b8:	b004      	add	sp, #16
 80064ba:	bd80      	pop	{r7, pc}

080064bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	2380      	movs	r3, #128	; 0x80
 80064d0:	05db      	lsls	r3, r3, #23
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d007      	beq.n	80064e6 <TIM_Base_SetConfig+0x2a>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a1f      	ldr	r2, [pc, #124]	; (8006558 <TIM_Base_SetConfig+0x9c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d003      	beq.n	80064e6 <TIM_Base_SetConfig+0x2a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a1e      	ldr	r2, [pc, #120]	; (800655c <TIM_Base_SetConfig+0xa0>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d108      	bne.n	80064f8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2270      	movs	r2, #112	; 0x70
 80064ea:	4393      	bics	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	2380      	movs	r3, #128	; 0x80
 80064fc:	05db      	lsls	r3, r3, #23
 80064fe:	429a      	cmp	r2, r3
 8006500:	d007      	beq.n	8006512 <TIM_Base_SetConfig+0x56>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a14      	ldr	r2, [pc, #80]	; (8006558 <TIM_Base_SetConfig+0x9c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d003      	beq.n	8006512 <TIM_Base_SetConfig+0x56>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a13      	ldr	r2, [pc, #76]	; (800655c <TIM_Base_SetConfig+0xa0>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d108      	bne.n	8006524 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4a12      	ldr	r2, [pc, #72]	; (8006560 <TIM_Base_SetConfig+0xa4>)
 8006516:	4013      	ands	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4313      	orrs	r3, r2
 8006522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2280      	movs	r2, #128	; 0x80
 8006528:	4393      	bics	r3, r2
 800652a:	001a      	movs	r2, r3
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	4313      	orrs	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	689a      	ldr	r2, [r3, #8]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	615a      	str	r2, [r3, #20]
}
 8006550:	46c0      	nop			; (mov r8, r8)
 8006552:	46bd      	mov	sp, r7
 8006554:	b004      	add	sp, #16
 8006556:	bd80      	pop	{r7, pc}
 8006558:	40010800 	.word	0x40010800
 800655c:	40011400 	.word	0x40011400
 8006560:	fffffcff 	.word	0xfffffcff

08006564 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	2201      	movs	r2, #1
 8006574:	4393      	bics	r3, r2
 8006576:	001a      	movs	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2270      	movs	r2, #112	; 0x70
 8006592:	4393      	bics	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2203      	movs	r2, #3
 800659a:	4393      	bics	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	2202      	movs	r2, #2
 80065ac:	4393      	bics	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	621a      	str	r2, [r3, #32]
}
 80065d4:	46c0      	nop			; (mov r8, r8)
 80065d6:	46bd      	mov	sp, r7
 80065d8:	b006      	add	sp, #24
 80065da:	bd80      	pop	{r7, pc}

080065dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	2210      	movs	r2, #16
 80065ec:	4393      	bics	r3, r2
 80065ee:	001a      	movs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4a13      	ldr	r2, [pc, #76]	; (8006658 <TIM_OC2_SetConfig+0x7c>)
 800660a:	4013      	ands	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4a12      	ldr	r2, [pc, #72]	; (800665c <TIM_OC2_SetConfig+0x80>)
 8006612:	4013      	ands	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	021b      	lsls	r3, r3, #8
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	2220      	movs	r2, #32
 8006626:	4393      	bics	r3, r2
 8006628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	621a      	str	r2, [r3, #32]
}
 8006650:	46c0      	nop			; (mov r8, r8)
 8006652:	46bd      	mov	sp, r7
 8006654:	b006      	add	sp, #24
 8006656:	bd80      	pop	{r7, pc}
 8006658:	ffff8fff 	.word	0xffff8fff
 800665c:	fffffcff 	.word	0xfffffcff

08006660 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	4a1a      	ldr	r2, [pc, #104]	; (80066d8 <TIM_OC3_SetConfig+0x78>)
 8006670:	401a      	ands	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2270      	movs	r2, #112	; 0x70
 800668c:	4393      	bics	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2203      	movs	r2, #3
 8006694:	4393      	bics	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	4313      	orrs	r3, r2
 80066a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	4a0d      	ldr	r2, [pc, #52]	; (80066dc <TIM_OC3_SetConfig+0x7c>)
 80066a6:	4013      	ands	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	021b      	lsls	r3, r3, #8
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	621a      	str	r2, [r3, #32]
}
 80066d0:	46c0      	nop			; (mov r8, r8)
 80066d2:	46bd      	mov	sp, r7
 80066d4:	b006      	add	sp, #24
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	fffffeff 	.word	0xfffffeff
 80066dc:	fffffdff 	.word	0xfffffdff

080066e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	4a1b      	ldr	r2, [pc, #108]	; (800675c <TIM_OC4_SetConfig+0x7c>)
 80066f0:	401a      	ands	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4a15      	ldr	r2, [pc, #84]	; (8006760 <TIM_OC4_SetConfig+0x80>)
 800670c:	4013      	ands	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4a14      	ldr	r2, [pc, #80]	; (8006764 <TIM_OC4_SetConfig+0x84>)
 8006714:	4013      	ands	r3, r2
 8006716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	021b      	lsls	r3, r3, #8
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	4313      	orrs	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	4a10      	ldr	r2, [pc, #64]	; (8006768 <TIM_OC4_SetConfig+0x88>)
 8006728:	4013      	ands	r3, r2
 800672a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	031b      	lsls	r3, r3, #12
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	4313      	orrs	r3, r2
 8006736:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	621a      	str	r2, [r3, #32]
}
 8006752:	46c0      	nop			; (mov r8, r8)
 8006754:	46bd      	mov	sp, r7
 8006756:	b006      	add	sp, #24
 8006758:	bd80      	pop	{r7, pc}
 800675a:	46c0      	nop			; (mov r8, r8)
 800675c:	ffffefff 	.word	0xffffefff
 8006760:	ffff8fff 	.word	0xffff8fff
 8006764:	fffffcff 	.word	0xfffffcff
 8006768:	ffffdfff 	.word	0xffffdfff

0800676c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	2201      	movs	r2, #1
 8006784:	4393      	bics	r3, r2
 8006786:	001a      	movs	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	22f0      	movs	r2, #240	; 0xf0
 8006796:	4393      	bics	r3, r2
 8006798:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	220a      	movs	r2, #10
 80067a8:	4393      	bics	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	621a      	str	r2, [r3, #32]
}
 80067c0:	46c0      	nop			; (mov r8, r8)
 80067c2:	46bd      	mov	sp, r7
 80067c4:	b006      	add	sp, #24
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	2210      	movs	r2, #16
 80067da:	4393      	bics	r3, r2
 80067dc:	001a      	movs	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	4a0d      	ldr	r2, [pc, #52]	; (8006828 <TIM_TI2_ConfigInputStage+0x60>)
 80067f2:	4013      	ands	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	031b      	lsls	r3, r3, #12
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	22a0      	movs	r2, #160	; 0xa0
 8006804:	4393      	bics	r3, r2
 8006806:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	011b      	lsls	r3, r3, #4
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	621a      	str	r2, [r3, #32]
}
 800681e:	46c0      	nop			; (mov r8, r8)
 8006820:	46bd      	mov	sp, r7
 8006822:	b006      	add	sp, #24
 8006824:	bd80      	pop	{r7, pc}
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	ffff0fff 	.word	0xffff0fff

0800682c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2270      	movs	r2, #112	; 0x70
 8006840:	4393      	bics	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4313      	orrs	r3, r2
 800684a:	2207      	movs	r2, #7
 800684c:	4313      	orrs	r3, r2
 800684e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	609a      	str	r2, [r3, #8]
}
 8006856:	46c0      	nop			; (mov r8, r8)
 8006858:	46bd      	mov	sp, r7
 800685a:	b004      	add	sp, #16
 800685c:	bd80      	pop	{r7, pc}
	...

08006860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
 800686c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	4a09      	ldr	r2, [pc, #36]	; (800689c <TIM_ETR_SetConfig+0x3c>)
 8006878:	4013      	ands	r3, r2
 800687a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	021a      	lsls	r2, r3, #8
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	431a      	orrs	r2, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	4313      	orrs	r3, r2
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	4313      	orrs	r3, r2
 800688c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	609a      	str	r2, [r3, #8]
}
 8006894:	46c0      	nop			; (mov r8, r8)
 8006896:	46bd      	mov	sp, r7
 8006898:	b006      	add	sp, #24
 800689a:	bd80      	pop	{r7, pc}
 800689c:	ffff00ff 	.word	0xffff00ff

080068a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	221f      	movs	r2, #31
 80068b0:	4013      	ands	r3, r2
 80068b2:	2201      	movs	r2, #1
 80068b4:	409a      	lsls	r2, r3
 80068b6:	0013      	movs	r3, r2
 80068b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	43d2      	mvns	r2, r2
 80068c2:	401a      	ands	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a1a      	ldr	r2, [r3, #32]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	211f      	movs	r1, #31
 80068d0:	400b      	ands	r3, r1
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	4099      	lsls	r1, r3
 80068d6:	000b      	movs	r3, r1
 80068d8:	431a      	orrs	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	46c0      	nop			; (mov r8, r8)
 80068e0:	46bd      	mov	sp, r7
 80068e2:	b006      	add	sp, #24
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2238      	movs	r2, #56	; 0x38
 80068f6:	5c9b      	ldrb	r3, [r3, r2]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068fc:	2302      	movs	r3, #2
 80068fe:	e042      	b.n	8006986 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2238      	movs	r2, #56	; 0x38
 8006904:	2101      	movs	r1, #1
 8006906:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2239      	movs	r2, #57	; 0x39
 800690c:	2102      	movs	r1, #2
 800690e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2270      	movs	r2, #112	; 0x70
 8006924:	4393      	bics	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	4313      	orrs	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	2380      	movs	r3, #128	; 0x80
 8006940:	05db      	lsls	r3, r3, #23
 8006942:	429a      	cmp	r2, r3
 8006944:	d009      	beq.n	800695a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a11      	ldr	r2, [pc, #68]	; (8006990 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d004      	beq.n	800695a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a0f      	ldr	r2, [pc, #60]	; (8006994 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d10c      	bne.n	8006974 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	2280      	movs	r2, #128	; 0x80
 800695e:	4393      	bics	r3, r2
 8006960:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	4313      	orrs	r3, r2
 800696a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2239      	movs	r2, #57	; 0x39
 8006978:	2101      	movs	r1, #1
 800697a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2238      	movs	r2, #56	; 0x38
 8006980:	2100      	movs	r1, #0
 8006982:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	0018      	movs	r0, r3
 8006988:	46bd      	mov	sp, r7
 800698a:	b004      	add	sp, #16
 800698c:	bd80      	pop	{r7, pc}
 800698e:	46c0      	nop			; (mov r8, r8)
 8006990:	40010800 	.word	0x40010800
 8006994:	40011400 	.word	0x40011400

08006998 <__libc_init_array>:
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	2600      	movs	r6, #0
 800699c:	4d0c      	ldr	r5, [pc, #48]	; (80069d0 <__libc_init_array+0x38>)
 800699e:	4c0d      	ldr	r4, [pc, #52]	; (80069d4 <__libc_init_array+0x3c>)
 80069a0:	1b64      	subs	r4, r4, r5
 80069a2:	10a4      	asrs	r4, r4, #2
 80069a4:	42a6      	cmp	r6, r4
 80069a6:	d109      	bne.n	80069bc <__libc_init_array+0x24>
 80069a8:	2600      	movs	r6, #0
 80069aa:	f000 f821 	bl	80069f0 <_init>
 80069ae:	4d0a      	ldr	r5, [pc, #40]	; (80069d8 <__libc_init_array+0x40>)
 80069b0:	4c0a      	ldr	r4, [pc, #40]	; (80069dc <__libc_init_array+0x44>)
 80069b2:	1b64      	subs	r4, r4, r5
 80069b4:	10a4      	asrs	r4, r4, #2
 80069b6:	42a6      	cmp	r6, r4
 80069b8:	d105      	bne.n	80069c6 <__libc_init_array+0x2e>
 80069ba:	bd70      	pop	{r4, r5, r6, pc}
 80069bc:	00b3      	lsls	r3, r6, #2
 80069be:	58eb      	ldr	r3, [r5, r3]
 80069c0:	4798      	blx	r3
 80069c2:	3601      	adds	r6, #1
 80069c4:	e7ee      	b.n	80069a4 <__libc_init_array+0xc>
 80069c6:	00b3      	lsls	r3, r6, #2
 80069c8:	58eb      	ldr	r3, [r5, r3]
 80069ca:	4798      	blx	r3
 80069cc:	3601      	adds	r6, #1
 80069ce:	e7f2      	b.n	80069b6 <__libc_init_array+0x1e>
 80069d0:	08006a44 	.word	0x08006a44
 80069d4:	08006a44 	.word	0x08006a44
 80069d8:	08006a44 	.word	0x08006a44
 80069dc:	08006a48 	.word	0x08006a48

080069e0 <memset>:
 80069e0:	0003      	movs	r3, r0
 80069e2:	1882      	adds	r2, r0, r2
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d100      	bne.n	80069ea <memset+0xa>
 80069e8:	4770      	bx	lr
 80069ea:	7019      	strb	r1, [r3, #0]
 80069ec:	3301      	adds	r3, #1
 80069ee:	e7f9      	b.n	80069e4 <memset+0x4>

080069f0 <_init>:
 80069f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f2:	46c0      	nop			; (mov r8, r8)
 80069f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069f6:	bc08      	pop	{r3}
 80069f8:	469e      	mov	lr, r3
 80069fa:	4770      	bx	lr

080069fc <_fini>:
 80069fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fe:	46c0      	nop			; (mov r8, r8)
 8006a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a02:	bc08      	pop	{r3}
 8006a04:	469e      	mov	lr, r3
 8006a06:	4770      	bx	lr
