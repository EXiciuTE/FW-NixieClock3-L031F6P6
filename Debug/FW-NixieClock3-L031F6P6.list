
FW-NixieClock3-L031F6P6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007764  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08007824  08007824  00017824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007858  08007858  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007858  08007858  00017858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007860  08007860  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007860  08007860  00017860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007864  08007864  00017864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000590  2000006c  080078d4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  080078d4  000205fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dde  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000358c  00000000  00000000  00031e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00035400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  000364e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000138ea  00000000  00000000  00037418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189a4  00000000  00000000  0004ad02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069ee9  00000000  00000000  000636a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd58f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b4c  00000000  00000000  000cd5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800780c 	.word	0x0800780c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	0800780c 	.word	0x0800780c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f834 	bl	8000490 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	46ce      	mov	lr, r9
 8000438:	4647      	mov	r7, r8
 800043a:	b580      	push	{r7, lr}
 800043c:	0007      	movs	r7, r0
 800043e:	4699      	mov	r9, r3
 8000440:	0c3b      	lsrs	r3, r7, #16
 8000442:	469c      	mov	ip, r3
 8000444:	0413      	lsls	r3, r2, #16
 8000446:	0c1b      	lsrs	r3, r3, #16
 8000448:	001d      	movs	r5, r3
 800044a:	000e      	movs	r6, r1
 800044c:	4661      	mov	r1, ip
 800044e:	0400      	lsls	r0, r0, #16
 8000450:	0c14      	lsrs	r4, r2, #16
 8000452:	0c00      	lsrs	r0, r0, #16
 8000454:	4345      	muls	r5, r0
 8000456:	434b      	muls	r3, r1
 8000458:	4360      	muls	r0, r4
 800045a:	4361      	muls	r1, r4
 800045c:	18c0      	adds	r0, r0, r3
 800045e:	0c2c      	lsrs	r4, r5, #16
 8000460:	1820      	adds	r0, r4, r0
 8000462:	468c      	mov	ip, r1
 8000464:	4283      	cmp	r3, r0
 8000466:	d903      	bls.n	8000470 <__aeabi_lmul+0x3c>
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	025b      	lsls	r3, r3, #9
 800046c:	4698      	mov	r8, r3
 800046e:	44c4      	add	ip, r8
 8000470:	4649      	mov	r1, r9
 8000472:	4379      	muls	r1, r7
 8000474:	4372      	muls	r2, r6
 8000476:	0c03      	lsrs	r3, r0, #16
 8000478:	4463      	add	r3, ip
 800047a:	042d      	lsls	r5, r5, #16
 800047c:	0c2d      	lsrs	r5, r5, #16
 800047e:	18c9      	adds	r1, r1, r3
 8000480:	0400      	lsls	r0, r0, #16
 8000482:	1940      	adds	r0, r0, r5
 8000484:	1889      	adds	r1, r1, r2
 8000486:	bcc0      	pop	{r6, r7}
 8000488:	46b9      	mov	r9, r7
 800048a:	46b0      	mov	r8, r6
 800048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__udivmoddi4>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	4657      	mov	r7, sl
 8000494:	464e      	mov	r6, r9
 8000496:	4645      	mov	r5, r8
 8000498:	46de      	mov	lr, fp
 800049a:	b5e0      	push	{r5, r6, r7, lr}
 800049c:	0004      	movs	r4, r0
 800049e:	000d      	movs	r5, r1
 80004a0:	4692      	mov	sl, r2
 80004a2:	4699      	mov	r9, r3
 80004a4:	b083      	sub	sp, #12
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d830      	bhi.n	800050c <__udivmoddi4+0x7c>
 80004aa:	d02d      	beq.n	8000508 <__udivmoddi4+0x78>
 80004ac:	4649      	mov	r1, r9
 80004ae:	4650      	mov	r0, sl
 80004b0:	f000 f8ba 	bl	8000628 <__clzdi2>
 80004b4:	0029      	movs	r1, r5
 80004b6:	0006      	movs	r6, r0
 80004b8:	0020      	movs	r0, r4
 80004ba:	f000 f8b5 	bl	8000628 <__clzdi2>
 80004be:	1a33      	subs	r3, r6, r0
 80004c0:	4698      	mov	r8, r3
 80004c2:	3b20      	subs	r3, #32
 80004c4:	469b      	mov	fp, r3
 80004c6:	d433      	bmi.n	8000530 <__udivmoddi4+0xa0>
 80004c8:	465a      	mov	r2, fp
 80004ca:	4653      	mov	r3, sl
 80004cc:	4093      	lsls	r3, r2
 80004ce:	4642      	mov	r2, r8
 80004d0:	001f      	movs	r7, r3
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	001e      	movs	r6, r3
 80004d8:	42af      	cmp	r7, r5
 80004da:	d83a      	bhi.n	8000552 <__udivmoddi4+0xc2>
 80004dc:	42af      	cmp	r7, r5
 80004de:	d100      	bne.n	80004e2 <__udivmoddi4+0x52>
 80004e0:	e078      	b.n	80005d4 <__udivmoddi4+0x144>
 80004e2:	465b      	mov	r3, fp
 80004e4:	1ba4      	subs	r4, r4, r6
 80004e6:	41bd      	sbcs	r5, r7
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	da00      	bge.n	80004ee <__udivmoddi4+0x5e>
 80004ec:	e075      	b.n	80005da <__udivmoddi4+0x14a>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	465a      	mov	r2, fp
 80004fa:	4093      	lsls	r3, r2
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	4642      	mov	r2, r8
 8000502:	4093      	lsls	r3, r2
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	e028      	b.n	800055a <__udivmoddi4+0xca>
 8000508:	4282      	cmp	r2, r0
 800050a:	d9cf      	bls.n	80004ac <__udivmoddi4+0x1c>
 800050c:	2200      	movs	r2, #0
 800050e:	2300      	movs	r3, #0
 8000510:	9200      	str	r2, [sp, #0]
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <__udivmoddi4+0x8e>
 800051a:	601c      	str	r4, [r3, #0]
 800051c:	605d      	str	r5, [r3, #4]
 800051e:	9800      	ldr	r0, [sp, #0]
 8000520:	9901      	ldr	r1, [sp, #4]
 8000522:	b003      	add	sp, #12
 8000524:	bcf0      	pop	{r4, r5, r6, r7}
 8000526:	46bb      	mov	fp, r7
 8000528:	46b2      	mov	sl, r6
 800052a:	46a9      	mov	r9, r5
 800052c:	46a0      	mov	r8, r4
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000530:	4642      	mov	r2, r8
 8000532:	2320      	movs	r3, #32
 8000534:	1a9b      	subs	r3, r3, r2
 8000536:	4652      	mov	r2, sl
 8000538:	40da      	lsrs	r2, r3
 800053a:	4641      	mov	r1, r8
 800053c:	0013      	movs	r3, r2
 800053e:	464a      	mov	r2, r9
 8000540:	408a      	lsls	r2, r1
 8000542:	0017      	movs	r7, r2
 8000544:	4642      	mov	r2, r8
 8000546:	431f      	orrs	r7, r3
 8000548:	4653      	mov	r3, sl
 800054a:	4093      	lsls	r3, r2
 800054c:	001e      	movs	r6, r3
 800054e:	42af      	cmp	r7, r5
 8000550:	d9c4      	bls.n	80004dc <__udivmoddi4+0x4c>
 8000552:	2200      	movs	r2, #0
 8000554:	2300      	movs	r3, #0
 8000556:	9200      	str	r2, [sp, #0]
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	4643      	mov	r3, r8
 800055c:	2b00      	cmp	r3, #0
 800055e:	d0d9      	beq.n	8000514 <__udivmoddi4+0x84>
 8000560:	07fb      	lsls	r3, r7, #31
 8000562:	0872      	lsrs	r2, r6, #1
 8000564:	431a      	orrs	r2, r3
 8000566:	4646      	mov	r6, r8
 8000568:	087b      	lsrs	r3, r7, #1
 800056a:	e00e      	b.n	800058a <__udivmoddi4+0xfa>
 800056c:	42ab      	cmp	r3, r5
 800056e:	d101      	bne.n	8000574 <__udivmoddi4+0xe4>
 8000570:	42a2      	cmp	r2, r4
 8000572:	d80c      	bhi.n	800058e <__udivmoddi4+0xfe>
 8000574:	1aa4      	subs	r4, r4, r2
 8000576:	419d      	sbcs	r5, r3
 8000578:	2001      	movs	r0, #1
 800057a:	1924      	adds	r4, r4, r4
 800057c:	416d      	adcs	r5, r5
 800057e:	2100      	movs	r1, #0
 8000580:	3e01      	subs	r6, #1
 8000582:	1824      	adds	r4, r4, r0
 8000584:	414d      	adcs	r5, r1
 8000586:	2e00      	cmp	r6, #0
 8000588:	d006      	beq.n	8000598 <__udivmoddi4+0x108>
 800058a:	42ab      	cmp	r3, r5
 800058c:	d9ee      	bls.n	800056c <__udivmoddi4+0xdc>
 800058e:	3e01      	subs	r6, #1
 8000590:	1924      	adds	r4, r4, r4
 8000592:	416d      	adcs	r5, r5
 8000594:	2e00      	cmp	r6, #0
 8000596:	d1f8      	bne.n	800058a <__udivmoddi4+0xfa>
 8000598:	9800      	ldr	r0, [sp, #0]
 800059a:	9901      	ldr	r1, [sp, #4]
 800059c:	465b      	mov	r3, fp
 800059e:	1900      	adds	r0, r0, r4
 80005a0:	4169      	adcs	r1, r5
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	db24      	blt.n	80005f0 <__udivmoddi4+0x160>
 80005a6:	002b      	movs	r3, r5
 80005a8:	465a      	mov	r2, fp
 80005aa:	4644      	mov	r4, r8
 80005ac:	40d3      	lsrs	r3, r2
 80005ae:	002a      	movs	r2, r5
 80005b0:	40e2      	lsrs	r2, r4
 80005b2:	001c      	movs	r4, r3
 80005b4:	465b      	mov	r3, fp
 80005b6:	0015      	movs	r5, r2
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db2a      	blt.n	8000612 <__udivmoddi4+0x182>
 80005bc:	0026      	movs	r6, r4
 80005be:	409e      	lsls	r6, r3
 80005c0:	0033      	movs	r3, r6
 80005c2:	0026      	movs	r6, r4
 80005c4:	4647      	mov	r7, r8
 80005c6:	40be      	lsls	r6, r7
 80005c8:	0032      	movs	r2, r6
 80005ca:	1a80      	subs	r0, r0, r2
 80005cc:	4199      	sbcs	r1, r3
 80005ce:	9000      	str	r0, [sp, #0]
 80005d0:	9101      	str	r1, [sp, #4]
 80005d2:	e79f      	b.n	8000514 <__udivmoddi4+0x84>
 80005d4:	42a3      	cmp	r3, r4
 80005d6:	d8bc      	bhi.n	8000552 <__udivmoddi4+0xc2>
 80005d8:	e783      	b.n	80004e2 <__udivmoddi4+0x52>
 80005da:	4642      	mov	r2, r8
 80005dc:	2320      	movs	r3, #32
 80005de:	2100      	movs	r1, #0
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	2200      	movs	r2, #0
 80005e4:	9100      	str	r1, [sp, #0]
 80005e6:	9201      	str	r2, [sp, #4]
 80005e8:	2201      	movs	r2, #1
 80005ea:	40da      	lsrs	r2, r3
 80005ec:	9201      	str	r2, [sp, #4]
 80005ee:	e786      	b.n	80004fe <__udivmoddi4+0x6e>
 80005f0:	4642      	mov	r2, r8
 80005f2:	2320      	movs	r3, #32
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	002a      	movs	r2, r5
 80005f8:	4646      	mov	r6, r8
 80005fa:	409a      	lsls	r2, r3
 80005fc:	0023      	movs	r3, r4
 80005fe:	40f3      	lsrs	r3, r6
 8000600:	4644      	mov	r4, r8
 8000602:	4313      	orrs	r3, r2
 8000604:	002a      	movs	r2, r5
 8000606:	40e2      	lsrs	r2, r4
 8000608:	001c      	movs	r4, r3
 800060a:	465b      	mov	r3, fp
 800060c:	0015      	movs	r5, r2
 800060e:	2b00      	cmp	r3, #0
 8000610:	dad4      	bge.n	80005bc <__udivmoddi4+0x12c>
 8000612:	4642      	mov	r2, r8
 8000614:	002f      	movs	r7, r5
 8000616:	2320      	movs	r3, #32
 8000618:	0026      	movs	r6, r4
 800061a:	4097      	lsls	r7, r2
 800061c:	1a9b      	subs	r3, r3, r2
 800061e:	40de      	lsrs	r6, r3
 8000620:	003b      	movs	r3, r7
 8000622:	4333      	orrs	r3, r6
 8000624:	e7cd      	b.n	80005c2 <__udivmoddi4+0x132>
 8000626:	46c0      	nop			; (mov r8, r8)

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f000 f807 	bl	8000640 <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f000 f802 	bl	8000640 <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__clzsi2>:
 8000640:	211c      	movs	r1, #28
 8000642:	2301      	movs	r3, #1
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	4298      	cmp	r0, r3
 8000648:	d301      	bcc.n	800064e <__clzsi2+0xe>
 800064a:	0c00      	lsrs	r0, r0, #16
 800064c:	3910      	subs	r1, #16
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	4298      	cmp	r0, r3
 8000652:	d301      	bcc.n	8000658 <__clzsi2+0x18>
 8000654:	0a00      	lsrs	r0, r0, #8
 8000656:	3908      	subs	r1, #8
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0x22>
 800065e:	0900      	lsrs	r0, r0, #4
 8000660:	3904      	subs	r1, #4
 8000662:	a202      	add	r2, pc, #8	; (adr r2, 800066c <__clzsi2+0x2c>)
 8000664:	5c10      	ldrb	r0, [r2, r0]
 8000666:	1840      	adds	r0, r0, r1
 8000668:	4770      	bx	lr
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	02020304 	.word	0x02020304
 8000670:	01010101 	.word	0x01010101
	...

0800067c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_DMA_Init+0x38>)
 8000684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_DMA_Init+0x38>)
 8000688:	2101      	movs	r1, #1
 800068a:	430a      	orrs	r2, r1
 800068c:	631a      	str	r2, [r3, #48]	; 0x30
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_DMA_Init+0x38>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	2201      	movs	r2, #1
 8000694:	4013      	ands	r3, r2
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2009      	movs	r0, #9
 80006a0:	f003 f99e 	bl	80039e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006a4:	2009      	movs	r0, #9
 80006a6:	f003 f9b0 	bl	8003a0a <HAL_NVIC_EnableIRQ>

}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b002      	add	sp, #8
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	40021000 	.word	0x40021000

080006b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b089      	sub	sp, #36	; 0x24
 80006bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	240c      	movs	r4, #12
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	0018      	movs	r0, r3
 80006c4:	2314      	movs	r3, #20
 80006c6:	001a      	movs	r2, r3
 80006c8:	2100      	movs	r1, #0
 80006ca:	f007 f897 	bl	80077fc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <MX_GPIO_Init+0xd4>)
 80006d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006d2:	4b2e      	ldr	r3, [pc, #184]	; (800078c <MX_GPIO_Init+0xd4>)
 80006d4:	2101      	movs	r1, #1
 80006d6:	430a      	orrs	r2, r1
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80006da:	4b2c      	ldr	r3, [pc, #176]	; (800078c <MX_GPIO_Init+0xd4>)
 80006dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006de:	2201      	movs	r2, #1
 80006e0:	4013      	ands	r3, r2
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <MX_GPIO_Init+0xd4>)
 80006e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <MX_GPIO_Init+0xd4>)
 80006ec:	2102      	movs	r1, #2
 80006ee:	430a      	orrs	r2, r1
 80006f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <MX_GPIO_Init+0xd4>)
 80006f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f6:	2202      	movs	r2, #2
 80006f8:	4013      	ands	r3, r2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(sr_shift_output_GPIO_Port, sr_shift_output_Pin, GPIO_PIN_RESET);
 80006fe:	23a0      	movs	r3, #160	; 0xa0
 8000700:	05db      	lsls	r3, r3, #23
 8000702:	2200      	movs	r2, #0
 8000704:	2140      	movs	r1, #64	; 0x40
 8000706:	0018      	movs	r0, r3
 8000708:	f003 fecb 	bl	80044a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(enable_hv_GPIO_Port, enable_hv_Pin, GPIO_PIN_RESET);
 800070c:	4b20      	ldr	r3, [pc, #128]	; (8000790 <MX_GPIO_Init+0xd8>)
 800070e:	2200      	movs	r2, #0
 8000710:	2102      	movs	r1, #2
 8000712:	0018      	movs	r0, r3
 8000714:	f003 fec5 	bl	80044a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = rot_b_Pin|rot_a_Pin|sens_size_Pin|rot_push_Pin;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	221b      	movs	r2, #27
 800071c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2200      	movs	r2, #0
 8000722:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2202      	movs	r2, #2
 8000728:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	193a      	adds	r2, r7, r4
 800072c:	23a0      	movs	r3, #160	; 0xa0
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	0011      	movs	r1, r2
 8000732:	0018      	movs	r0, r3
 8000734:	f003 fd2a 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = sr_shift_output_Pin;
 8000738:	193b      	adds	r3, r7, r4
 800073a:	2240      	movs	r2, #64	; 0x40
 800073c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2201      	movs	r2, #1
 8000742:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(sr_shift_output_GPIO_Port, &GPIO_InitStruct);
 8000750:	193a      	adds	r2, r7, r4
 8000752:	23a0      	movs	r3, #160	; 0xa0
 8000754:	05db      	lsls	r3, r3, #23
 8000756:	0011      	movs	r1, r2
 8000758:	0018      	movs	r0, r3
 800075a:	f003 fd17 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = enable_hv_Pin;
 800075e:	0021      	movs	r1, r4
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2202      	movs	r2, #2
 8000764:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2201      	movs	r2, #1
 800076a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(enable_hv_GPIO_Port, &GPIO_InitStruct);
 8000778:	187b      	adds	r3, r7, r1
 800077a:	4a05      	ldr	r2, [pc, #20]	; (8000790 <MX_GPIO_Init+0xd8>)
 800077c:	0019      	movs	r1, r3
 800077e:	0010      	movs	r0, r2
 8000780:	f003 fd04 	bl	800418c <HAL_GPIO_Init>

}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b009      	add	sp, #36	; 0x24
 800078a:	bd90      	pop	{r4, r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	50000400 	.word	0x50000400

08000794 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_I2C1_Init+0x74>)
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <MX_I2C1_Init+0x78>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_I2C1_Init+0x74>)
 80007a0:	4a1b      	ldr	r2, [pc, #108]	; (8000810 <MX_I2C1_Init+0x7c>)
 80007a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_I2C1_Init+0x74>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_I2C1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_I2C1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_I2C1_Init+0x74>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f003 fe83 	bl	80044dc <HAL_I2C_Init>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007da:	f000 fccf 	bl	800117c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_I2C1_Init+0x74>)
 80007e0:	2100      	movs	r1, #0
 80007e2:	0018      	movs	r0, r3
 80007e4:	f004 fbd6 	bl	8004f94 <HAL_I2CEx_ConfigAnalogFilter>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d001      	beq.n	80007f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007ec:	f000 fcc6 	bl	800117c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <MX_I2C1_Init+0x74>)
 80007f2:	2100      	movs	r1, #0
 80007f4:	0018      	movs	r0, r3
 80007f6:	f004 fc19 	bl	800502c <HAL_I2CEx_ConfigDigitalFilter>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007fe:	f000 fcbd 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000088 	.word	0x20000088
 800080c:	40005400 	.word	0x40005400
 8000810:	0060112f 	.word	0x0060112f

08000814 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	240c      	movs	r4, #12
 800081e:	193b      	adds	r3, r7, r4
 8000820:	0018      	movs	r0, r3
 8000822:	2314      	movs	r3, #20
 8000824:	001a      	movs	r2, r3
 8000826:	2100      	movs	r1, #0
 8000828:	f006 ffe8 	bl	80077fc <memset>
  if(i2cHandle->Instance==I2C1)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a18      	ldr	r2, [pc, #96]	; (8000894 <HAL_I2C_MspInit+0x80>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d12a      	bne.n	800088c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <HAL_I2C_MspInit+0x84>)
 8000838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <HAL_I2C_MspInit+0x84>)
 800083c:	2101      	movs	r1, #1
 800083e:	430a      	orrs	r2, r1
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_I2C_MspInit+0x84>)
 8000844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000846:	2201      	movs	r2, #1
 8000848:	4013      	ands	r3, r2
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	22c0      	movs	r2, #192	; 0xc0
 8000852:	00d2      	lsls	r2, r2, #3
 8000854:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000856:	0021      	movs	r1, r4
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2212      	movs	r2, #18
 800085c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2203      	movs	r2, #3
 8000868:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2201      	movs	r2, #1
 800086e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	187a      	adds	r2, r7, r1
 8000872:	23a0      	movs	r3, #160	; 0xa0
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	0011      	movs	r1, r2
 8000878:	0018      	movs	r0, r3
 800087a:	f003 fc87 	bl	800418c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_I2C_MspInit+0x84>)
 8000880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <HAL_I2C_MspInit+0x84>)
 8000884:	2180      	movs	r1, #128	; 0x80
 8000886:	0389      	lsls	r1, r1, #14
 8000888:	430a      	orrs	r2, r1
 800088a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b009      	add	sp, #36	; 0x24
 8000892:	bd90      	pop	{r4, r7, pc}
 8000894:	40005400 	.word	0x40005400
 8000898:	40021000 	.word	0x40021000

0800089c <_Z17run_input_handlerv>:
 * 	b0 HIGH: decoder turned right one click
 * 	b1 HIGH: decoder turned left one click
 * 	b2 HIGH: push button short pushed and released	>50ms
 * 	b3 HIGH: push button long pushed and NOT released >2000ms
 */
uint8_t run_input_handler(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
	static uint8_t test_byte=0;
	uint8_t calculated_input_byte=0;
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
	static uint8_t input_data=0;
	input_data=debouncer();											//debouncing
 80008a8:	f000 f844 	bl	8000934 <_Z9debouncerv>
 80008ac:	0003      	movs	r3, r0
 80008ae:	001a      	movs	r2, r3
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <_Z17run_input_handlerv+0x90>)
 80008b2:	701a      	strb	r2, [r3, #0]
	calculated_input_byte |= decoder(input_data&DECODE_FILTER);		//rotary decoding
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <_Z17run_input_handlerv+0x90>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2203      	movs	r2, #3
 80008ba:	4013      	ands	r3, r2
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 f8ec 	bl	8000a9c <_Z7decoderh>
 80008c4:	0003      	movs	r3, r0
 80008c6:	0019      	movs	r1, r3
 80008c8:	1dfb      	adds	r3, r7, #7
 80008ca:	1dfa      	adds	r2, r7, #7
 80008cc:	7812      	ldrb	r2, [r2, #0]
 80008ce:	430a      	orrs	r2, r1
 80008d0:	701a      	strb	r2, [r3, #0]
	calculated_input_byte |= push_handler(input_data&PUSH_FILTER);	//handling long press for push button
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <_Z17run_input_handlerv+0x90>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	220c      	movs	r2, #12
 80008d8:	4013      	ands	r3, r2
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	0018      	movs	r0, r3
 80008de:	f000 f943 	bl	8000b68 <_Z12push_handlerh>
 80008e2:	0003      	movs	r3, r0
 80008e4:	0019      	movs	r1, r3
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	1dfa      	adds	r2, r7, #7
 80008ea:	7812      	ldrb	r2, [r2, #0]
 80008ec:	430a      	orrs	r2, r1
 80008ee:	701a      	strb	r2, [r3, #0]

	if((calculated_input_byte&DECODE_FILTER) == DECODER_CW){
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2203      	movs	r2, #3
 80008f6:	4013      	ands	r3, r2
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d105      	bne.n	8000908 <_Z17run_input_handlerv+0x6c>
		test_byte++;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <_Z17run_input_handlerv+0x94>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	3301      	adds	r3, #1
 8000902:	b2da      	uxtb	r2, r3
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <_Z17run_input_handlerv+0x94>)
 8000906:	701a      	strb	r2, [r3, #0]
	}
	if((calculated_input_byte&DECODE_FILTER) == DECODER_CCW){
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2203      	movs	r2, #3
 800090e:	4013      	ands	r3, r2
 8000910:	2b02      	cmp	r3, #2
 8000912:	d105      	bne.n	8000920 <_Z17run_input_handlerv+0x84>
		test_byte--;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <_Z17run_input_handlerv+0x94>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	3b01      	subs	r3, #1
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <_Z17run_input_handlerv+0x94>)
 800091e:	701a      	strb	r2, [r3, #0]
	}

	return calculated_input_byte;
 8000920:	1dfb      	adds	r3, r7, #7
 8000922:	781b      	ldrb	r3, [r3, #0]
}
 8000924:	0018      	movs	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	b002      	add	sp, #8
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200000dd 	.word	0x200000dd
 8000930:	200000dc 	.word	0x200000dc

08000934 <_Z9debouncerv>:
 * @return debounced input states in one byte
 * 	b0: HIGH: rotary_a high
 * 	b1: HIGH: rotary_b high
 * 	b2: HIGH: rotary_push high
 */
uint8_t debouncer(void){
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	static uint8_t debounced_data=0;
	static input_debounce_timer debounce_timer;
	//let's debounce some inputs
	if(HAL_GPIO_ReadPin(rot_a_GPIO_Port, rot_a_Pin)==true){
 8000938:	23a0      	movs	r3, #160	; 0xa0
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	2102      	movs	r1, #2
 800093e:	0018      	movs	r0, r3
 8000940:	f003 fd92 	bl	8004468 <HAL_GPIO_ReadPin>
 8000944:	0003      	movs	r3, r0
 8000946:	3b01      	subs	r3, #1
 8000948:	425a      	negs	r2, r3
 800094a:	4153      	adcs	r3, r2
 800094c:	b2db      	uxtb	r3, r3
 800094e:	2b00      	cmp	r3, #0
 8000950:	d00a      	beq.n	8000968 <_Z9debouncerv+0x34>
		if(debounce_timer.rotary_a<DEBOUNCE_TIME)
 8000952:	4b50      	ldr	r3, [pc, #320]	; (8000a94 <_Z9debouncerv+0x160>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b04      	cmp	r3, #4
 8000958:	d810      	bhi.n	800097c <_Z9debouncerv+0x48>
			debounce_timer.rotary_a++;
 800095a:	4b4e      	ldr	r3, [pc, #312]	; (8000a94 <_Z9debouncerv+0x160>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b4c      	ldr	r3, [pc, #304]	; (8000a94 <_Z9debouncerv+0x160>)
 8000964:	701a      	strb	r2, [r3, #0]
 8000966:	e009      	b.n	800097c <_Z9debouncerv+0x48>
	}
	else{
		if(debounce_timer.rotary_a!=0)
 8000968:	4b4a      	ldr	r3, [pc, #296]	; (8000a94 <_Z9debouncerv+0x160>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d005      	beq.n	800097c <_Z9debouncerv+0x48>
			debounce_timer.rotary_a--;
 8000970:	4b48      	ldr	r3, [pc, #288]	; (8000a94 <_Z9debouncerv+0x160>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	3b01      	subs	r3, #1
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b46      	ldr	r3, [pc, #280]	; (8000a94 <_Z9debouncerv+0x160>)
 800097a:	701a      	strb	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(rot_b_GPIO_Port, rot_b_Pin)==true){
 800097c:	23a0      	movs	r3, #160	; 0xa0
 800097e:	05db      	lsls	r3, r3, #23
 8000980:	2101      	movs	r1, #1
 8000982:	0018      	movs	r0, r3
 8000984:	f003 fd70 	bl	8004468 <HAL_GPIO_ReadPin>
 8000988:	0003      	movs	r3, r0
 800098a:	3b01      	subs	r3, #1
 800098c:	425a      	negs	r2, r3
 800098e:	4153      	adcs	r3, r2
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d00a      	beq.n	80009ac <_Z9debouncerv+0x78>
		if(debounce_timer.rotary_b<DEBOUNCE_TIME)
 8000996:	4b3f      	ldr	r3, [pc, #252]	; (8000a94 <_Z9debouncerv+0x160>)
 8000998:	785b      	ldrb	r3, [r3, #1]
 800099a:	2b04      	cmp	r3, #4
 800099c:	d810      	bhi.n	80009c0 <_Z9debouncerv+0x8c>
			debounce_timer.rotary_b++;
 800099e:	4b3d      	ldr	r3, [pc, #244]	; (8000a94 <_Z9debouncerv+0x160>)
 80009a0:	785b      	ldrb	r3, [r3, #1]
 80009a2:	3301      	adds	r3, #1
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <_Z9debouncerv+0x160>)
 80009a8:	705a      	strb	r2, [r3, #1]
 80009aa:	e009      	b.n	80009c0 <_Z9debouncerv+0x8c>
	}
	else{
		if(debounce_timer.rotary_b!=0)
 80009ac:	4b39      	ldr	r3, [pc, #228]	; (8000a94 <_Z9debouncerv+0x160>)
 80009ae:	785b      	ldrb	r3, [r3, #1]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d005      	beq.n	80009c0 <_Z9debouncerv+0x8c>
			debounce_timer.rotary_b--;
 80009b4:	4b37      	ldr	r3, [pc, #220]	; (8000a94 <_Z9debouncerv+0x160>)
 80009b6:	785b      	ldrb	r3, [r3, #1]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	4b35      	ldr	r3, [pc, #212]	; (8000a94 <_Z9debouncerv+0x160>)
 80009be:	705a      	strb	r2, [r3, #1]
	}
	if(HAL_GPIO_ReadPin(rot_push_GPIO_Port, rot_push_Pin)==true){
 80009c0:	23a0      	movs	r3, #160	; 0xa0
 80009c2:	05db      	lsls	r3, r3, #23
 80009c4:	2110      	movs	r1, #16
 80009c6:	0018      	movs	r0, r3
 80009c8:	f003 fd4e 	bl	8004468 <HAL_GPIO_ReadPin>
 80009cc:	0003      	movs	r3, r0
 80009ce:	3b01      	subs	r3, #1
 80009d0:	425a      	negs	r2, r3
 80009d2:	4153      	adcs	r3, r2
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d00a      	beq.n	80009f0 <_Z9debouncerv+0xbc>
		if(debounce_timer.rotary_push<DEBOUNCE_TIME)
 80009da:	4b2e      	ldr	r3, [pc, #184]	; (8000a94 <_Z9debouncerv+0x160>)
 80009dc:	789b      	ldrb	r3, [r3, #2]
 80009de:	2b04      	cmp	r3, #4
 80009e0:	d810      	bhi.n	8000a04 <_Z9debouncerv+0xd0>
			debounce_timer.rotary_push++;
 80009e2:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <_Z9debouncerv+0x160>)
 80009e4:	789b      	ldrb	r3, [r3, #2]
 80009e6:	3301      	adds	r3, #1
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <_Z9debouncerv+0x160>)
 80009ec:	709a      	strb	r2, [r3, #2]
 80009ee:	e009      	b.n	8000a04 <_Z9debouncerv+0xd0>
	}
	else{
		if(debounce_timer.rotary_push!=0)
 80009f0:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <_Z9debouncerv+0x160>)
 80009f2:	789b      	ldrb	r3, [r3, #2]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d005      	beq.n	8000a04 <_Z9debouncerv+0xd0>
			debounce_timer.rotary_push--;
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <_Z9debouncerv+0x160>)
 80009fa:	789b      	ldrb	r3, [r3, #2]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <_Z9debouncerv+0x160>)
 8000a02:	709a      	strb	r2, [r3, #2]
	}

	//now lets check the inputs
	if(debounce_timer.rotary_a==DEBOUNCE_TIME)
 8000a04:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <_Z9debouncerv+0x160>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b05      	cmp	r3, #5
 8000a0a:	d106      	bne.n	8000a1a <_Z9debouncerv+0xe6>
		debounced_data |= 0x1;
 8000a0c:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2201      	movs	r2, #1
 8000a12:	4313      	orrs	r3, r2
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4b20      	ldr	r3, [pc, #128]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a18:	701a      	strb	r2, [r3, #0]
	if(debounce_timer.rotary_a==0)
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <_Z9debouncerv+0x160>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d106      	bne.n	8000a30 <_Z9debouncerv+0xfc>
		debounced_data &= ~0x1;
 8000a22:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2201      	movs	r2, #1
 8000a28:	4393      	bics	r3, r2
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a2e:	701a      	strb	r2, [r3, #0]
	if(debounce_timer.rotary_b==DEBOUNCE_TIME)
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <_Z9debouncerv+0x160>)
 8000a32:	785b      	ldrb	r3, [r3, #1]
 8000a34:	2b05      	cmp	r3, #5
 8000a36:	d106      	bne.n	8000a46 <_Z9debouncerv+0x112>
		debounced_data |= 0x2;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a44:	701a      	strb	r2, [r3, #0]
	if(debounce_timer.rotary_b==0)
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <_Z9debouncerv+0x160>)
 8000a48:	785b      	ldrb	r3, [r3, #1]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d106      	bne.n	8000a5c <_Z9debouncerv+0x128>
		debounced_data &= ~0x2;
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2202      	movs	r2, #2
 8000a54:	4393      	bics	r3, r2
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a5a:	701a      	strb	r2, [r3, #0]
	if(debounce_timer.rotary_push==DEBOUNCE_TIME)
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <_Z9debouncerv+0x160>)
 8000a5e:	789b      	ldrb	r3, [r3, #2]
 8000a60:	2b05      	cmp	r3, #5
 8000a62:	d106      	bne.n	8000a72 <_Z9debouncerv+0x13e>
		debounced_data |= 0x4;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2204      	movs	r2, #4
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a70:	701a      	strb	r2, [r3, #0]
	if(debounce_timer.rotary_push==0)
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <_Z9debouncerv+0x160>)
 8000a74:	789b      	ldrb	r3, [r3, #2]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d106      	bne.n	8000a88 <_Z9debouncerv+0x154>
		debounced_data &= ~0x4;
 8000a7a:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2204      	movs	r2, #4
 8000a80:	4393      	bics	r3, r2
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a86:	701a      	strb	r2, [r3, #0]
	return debounced_data;
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <_Z9debouncerv+0x164>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	200000e0 	.word	0x200000e0
 8000a98:	200000de 	.word	0x200000de

08000a9c <_Z7decoderh>:
 * @param input debounced data - see debouncer() [0b = a; b1 = b]
 * @return information, if decoder turned left, right or not
 *  b0 HIGH: did turn right - CW
 *  b1 HIGH: did turn left - CCW
 */
uint8_t decoder(uint8_t new_state){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	701a      	strb	r2, [r3, #0]
	static uint8_t last_state=0;
	uint8_t decoded_data=0;
 8000aa8:	210f      	movs	r1, #15
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
	if(last_state == 0x00){
 8000ab0:	4b2c      	ldr	r3, [pc, #176]	; (8000b64 <_Z7decoderh+0xc8>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d10e      	bne.n	8000ad6 <_Z7decoderh+0x3a>
		if(new_state==0x01)
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d102      	bne.n	8000ac6 <_Z7decoderh+0x2a>
			decoded_data =DECODER_CW;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	701a      	strb	r2, [r3, #0]
		if(new_state==0x10)
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b10      	cmp	r3, #16
 8000acc:	d103      	bne.n	8000ad6 <_Z7decoderh+0x3a>
			decoded_data =DECODER_CCW;
 8000ace:	230f      	movs	r3, #15
 8000ad0:	18fb      	adds	r3, r7, r3
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	701a      	strb	r2, [r3, #0]
	}
	if(last_state == 0x01){
 8000ad6:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <_Z7decoderh+0xc8>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d10f      	bne.n	8000afe <_Z7decoderh+0x62>
		if(new_state==0x11)
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b11      	cmp	r3, #17
 8000ae4:	d103      	bne.n	8000aee <_Z7decoderh+0x52>
			decoded_data =DECODER_CW;
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	2201      	movs	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]
		if(new_state==0x00)
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d103      	bne.n	8000afe <_Z7decoderh+0x62>
			decoded_data =DECODER_CCW;
 8000af6:	230f      	movs	r3, #15
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	2202      	movs	r2, #2
 8000afc:	701a      	strb	r2, [r3, #0]
	}
	if(last_state == 0x11){
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <_Z7decoderh+0xc8>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b11      	cmp	r3, #17
 8000b04:	d10f      	bne.n	8000b26 <_Z7decoderh+0x8a>
		if(new_state==0x10)
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b10      	cmp	r3, #16
 8000b0c:	d103      	bne.n	8000b16 <_Z7decoderh+0x7a>
			decoded_data =DECODER_CW;
 8000b0e:	230f      	movs	r3, #15
 8000b10:	18fb      	adds	r3, r7, r3
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
		if(new_state==0x01)
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d103      	bne.n	8000b26 <_Z7decoderh+0x8a>
			decoded_data =DECODER_CCW;
 8000b1e:	230f      	movs	r3, #15
 8000b20:	18fb      	adds	r3, r7, r3
 8000b22:	2202      	movs	r2, #2
 8000b24:	701a      	strb	r2, [r3, #0]
	}
	if(last_state == 0x10){
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <_Z7decoderh+0xc8>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b10      	cmp	r3, #16
 8000b2c:	d10f      	bne.n	8000b4e <_Z7decoderh+0xb2>
		if(new_state==0x00)
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d103      	bne.n	8000b3e <_Z7decoderh+0xa2>
			decoded_data =DECODER_CW;
 8000b36:	230f      	movs	r3, #15
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	701a      	strb	r2, [r3, #0]
		if(new_state==0x11)
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b11      	cmp	r3, #17
 8000b44:	d103      	bne.n	8000b4e <_Z7decoderh+0xb2>
			decoded_data =DECODER_CCW;
 8000b46:	230f      	movs	r3, #15
 8000b48:	18fb      	adds	r3, r7, r3
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	701a      	strb	r2, [r3, #0]
	}
	last_state = new_state;
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <_Z7decoderh+0xc8>)
 8000b50:	1dfa      	adds	r2, r7, #7
 8000b52:	7812      	ldrb	r2, [r2, #0]
 8000b54:	701a      	strb	r2, [r3, #0]
	return decoded_data;
 8000b56:	230f      	movs	r3, #15
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	781b      	ldrb	r3, [r3, #0]
}
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b004      	add	sp, #16
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200000e3 	.word	0x200000e3

08000b68 <_Z12push_handlerh>:
 * @param input debounced data - see debouncer()
 * @return wether input was pressed short, long or not at all
 * 	b2 HIGH: push button short pushed and released	>50ms
 * 	b3 HIGH: push button long pushed and NOT released >2000ms
 */
uint8_t push_handler(uint8_t push_button){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	0002      	movs	r2, r0
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	701a      	strb	r2, [r3, #0]
	push_button = push_button >> 2;
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	1dfa      	adds	r2, r7, #7
 8000b78:	7812      	ldrb	r2, [r2, #0]
 8000b7a:	0892      	lsrs	r2, r2, #2
 8000b7c:	701a      	strb	r2, [r3, #0]
	static uint16_t input_hold_timer=0;
	uint8_t push_state=0;
 8000b7e:	230f      	movs	r3, #15
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]

	if(push_button == true && input_hold_timer<=LONG_PUSH_TIME+2){
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d10a      	bne.n	8000ba4 <_Z12push_handlerh+0x3c>
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <_Z12push_handlerh+0x88>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <_Z12push_handlerh+0x8c>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d805      	bhi.n	8000ba4 <_Z12push_handlerh+0x3c>
		input_hold_timer++;
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <_Z12push_handlerh+0x88>)
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <_Z12push_handlerh+0x88>)
 8000ba2:	801a      	strh	r2, [r3, #0]
	}

	if(push_button == false){
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d110      	bne.n	8000bce <_Z12push_handlerh+0x66>
		if(input_hold_timer>=SHORT_PUSH_TIME && input_hold_timer<=LONG_PUSH_TIME)
 8000bac:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <_Z12push_handlerh+0x88>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	2b31      	cmp	r3, #49	; 0x31
 8000bb2:	d909      	bls.n	8000bc8 <_Z12push_handlerh+0x60>
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <_Z12push_handlerh+0x88>)
 8000bb6:	881a      	ldrh	r2, [r3, #0]
 8000bb8:	23fa      	movs	r3, #250	; 0xfa
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d803      	bhi.n	8000bc8 <_Z12push_handlerh+0x60>
			push_state = SHORT_PUSH;
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	701a      	strb	r2, [r3, #0]
		input_hold_timer=0;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <_Z12push_handlerh+0x88>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	801a      	strh	r2, [r3, #0]
	}

	if(input_hold_timer==LONG_PUSH_TIME){
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <_Z12push_handlerh+0x88>)
 8000bd0:	881a      	ldrh	r2, [r3, #0]
 8000bd2:	23fa      	movs	r3, #250	; 0xfa
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d103      	bne.n	8000be2 <_Z12push_handlerh+0x7a>
		push_state = LONG_PUSH;
 8000bda:	230f      	movs	r3, #15
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	2208      	movs	r2, #8
 8000be0:	701a      	strb	r2, [r3, #0]
	}
	return push_state;
 8000be2:	230f      	movs	r3, #15
 8000be4:	18fb      	adds	r3, r7, r3
 8000be6:	781b      	ldrb	r3, [r3, #0]
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b004      	add	sp, #16
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	200000e4 	.word	0x200000e4
 8000bf4:	000007d2 	.word	0x000007d2

08000bf8 <_Z9set_colorhmh>:
 * @brief function to write new color to output queue
 * @param led_number number to which led the color should be applied [0-5]
 * @param hex_code	enter RGB Hex code of color or use predefined values
 * @param brightness choose brightness level between 1 and 100 - brightness cannot turn led off
 */
void set_color(uint8_t led_number, uint32_t hex_code, uint8_t brightness){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6039      	str	r1, [r7, #0]
 8000c00:	0011      	movs	r1, r2
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	1c02      	adds	r2, r0, #0
 8000c06:	701a      	strb	r2, [r3, #0]
 8000c08:	1dbb      	adds	r3, r7, #6
 8000c0a:	1c0a      	adds	r2, r1, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
	brightness_controller = 0;
 8000c0e:	4b3c      	ldr	r3, [pc, #240]	; (8000d00 <_Z9set_colorhmh+0x108>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
	if(led_number>=MAX_LED)
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b05      	cmp	r3, #5
 8000c1a:	d902      	bls.n	8000c22 <_Z9set_colorhmh+0x2a>
		led_number=MAX_LED-1;
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	2205      	movs	r2, #5
 8000c20:	701a      	strb	r2, [r3, #0]
	led_data[led_number]=0;
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <_Z9set_colorhmh+0x10c>)
 8000c28:	0092      	lsls	r2, r2, #2
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	50d1      	str	r1, [r2, r3]
	if(brightness>100)
 8000c2e:	1dbb      	adds	r3, r7, #6
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b64      	cmp	r3, #100	; 0x64
 8000c34:	d902      	bls.n	8000c3c <_Z9set_colorhmh+0x44>
		brightness = 100;
 8000c36:	1dbb      	adds	r3, r7, #6
 8000c38:	2264      	movs	r2, #100	; 0x64
 8000c3a:	701a      	strb	r2, [r3, #0]
	if(brightness<1)
 8000c3c:	1dbb      	adds	r3, r7, #6
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <_Z9set_colorhmh+0x52>
		brightness = 1;
 8000c44:	1dbb      	adds	r3, r7, #6
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
	//apply brightness to each color segment and reshuffle bits as required by the LED: green-red-blue
	//red
	brightness_controller = (uint32_t)((hex_code&0xff0000) >> 16)*brightness/100;
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	0c1b      	lsrs	r3, r3, #16
 8000c4e:	22ff      	movs	r2, #255	; 0xff
 8000c50:	4013      	ands	r3, r2
 8000c52:	1dba      	adds	r2, r7, #6
 8000c54:	7812      	ldrb	r2, [r2, #0]
 8000c56:	4353      	muls	r3, r2
 8000c58:	2164      	movs	r1, #100	; 0x64
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f7ff fa54 	bl	8000108 <__udivsi3>
 8000c60:	0003      	movs	r3, r0
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <_Z9set_colorhmh+0x108>)
 8000c66:	701a      	strb	r2, [r3, #0]
	led_data[led_number] |= (uint32_t)brightness_controller << 8;
 8000c68:	1dfb      	adds	r3, r7, #7
 8000c6a:	781a      	ldrb	r2, [r3, #0]
 8000c6c:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <_Z9set_colorhmh+0x10c>)
 8000c6e:	0092      	lsls	r2, r2, #2
 8000c70:	58d1      	ldr	r1, [r2, r3]
 8000c72:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <_Z9set_colorhmh+0x108>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	021b      	lsls	r3, r3, #8
 8000c78:	1dfa      	adds	r2, r7, #7
 8000c7a:	7812      	ldrb	r2, [r2, #0]
 8000c7c:	4319      	orrs	r1, r3
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <_Z9set_colorhmh+0x10c>)
 8000c80:	0092      	lsls	r2, r2, #2
 8000c82:	50d1      	str	r1, [r2, r3]
	//green
	brightness_controller = (uint32_t)((hex_code&0xff00) >> 8)*brightness/100;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	0a1b      	lsrs	r3, r3, #8
 8000c88:	22ff      	movs	r2, #255	; 0xff
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	1dba      	adds	r2, r7, #6
 8000c8e:	7812      	ldrb	r2, [r2, #0]
 8000c90:	4353      	muls	r3, r2
 8000c92:	2164      	movs	r1, #100	; 0x64
 8000c94:	0018      	movs	r0, r3
 8000c96:	f7ff fa37 	bl	8000108 <__udivsi3>
 8000c9a:	0003      	movs	r3, r0
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <_Z9set_colorhmh+0x108>)
 8000ca0:	701a      	strb	r2, [r3, #0]
	led_data[led_number] |= (uint32_t)brightness_controller << 16;
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	781a      	ldrb	r2, [r3, #0]
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <_Z9set_colorhmh+0x10c>)
 8000ca8:	0092      	lsls	r2, r2, #2
 8000caa:	58d1      	ldr	r1, [r2, r3]
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <_Z9set_colorhmh+0x108>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	041b      	lsls	r3, r3, #16
 8000cb2:	1dfa      	adds	r2, r7, #7
 8000cb4:	7812      	ldrb	r2, [r2, #0]
 8000cb6:	4319      	orrs	r1, r3
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <_Z9set_colorhmh+0x10c>)
 8000cba:	0092      	lsls	r2, r2, #2
 8000cbc:	50d1      	str	r1, [r2, r3]
	//blue
	brightness_controller = (uint32_t)(hex_code&0xff)*brightness/100;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	22ff      	movs	r2, #255	; 0xff
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	1dba      	adds	r2, r7, #6
 8000cc6:	7812      	ldrb	r2, [r2, #0]
 8000cc8:	4353      	muls	r3, r2
 8000cca:	2164      	movs	r1, #100	; 0x64
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff fa1b 	bl	8000108 <__udivsi3>
 8000cd2:	0003      	movs	r3, r0
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <_Z9set_colorhmh+0x108>)
 8000cd8:	701a      	strb	r2, [r3, #0]
	led_data[led_number] |= brightness_controller;
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <_Z9set_colorhmh+0x10c>)
 8000ce0:	0092      	lsls	r2, r2, #2
 8000ce2:	58d3      	ldr	r3, [r2, r3]
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <_Z9set_colorhmh+0x108>)
 8000ce6:	7812      	ldrb	r2, [r2, #0]
 8000ce8:	0011      	movs	r1, r2
 8000cea:	1dfa      	adds	r2, r7, #7
 8000cec:	7812      	ldrb	r2, [r2, #0]
 8000cee:	4319      	orrs	r1, r3
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <_Z9set_colorhmh+0x10c>)
 8000cf2:	0092      	lsls	r2, r2, #2
 8000cf4:	50d1      	str	r1, [r2, r3]
}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	200000e6 	.word	0x200000e6
 8000d04:	200000ec 	.word	0x200000ec

08000d08 <_Z9send_datab>:
/*
 * @brief: calling this command will prepare the data and perform a dma request to output the Data
 * also used to turn led on or off
 * @param state true: actual data is send to led; false: 0 is send to turn LED off
 */
void send_data(bool state){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	0002      	movs	r2, r0
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	701a      	strb	r2, [r3, #0]
//T0L = 580ns~1us
//T1L = 220ns~420ns
//RES = >280us
// 1 period = 40 cycles = 1,25us = 800kHz

	index = 0;
 8000d14:	4b40      	ldr	r3, [pc, #256]	; (8000e18 <_Z9send_datab+0x110>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<MAX_LED;i++){
 8000d1a:	230f      	movs	r3, #15
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
 8000d22:	230f      	movs	r3, #15
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b05      	cmp	r3, #5
 8000d2a:	d846      	bhi.n	8000dba <_Z9send_datab+0xb2>
		for(uint8_t j = NUM_BITS;j>0; j--){
 8000d2c:	230e      	movs	r3, #14
 8000d2e:	18fb      	adds	r3, r7, r3
 8000d30:	2218      	movs	r2, #24
 8000d32:	701a      	strb	r2, [r3, #0]
 8000d34:	230e      	movs	r3, #14
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d036      	beq.n	8000dac <_Z9send_datab+0xa4>
			if(state == false){
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d107      	bne.n	8000d56 <_Z9send_datab+0x4e>
				pwm_data[index] = LOW_CLOCKS;
 8000d46:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <_Z9send_datab+0x110>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	001a      	movs	r2, r3
 8000d4c:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <_Z9send_datab+0x114>)
 8000d4e:	0052      	lsls	r2, r2, #1
 8000d50:	210d      	movs	r1, #13
 8000d52:	52d1      	strh	r1, [r2, r3]
 8000d54:	e01d      	b.n	8000d92 <_Z9send_datab+0x8a>
			}
			else{
				if(led_data[i]&(1<<(j-1)))
 8000d56:	230f      	movs	r3, #15
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	781a      	ldrb	r2, [r3, #0]
 8000d5c:	4b30      	ldr	r3, [pc, #192]	; (8000e20 <_Z9send_datab+0x118>)
 8000d5e:	0092      	lsls	r2, r2, #2
 8000d60:	58d3      	ldr	r3, [r2, r3]
 8000d62:	220e      	movs	r2, #14
 8000d64:	18ba      	adds	r2, r7, r2
 8000d66:	7812      	ldrb	r2, [r2, #0]
 8000d68:	3a01      	subs	r2, #1
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	4091      	lsls	r1, r2
 8000d6e:	000a      	movs	r2, r1
 8000d70:	4013      	ands	r3, r2
 8000d72:	d007      	beq.n	8000d84 <_Z9send_datab+0x7c>
					pwm_data[index] = HIGH_CLOCKS;	//one period = 40 --> High bit = 70%
 8000d74:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <_Z9send_datab+0x110>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	001a      	movs	r2, r3
 8000d7a:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <_Z9send_datab+0x114>)
 8000d7c:	0052      	lsls	r2, r2, #1
 8000d7e:	211b      	movs	r1, #27
 8000d80:	52d1      	strh	r1, [r2, r3]
 8000d82:	e006      	b.n	8000d92 <_Z9send_datab+0x8a>
				else
					pwm_data[index] = LOW_CLOCKS;	//one period = 40 --> High bit = 30%
 8000d84:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <_Z9send_datab+0x110>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	001a      	movs	r2, r3
 8000d8a:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <_Z9send_datab+0x114>)
 8000d8c:	0052      	lsls	r2, r2, #1
 8000d8e:	210d      	movs	r1, #13
 8000d90:	52d1      	strh	r1, [r2, r3]
			}
			index++;
 8000d92:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <_Z9send_datab+0x110>)
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	3301      	adds	r3, #1
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <_Z9send_datab+0x110>)
 8000d9c:	801a      	strh	r2, [r3, #0]
		for(uint8_t j = NUM_BITS;j>0; j--){
 8000d9e:	210e      	movs	r1, #14
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	781a      	ldrb	r2, [r3, #0]
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	3a01      	subs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
 8000daa:	e7c3      	b.n	8000d34 <_Z9send_datab+0x2c>
	for(uint8_t i=0;i<MAX_LED;i++){
 8000dac:	210f      	movs	r1, #15
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	781a      	ldrb	r2, [r3, #0]
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	3201      	adds	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e7b3      	b.n	8000d22 <_Z9send_datab+0x1a>
		}
	}
	for(uint8_t i = 0; i<LED_RESET; i++){
 8000dba:	230d      	movs	r3, #13
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
 8000dc2:	200d      	movs	r0, #13
 8000dc4:	183b      	adds	r3, r7, r0
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2bef      	cmp	r3, #239	; 0xef
 8000dca:	d812      	bhi.n	8000df2 <_Z9send_datab+0xea>
		pwm_data[index]=0;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <_Z9send_datab+0x110>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	001a      	movs	r2, r3
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <_Z9send_datab+0x114>)
 8000dd4:	0052      	lsls	r2, r2, #1
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	52d1      	strh	r1, [r2, r3]
		index++;
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <_Z9send_datab+0x110>)
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <_Z9send_datab+0x110>)
 8000de4:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i<LED_RESET; i++){
 8000de6:	183b      	adds	r3, r7, r0
 8000de8:	781a      	ldrb	r2, [r3, #0]
 8000dea:	183b      	adds	r3, r7, r0
 8000dec:	3201      	adds	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
 8000df0:	e7e7      	b.n	8000dc2 <_Z9send_datab+0xba>
	}
	if(dma_running==false){
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <_Z9send_datab+0x11c>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d109      	bne.n	8000e0e <_Z9send_datab+0x106>
		HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, (uint32_t*)pwm_data, (MAX_LED*NUM_BITS)+LED_RESET);
 8000dfa:	23c0      	movs	r3, #192	; 0xc0
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <_Z9send_datab+0x114>)
 8000e00:	4809      	ldr	r0, [pc, #36]	; (8000e28 <_Z9send_datab+0x120>)
 8000e02:	2108      	movs	r1, #8
 8000e04:	f005 fc50 	bl	80066a8 <HAL_TIM_PWM_Start_DMA>
		dma_running=true;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <_Z9send_datab+0x11c>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]
	}
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b004      	add	sp, #16
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	200000e8 	.word	0x200000e8
 8000e1c:	20000104 	.word	0x20000104
 8000e20:	200000ec 	.word	0x200000ec
 8000e24:	20000404 	.word	0x20000404
 8000e28:	20000510 	.word	0x20000510

08000e2c <HAL_TIM_PWM_PulseFinishedCallback>:

/*
 * @brief: callback function when transfer is finished to stop the DMA
 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_3);
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000e36:	2108      	movs	r1, #8
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f005 fdbf 	bl	80069bc <HAL_TIM_PWM_Stop_DMA>
	dma_running=false;
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b002      	add	sp, #8
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000510 	.word	0x20000510
 8000e50:	20000404 	.word	0x20000404

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e56:	b091      	sub	sp, #68	; 0x44
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5a:	f002 fca5 	bl	80037a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5e:	f000 f8df 	bl	8001020 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e62:	f7ff fc29 	bl	80006b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e66:	f7ff fc09 	bl	800067c <MX_DMA_Init>
  MX_I2C1_Init();
 8000e6a:	f7ff fc93 	bl	8000794 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000e6e:	f001 ffdf 	bl	8002e30 <MX_TIM2_Init>
  MX_TIM21_Init();
 8000e72:	f002 f85b 	bl	8002f2c <MX_TIM21_Init>
  MX_SPI1_Init();
 8000e76:	f001 ff13 	bl	8002ca0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // start hardware timer for 1ms timer
  HAL_TIM_OC_Start_IT(&htim21, TIM_CHANNEL_1);
 8000e7a:	4b63      	ldr	r3, [pc, #396]	; (8001008 <main+0x1b4>)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f005 faf8 	bl	8006474 <HAL_TIM_OC_Start_IT>

  // check the size of the board
  board_size = 4;
 8000e84:	4b61      	ldr	r3, [pc, #388]	; (800100c <main+0x1b8>)
 8000e86:	2204      	movs	r2, #4
 8000e88:	701a      	strb	r2, [r3, #0]
  if(HAL_GPIO_ReadPin(sens_size_GPIO_Port, sens_size_Pin)==true){
 8000e8a:	23a0      	movs	r3, #160	; 0xa0
 8000e8c:	05db      	lsls	r3, r3, #23
 8000e8e:	2108      	movs	r1, #8
 8000e90:	0018      	movs	r0, r3
 8000e92:	f003 fae9 	bl	8004468 <HAL_GPIO_ReadPin>
 8000e96:	0003      	movs	r3, r0
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	425a      	negs	r2, r3
 8000e9c:	4153      	adcs	r3, r2
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <main+0x56>
	  board_size = 6;
 8000ea4:	4b59      	ldr	r3, [pc, #356]	; (800100c <main+0x1b8>)
 8000ea6:	2206      	movs	r2, #6
 8000ea8:	701a      	strb	r2, [r3, #0]
  }

  // read flash - load time zones, LED, brightness, point config
  uint32_t *RDAddr = (uint32_t *) UP_FLASH_ADDR;
 8000eaa:	4b59      	ldr	r3, [pc, #356]	; (8001010 <main+0x1bc>)
 8000eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t rx8[WORDS_IN_FLASH*4];

  for(uint8_t i=0; i<WORDS_IN_FLASH; i++){
 8000eae:	233b      	movs	r3, #59	; 0x3b
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	203b      	movs	r0, #59	; 0x3b
 8000eb8:	183b      	adds	r3, r7, r0
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b0c      	cmp	r3, #12
 8000ebe:	d82d      	bhi.n	8000f1c <main+0xc8>
	  uint32_t rx32 = *(__IO uint32_t *)RDAddr;
 8000ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	637b      	str	r3, [r7, #52]	; 0x34
	  RDAddr++;
 8000ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ec8:	3304      	adds	r3, #4
 8000eca:	63fb      	str	r3, [r7, #60]	; 0x3c
	  rx8[i*4+0]=(uint8_t)(rx32&0xff);
 8000ecc:	183b      	adds	r3, r7, r0
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ed4:	b2d1      	uxtb	r1, r2
 8000ed6:	003a      	movs	r2, r7
 8000ed8:	54d1      	strb	r1, [r2, r3]
	  rx8[i*4+1]=(uint8_t)(rx32 >> 8) &0xff;
 8000eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000edc:	0a1a      	lsrs	r2, r3, #8
 8000ede:	183b      	adds	r3, r7, r0
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	b2d1      	uxtb	r1, r2
 8000ee8:	003a      	movs	r2, r7
 8000eea:	54d1      	strb	r1, [r2, r3]
	  rx8[i*4+2]=(uint8_t)(rx32 >> 16)&0xff;
 8000eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eee:	0c1a      	lsrs	r2, r3, #16
 8000ef0:	183b      	adds	r3, r7, r0
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	b2d1      	uxtb	r1, r2
 8000efa:	003a      	movs	r2, r7
 8000efc:	54d1      	strb	r1, [r2, r3]
	  rx8[i*4+3]=(uint8_t)(rx32 >> 24);
 8000efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f00:	0e1a      	lsrs	r2, r3, #24
 8000f02:	183b      	adds	r3, r7, r0
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	3303      	adds	r3, #3
 8000f0a:	b2d1      	uxtb	r1, r2
 8000f0c:	003a      	movs	r2, r7
 8000f0e:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i=0; i<WORDS_IN_FLASH; i++){
 8000f10:	183b      	adds	r3, r7, r0
 8000f12:	781a      	ldrb	r2, [r3, #0]
 8000f14:	183b      	adds	r3, r7, r0
 8000f16:	3201      	adds	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
 8000f1a:	e7cc      	b.n	8000eb6 <main+0x62>
  }

  uint8_t index = 0;
 8000f1c:	233a      	movs	r3, #58	; 0x3a
 8000f1e:	18fb      	adds	r3, r7, r3
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0;i<8;i++){
 8000f24:	2339      	movs	r3, #57	; 0x39
 8000f26:	18fb      	adds	r3, r7, r3
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
 8000f2c:	2339      	movs	r3, #57	; 0x39
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b07      	cmp	r3, #7
 8000f34:	d82c      	bhi.n	8000f90 <main+0x13c>
	  for(uint8_t j=0;j<6;j++){
 8000f36:	2338      	movs	r3, #56	; 0x38
 8000f38:	18fb      	adds	r3, r7, r3
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	2538      	movs	r5, #56	; 0x38
 8000f40:	197b      	adds	r3, r7, r5
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b05      	cmp	r3, #5
 8000f46:	d81c      	bhi.n	8000f82 <main+0x12e>
		  on_time[i][j] = rx8[index];
 8000f48:	263a      	movs	r6, #58	; 0x3a
 8000f4a:	19bb      	adds	r3, r7, r6
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2239      	movs	r2, #57	; 0x39
 8000f50:	18ba      	adds	r2, r7, r2
 8000f52:	7812      	ldrb	r2, [r2, #0]
 8000f54:	1979      	adds	r1, r7, r5
 8000f56:	7809      	ldrb	r1, [r1, #0]
 8000f58:	0038      	movs	r0, r7
 8000f5a:	5cc4      	ldrb	r4, [r0, r3]
 8000f5c:	482d      	ldr	r0, [pc, #180]	; (8001014 <main+0x1c0>)
 8000f5e:	0013      	movs	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	189b      	adds	r3, r3, r2
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	18c3      	adds	r3, r0, r3
 8000f68:	1c22      	adds	r2, r4, #0
 8000f6a:	545a      	strb	r2, [r3, r1]
		  index++;
 8000f6c:	19bb      	adds	r3, r7, r6
 8000f6e:	781a      	ldrb	r2, [r3, #0]
 8000f70:	19bb      	adds	r3, r7, r6
 8000f72:	3201      	adds	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]
	  for(uint8_t j=0;j<6;j++){
 8000f76:	197b      	adds	r3, r7, r5
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	197b      	adds	r3, r7, r5
 8000f7c:	3201      	adds	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	e7dd      	b.n	8000f3e <main+0xea>
  for(uint8_t i=0;i<8;i++){
 8000f82:	2139      	movs	r1, #57	; 0x39
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	781a      	ldrb	r2, [r3, #0]
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	3201      	adds	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
 8000f8e:	e7cd      	b.n	8000f2c <main+0xd8>
	  }
  }
  misc_setting[index-48] = rx8[index]; index++;	//load LED config
 8000f90:	203a      	movs	r0, #58	; 0x3a
 8000f92:	183b      	adds	r3, r7, r0
 8000f94:	781a      	ldrb	r2, [r3, #0]
 8000f96:	183b      	adds	r3, r7, r0
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	3b30      	subs	r3, #48	; 0x30
 8000f9c:	0039      	movs	r1, r7
 8000f9e:	5c89      	ldrb	r1, [r1, r2]
 8000fa0:	4a1d      	ldr	r2, [pc, #116]	; (8001018 <main+0x1c4>)
 8000fa2:	54d1      	strb	r1, [r2, r3]
 8000fa4:	183b      	adds	r3, r7, r0
 8000fa6:	781a      	ldrb	r2, [r3, #0]
 8000fa8:	183b      	adds	r3, r7, r0
 8000faa:	3201      	adds	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]
  misc_setting[index-48] = rx8[index]; index++;	//load brightness config
 8000fae:	183b      	adds	r3, r7, r0
 8000fb0:	781a      	ldrb	r2, [r3, #0]
 8000fb2:	183b      	adds	r3, r7, r0
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	3b30      	subs	r3, #48	; 0x30
 8000fb8:	0039      	movs	r1, r7
 8000fba:	5c89      	ldrb	r1, [r1, r2]
 8000fbc:	4a16      	ldr	r2, [pc, #88]	; (8001018 <main+0x1c4>)
 8000fbe:	54d1      	strb	r1, [r2, r3]
 8000fc0:	183b      	adds	r3, r7, r0
 8000fc2:	781a      	ldrb	r2, [r3, #0]
 8000fc4:	183b      	adds	r3, r7, r0
 8000fc6:	3201      	adds	r2, #1
 8000fc8:	701a      	strb	r2, [r3, #0]
  misc_setting[index-48] = rx8[index];	//load point config
 8000fca:	183b      	adds	r3, r7, r0
 8000fcc:	781a      	ldrb	r2, [r3, #0]
 8000fce:	183b      	adds	r3, r7, r0
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	3b30      	subs	r3, #48	; 0x30
 8000fd4:	0039      	movs	r1, r7
 8000fd6:	5c89      	ldrb	r1, [r1, r2]
 8000fd8:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <main+0x1c4>)
 8000fda:	54d1      	strb	r1, [r2, r3]
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  if(timeout(main_timer)){
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <main+0x1c8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f000 f8b9 	bl	8001158 <timeout>
 8000fe6:	1e03      	subs	r3, r0, #0
 8000fe8:	d0f8      	beq.n	8000fdc <main+0x188>
		  main_timer = start_timer_ms(MAIN_TIMER);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f000 f8a4 	bl	8001138 <start_timer_ms>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <main+0x1c8>)
 8000ff4:	601a      	str	r2, [r3, #0]
		  run_time_handler();
 8000ff6:	f002 f8b5 	bl	8003164 <_Z16run_time_handlerv>

		  run_output_mixer(run_input_handler());
 8000ffa:	f7ff fc4f 	bl	800089c <_Z17run_input_handlerv>
 8000ffe:	0003      	movs	r3, r0
 8001000:	0018      	movs	r0, r3
 8001002:	f000 fa31 	bl	8001468 <_Z16run_output_mixerh>
	  if(timeout(main_timer)){
 8001006:	e7e9      	b.n	8000fdc <main+0x188>
 8001008:	20000550 	.word	0x20000550
 800100c:	20000410 	.word	0x20000410
 8001010:	08080000 	.word	0x08080000
 8001014:	20000414 	.word	0x20000414
 8001018:	20000444 	.word	0x20000444
 800101c:	20000408 	.word	0x20000408

08001020 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b099      	sub	sp, #100	; 0x64
 8001024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001026:	242c      	movs	r4, #44	; 0x2c
 8001028:	193b      	adds	r3, r7, r4
 800102a:	0018      	movs	r0, r3
 800102c:	2334      	movs	r3, #52	; 0x34
 800102e:	001a      	movs	r2, r3
 8001030:	2100      	movs	r1, #0
 8001032:	f006 fbe3 	bl	80077fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001036:	2318      	movs	r3, #24
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	0018      	movs	r0, r3
 800103c:	2314      	movs	r3, #20
 800103e:	001a      	movs	r2, r3
 8001040:	2100      	movs	r1, #0
 8001042:	f006 fbdb 	bl	80077fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001046:	003b      	movs	r3, r7
 8001048:	0018      	movs	r0, r3
 800104a:	2318      	movs	r3, #24
 800104c:	001a      	movs	r2, r3
 800104e:	2100      	movs	r1, #0
 8001050:	f006 fbd4 	bl	80077fc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001054:	4b30      	ldr	r3, [pc, #192]	; (8001118 <_Z18SystemClock_Configv+0xf8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a30      	ldr	r2, [pc, #192]	; (800111c <_Z18SystemClock_Configv+0xfc>)
 800105a:	401a      	ands	r2, r3
 800105c:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <_Z18SystemClock_Configv+0xf8>)
 800105e:	2180      	movs	r1, #128	; 0x80
 8001060:	0109      	lsls	r1, r1, #4
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001066:	0021      	movs	r1, r4
 8001068:	187b      	adds	r3, r7, r1
 800106a:	2202      	movs	r2, #2
 800106c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2201      	movs	r2, #1
 8001072:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2210      	movs	r2, #16
 8001078:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2202      	movs	r2, #2
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2200      	movs	r2, #0
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001086:	187b      	adds	r3, r7, r1
 8001088:	2280      	movs	r2, #128	; 0x80
 800108a:	02d2      	lsls	r2, r2, #11
 800108c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800108e:	187b      	adds	r3, r7, r1
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	03d2      	lsls	r2, r2, #15
 8001094:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001096:	187b      	adds	r3, r7, r1
 8001098:	0018      	movs	r0, r3
 800109a:	f004 f813 	bl	80050c4 <HAL_RCC_OscConfig>
 800109e:	0003      	movs	r3, r0
 80010a0:	1e5a      	subs	r2, r3, #1
 80010a2:	4193      	sbcs	r3, r2
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 80010aa:	f000 f867 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ae:	2118      	movs	r1, #24
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	220f      	movs	r2, #15
 80010b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2203      	movs	r2, #3
 80010ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	2280      	movs	r2, #128	; 0x80
 80010cc:	00d2      	lsls	r2, r2, #3
 80010ce:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	2101      	movs	r1, #1
 80010d4:	0018      	movs	r0, r3
 80010d6:	f004 fb71 	bl	80057bc <HAL_RCC_ClockConfig>
 80010da:	0003      	movs	r3, r0
 80010dc:	1e5a      	subs	r2, r3, #1
 80010de:	4193      	sbcs	r3, r2
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 80010e6:	f000 f849 	bl	800117c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010ea:	003b      	movs	r3, r7
 80010ec:	2208      	movs	r2, #8
 80010ee:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010f0:	003b      	movs	r3, r7
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f6:	003b      	movs	r3, r7
 80010f8:	0018      	movs	r0, r3
 80010fa:	f004 fd4d 	bl	8005b98 <HAL_RCCEx_PeriphCLKConfig>
 80010fe:	0003      	movs	r3, r0
 8001100:	1e5a      	subs	r2, r3, #1
 8001102:	4193      	sbcs	r3, r2
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <_Z18SystemClock_Configv+0xee>
  {
    Error_Handler();
 800110a:	f000 f837 	bl	800117c <Error_Handler>
  }
}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	b019      	add	sp, #100	; 0x64
 8001114:	bd90      	pop	{r4, r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	40007000 	.word	0x40007000
 800111c:	ffffe7ff 	.word	0xffffe7ff

08001120 <counter_update_it>:

//variables for runtime functions
/**
 * @brief: funcitons updates counter for 1ms time base - triggered by timer hardware module
 */
void counter_update_it(){
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	sys_counter++;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <counter_update_it+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	4b02      	ldr	r3, [pc, #8]	; (8001134 <counter_update_it+0x14>)
 800112c:	601a      	str	r2, [r3, #0]
}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000040c 	.word	0x2000040c

08001138 <start_timer_ms>:
 * @brief function to calculate end-time of timer event
 * @param ms: amount of time, the timer should run
 * @return systemtick value, at which the timer run out
 * @usage: call function and insert return value into timeout() function, to check if timeout occured
 */
uint32_t start_timer_ms(uint32_t new_timer_value){
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	return new_timer_value += sys_counter;
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <start_timer_ms+0x1c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	18d3      	adds	r3, r2, r3
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	687b      	ldr	r3, [r7, #4]
}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	b002      	add	sp, #8
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000040c 	.word	0x2000040c

08001158 <timeout>:
/**
 * @brief checks if the timer set by start_timer_ms for a given class is expired
 * @return if present tick counter is higher then timer value set by start_timer_ms
 * the timer is expired and the function returns true
 */
bool timeout(uint32_t end_time){
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	if(end_time>sys_counter)
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <timeout+0x20>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	429a      	cmp	r2, r3
 8001168:	d901      	bls.n	800116e <timeout+0x16>
		return false;
 800116a:	2300      	movs	r3, #0
 800116c:	e000      	b.n	8001170 <timeout+0x18>
	else
		return true;
 800116e:	2301      	movs	r3, #1
}
 8001170:	0018      	movs	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	b002      	add	sp, #8
 8001176:	bd80      	pop	{r7, pc}
 8001178:	2000040c 	.word	0x2000040c

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	e7fe      	b.n	8001184 <Error_Handler+0x8>
	...

08001188 <_Z9spi_writev>:
//////////////// SPI-Subroutine ////////////////
//MSB first
/*
 * @brief: function to handle write commands via SPI - calls HAL
 */
void spi_write(void){
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(sr_shift_output_GPIO_Port, sr_shift_output_Pin, GPIO_PIN_RESET);
 800118c:	23a0      	movs	r3, #160	; 0xa0
 800118e:	05db      	lsls	r3, r3, #23
 8001190:	2200      	movs	r2, #0
 8001192:	2140      	movs	r1, #64	; 0x40
 8001194:	0018      	movs	r0, r3
 8001196:	f003 f984 	bl	80044a2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, spi_data, 4, 100);
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <_Z9spi_writev+0x34>)
 800119c:	4808      	ldr	r0, [pc, #32]	; (80011c0 <_Z9spi_writev+0x38>)
 800119e:	2364      	movs	r3, #100	; 0x64
 80011a0:	2204      	movs	r2, #4
 80011a2:	f004 feae 	bl	8005f02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(sr_shift_output_GPIO_Port, sr_shift_output_Pin, GPIO_PIN_SET);
 80011a6:	23a0      	movs	r3, #160	; 0xa0
 80011a8:	05db      	lsls	r3, r3, #23
 80011aa:	2201      	movs	r2, #1
 80011ac:	2140      	movs	r1, #64	; 0x40
 80011ae:	0018      	movs	r0, r3
 80011b0:	f003 f977 	bl	80044a2 <HAL_GPIO_WritePin>
}
 80011b4:	46c0      	nop			; (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	2000044c 	.word	0x2000044c
 80011c0:	200004b8 	.word	0x200004b8

080011c4 <_Z10set_numberhh>:
 * @brief writes a value to the register of the specified number
 * @param tube_number is the selected tube. 0 is the left tube, 5 the most right one (if 6 tubes are installed)
 * @param value is the value to be displayed - values other than 0 to 9 will turn the tube off
 * @note: values are stored in their variables so that they can easily be copied into the spi_data
 */
void set_number(uint8_t tube_number, uint8_t value){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	0002      	movs	r2, r0
 80011cc:	1dfb      	adds	r3, r7, #7
 80011ce:	701a      	strb	r2, [r3, #0]
 80011d0:	1dbb      	adds	r3, r7, #6
 80011d2:	1c0a      	adds	r2, r1, #0
 80011d4:	701a      	strb	r2, [r3, #0]
	uint8_t temp = 0;
 80011d6:	230f      	movs	r3, #15
 80011d8:	18fb      	adds	r3, r7, r3
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]

	if(value>0xf)
 80011de:	1dbb      	adds	r3, r7, #6
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b0f      	cmp	r3, #15
 80011e4:	d902      	bls.n	80011ec <_Z10set_numberhh+0x28>
		value=0xf;
 80011e6:	1dbb      	adds	r3, r7, #6
 80011e8:	220f      	movs	r2, #15
 80011ea:	701a      	strb	r2, [r3, #0]

	if(tube_number%2 == 1)
 80011ec:	1dfb      	adds	r3, r7, #7
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	4013      	ands	r3, r2
 80011f4:	d004      	beq.n	8001200 <_Z10set_numberhh+0x3c>
		value = (value << 4) & 0xff;
 80011f6:	1dbb      	adds	r3, r7, #6
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	011a      	lsls	r2, r3, #4
 80011fc:	1dbb      	adds	r3, r7, #6
 80011fe:	701a      	strb	r2, [r3, #0]

	//spi_data [0] = seconds; [2] = minutes; [3] = hours

	switch(tube_number){
 8001200:	1dfb      	adds	r3, r7, #7
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b05      	cmp	r3, #5
 8001206:	d86a      	bhi.n	80012de <_Z10set_numberhh+0x11a>
 8001208:	009a      	lsls	r2, r3, #2
 800120a:	4b37      	ldr	r3, [pc, #220]	; (80012e8 <_Z10set_numberhh+0x124>)
 800120c:	18d3      	adds	r3, r2, r3
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	469f      	mov	pc, r3
		case 0: temp = spi_data[3]; spi_data[3] = (temp & 0xf0) | value; break;
 8001212:	210f      	movs	r1, #15
 8001214:	187b      	adds	r3, r7, r1
 8001216:	4a35      	ldr	r2, [pc, #212]	; (80012ec <_Z10set_numberhh+0x128>)
 8001218:	78d2      	ldrb	r2, [r2, #3]
 800121a:	701a      	strb	r2, [r3, #0]
 800121c:	187b      	adds	r3, r7, r1
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	220f      	movs	r2, #15
 8001222:	4393      	bics	r3, r2
 8001224:	b2da      	uxtb	r2, r3
 8001226:	1dbb      	adds	r3, r7, #6
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	4313      	orrs	r3, r2
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <_Z10set_numberhh+0x128>)
 8001230:	70da      	strb	r2, [r3, #3]
 8001232:	e055      	b.n	80012e0 <_Z10set_numberhh+0x11c>
		case 1: temp = spi_data[3]; spi_data[3] = (temp & 0x0f) | value; break;	//number already shifted 4 bites
 8001234:	210f      	movs	r1, #15
 8001236:	187b      	adds	r3, r7, r1
 8001238:	4a2c      	ldr	r2, [pc, #176]	; (80012ec <_Z10set_numberhh+0x128>)
 800123a:	78d2      	ldrb	r2, [r2, #3]
 800123c:	701a      	strb	r2, [r3, #0]
 800123e:	187b      	adds	r3, r7, r1
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	220f      	movs	r2, #15
 8001244:	4013      	ands	r3, r2
 8001246:	b2da      	uxtb	r2, r3
 8001248:	1dbb      	adds	r3, r7, #6
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4313      	orrs	r3, r2
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4b26      	ldr	r3, [pc, #152]	; (80012ec <_Z10set_numberhh+0x128>)
 8001252:	70da      	strb	r2, [r3, #3]
 8001254:	e044      	b.n	80012e0 <_Z10set_numberhh+0x11c>
		case 2: temp = spi_data[2]; spi_data[2] = (temp & 0xf0) | value; break;
 8001256:	210f      	movs	r1, #15
 8001258:	187b      	adds	r3, r7, r1
 800125a:	4a24      	ldr	r2, [pc, #144]	; (80012ec <_Z10set_numberhh+0x128>)
 800125c:	7892      	ldrb	r2, [r2, #2]
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	187b      	adds	r3, r7, r1
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	220f      	movs	r2, #15
 8001266:	4393      	bics	r3, r2
 8001268:	b2da      	uxtb	r2, r3
 800126a:	1dbb      	adds	r3, r7, #6
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4313      	orrs	r3, r2
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <_Z10set_numberhh+0x128>)
 8001274:	709a      	strb	r2, [r3, #2]
 8001276:	e033      	b.n	80012e0 <_Z10set_numberhh+0x11c>
		case 3: temp = spi_data[2]; spi_data[2] = (temp & 0x0f) | value; break;
 8001278:	210f      	movs	r1, #15
 800127a:	187b      	adds	r3, r7, r1
 800127c:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <_Z10set_numberhh+0x128>)
 800127e:	7892      	ldrb	r2, [r2, #2]
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	187b      	adds	r3, r7, r1
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	220f      	movs	r2, #15
 8001288:	4013      	ands	r3, r2
 800128a:	b2da      	uxtb	r2, r3
 800128c:	1dbb      	adds	r3, r7, #6
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4313      	orrs	r3, r2
 8001292:	b2da      	uxtb	r2, r3
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <_Z10set_numberhh+0x128>)
 8001296:	709a      	strb	r2, [r3, #2]
 8001298:	e022      	b.n	80012e0 <_Z10set_numberhh+0x11c>
		case 4: temp = spi_data[0]; spi_data[0] = (temp & 0xf0) | value; break;
 800129a:	210f      	movs	r1, #15
 800129c:	187b      	adds	r3, r7, r1
 800129e:	4a13      	ldr	r2, [pc, #76]	; (80012ec <_Z10set_numberhh+0x128>)
 80012a0:	7812      	ldrb	r2, [r2, #0]
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	187b      	adds	r3, r7, r1
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	220f      	movs	r2, #15
 80012aa:	4393      	bics	r3, r2
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	1dbb      	adds	r3, r7, #6
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <_Z10set_numberhh+0x128>)
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	e011      	b.n	80012e0 <_Z10set_numberhh+0x11c>
		case 5: temp = spi_data[0]; spi_data[0] = (temp & 0x0f) | value; break;
 80012bc:	210f      	movs	r1, #15
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <_Z10set_numberhh+0x128>)
 80012c2:	7812      	ldrb	r2, [r2, #0]
 80012c4:	701a      	strb	r2, [r3, #0]
 80012c6:	187b      	adds	r3, r7, r1
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	220f      	movs	r2, #15
 80012cc:	4013      	ands	r3, r2
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	1dbb      	adds	r3, r7, #6
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <_Z10set_numberhh+0x128>)
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	e000      	b.n	80012e0 <_Z10set_numberhh+0x11c>
		default: break;
 80012de:	46c0      	nop			; (mov r8, r8)
	}
}
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b004      	add	sp, #16
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	08007824 	.word	0x08007824
 80012ec:	2000044c 	.word	0x2000044c

080012f0 <_Z9set_pointhb>:
/**
 * @brief turns a specific point on or off
 * @param point_number is the selected point starting from left - 0: lh, 1: ll, 2: rh, 3: rl
 * @param state true -> point is on; false -> point is off
 */
void set_point(uint8_t point_number, bool state){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	0002      	movs	r2, r0
 80012f8:	1dfb      	adds	r3, r7, #7
 80012fa:	701a      	strb	r2, [r3, #0]
 80012fc:	1dbb      	adds	r3, r7, #6
 80012fe:	1c0a      	adds	r2, r1, #0
 8001300:	701a      	strb	r2, [r3, #0]
	switch(point_number){
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d044      	beq.n	8001394 <_Z9set_pointhb+0xa4>
 800130a:	dc57      	bgt.n	80013bc <_Z9set_pointhb+0xcc>
 800130c:	2b02      	cmp	r3, #2
 800130e:	d02d      	beq.n	800136c <_Z9set_pointhb+0x7c>
 8001310:	dc54      	bgt.n	80013bc <_Z9set_pointhb+0xcc>
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <_Z9set_pointhb+0x2c>
 8001316:	2b01      	cmp	r3, #1
 8001318:	d014      	beq.n	8001344 <_Z9set_pointhb+0x54>
		case 0: if(state == true) spi_data[1] |= 0x1; else spi_data[1] &= ~0x1; break;
		case 1: if(state == true) spi_data[1] |= 0x2; else spi_data[1] &= ~0x2; break;
		case 2: if(state == true) spi_data[1] |= 0x4; else spi_data[1] &= ~0x4; break;
		case 3: if(state == true) spi_data[1] |= 0x8; else spi_data[1] &= ~0x8; break;
		default: break;
 800131a:	e04f      	b.n	80013bc <_Z9set_pointhb+0xcc>
		case 0: if(state == true) spi_data[1] |= 0x1; else spi_data[1] &= ~0x1; break;
 800131c:	1dbb      	adds	r3, r7, #6
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d107      	bne.n	8001334 <_Z9set_pointhb+0x44>
 8001324:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <_Z9set_pointhb+0xd8>)
 8001326:	785b      	ldrb	r3, [r3, #1]
 8001328:	2201      	movs	r2, #1
 800132a:	4313      	orrs	r3, r2
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <_Z9set_pointhb+0xd8>)
 8001330:	705a      	strb	r2, [r3, #1]
 8001332:	e044      	b.n	80013be <_Z9set_pointhb+0xce>
 8001334:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <_Z9set_pointhb+0xd8>)
 8001336:	785b      	ldrb	r3, [r3, #1]
 8001338:	2201      	movs	r2, #1
 800133a:	4393      	bics	r3, r2
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <_Z9set_pointhb+0xd8>)
 8001340:	705a      	strb	r2, [r3, #1]
 8001342:	e03c      	b.n	80013be <_Z9set_pointhb+0xce>
		case 1: if(state == true) spi_data[1] |= 0x2; else spi_data[1] &= ~0x2; break;
 8001344:	1dbb      	adds	r3, r7, #6
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d107      	bne.n	800135c <_Z9set_pointhb+0x6c>
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <_Z9set_pointhb+0xd8>)
 800134e:	785b      	ldrb	r3, [r3, #1]
 8001350:	2202      	movs	r2, #2
 8001352:	4313      	orrs	r3, r2
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <_Z9set_pointhb+0xd8>)
 8001358:	705a      	strb	r2, [r3, #1]
 800135a:	e030      	b.n	80013be <_Z9set_pointhb+0xce>
 800135c:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <_Z9set_pointhb+0xd8>)
 800135e:	785b      	ldrb	r3, [r3, #1]
 8001360:	2202      	movs	r2, #2
 8001362:	4393      	bics	r3, r2
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <_Z9set_pointhb+0xd8>)
 8001368:	705a      	strb	r2, [r3, #1]
 800136a:	e028      	b.n	80013be <_Z9set_pointhb+0xce>
		case 2: if(state == true) spi_data[1] |= 0x4; else spi_data[1] &= ~0x4; break;
 800136c:	1dbb      	adds	r3, r7, #6
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d107      	bne.n	8001384 <_Z9set_pointhb+0x94>
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <_Z9set_pointhb+0xd8>)
 8001376:	785b      	ldrb	r3, [r3, #1]
 8001378:	2204      	movs	r2, #4
 800137a:	4313      	orrs	r3, r2
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <_Z9set_pointhb+0xd8>)
 8001380:	705a      	strb	r2, [r3, #1]
 8001382:	e01c      	b.n	80013be <_Z9set_pointhb+0xce>
 8001384:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <_Z9set_pointhb+0xd8>)
 8001386:	785b      	ldrb	r3, [r3, #1]
 8001388:	2204      	movs	r2, #4
 800138a:	4393      	bics	r3, r2
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <_Z9set_pointhb+0xd8>)
 8001390:	705a      	strb	r2, [r3, #1]
 8001392:	e014      	b.n	80013be <_Z9set_pointhb+0xce>
		case 3: if(state == true) spi_data[1] |= 0x8; else spi_data[1] &= ~0x8; break;
 8001394:	1dbb      	adds	r3, r7, #6
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d107      	bne.n	80013ac <_Z9set_pointhb+0xbc>
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <_Z9set_pointhb+0xd8>)
 800139e:	785b      	ldrb	r3, [r3, #1]
 80013a0:	2208      	movs	r2, #8
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <_Z9set_pointhb+0xd8>)
 80013a8:	705a      	strb	r2, [r3, #1]
 80013aa:	e008      	b.n	80013be <_Z9set_pointhb+0xce>
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <_Z9set_pointhb+0xd8>)
 80013ae:	785b      	ldrb	r3, [r3, #1]
 80013b0:	2208      	movs	r2, #8
 80013b2:	4393      	bics	r3, r2
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <_Z9set_pointhb+0xd8>)
 80013b8:	705a      	strb	r2, [r3, #1]
 80013ba:	e000      	b.n	80013be <_Z9set_pointhb+0xce>
		default: break;
 80013bc:	46c0      	nop			; (mov r8, r8)
	}
}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b002      	add	sp, #8
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	2000044c 	.word	0x2000044c

080013cc <_Z10set_outputv>:

/**
 * @brief function to send data to output
 */
void set_output(void){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	if(board_size != 6)
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <_Z10set_outputv+0x1c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b06      	cmp	r3, #6
 80013d6:	d002      	beq.n	80013de <_Z10set_outputv+0x12>
		spi_data[0] = 0x00;
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <_Z10set_outputv+0x20>)
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
	spi_write();
 80013de:	f7ff fed3 	bl	8001188 <_Z9spi_writev>
}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000410 	.word	0x20000410
 80013ec:	2000044c 	.word	0x2000044c

080013f0 <_Z17set_flyback_stateb>:
 * @return states how the output is set - use to check if function is not in cooldown mode where new values are discarded
 *
 * @info if a new param is written, a cooldown of 500ms is applied, before the converter can get a new state
 * the written value is discarded if the cooldown is still acitve. If the return value
 */
bool set_flyback_state(bool new_state){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	0002      	movs	r2, r0
 80013f8:	1dfb      	adds	r3, r7, #7
 80013fa:	701a      	strb	r2, [r3, #0]
	if(flyback_state!=new_state){
 80013fc:	4b17      	ldr	r3, [pc, #92]	; (800145c <_Z17set_flyback_stateb+0x6c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	1dfa      	adds	r2, r7, #7
 8001402:	7812      	ldrb	r2, [r2, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d023      	beq.n	8001450 <_Z17set_flyback_stateb+0x60>
		if(timeout(flyback_timer)){
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <_Z17set_flyback_stateb+0x70>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	0018      	movs	r0, r3
 800140e:	f7ff fea3 	bl	8001158 <timeout>
 8001412:	1e03      	subs	r3, r0, #0
 8001414:	d01c      	beq.n	8001450 <_Z17set_flyback_stateb+0x60>
			flyback_state = new_state;
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <_Z17set_flyback_stateb+0x6c>)
 8001418:	1dfa      	adds	r2, r7, #7
 800141a:	7812      	ldrb	r2, [r2, #0]
 800141c:	701a      	strb	r2, [r3, #0]
			flyback_timer = start_timer_ms(FLYBACK_COOLDOWN);						//new value gets applied
 800141e:	23fa      	movs	r3, #250	; 0xfa
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	0018      	movs	r0, r3
 8001424:	f7ff fe88 	bl	8001138 <start_timer_ms>
 8001428:	0002      	movs	r2, r0
 800142a:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <_Z17set_flyback_stateb+0x70>)
 800142c:	601a      	str	r2, [r3, #0]
			if(flyback_state == true)
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <_Z17set_flyback_stateb+0x6c>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d106      	bne.n	8001444 <_Z17set_flyback_stateb+0x54>
				HAL_GPIO_WritePin(enable_hv_GPIO_Port, enable_hv_Pin, GPIO_PIN_SET);
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <_Z17set_flyback_stateb+0x74>)
 8001438:	2201      	movs	r2, #1
 800143a:	2102      	movs	r1, #2
 800143c:	0018      	movs	r0, r3
 800143e:	f003 f830 	bl	80044a2 <HAL_GPIO_WritePin>
 8001442:	e005      	b.n	8001450 <_Z17set_flyback_stateb+0x60>
			else
				HAL_GPIO_WritePin(enable_hv_GPIO_Port, enable_hv_Pin, GPIO_PIN_RESET);
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <_Z17set_flyback_stateb+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	2102      	movs	r1, #2
 800144a:	0018      	movs	r0, r3
 800144c:	f003 f829 	bl	80044a2 <HAL_GPIO_WritePin>
		}
	}
	return flyback_state;
 8001450:	4b02      	ldr	r3, [pc, #8]	; (800145c <_Z17set_flyback_stateb+0x6c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
}
 8001454:	0018      	movs	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	b002      	add	sp, #8
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000447 	.word	0x20000447
 8001460:	20000448 	.word	0x20000448
 8001464:	50000400 	.word	0x50000400

08001468 <_Z16run_output_mixerh>:
 * @brief Processes all data and generates commands for Output Handler and LED driver
 *
 * gets called every ms
 * gets data directly from respective .hpp files
 */
void run_output_mixer(uint8_t input){
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	0002      	movs	r2, r0
 8001470:	1dfb      	adds	r3, r7, #7
 8001472:	701a      	strb	r2, [r3, #0]
	 * 	minutes blink, change
	 * press - safe time
	 */

	//reset all outputs
	for(uint8_t i = 0; i<6; i++){
 8001474:	230f      	movs	r3, #15
 8001476:	18fb      	adds	r3, r7, r3
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
 800147c:	240f      	movs	r4, #15
 800147e:	193b      	adds	r3, r7, r4
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b05      	cmp	r3, #5
 8001484:	d819      	bhi.n	80014ba <_Z16run_output_mixerh+0x52>
		set_point(i, false);
 8001486:	193b      	adds	r3, r7, r4
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2100      	movs	r1, #0
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff ff2f 	bl	80012f0 <_Z9set_pointhb>
		set_number(i, 0xA);
 8001492:	193b      	adds	r3, r7, r4
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	210a      	movs	r1, #10
 8001498:	0018      	movs	r0, r3
 800149a:	f7ff fe93 	bl	80011c4 <_Z10set_numberhh>
		set_color(i, colors_hex[led_off], 25);
 800149e:	4bdf      	ldr	r3, [pc, #892]	; (800181c <_Z16run_output_mixerh+0x3b4>)
 80014a0:	6819      	ldr	r1, [r3, #0]
 80014a2:	193b      	adds	r3, r7, r4
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2219      	movs	r2, #25
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff fba5 	bl	8000bf8 <_Z9set_colorhmh>
	for(uint8_t i = 0; i<6; i++){
 80014ae:	193b      	adds	r3, r7, r4
 80014b0:	781a      	ldrb	r2, [r3, #0]
 80014b2:	193b      	adds	r3, r7, r4
 80014b4:	3201      	adds	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	e7e0      	b.n	800147c <_Z16run_output_mixerh+0x14>

	//menu system: 	default = 0 --> clock
	//				menu_select = 9 --> page to select menu 1-x ; 0=return to clock

	//enter menu
	if((current_menu == 0) && (input == 4) && (flyback_status==true)){
 80014ba:	4bd9      	ldr	r3, [pc, #868]	; (8001820 <_Z16run_output_mixerh+0x3b8>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d110      	bne.n	80014e4 <_Z16run_output_mixerh+0x7c>
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d10c      	bne.n	80014e4 <_Z16run_output_mixerh+0x7c>
 80014ca:	4bd6      	ldr	r3, [pc, #856]	; (8001824 <_Z16run_output_mixerh+0x3bc>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d108      	bne.n	80014e4 <_Z16run_output_mixerh+0x7c>
		input=0;
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
		current_menu = 9;
 80014d8:	4bd1      	ldr	r3, [pc, #836]	; (8001820 <_Z16run_output_mixerh+0x3b8>)
 80014da:	2209      	movs	r2, #9
 80014dc:	701a      	strb	r2, [r3, #0]
		selected_menu = 1;
 80014de:	4bd2      	ldr	r3, [pc, #840]	; (8001828 <_Z16run_output_mixerh+0x3c0>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	701a      	strb	r2, [r3, #0]
	}
	//leave menu - without saving for menu 1 & 2
	if((input == 0x8) && (current_menu!=0) && (current_menu!=3)){
 80014e4:	1dfb      	adds	r3, r7, #7
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b08      	cmp	r3, #8
 80014ea:	d110      	bne.n	800150e <_Z16run_output_mixerh+0xa6>
 80014ec:	4bcc      	ldr	r3, [pc, #816]	; (8001820 <_Z16run_output_mixerh+0x3b8>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00c      	beq.n	800150e <_Z16run_output_mixerh+0xa6>
 80014f4:	4bca      	ldr	r3, [pc, #808]	; (8001820 <_Z16run_output_mixerh+0x3b8>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	d008      	beq.n	800150e <_Z16run_output_mixerh+0xa6>
		current_menu = 0;
 80014fc:	4bc8      	ldr	r3, [pc, #800]	; (8001820 <_Z16run_output_mixerh+0x3b8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
		old_state = 0;
 8001502:	4bca      	ldr	r3, [pc, #808]	; (800182c <_Z16run_output_mixerh+0x3c4>)
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
		input = 0;
 8001508:	1dfb      	adds	r3, r7, #7
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
	}

	//"menu" standard clock
	if(current_menu == 0){
 800150e:	4bc4      	ldr	r3, [pc, #784]	; (8001820 <_Z16run_output_mixerh+0x3b8>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <_Z16run_output_mixerh+0xb2>
		submenu_0_display_time();
 8001516:	f000 fa6b 	bl	80019f0 <_Z22submenu_0_display_timev>
	}

	//menu time set
	if(current_menu == 1){
 800151a:	4bc1      	ldr	r3, [pc, #772]	; (8001820 <_Z16run_output_mixerh+0x3b8>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d10d      	bne.n	800153e <_Z16run_output_mixerh+0xd6>
		submenu_1_set_time(input, new_selected_menu);
 8001522:	4bc3      	ldr	r3, [pc, #780]	; (8001830 <_Z16run_output_mixerh+0x3c8>)
 8001524:	781a      	ldrb	r2, [r3, #0]
 8001526:	1dfb      	adds	r3, r7, #7
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	0011      	movs	r1, r2
 800152c:	0018      	movs	r0, r3
 800152e:	f000 fae5 	bl	8001afc <_Z18submenu_1_set_timehb>
		new_selected_menu = false;
 8001532:	4bbf      	ldr	r3, [pc, #764]	; (8001830 <_Z16run_output_mixerh+0x3c8>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
		input=0;
 8001538:	1dfb      	adds	r3, r7, #7
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
	}

	//menu date set
	if(current_menu == 2){
 800153e:	4bb8      	ldr	r3, [pc, #736]	; (8001820 <_Z16run_output_mixerh+0x3b8>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d10d      	bne.n	8001562 <_Z16run_output_mixerh+0xfa>
		submenu_2_set_date(input, new_selected_menu);
 8001546:	4bba      	ldr	r3, [pc, #744]	; (8001830 <_Z16run_output_mixerh+0x3c8>)
 8001548:	781a      	ldrb	r2, [r3, #0]
 800154a:	1dfb      	adds	r3, r7, #7
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	0011      	movs	r1, r2
 8001550:	0018      	movs	r0, r3
 8001552:	f000 fc4d 	bl	8001df0 <_Z18submenu_2_set_datehb>
		new_selected_menu = false;
 8001556:	4bb6      	ldr	r3, [pc, #728]	; (8001830 <_Z16run_output_mixerh+0x3c8>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
		input=0;
 800155c:	1dfb      	adds	r3, r7, #7
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
	}

	if(current_menu == 3){
 8001562:	4baf      	ldr	r3, [pc, #700]	; (8001820 <_Z16run_output_mixerh+0x3b8>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b03      	cmp	r3, #3
 8001568:	d10d      	bne.n	8001586 <_Z16run_output_mixerh+0x11e>
		submenu_3_set_onoff(input, new_selected_menu);
 800156a:	4bb1      	ldr	r3, [pc, #708]	; (8001830 <_Z16run_output_mixerh+0x3c8>)
 800156c:	781a      	ldrb	r2, [r3, #0]
 800156e:	1dfb      	adds	r3, r7, #7
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	0011      	movs	r1, r2
 8001574:	0018      	movs	r0, r3
 8001576:	f000 fe29 	bl	80021cc <_Z19submenu_3_set_onoffhb>
		new_selected_menu = false;
 800157a:	4bad      	ldr	r3, [pc, #692]	; (8001830 <_Z16run_output_mixerh+0x3c8>)
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
		input=0;
 8001580:	1dfb      	adds	r3, r7, #7
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
	}

	if(current_menu == 4){
 8001586:	4ba6      	ldr	r3, [pc, #664]	; (8001820 <_Z16run_output_mixerh+0x3b8>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b04      	cmp	r3, #4
 800158c:	d10d      	bne.n	80015aa <_Z16run_output_mixerh+0x142>
		submenu_4_set_led_color(input, new_selected_menu);
 800158e:	4ba8      	ldr	r3, [pc, #672]	; (8001830 <_Z16run_output_mixerh+0x3c8>)
 8001590:	781a      	ldrb	r2, [r3, #0]
 8001592:	1dfb      	adds	r3, r7, #7
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	0011      	movs	r1, r2
 8001598:	0018      	movs	r0, r3
 800159a:	f001 f8c3 	bl	8002724 <_Z23submenu_4_set_led_colorhb>
		new_selected_menu = false;
 800159e:	4ba4      	ldr	r3, [pc, #656]	; (8001830 <_Z16run_output_mixerh+0x3c8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
		input=0;
 80015a4:	1dfb      	adds	r3, r7, #7
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
	}

	//menu menu ;)
	if(current_menu == 9){
 80015aa:	4b9d      	ldr	r3, [pc, #628]	; (8001820 <_Z16run_output_mixerh+0x3b8>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b09      	cmp	r3, #9
 80015b0:	d10b      	bne.n	80015ca <_Z16run_output_mixerh+0x162>
		new_selected_menu = submenu_9_menu_select(input);
 80015b2:	1dfb      	adds	r3, r7, #7
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	0018      	movs	r0, r3
 80015b8:	f001 f9b4 	bl	8002924 <_Z21submenu_9_menu_selecth>
 80015bc:	0003      	movs	r3, r0
 80015be:	001a      	movs	r2, r3
 80015c0:	4b9b      	ldr	r3, [pc, #620]	; (8001830 <_Z16run_output_mixerh+0x3c8>)
 80015c2:	701a      	strb	r2, [r3, #0]
		input=0;
 80015c4:	1dfb      	adds	r3, r7, #7
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]

	}

	//############################ write data to flash ############################
	if(flash_write == true){
 80015ca:	4b9a      	ldr	r3, [pc, #616]	; (8001834 <_Z16run_output_mixerh+0x3cc>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d10c      	bne.n	80015ec <_Z16run_output_mixerh+0x184>
		bool temp = write_flash_new_data();
 80015d2:	250a      	movs	r5, #10
 80015d4:	197c      	adds	r4, r7, r5
 80015d6:	f001 f9f9 	bl	80029cc <_Z20write_flash_new_datav>
 80015da:	0003      	movs	r3, r0
 80015dc:	7023      	strb	r3, [r4, #0]
		if(temp == 0)
 80015de:	197b      	adds	r3, r7, r5
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <_Z16run_output_mixerh+0x184>
			flash_write = false;
 80015e6:	4b93      	ldr	r3, [pc, #588]	; (8001834 <_Z16run_output_mixerh+0x3cc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]

	static bool hv_on = false;
	static bool hv_on_old = false;
	static bool area_entered = false;	// variable only changes if area is entered/left - does occur once per area
	static bool area_left = false;
	bool inside_area = false;
 80015ec:	230e      	movs	r3, #14
 80015ee:	18fb      	adds	r3, r7, r3
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]

	if(current_menu == 0){	//only check for time area, when not in the menu
 80015f4:	4b8a      	ldr	r3, [pc, #552]	; (8001820 <_Z16run_output_mixerh+0x3b8>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d000      	beq.n	80015fe <_Z16run_output_mixerh+0x196>
 80015fc:	e14e      	b.n	800189c <_Z16run_output_mixerh+0x434>
		// switch HV-enable when time-area is entered/left
		// manual long press overwrites state until the next area is entered/left
		for(uint8_t i=0;i<8;i++){
 80015fe:	230d      	movs	r3, #13
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
 8001606:	240d      	movs	r4, #13
 8001608:	193b      	adds	r3, r7, r4
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b07      	cmp	r3, #7
 800160e:	d900      	bls.n	8001612 <_Z16run_output_mixerh+0x1aa>
 8001610:	e129      	b.n	8001866 <_Z16run_output_mixerh+0x3fe>
			//if current day inside selected days for each time area
			if(data_from_RTC.day >= on_time[i][0] && data_from_RTC.day <= on_time[i][1]){
 8001612:	4b89      	ldr	r3, [pc, #548]	; (8001838 <_Z16run_output_mixerh+0x3d0>)
 8001614:	78d9      	ldrb	r1, [r3, #3]
 8001616:	193b      	adds	r3, r7, r4
 8001618:	781a      	ldrb	r2, [r3, #0]
 800161a:	4888      	ldr	r0, [pc, #544]	; (800183c <_Z16run_output_mixerh+0x3d4>)
 800161c:	0013      	movs	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	189b      	adds	r3, r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	5c1b      	ldrb	r3, [r3, r0]
 8001626:	4299      	cmp	r1, r3
 8001628:	d200      	bcs.n	800162c <_Z16run_output_mixerh+0x1c4>
 800162a:	e111      	b.n	8001850 <_Z16run_output_mixerh+0x3e8>
 800162c:	4b82      	ldr	r3, [pc, #520]	; (8001838 <_Z16run_output_mixerh+0x3d0>)
 800162e:	78d9      	ldrb	r1, [r3, #3]
 8001630:	193b      	adds	r3, r7, r4
 8001632:	781a      	ldrb	r2, [r3, #0]
 8001634:	4881      	ldr	r0, [pc, #516]	; (800183c <_Z16run_output_mixerh+0x3d4>)
 8001636:	0013      	movs	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	189b      	adds	r3, r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	18c3      	adds	r3, r0, r3
 8001640:	3301      	adds	r3, #1
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4299      	cmp	r1, r3
 8001646:	d900      	bls.n	800164a <_Z16run_output_mixerh+0x1e2>
 8001648:	e102      	b.n	8001850 <_Z16run_output_mixerh+0x3e8>
				if(	(data_from_RTC.hours == on_time[i][2] && data_from_RTC.minutes >= on_time[i][3] && on_time[i][2] != on_time[i][4]) ||
 800164a:	4b7b      	ldr	r3, [pc, #492]	; (8001838 <_Z16run_output_mixerh+0x3d0>)
 800164c:	7899      	ldrb	r1, [r3, #2]
 800164e:	193b      	adds	r3, r7, r4
 8001650:	781a      	ldrb	r2, [r3, #0]
 8001652:	487a      	ldr	r0, [pc, #488]	; (800183c <_Z16run_output_mixerh+0x3d4>)
 8001654:	0013      	movs	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	189b      	adds	r3, r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	18c3      	adds	r3, r0, r3
 800165e:	3302      	adds	r3, #2
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	4299      	cmp	r1, r3
 8001664:	d124      	bne.n	80016b0 <_Z16run_output_mixerh+0x248>
 8001666:	4b74      	ldr	r3, [pc, #464]	; (8001838 <_Z16run_output_mixerh+0x3d0>)
 8001668:	7859      	ldrb	r1, [r3, #1]
 800166a:	193b      	adds	r3, r7, r4
 800166c:	781a      	ldrb	r2, [r3, #0]
 800166e:	4873      	ldr	r0, [pc, #460]	; (800183c <_Z16run_output_mixerh+0x3d4>)
 8001670:	0013      	movs	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	189b      	adds	r3, r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	18c3      	adds	r3, r0, r3
 800167a:	3303      	adds	r3, #3
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	4299      	cmp	r1, r3
 8001680:	d316      	bcc.n	80016b0 <_Z16run_output_mixerh+0x248>
 8001682:	193b      	adds	r3, r7, r4
 8001684:	781a      	ldrb	r2, [r3, #0]
 8001686:	496d      	ldr	r1, [pc, #436]	; (800183c <_Z16run_output_mixerh+0x3d4>)
 8001688:	0013      	movs	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	189b      	adds	r3, r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	18cb      	adds	r3, r1, r3
 8001692:	3302      	adds	r3, #2
 8001694:	7819      	ldrb	r1, [r3, #0]
 8001696:	193b      	adds	r3, r7, r4
 8001698:	781a      	ldrb	r2, [r3, #0]
 800169a:	4868      	ldr	r0, [pc, #416]	; (800183c <_Z16run_output_mixerh+0x3d4>)
 800169c:	0013      	movs	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	189b      	adds	r3, r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	18c3      	adds	r3, r0, r3
 80016a6:	3304      	adds	r3, #4
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	4299      	cmp	r1, r3
 80016ac:	d000      	beq.n	80016b0 <_Z16run_output_mixerh+0x248>
 80016ae:	e090      	b.n	80017d2 <_Z16run_output_mixerh+0x36a>
					(data_from_RTC.hours == on_time[i][4] && data_from_RTC.minutes <= on_time[i][5] && on_time[i][2] != on_time[i][4]) ||
 80016b0:	4b61      	ldr	r3, [pc, #388]	; (8001838 <_Z16run_output_mixerh+0x3d0>)
 80016b2:	7899      	ldrb	r1, [r3, #2]
 80016b4:	240d      	movs	r4, #13
 80016b6:	193b      	adds	r3, r7, r4
 80016b8:	781a      	ldrb	r2, [r3, #0]
 80016ba:	4860      	ldr	r0, [pc, #384]	; (800183c <_Z16run_output_mixerh+0x3d4>)
 80016bc:	0013      	movs	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	189b      	adds	r3, r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	18c3      	adds	r3, r0, r3
 80016c6:	3304      	adds	r3, #4
 80016c8:	781b      	ldrb	r3, [r3, #0]
				if(	(data_from_RTC.hours == on_time[i][2] && data_from_RTC.minutes >= on_time[i][3] && on_time[i][2] != on_time[i][4]) ||
 80016ca:	4299      	cmp	r1, r3
 80016cc:	d123      	bne.n	8001716 <_Z16run_output_mixerh+0x2ae>
					(data_from_RTC.hours == on_time[i][4] && data_from_RTC.minutes <= on_time[i][5] && on_time[i][2] != on_time[i][4]) ||
 80016ce:	4b5a      	ldr	r3, [pc, #360]	; (8001838 <_Z16run_output_mixerh+0x3d0>)
 80016d0:	7859      	ldrb	r1, [r3, #1]
 80016d2:	193b      	adds	r3, r7, r4
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	4859      	ldr	r0, [pc, #356]	; (800183c <_Z16run_output_mixerh+0x3d4>)
 80016d8:	0013      	movs	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	189b      	adds	r3, r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	18c3      	adds	r3, r0, r3
 80016e2:	3305      	adds	r3, #5
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	4299      	cmp	r1, r3
 80016e8:	d815      	bhi.n	8001716 <_Z16run_output_mixerh+0x2ae>
 80016ea:	193b      	adds	r3, r7, r4
 80016ec:	781a      	ldrb	r2, [r3, #0]
 80016ee:	4953      	ldr	r1, [pc, #332]	; (800183c <_Z16run_output_mixerh+0x3d4>)
 80016f0:	0013      	movs	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	189b      	adds	r3, r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	18cb      	adds	r3, r1, r3
 80016fa:	3302      	adds	r3, #2
 80016fc:	7819      	ldrb	r1, [r3, #0]
 80016fe:	193b      	adds	r3, r7, r4
 8001700:	781a      	ldrb	r2, [r3, #0]
 8001702:	484e      	ldr	r0, [pc, #312]	; (800183c <_Z16run_output_mixerh+0x3d4>)
 8001704:	0013      	movs	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	189b      	adds	r3, r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	18c3      	adds	r3, r0, r3
 800170e:	3304      	adds	r3, #4
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	4299      	cmp	r1, r3
 8001714:	d15d      	bne.n	80017d2 <_Z16run_output_mixerh+0x36a>
					(on_time[i][2] == on_time[i][4] && data_from_RTC.hours == on_time[i][2] && data_from_RTC.minutes >= on_time[i][3] && data_from_RTC.minutes <= on_time[i][5]) ||
 8001716:	240d      	movs	r4, #13
 8001718:	193b      	adds	r3, r7, r4
 800171a:	781a      	ldrb	r2, [r3, #0]
 800171c:	4947      	ldr	r1, [pc, #284]	; (800183c <_Z16run_output_mixerh+0x3d4>)
 800171e:	0013      	movs	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	189b      	adds	r3, r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	18cb      	adds	r3, r1, r3
 8001728:	3302      	adds	r3, #2
 800172a:	7819      	ldrb	r1, [r3, #0]
 800172c:	193b      	adds	r3, r7, r4
 800172e:	781a      	ldrb	r2, [r3, #0]
 8001730:	4842      	ldr	r0, [pc, #264]	; (800183c <_Z16run_output_mixerh+0x3d4>)
 8001732:	0013      	movs	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	189b      	adds	r3, r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	18c3      	adds	r3, r0, r3
 800173c:	3304      	adds	r3, #4
 800173e:	781b      	ldrb	r3, [r3, #0]
					(data_from_RTC.hours == on_time[i][4] && data_from_RTC.minutes <= on_time[i][5] && on_time[i][2] != on_time[i][4]) ||
 8001740:	4299      	cmp	r1, r3
 8001742:	d129      	bne.n	8001798 <_Z16run_output_mixerh+0x330>
					(on_time[i][2] == on_time[i][4] && data_from_RTC.hours == on_time[i][2] && data_from_RTC.minutes >= on_time[i][3] && data_from_RTC.minutes <= on_time[i][5]) ||
 8001744:	4b3c      	ldr	r3, [pc, #240]	; (8001838 <_Z16run_output_mixerh+0x3d0>)
 8001746:	7899      	ldrb	r1, [r3, #2]
 8001748:	193b      	adds	r3, r7, r4
 800174a:	781a      	ldrb	r2, [r3, #0]
 800174c:	483b      	ldr	r0, [pc, #236]	; (800183c <_Z16run_output_mixerh+0x3d4>)
 800174e:	0013      	movs	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	189b      	adds	r3, r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	18c3      	adds	r3, r0, r3
 8001758:	3302      	adds	r3, #2
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4299      	cmp	r1, r3
 800175e:	d11b      	bne.n	8001798 <_Z16run_output_mixerh+0x330>
 8001760:	4b35      	ldr	r3, [pc, #212]	; (8001838 <_Z16run_output_mixerh+0x3d0>)
 8001762:	7859      	ldrb	r1, [r3, #1]
 8001764:	193b      	adds	r3, r7, r4
 8001766:	781a      	ldrb	r2, [r3, #0]
 8001768:	4834      	ldr	r0, [pc, #208]	; (800183c <_Z16run_output_mixerh+0x3d4>)
 800176a:	0013      	movs	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	189b      	adds	r3, r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	18c3      	adds	r3, r0, r3
 8001774:	3303      	adds	r3, #3
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4299      	cmp	r1, r3
 800177a:	d30d      	bcc.n	8001798 <_Z16run_output_mixerh+0x330>
 800177c:	4b2e      	ldr	r3, [pc, #184]	; (8001838 <_Z16run_output_mixerh+0x3d0>)
 800177e:	7859      	ldrb	r1, [r3, #1]
 8001780:	193b      	adds	r3, r7, r4
 8001782:	781a      	ldrb	r2, [r3, #0]
 8001784:	482d      	ldr	r0, [pc, #180]	; (800183c <_Z16run_output_mixerh+0x3d4>)
 8001786:	0013      	movs	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	189b      	adds	r3, r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	18c3      	adds	r3, r0, r3
 8001790:	3305      	adds	r3, #5
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4299      	cmp	r1, r3
 8001796:	d91c      	bls.n	80017d2 <_Z16run_output_mixerh+0x36a>
					(data_from_RTC.hours > on_time[i][2] && data_from_RTC.hours < on_time[i][4])){
 8001798:	4b27      	ldr	r3, [pc, #156]	; (8001838 <_Z16run_output_mixerh+0x3d0>)
 800179a:	7899      	ldrb	r1, [r3, #2]
 800179c:	240d      	movs	r4, #13
 800179e:	193b      	adds	r3, r7, r4
 80017a0:	781a      	ldrb	r2, [r3, #0]
 80017a2:	4826      	ldr	r0, [pc, #152]	; (800183c <_Z16run_output_mixerh+0x3d4>)
 80017a4:	0013      	movs	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	189b      	adds	r3, r3, r2
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	18c3      	adds	r3, r0, r3
 80017ae:	3302      	adds	r3, #2
 80017b0:	781b      	ldrb	r3, [r3, #0]
					(on_time[i][2] == on_time[i][4] && data_from_RTC.hours == on_time[i][2] && data_from_RTC.minutes >= on_time[i][3] && data_from_RTC.minutes <= on_time[i][5]) ||
 80017b2:	4299      	cmp	r1, r3
 80017b4:	d92c      	bls.n	8001810 <_Z16run_output_mixerh+0x3a8>
					(data_from_RTC.hours > on_time[i][2] && data_from_RTC.hours < on_time[i][4])){
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <_Z16run_output_mixerh+0x3d0>)
 80017b8:	7899      	ldrb	r1, [r3, #2]
 80017ba:	193b      	adds	r3, r7, r4
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	481f      	ldr	r0, [pc, #124]	; (800183c <_Z16run_output_mixerh+0x3d4>)
 80017c0:	0013      	movs	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	189b      	adds	r3, r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	18c3      	adds	r3, r0, r3
 80017ca:	3304      	adds	r3, #4
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	4299      	cmp	r1, r3
 80017d0:	d21e      	bcs.n	8001810 <_Z16run_output_mixerh+0x3a8>
						//currently inside of active time area
						if(area_entered == false){
 80017d2:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <_Z16run_output_mixerh+0x3d8>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d115      	bne.n	8001806 <_Z16run_output_mixerh+0x39e>
							area_entered = true;
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <_Z16run_output_mixerh+0x3d8>)
 80017dc:	2201      	movs	r2, #1
 80017de:	701a      	strb	r2, [r3, #0]
							area_left = false;
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <_Z16run_output_mixerh+0x3dc>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
							flyback_status = true;
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <_Z16run_output_mixerh+0x3bc>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]
							hv_on_old = hv_on;
 80017ec:	4b16      	ldr	r3, [pc, #88]	; (8001848 <_Z16run_output_mixerh+0x3e0>)
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	4b16      	ldr	r3, [pc, #88]	; (800184c <_Z16run_output_mixerh+0x3e4>)
 80017f2:	701a      	strb	r2, [r3, #0]
							hv_on = set_flyback_state(flyback_status);
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <_Z16run_output_mixerh+0x3bc>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	0018      	movs	r0, r3
 80017fa:	f7ff fdf9 	bl	80013f0 <_Z17set_flyback_stateb>
 80017fe:	0003      	movs	r3, r0
 8001800:	001a      	movs	r2, r3
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <_Z16run_output_mixerh+0x3e0>)
 8001804:	701a      	strb	r2, [r3, #0]
						}
						inside_area = true;
 8001806:	230e      	movs	r3, #14
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
						break;
 800180e:	e02a      	b.n	8001866 <_Z16run_output_mixerh+0x3fe>
				}
				inside_area = false;
 8001810:	230e      	movs	r3, #14
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
 8001818:	e01e      	b.n	8001858 <_Z16run_output_mixerh+0x3f0>
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	20000000 	.word	0x20000000
 8001820:	20000458 	.word	0x20000458
 8001824:	2000045d 	.word	0x2000045d
 8001828:	20000459 	.word	0x20000459
 800182c:	2000045b 	.word	0x2000045b
 8001830:	2000045a 	.word	0x2000045a
 8001834:	2000045c 	.word	0x2000045c
 8001838:	2000004c 	.word	0x2000004c
 800183c:	20000414 	.word	0x20000414
 8001840:	20000460 	.word	0x20000460
 8001844:	20000461 	.word	0x20000461
 8001848:	2000045e 	.word	0x2000045e
 800184c:	2000045f 	.word	0x2000045f
			}
			else
				inside_area = false;
 8001850:	230e      	movs	r3, #14
 8001852:	18fb      	adds	r3, r7, r3
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<8;i++){
 8001858:	210d      	movs	r1, #13
 800185a:	187b      	adds	r3, r7, r1
 800185c:	781a      	ldrb	r2, [r3, #0]
 800185e:	187b      	adds	r3, r7, r1
 8001860:	3201      	adds	r2, #1
 8001862:	701a      	strb	r2, [r3, #0]
 8001864:	e6cf      	b.n	8001606 <_Z16run_output_mixerh+0x19e>

		}
		//check if we have to switch the hv off
		if(inside_area == false && area_left == false){
 8001866:	230e      	movs	r3, #14
 8001868:	18fb      	adds	r3, r7, r3
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d115      	bne.n	800189c <_Z16run_output_mixerh+0x434>
 8001870:	4b54      	ldr	r3, [pc, #336]	; (80019c4 <_Z16run_output_mixerh+0x55c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d111      	bne.n	800189c <_Z16run_output_mixerh+0x434>
			area_entered = false;
 8001878:	4b53      	ldr	r3, [pc, #332]	; (80019c8 <_Z16run_output_mixerh+0x560>)
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
			area_left = true;
 800187e:	4b51      	ldr	r3, [pc, #324]	; (80019c4 <_Z16run_output_mixerh+0x55c>)
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
			flyback_status = false;
 8001884:	4b51      	ldr	r3, [pc, #324]	; (80019cc <_Z16run_output_mixerh+0x564>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
			hv_on = set_flyback_state(flyback_status);
 800188a:	4b50      	ldr	r3, [pc, #320]	; (80019cc <_Z16run_output_mixerh+0x564>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	0018      	movs	r0, r3
 8001890:	f7ff fdae 	bl	80013f0 <_Z17set_flyback_stateb>
 8001894:	0003      	movs	r3, r0
 8001896:	001a      	movs	r2, r3
 8001898:	4b4d      	ldr	r3, [pc, #308]	; (80019d0 <_Z16run_output_mixerh+0x568>)
 800189a:	701a      	strb	r2, [r3, #0]
		}
	}

	// switch HV-enable pin by long press of button - change led to indicate state (RED = OFF, dark = ON)
	if(input==0x8){		//Long Press
 800189c:	1dfb      	adds	r3, r7, #7
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d113      	bne.n	80018cc <_Z16run_output_mixerh+0x464>
		flyback_status = !flyback_status;
 80018a4:	4b49      	ldr	r3, [pc, #292]	; (80019cc <_Z16run_output_mixerh+0x564>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2201      	movs	r2, #1
 80018aa:	4053      	eors	r3, r2
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b47      	ldr	r3, [pc, #284]	; (80019cc <_Z16run_output_mixerh+0x564>)
 80018b0:	701a      	strb	r2, [r3, #0]
		hv_on_old = hv_on;
 80018b2:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <_Z16run_output_mixerh+0x568>)
 80018b4:	781a      	ldrb	r2, [r3, #0]
 80018b6:	4b47      	ldr	r3, [pc, #284]	; (80019d4 <_Z16run_output_mixerh+0x56c>)
 80018b8:	701a      	strb	r2, [r3, #0]
		hv_on = set_flyback_state(flyback_status);
 80018ba:	4b44      	ldr	r3, [pc, #272]	; (80019cc <_Z16run_output_mixerh+0x564>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	0018      	movs	r0, r3
 80018c0:	f7ff fd96 	bl	80013f0 <_Z17set_flyback_stateb>
 80018c4:	0003      	movs	r3, r0
 80018c6:	001a      	movs	r2, r3
 80018c8:	4b41      	ldr	r3, [pc, #260]	; (80019d0 <_Z16run_output_mixerh+0x568>)
 80018ca:	701a      	strb	r2, [r3, #0]
	}
	if(hv_on != true)
 80018cc:	4b40      	ldr	r3, [pc, #256]	; (80019d0 <_Z16run_output_mixerh+0x568>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d006      	beq.n	80018e2 <_Z16run_output_mixerh+0x47a>
		set_color(1, colors_hex[cyan] , 10);
 80018d4:	4b40      	ldr	r3, [pc, #256]	; (80019d8 <_Z16run_output_mixerh+0x570>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	220a      	movs	r2, #10
 80018da:	0019      	movs	r1, r3
 80018dc:	2001      	movs	r0, #1
 80018de:	f7ff f98b 	bl	8000bf8 <_Z9set_colorhmh>

	if(hv_on == true && hv_on_old==false){
 80018e2:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <_Z16run_output_mixerh+0x568>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d120      	bne.n	800192c <_Z16run_output_mixerh+0x4c4>
 80018ea:	4b3a      	ldr	r3, [pc, #232]	; (80019d4 <_Z16run_output_mixerh+0x56c>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d11c      	bne.n	800192c <_Z16run_output_mixerh+0x4c4>
		hv_on_old = hv_on;
 80018f2:	4b37      	ldr	r3, [pc, #220]	; (80019d0 <_Z16run_output_mixerh+0x568>)
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	4b37      	ldr	r3, [pc, #220]	; (80019d4 <_Z16run_output_mixerh+0x56c>)
 80018f8:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i<6; i++){
 80018fa:	230c      	movs	r3, #12
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	220c      	movs	r2, #12
 8001904:	18bb      	adds	r3, r7, r2
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b05      	cmp	r3, #5
 800190a:	d80d      	bhi.n	8001928 <_Z16run_output_mixerh+0x4c0>
			set_number(i, 0xa);
 800190c:	0014      	movs	r4, r2
 800190e:	18bb      	adds	r3, r7, r2
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	210a      	movs	r1, #10
 8001914:	0018      	movs	r0, r3
 8001916:	f7ff fc55 	bl	80011c4 <_Z10set_numberhh>
		for(uint8_t i = 0; i<6; i++){
 800191a:	0021      	movs	r1, r4
 800191c:	187b      	adds	r3, r7, r1
 800191e:	781a      	ldrb	r2, [r3, #0]
 8001920:	187b      	adds	r3, r7, r1
 8001922:	3201      	adds	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
 8001926:	e7ec      	b.n	8001902 <_Z16run_output_mixerh+0x49a>
		}
		animation_random();
 8001928:	f001 f8c0 	bl	8002aac <_Z16animation_randomv>
	}

	//apply LED output setting when Tubes are on and clock in time display mode
	if(current_menu == 0 && hv_on == true){
 800192c:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <_Z16run_output_mixerh+0x574>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d123      	bne.n	800197c <_Z16run_output_mixerh+0x514>
 8001934:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <_Z16run_output_mixerh+0x568>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d11f      	bne.n	800197c <_Z16run_output_mixerh+0x514>
		for(uint8_t i=0; i<board_size; i++){
 800193c:	230b      	movs	r3, #11
 800193e:	18fb      	adds	r3, r7, r3
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <_Z16run_output_mixerh+0x578>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	200b      	movs	r0, #11
 800194a:	183a      	adds	r2, r7, r0
 800194c:	7812      	ldrb	r2, [r2, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d214      	bcs.n	800197c <_Z16run_output_mixerh+0x514>
			set_color(i, colors_hex[misc_setting[0]],misc_setting[1]);
 8001952:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <_Z16run_output_mixerh+0x57c>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	001a      	movs	r2, r3
 8001958:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <_Z16run_output_mixerh+0x570>)
 800195a:	0092      	lsls	r2, r2, #2
 800195c:	58d1      	ldr	r1, [r2, r3]
 800195e:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <_Z16run_output_mixerh+0x57c>)
 8001960:	785a      	ldrb	r2, [r3, #1]
 8001962:	0004      	movs	r4, r0
 8001964:	183b      	adds	r3, r7, r0
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	0018      	movs	r0, r3
 800196a:	f7ff f945 	bl	8000bf8 <_Z9set_colorhmh>
		for(uint8_t i=0; i<board_size; i++){
 800196e:	0020      	movs	r0, r4
 8001970:	183b      	adds	r3, r7, r0
 8001972:	781a      	ldrb	r2, [r3, #0]
 8001974:	183b      	adds	r3, r7, r0
 8001976:	3201      	adds	r2, #1
 8001978:	701a      	strb	r2, [r3, #0]
 800197a:	e7e3      	b.n	8001944 <_Z16run_output_mixerh+0x4dc>
		}
	}

	// Tube Output-Data
	if(timeout(output_mixer_tube_timer)){
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <_Z16run_output_mixerh+0x580>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	0018      	movs	r0, r3
 8001982:	f7ff fbe9 	bl	8001158 <timeout>
 8001986:	1e03      	subs	r3, r0, #0
 8001988:	d007      	beq.n	800199a <_Z16run_output_mixerh+0x532>
		output_mixer_tube_timer = start_timer_ms(TUBE_REFRESH_RATE_MS);
 800198a:	2021      	movs	r0, #33	; 0x21
 800198c:	f7ff fbd4 	bl	8001138 <start_timer_ms>
 8001990:	0002      	movs	r2, r0
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <_Z16run_output_mixerh+0x580>)
 8001994:	601a      	str	r2, [r3, #0]
		set_output();
 8001996:	f7ff fd19 	bl	80013cc <_Z10set_outputv>
	}

	//	Time LED-Output
	if(timeout(output_mixer_led_timer)){
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <_Z16run_output_mixerh+0x584>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	0018      	movs	r0, r3
 80019a0:	f7ff fbda 	bl	8001158 <timeout>
 80019a4:	1e03      	subs	r3, r0, #0
 80019a6:	d008      	beq.n	80019ba <_Z16run_output_mixerh+0x552>
		output_mixer_led_timer = start_timer_ms(LED_REFRESH_RATE_MS);
 80019a8:	2021      	movs	r0, #33	; 0x21
 80019aa:	f7ff fbc5 	bl	8001138 <start_timer_ms>
 80019ae:	0002      	movs	r2, r0
 80019b0:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <_Z16run_output_mixerh+0x584>)
 80019b2:	601a      	str	r2, [r3, #0]
		send_data(true);
 80019b4:	2001      	movs	r0, #1
 80019b6:	f7ff f9a7 	bl	8000d08 <_Z9send_datab>
	}
}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	46bd      	mov	sp, r7
 80019be:	b004      	add	sp, #16
 80019c0:	bdb0      	pop	{r4, r5, r7, pc}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	20000461 	.word	0x20000461
 80019c8:	20000460 	.word	0x20000460
 80019cc:	2000045d 	.word	0x2000045d
 80019d0:	2000045e 	.word	0x2000045e
 80019d4:	2000045f 	.word	0x2000045f
 80019d8:	20000000 	.word	0x20000000
 80019dc:	20000458 	.word	0x20000458
 80019e0:	20000410 	.word	0x20000410
 80019e4:	20000444 	.word	0x20000444
 80019e8:	20000454 	.word	0x20000454
 80019ec:	20000450 	.word	0x20000450

080019f0 <_Z22submenu_0_display_timev>:

/**
 * @brief: default "menu" where the actual time from the RTC is displayed
 */
void submenu_0_display_time(void){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	if(data_to_RTC.new_data == true)			//do not refresh tube with data from RTC before new data is written to RTC
 80019f4:	4b3f      	ldr	r3, [pc, #252]	; (8001af4 <_Z22submenu_0_display_timev+0x104>)
 80019f6:	7a9b      	ldrb	r3, [r3, #10]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d100      	bne.n	80019fe <_Z22submenu_0_display_timev+0xe>
 80019fc:	e076      	b.n	8001aec <_Z22submenu_0_display_timev+0xfc>
		return;									//without this, the old time will shine for a splitsecond when writing new time

	set_number(0, data_from_RTC.hours/10);
 80019fe:	4b3e      	ldr	r3, [pc, #248]	; (8001af8 <_Z22submenu_0_display_timev+0x108>)
 8001a00:	789b      	ldrb	r3, [r3, #2]
 8001a02:	210a      	movs	r1, #10
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7fe fb7f 	bl	8000108 <__udivsi3>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	0019      	movs	r1, r3
 8001a10:	2000      	movs	r0, #0
 8001a12:	f7ff fbd7 	bl	80011c4 <_Z10set_numberhh>
	set_number(1, data_from_RTC.hours%10);
 8001a16:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <_Z22submenu_0_display_timev+0x108>)
 8001a18:	789b      	ldrb	r3, [r3, #2]
 8001a1a:	210a      	movs	r1, #10
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f7fe fbf9 	bl	8000214 <__aeabi_uidivmod>
 8001a22:	000b      	movs	r3, r1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	0019      	movs	r1, r3
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f7ff fbcb 	bl	80011c4 <_Z10set_numberhh>
	set_number(2, data_from_RTC.minutes/10);
 8001a2e:	4b32      	ldr	r3, [pc, #200]	; (8001af8 <_Z22submenu_0_display_timev+0x108>)
 8001a30:	785b      	ldrb	r3, [r3, #1]
 8001a32:	210a      	movs	r1, #10
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7fe fb67 	bl	8000108 <__udivsi3>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	0019      	movs	r1, r3
 8001a40:	2002      	movs	r0, #2
 8001a42:	f7ff fbbf 	bl	80011c4 <_Z10set_numberhh>
	set_number(3, data_from_RTC.minutes%10);
 8001a46:	4b2c      	ldr	r3, [pc, #176]	; (8001af8 <_Z22submenu_0_display_timev+0x108>)
 8001a48:	785b      	ldrb	r3, [r3, #1]
 8001a4a:	210a      	movs	r1, #10
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f7fe fbe1 	bl	8000214 <__aeabi_uidivmod>
 8001a52:	000b      	movs	r3, r1
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	0019      	movs	r1, r3
 8001a58:	2003      	movs	r0, #3
 8001a5a:	f7ff fbb3 	bl	80011c4 <_Z10set_numberhh>
	set_number(4, data_from_RTC.seconds/10);
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <_Z22submenu_0_display_timev+0x108>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	210a      	movs	r1, #10
 8001a64:	0018      	movs	r0, r3
 8001a66:	f7fe fb4f 	bl	8000108 <__udivsi3>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	0019      	movs	r1, r3
 8001a70:	2004      	movs	r0, #4
 8001a72:	f7ff fba7 	bl	80011c4 <_Z10set_numberhh>
	set_number(5, data_from_RTC.seconds%10);
 8001a76:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <_Z22submenu_0_display_timev+0x108>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	210a      	movs	r1, #10
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7fe fbc9 	bl	8000214 <__aeabi_uidivmod>
 8001a82:	000b      	movs	r3, r1
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	0019      	movs	r1, r3
 8001a88:	2005      	movs	r0, #5
 8001a8a:	f7ff fb9b 	bl	80011c4 <_Z10set_numberhh>
	if((data_from_RTC.seconds %2) ==true){
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <_Z22submenu_0_display_timev+0x108>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	001a      	movs	r2, r3
 8001a94:	2301      	movs	r3, #1
 8001a96:	4013      	ands	r3, r2
 8001a98:	d008      	beq.n	8001aac <_Z22submenu_0_display_timev+0xbc>
		set_point(1, false);
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f7ff fc27 	bl	80012f0 <_Z9set_pointhb>
		set_point(3, true);
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	f7ff fc23 	bl	80012f0 <_Z9set_pointhb>
 8001aaa:	e007      	b.n	8001abc <_Z22submenu_0_display_timev+0xcc>
	}
	else{
		set_point(1, true);
 8001aac:	2101      	movs	r1, #1
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f7ff fc1e 	bl	80012f0 <_Z9set_pointhb>
		set_point(3, false);
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2003      	movs	r0, #3
 8001ab8:	f7ff fc1a 	bl	80012f0 <_Z9set_pointhb>
	}

	//start animation after setting numbers, so that the digits are not blank
	//shifting every 10 minutes
	//random every 60 minutes
	if(data_from_RTC.seconds == 0 && data_from_RTC.minutes%10 == 0){
 8001abc:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <_Z22submenu_0_display_timev+0x108>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d114      	bne.n	8001aee <_Z22submenu_0_display_timev+0xfe>
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <_Z22submenu_0_display_timev+0x108>)
 8001ac6:	785b      	ldrb	r3, [r3, #1]
 8001ac8:	210a      	movs	r1, #10
 8001aca:	0018      	movs	r0, r3
 8001acc:	f7fe fba2 	bl	8000214 <__aeabi_uidivmod>
 8001ad0:	000b      	movs	r3, r1
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10a      	bne.n	8001aee <_Z22submenu_0_display_timev+0xfe>
		if(data_from_RTC.minutes == 0){
 8001ad8:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <_Z22submenu_0_display_timev+0x108>)
 8001ada:	785b      	ldrb	r3, [r3, #1]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <_Z22submenu_0_display_timev+0xf6>
			animation_random();
 8001ae0:	f000 ffe4 	bl	8002aac <_Z16animation_randomv>
 8001ae4:	e003      	b.n	8001aee <_Z22submenu_0_display_timev+0xfe>
		}
		else{
			animation_shifting();
 8001ae6:	f001 f899 	bl	8002c1c <_Z18animation_shiftingv>
 8001aea:	e000      	b.n	8001aee <_Z22submenu_0_display_timev+0xfe>
		return;									//without this, the old time will shine for a splitsecond when writing new time
 8001aec:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	20000058 	.word	0x20000058
 8001af8:	2000004c 	.word	0x2000004c

08001afc <_Z18submenu_1_set_timehb>:
/**
 * @brief function to enter new time data - copies the current time, displays it, change it and tell the time handler to safe it to rtc
 * @param: enter input info 0x1=left; 0x2=right; 0x4=press; 0x8=long press
 * @param: new_entry set true, when menu is entered through menu select
 */
void submenu_1_set_time(uint8_t local_input, bool new_entry){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	0002      	movs	r2, r0
 8001b04:	1dfb      	adds	r3, r7, #7
 8001b06:	701a      	strb	r2, [r3, #0]
 8001b08:	1dbb      	adds	r3, r7, #6
 8001b0a:	1c0a      	adds	r2, r1, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
	uint8_t number_value = 0;
 8001b0e:	230f      	movs	r3, #15
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
	static bool blink_state = false;
	static uint32_t blink_timer = 0;
	static uint8_t current_state = 0;

	if(new_entry == true){
 8001b16:	1dbb      	adds	r3, r7, #6
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d111      	bne.n	8001b42 <_Z18submenu_1_set_timehb+0x46>
		current_state = 1;
 8001b1e:	4bac      	ldr	r3, [pc, #688]	; (8001dd0 <_Z18submenu_1_set_timehb+0x2d4>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
		data_to_RTC.seconds = data_from_RTC.seconds;
 8001b24:	4bab      	ldr	r3, [pc, #684]	; (8001dd4 <_Z18submenu_1_set_timehb+0x2d8>)
 8001b26:	781a      	ldrb	r2, [r3, #0]
 8001b28:	4bab      	ldr	r3, [pc, #684]	; (8001dd8 <_Z18submenu_1_set_timehb+0x2dc>)
 8001b2a:	701a      	strb	r2, [r3, #0]
		data_to_RTC.minutes = data_from_RTC.minutes;
 8001b2c:	4ba9      	ldr	r3, [pc, #676]	; (8001dd4 <_Z18submenu_1_set_timehb+0x2d8>)
 8001b2e:	785a      	ldrb	r2, [r3, #1]
 8001b30:	4ba9      	ldr	r3, [pc, #676]	; (8001dd8 <_Z18submenu_1_set_timehb+0x2dc>)
 8001b32:	705a      	strb	r2, [r3, #1]
		data_to_RTC.hours = data_from_RTC.hours;
 8001b34:	4ba7      	ldr	r3, [pc, #668]	; (8001dd4 <_Z18submenu_1_set_timehb+0x2d8>)
 8001b36:	789a      	ldrb	r2, [r3, #2]
 8001b38:	4ba7      	ldr	r3, [pc, #668]	; (8001dd8 <_Z18submenu_1_set_timehb+0x2dc>)
 8001b3a:	709a      	strb	r2, [r3, #2]
		blink_state = false;
 8001b3c:	4ba7      	ldr	r3, [pc, #668]	; (8001ddc <_Z18submenu_1_set_timehb+0x2e0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
	}

	//skip setting for seconds, they can't be shown anyway
	if(local_input==0x4){
 8001b42:	1dfb      	adds	r3, r7, #7
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d10b      	bne.n	8001b62 <_Z18submenu_1_set_timehb+0x66>
		current_state++;
 8001b4a:	4ba1      	ldr	r3, [pc, #644]	; (8001dd0 <_Z18submenu_1_set_timehb+0x2d4>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4b9f      	ldr	r3, [pc, #636]	; (8001dd0 <_Z18submenu_1_set_timehb+0x2d4>)
 8001b54:	701a      	strb	r2, [r3, #0]
		local_input=0;
 8001b56:	1dfb      	adds	r3, r7, #7
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
		blink_state = false;
 8001b5c:	4b9f      	ldr	r3, [pc, #636]	; (8001ddc <_Z18submenu_1_set_timehb+0x2e0>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
	}

	if(current_state == 3 && board_size==4){
 8001b62:	4b9b      	ldr	r3, [pc, #620]	; (8001dd0 <_Z18submenu_1_set_timehb+0x2d4>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d10c      	bne.n	8001b84 <_Z18submenu_1_set_timehb+0x88>
 8001b6a:	4b9d      	ldr	r3, [pc, #628]	; (8001de0 <_Z18submenu_1_set_timehb+0x2e4>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d108      	bne.n	8001b84 <_Z18submenu_1_set_timehb+0x88>
		current_state++;
 8001b72:	4b97      	ldr	r3, [pc, #604]	; (8001dd0 <_Z18submenu_1_set_timehb+0x2d4>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4b95      	ldr	r3, [pc, #596]	; (8001dd0 <_Z18submenu_1_set_timehb+0x2d4>)
 8001b7c:	701a      	strb	r2, [r3, #0]
		data_to_RTC.seconds = 0;
 8001b7e:	4b96      	ldr	r3, [pc, #600]	; (8001dd8 <_Z18submenu_1_set_timehb+0x2dc>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
	}

	//leave setting and safe changes - go back to menu selection
	if(current_state == 4){
 8001b84:	4b92      	ldr	r3, [pc, #584]	; (8001dd0 <_Z18submenu_1_set_timehb+0x2d4>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d105      	bne.n	8001b98 <_Z18submenu_1_set_timehb+0x9c>
		current_menu = 9;
 8001b8c:	4b95      	ldr	r3, [pc, #596]	; (8001de4 <_Z18submenu_1_set_timehb+0x2e8>)
 8001b8e:	2209      	movs	r2, #9
 8001b90:	701a      	strb	r2, [r3, #0]
		data_to_RTC.new_data = 1;	//1 means new time data
 8001b92:	4b91      	ldr	r3, [pc, #580]	; (8001dd8 <_Z18submenu_1_set_timehb+0x2dc>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	729a      	strb	r2, [r3, #10]
		//TODO: add animation for safed data
	}

	//blink active digits
	if(blink_state==true){
 8001b98:	4b90      	ldr	r3, [pc, #576]	; (8001ddc <_Z18submenu_1_set_timehb+0x2e0>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d118      	bne.n	8001bd2 <_Z18submenu_1_set_timehb+0xd6>
		set_color((current_state*2)-1,colors_hex[led_off],25);
 8001ba0:	4b8b      	ldr	r3, [pc, #556]	; (8001dd0 <_Z18submenu_1_set_timehb+0x2d4>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	18db      	adds	r3, r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b2d8      	uxtb	r0, r3
 8001bac:	4b8e      	ldr	r3, [pc, #568]	; (8001de8 <_Z18submenu_1_set_timehb+0x2ec>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2219      	movs	r2, #25
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	f7ff f820 	bl	8000bf8 <_Z9set_colorhmh>
		set_color((current_state*2)-2,colors_hex[led_off],25);
 8001bb8:	4b85      	ldr	r3, [pc, #532]	; (8001dd0 <_Z18submenu_1_set_timehb+0x2d4>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	18db      	adds	r3, r3, r3
 8001bc2:	b2d8      	uxtb	r0, r3
 8001bc4:	4b88      	ldr	r3, [pc, #544]	; (8001de8 <_Z18submenu_1_set_timehb+0x2ec>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2219      	movs	r2, #25
 8001bca:	0019      	movs	r1, r3
 8001bcc:	f7ff f814 	bl	8000bf8 <_Z9set_colorhmh>
 8001bd0:	e017      	b.n	8001c02 <_Z18submenu_1_set_timehb+0x106>
	}
	else{
		set_color((current_state*2)-1,colors_hex[green],25);
 8001bd2:	4b7f      	ldr	r3, [pc, #508]	; (8001dd0 <_Z18submenu_1_set_timehb+0x2d4>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	18db      	adds	r3, r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b2d8      	uxtb	r0, r3
 8001bde:	4b82      	ldr	r3, [pc, #520]	; (8001de8 <_Z18submenu_1_set_timehb+0x2ec>)
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2219      	movs	r2, #25
 8001be4:	0019      	movs	r1, r3
 8001be6:	f7ff f807 	bl	8000bf8 <_Z9set_colorhmh>
		set_color((current_state*2)-2,colors_hex[green],25);
 8001bea:	4b79      	ldr	r3, [pc, #484]	; (8001dd0 <_Z18submenu_1_set_timehb+0x2d4>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	18db      	adds	r3, r3, r3
 8001bf4:	b2d8      	uxtb	r0, r3
 8001bf6:	4b7c      	ldr	r3, [pc, #496]	; (8001de8 <_Z18submenu_1_set_timehb+0x2ec>)
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	2219      	movs	r2, #25
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	f7fe fffb 	bl	8000bf8 <_Z9set_colorhmh>
	}
	if(timeout(blink_timer)==true){	//500ms loop
 8001c02:	4b7a      	ldr	r3, [pc, #488]	; (8001dec <_Z18submenu_1_set_timehb+0x2f0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	0018      	movs	r0, r3
 8001c08:	f7ff faa6 	bl	8001158 <timeout>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	425a      	negs	r2, r3
 8001c12:	4153      	adcs	r3, r2
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00e      	beq.n	8001c38 <_Z18submenu_1_set_timehb+0x13c>
		blink_timer = start_timer_ms(500);
 8001c1a:	23fa      	movs	r3, #250	; 0xfa
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f7ff fa8a 	bl	8001138 <start_timer_ms>
 8001c24:	0002      	movs	r2, r0
 8001c26:	4b71      	ldr	r3, [pc, #452]	; (8001dec <_Z18submenu_1_set_timehb+0x2f0>)
 8001c28:	601a      	str	r2, [r3, #0]
		blink_state = !blink_state;
 8001c2a:	4b6c      	ldr	r3, [pc, #432]	; (8001ddc <_Z18submenu_1_set_timehb+0x2e0>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	4053      	eors	r3, r2
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	4b69      	ldr	r3, [pc, #420]	; (8001ddc <_Z18submenu_1_set_timehb+0x2e0>)
 8001c36:	701a      	strb	r2, [r3, #0]
	}

	//copy time info into local variable for manipulation and checks
	switch(current_state){
 8001c38:	4b65      	ldr	r3, [pc, #404]	; (8001dd0 <_Z18submenu_1_set_timehb+0x2d4>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d011      	beq.n	8001c64 <_Z18submenu_1_set_timehb+0x168>
 8001c40:	dc16      	bgt.n	8001c70 <_Z18submenu_1_set_timehb+0x174>
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d002      	beq.n	8001c4c <_Z18submenu_1_set_timehb+0x150>
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d006      	beq.n	8001c58 <_Z18submenu_1_set_timehb+0x15c>
		case 0x1: number_value = data_to_RTC.hours; break;
		case 0x2: number_value = data_to_RTC.minutes; break;
		case 0x3: number_value = data_to_RTC.seconds; break;
		default: break;
 8001c4a:	e011      	b.n	8001c70 <_Z18submenu_1_set_timehb+0x174>
		case 0x1: number_value = data_to_RTC.hours; break;
 8001c4c:	230f      	movs	r3, #15
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	4a61      	ldr	r2, [pc, #388]	; (8001dd8 <_Z18submenu_1_set_timehb+0x2dc>)
 8001c52:	7892      	ldrb	r2, [r2, #2]
 8001c54:	701a      	strb	r2, [r3, #0]
 8001c56:	e00c      	b.n	8001c72 <_Z18submenu_1_set_timehb+0x176>
		case 0x2: number_value = data_to_RTC.minutes; break;
 8001c58:	230f      	movs	r3, #15
 8001c5a:	18fb      	adds	r3, r7, r3
 8001c5c:	4a5e      	ldr	r2, [pc, #376]	; (8001dd8 <_Z18submenu_1_set_timehb+0x2dc>)
 8001c5e:	7852      	ldrb	r2, [r2, #1]
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	e006      	b.n	8001c72 <_Z18submenu_1_set_timehb+0x176>
		case 0x3: number_value = data_to_RTC.seconds; break;
 8001c64:	230f      	movs	r3, #15
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	4a5b      	ldr	r2, [pc, #364]	; (8001dd8 <_Z18submenu_1_set_timehb+0x2dc>)
 8001c6a:	7812      	ldrb	r2, [r2, #0]
 8001c6c:	701a      	strb	r2, [r3, #0]
 8001c6e:	e000      	b.n	8001c72 <_Z18submenu_1_set_timehb+0x176>
		default: break;
 8001c70:	46c0      	nop			; (mov r8, r8)
	}

	//change data according to input
	switch(local_input){
 8001c72:	1dfb      	adds	r3, r7, #7
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d002      	beq.n	8001c80 <_Z18submenu_1_set_timehb+0x184>
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d007      	beq.n	8001c8e <_Z18submenu_1_set_timehb+0x192>
		case 0x1:	number_value++;	break;
		case 0x2:	number_value--;	break;
		default: break;
 8001c7e:	e00d      	b.n	8001c9c <_Z18submenu_1_set_timehb+0x1a0>
		case 0x1:	number_value++;	break;
 8001c80:	210f      	movs	r1, #15
 8001c82:	187b      	adds	r3, r7, r1
 8001c84:	781a      	ldrb	r2, [r3, #0]
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	3201      	adds	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
 8001c8c:	e006      	b.n	8001c9c <_Z18submenu_1_set_timehb+0x1a0>
		case 0x2:	number_value--;	break;
 8001c8e:	210f      	movs	r1, #15
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	781a      	ldrb	r2, [r3, #0]
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	3a01      	subs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
 8001c9a:	46c0      	nop			; (mov r8, r8)
	}

	//correction for overrunning of valid value area
	if(((number_value==60) && ((current_state==3) || (current_state==2))) || (number_value==24 && current_state==1))
 8001c9c:	230f      	movs	r3, #15
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b3c      	cmp	r3, #60	; 0x3c
 8001ca4:	d107      	bne.n	8001cb6 <_Z18submenu_1_set_timehb+0x1ba>
 8001ca6:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <_Z18submenu_1_set_timehb+0x2d4>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d00c      	beq.n	8001cc8 <_Z18submenu_1_set_timehb+0x1cc>
 8001cae:	4b48      	ldr	r3, [pc, #288]	; (8001dd0 <_Z18submenu_1_set_timehb+0x2d4>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d008      	beq.n	8001cc8 <_Z18submenu_1_set_timehb+0x1cc>
 8001cb6:	230f      	movs	r3, #15
 8001cb8:	18fb      	adds	r3, r7, r3
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b18      	cmp	r3, #24
 8001cbe:	d107      	bne.n	8001cd0 <_Z18submenu_1_set_timehb+0x1d4>
 8001cc0:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <_Z18submenu_1_set_timehb+0x2d4>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d103      	bne.n	8001cd0 <_Z18submenu_1_set_timehb+0x1d4>
		number_value = 0;
 8001cc8:	230f      	movs	r3, #15
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
	if(number_value==255){
 8001cd0:	230f      	movs	r3, #15
 8001cd2:	18fb      	adds	r3, r7, r3
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2bff      	cmp	r3, #255	; 0xff
 8001cd8:	d110      	bne.n	8001cfc <_Z18submenu_1_set_timehb+0x200>
		if(current_state==3 || current_state==2)
 8001cda:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <_Z18submenu_1_set_timehb+0x2d4>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d003      	beq.n	8001cea <_Z18submenu_1_set_timehb+0x1ee>
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <_Z18submenu_1_set_timehb+0x2d4>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d104      	bne.n	8001cf4 <_Z18submenu_1_set_timehb+0x1f8>
			number_value = 59;
 8001cea:	230f      	movs	r3, #15
 8001cec:	18fb      	adds	r3, r7, r3
 8001cee:	223b      	movs	r2, #59	; 0x3b
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	e003      	b.n	8001cfc <_Z18submenu_1_set_timehb+0x200>
		else
			number_value = 23;
 8001cf4:	230f      	movs	r3, #15
 8001cf6:	18fb      	adds	r3, r7, r3
 8001cf8:	2217      	movs	r2, #23
 8001cfa:	701a      	strb	r2, [r3, #0]
	}

	//write manipulated value back to time struct
	switch(current_state){
 8001cfc:	4b34      	ldr	r3, [pc, #208]	; (8001dd0 <_Z18submenu_1_set_timehb+0x2d4>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d011      	beq.n	8001d28 <_Z18submenu_1_set_timehb+0x22c>
 8001d04:	dc16      	bgt.n	8001d34 <_Z18submenu_1_set_timehb+0x238>
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d002      	beq.n	8001d10 <_Z18submenu_1_set_timehb+0x214>
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d006      	beq.n	8001d1c <_Z18submenu_1_set_timehb+0x220>
		case 0x1: data_to_RTC.hours = number_value; break;
		case 0x2: data_to_RTC.minutes = number_value; break;
		case 0x3: data_to_RTC.seconds = number_value; break;
		default: break;
 8001d0e:	e011      	b.n	8001d34 <_Z18submenu_1_set_timehb+0x238>
		case 0x1: data_to_RTC.hours = number_value; break;
 8001d10:	4b31      	ldr	r3, [pc, #196]	; (8001dd8 <_Z18submenu_1_set_timehb+0x2dc>)
 8001d12:	220f      	movs	r2, #15
 8001d14:	18ba      	adds	r2, r7, r2
 8001d16:	7812      	ldrb	r2, [r2, #0]
 8001d18:	709a      	strb	r2, [r3, #2]
 8001d1a:	e00c      	b.n	8001d36 <_Z18submenu_1_set_timehb+0x23a>
		case 0x2: data_to_RTC.minutes = number_value; break;
 8001d1c:	4b2e      	ldr	r3, [pc, #184]	; (8001dd8 <_Z18submenu_1_set_timehb+0x2dc>)
 8001d1e:	220f      	movs	r2, #15
 8001d20:	18ba      	adds	r2, r7, r2
 8001d22:	7812      	ldrb	r2, [r2, #0]
 8001d24:	705a      	strb	r2, [r3, #1]
 8001d26:	e006      	b.n	8001d36 <_Z18submenu_1_set_timehb+0x23a>
		case 0x3: data_to_RTC.seconds = number_value; break;
 8001d28:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <_Z18submenu_1_set_timehb+0x2dc>)
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	18ba      	adds	r2, r7, r2
 8001d2e:	7812      	ldrb	r2, [r2, #0]
 8001d30:	701a      	strb	r2, [r3, #0]
 8001d32:	e000      	b.n	8001d36 <_Z18submenu_1_set_timehb+0x23a>
		default: break;
 8001d34:	46c0      	nop			; (mov r8, r8)
	}

	//display output
	set_number(0, data_to_RTC.hours/10);
 8001d36:	4b28      	ldr	r3, [pc, #160]	; (8001dd8 <_Z18submenu_1_set_timehb+0x2dc>)
 8001d38:	789b      	ldrb	r3, [r3, #2]
 8001d3a:	210a      	movs	r1, #10
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f7fe f9e3 	bl	8000108 <__udivsi3>
 8001d42:	0003      	movs	r3, r0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	0019      	movs	r1, r3
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f7ff fa3b 	bl	80011c4 <_Z10set_numberhh>
	set_number(1, data_to_RTC.hours%10);
 8001d4e:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <_Z18submenu_1_set_timehb+0x2dc>)
 8001d50:	789b      	ldrb	r3, [r3, #2]
 8001d52:	210a      	movs	r1, #10
 8001d54:	0018      	movs	r0, r3
 8001d56:	f7fe fa5d 	bl	8000214 <__aeabi_uidivmod>
 8001d5a:	000b      	movs	r3, r1
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	0019      	movs	r1, r3
 8001d60:	2001      	movs	r0, #1
 8001d62:	f7ff fa2f 	bl	80011c4 <_Z10set_numberhh>
	set_number(2, data_to_RTC.minutes/10);
 8001d66:	4b1c      	ldr	r3, [pc, #112]	; (8001dd8 <_Z18submenu_1_set_timehb+0x2dc>)
 8001d68:	785b      	ldrb	r3, [r3, #1]
 8001d6a:	210a      	movs	r1, #10
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7fe f9cb 	bl	8000108 <__udivsi3>
 8001d72:	0003      	movs	r3, r0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	0019      	movs	r1, r3
 8001d78:	2002      	movs	r0, #2
 8001d7a:	f7ff fa23 	bl	80011c4 <_Z10set_numberhh>
	set_number(3, data_to_RTC.minutes%10);
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <_Z18submenu_1_set_timehb+0x2dc>)
 8001d80:	785b      	ldrb	r3, [r3, #1]
 8001d82:	210a      	movs	r1, #10
 8001d84:	0018      	movs	r0, r3
 8001d86:	f7fe fa45 	bl	8000214 <__aeabi_uidivmod>
 8001d8a:	000b      	movs	r3, r1
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	0019      	movs	r1, r3
 8001d90:	2003      	movs	r0, #3
 8001d92:	f7ff fa17 	bl	80011c4 <_Z10set_numberhh>
	set_number(4, data_to_RTC.seconds/10);
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <_Z18submenu_1_set_timehb+0x2dc>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	210a      	movs	r1, #10
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f7fe f9b3 	bl	8000108 <__udivsi3>
 8001da2:	0003      	movs	r3, r0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	0019      	movs	r1, r3
 8001da8:	2004      	movs	r0, #4
 8001daa:	f7ff fa0b 	bl	80011c4 <_Z10set_numberhh>
	set_number(5, data_to_RTC.seconds%10);
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <_Z18submenu_1_set_timehb+0x2dc>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	210a      	movs	r1, #10
 8001db4:	0018      	movs	r0, r3
 8001db6:	f7fe fa2d 	bl	8000214 <__aeabi_uidivmod>
 8001dba:	000b      	movs	r3, r1
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	2005      	movs	r0, #5
 8001dc2:	f7ff f9ff 	bl	80011c4 <_Z10set_numberhh>
}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b004      	add	sp, #16
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	20000468 	.word	0x20000468
 8001dd4:	2000004c 	.word	0x2000004c
 8001dd8:	20000058 	.word	0x20000058
 8001ddc:	20000462 	.word	0x20000462
 8001de0:	20000410 	.word	0x20000410
 8001de4:	20000458 	.word	0x20000458
 8001de8:	20000000 	.word	0x20000000
 8001dec:	20000464 	.word	0x20000464

08001df0 <_Z18submenu_2_set_datehb>:
/**
 * @brief: function to set new date to RTC | day | date+month | year
 * @param: enter input info 0x1=left; 0x2=right; 0x4=press; 0x8=long press
 * @param: new_entry set true, when menu is entered through menu select
 */
void submenu_2_set_date(uint8_t local_input, bool new_entry){
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	0002      	movs	r2, r0
 8001df8:	1dfb      	adds	r3, r7, #7
 8001dfa:	701a      	strb	r2, [r3, #0]
 8001dfc:	1dbb      	adds	r3, r7, #6
 8001dfe:	1c0a      	adds	r2, r1, #0
 8001e00:	701a      	strb	r2, [r3, #0]
	uint16_t value = 0;
 8001e02:	230e      	movs	r3, #14
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	2200      	movs	r2, #0
 8001e08:	801a      	strh	r2, [r3, #0]
	static uint32_t blink_timer = 0;
	static uint8_t current_state = 0;
	static uint16_t val_min[4]={0,0,0,1899};
	static uint16_t val_max[4]={8,32,13,2101};

	if(new_entry == true){
 8001e0a:	1dbb      	adds	r3, r7, #6
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d115      	bne.n	8001e3e <_Z18submenu_2_set_datehb+0x4e>
		current_state = 1;
 8001e12:	4b9d      	ldr	r3, [pc, #628]	; (8002088 <_Z18submenu_2_set_datehb+0x298>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
		data_to_RTC.day = data_from_RTC.day;
 8001e18:	4b9c      	ldr	r3, [pc, #624]	; (800208c <_Z18submenu_2_set_datehb+0x29c>)
 8001e1a:	78da      	ldrb	r2, [r3, #3]
 8001e1c:	4b9c      	ldr	r3, [pc, #624]	; (8002090 <_Z18submenu_2_set_datehb+0x2a0>)
 8001e1e:	70da      	strb	r2, [r3, #3]
		data_to_RTC.date = data_from_RTC.date;
 8001e20:	4b9a      	ldr	r3, [pc, #616]	; (800208c <_Z18submenu_2_set_datehb+0x29c>)
 8001e22:	791a      	ldrb	r2, [r3, #4]
 8001e24:	4b9a      	ldr	r3, [pc, #616]	; (8002090 <_Z18submenu_2_set_datehb+0x2a0>)
 8001e26:	711a      	strb	r2, [r3, #4]
		data_to_RTC.month = data_from_RTC.month;
 8001e28:	4b98      	ldr	r3, [pc, #608]	; (800208c <_Z18submenu_2_set_datehb+0x29c>)
 8001e2a:	795a      	ldrb	r2, [r3, #5]
 8001e2c:	4b98      	ldr	r3, [pc, #608]	; (8002090 <_Z18submenu_2_set_datehb+0x2a0>)
 8001e2e:	715a      	strb	r2, [r3, #5]
		data_to_RTC.year = data_from_RTC.year;
 8001e30:	4b96      	ldr	r3, [pc, #600]	; (800208c <_Z18submenu_2_set_datehb+0x29c>)
 8001e32:	88da      	ldrh	r2, [r3, #6]
 8001e34:	4b96      	ldr	r3, [pc, #600]	; (8002090 <_Z18submenu_2_set_datehb+0x2a0>)
 8001e36:	80da      	strh	r2, [r3, #6]
		blink_state = false;
 8001e38:	4b96      	ldr	r3, [pc, #600]	; (8002094 <_Z18submenu_2_set_datehb+0x2a4>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
	}

	//skip setting for seconds, they can't be shown anyway
	if(local_input==0x4){
 8001e3e:	1dfb      	adds	r3, r7, #7
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d10b      	bne.n	8001e5e <_Z18submenu_2_set_datehb+0x6e>
		current_state++;
 8001e46:	4b90      	ldr	r3, [pc, #576]	; (8002088 <_Z18submenu_2_set_datehb+0x298>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	4b8e      	ldr	r3, [pc, #568]	; (8002088 <_Z18submenu_2_set_datehb+0x298>)
 8001e50:	701a      	strb	r2, [r3, #0]
		local_input=0;
 8001e52:	1dfb      	adds	r3, r7, #7
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
		blink_state = false;
 8001e58:	4b8e      	ldr	r3, [pc, #568]	; (8002094 <_Z18submenu_2_set_datehb+0x2a4>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
	}

	//leave setting and safe changes - go back to menu selection
	if(current_state == 5){
 8001e5e:	4b8a      	ldr	r3, [pc, #552]	; (8002088 <_Z18submenu_2_set_datehb+0x298>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b05      	cmp	r3, #5
 8001e64:	d105      	bne.n	8001e72 <_Z18submenu_2_set_datehb+0x82>
		current_menu = 9;
 8001e66:	4b8c      	ldr	r3, [pc, #560]	; (8002098 <_Z18submenu_2_set_datehb+0x2a8>)
 8001e68:	2209      	movs	r2, #9
 8001e6a:	701a      	strb	r2, [r3, #0]
		data_to_RTC.new_data = 2;	//2 means new date data
 8001e6c:	4b88      	ldr	r3, [pc, #544]	; (8002090 <_Z18submenu_2_set_datehb+0x2a0>)
 8001e6e:	2202      	movs	r2, #2
 8001e70:	729a      	strb	r2, [r3, #10]
		//TODO: add animation for safed data
	}

	//blink active digits
	uint16_t blink_color = 0;
 8001e72:	210c      	movs	r1, #12
 8001e74:	187b      	adds	r3, r7, r1
 8001e76:	2200      	movs	r2, #0
 8001e78:	801a      	strh	r2, [r3, #0]
	if(blink_state==true)
 8001e7a:	4b86      	ldr	r3, [pc, #536]	; (8002094 <_Z18submenu_2_set_datehb+0x2a4>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d104      	bne.n	8001e8c <_Z18submenu_2_set_datehb+0x9c>
		blink_color = colors_hex[green];
 8001e82:	4b86      	ldr	r3, [pc, #536]	; (800209c <_Z18submenu_2_set_datehb+0x2ac>)
 8001e84:	699a      	ldr	r2, [r3, #24]
 8001e86:	187b      	adds	r3, r7, r1
 8001e88:	801a      	strh	r2, [r3, #0]
 8001e8a:	e003      	b.n	8001e94 <_Z18submenu_2_set_datehb+0xa4>
	else
		blink_color = 0;
 8001e8c:	230c      	movs	r3, #12
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	2200      	movs	r2, #0
 8001e92:	801a      	strh	r2, [r3, #0]

	if(current_state==1)
 8001e94:	4b7c      	ldr	r3, [pc, #496]	; (8002088 <_Z18submenu_2_set_datehb+0x298>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d107      	bne.n	8001eac <_Z18submenu_2_set_datehb+0xbc>
		set_color(1,blink_color,25);
 8001e9c:	230c      	movs	r3, #12
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	2219      	movs	r2, #25
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	f7fe fea6 	bl	8000bf8 <_Z9set_colorhmh>
	if(current_state==2){
 8001eac:	4b76      	ldr	r3, [pc, #472]	; (8002088 <_Z18submenu_2_set_datehb+0x298>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d10e      	bne.n	8001ed2 <_Z18submenu_2_set_datehb+0xe2>
		set_color(0,blink_color,25);
 8001eb4:	240c      	movs	r4, #12
 8001eb6:	193b      	adds	r3, r7, r4
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	2219      	movs	r2, #25
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7fe fe9a 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(1,blink_color,25);
 8001ec4:	193b      	adds	r3, r7, r4
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	2219      	movs	r2, #25
 8001eca:	0019      	movs	r1, r3
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f7fe fe93 	bl	8000bf8 <_Z9set_colorhmh>
	}
	if(current_state==3){
 8001ed2:	4b6d      	ldr	r3, [pc, #436]	; (8002088 <_Z18submenu_2_set_datehb+0x298>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d10e      	bne.n	8001ef8 <_Z18submenu_2_set_datehb+0x108>
		set_color(2,blink_color,25);
 8001eda:	240c      	movs	r4, #12
 8001edc:	193b      	adds	r3, r7, r4
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	2219      	movs	r2, #25
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	2002      	movs	r0, #2
 8001ee6:	f7fe fe87 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(3,blink_color,25);
 8001eea:	193b      	adds	r3, r7, r4
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	2219      	movs	r2, #25
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	2003      	movs	r0, #3
 8001ef4:	f7fe fe80 	bl	8000bf8 <_Z9set_colorhmh>
	}
	if(current_state==4){
 8001ef8:	4b63      	ldr	r3, [pc, #396]	; (8002088 <_Z18submenu_2_set_datehb+0x298>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d11c      	bne.n	8001f3a <_Z18submenu_2_set_datehb+0x14a>
		set_color(0,blink_color,25);
 8001f00:	240c      	movs	r4, #12
 8001f02:	193b      	adds	r3, r7, r4
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	2219      	movs	r2, #25
 8001f08:	0019      	movs	r1, r3
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7fe fe74 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(1,blink_color,25);
 8001f10:	193b      	adds	r3, r7, r4
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	2219      	movs	r2, #25
 8001f16:	0019      	movs	r1, r3
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f7fe fe6d 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(2,blink_color,25);
 8001f1e:	193b      	adds	r3, r7, r4
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	2219      	movs	r2, #25
 8001f24:	0019      	movs	r1, r3
 8001f26:	2002      	movs	r0, #2
 8001f28:	f7fe fe66 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(3,blink_color,25);
 8001f2c:	193b      	adds	r3, r7, r4
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	2219      	movs	r2, #25
 8001f32:	0019      	movs	r1, r3
 8001f34:	2003      	movs	r0, #3
 8001f36:	f7fe fe5f 	bl	8000bf8 <_Z9set_colorhmh>
	}

	if(timeout(blink_timer)==true){	//500ms loop
 8001f3a:	4b59      	ldr	r3, [pc, #356]	; (80020a0 <_Z18submenu_2_set_datehb+0x2b0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f7ff f90a 	bl	8001158 <timeout>
 8001f44:	0003      	movs	r3, r0
 8001f46:	3b01      	subs	r3, #1
 8001f48:	425a      	negs	r2, r3
 8001f4a:	4153      	adcs	r3, r2
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00e      	beq.n	8001f70 <_Z18submenu_2_set_datehb+0x180>
		blink_timer = start_timer_ms(500);
 8001f52:	23fa      	movs	r3, #250	; 0xfa
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	0018      	movs	r0, r3
 8001f58:	f7ff f8ee 	bl	8001138 <start_timer_ms>
 8001f5c:	0002      	movs	r2, r0
 8001f5e:	4b50      	ldr	r3, [pc, #320]	; (80020a0 <_Z18submenu_2_set_datehb+0x2b0>)
 8001f60:	601a      	str	r2, [r3, #0]
		blink_state = !blink_state;
 8001f62:	4b4c      	ldr	r3, [pc, #304]	; (8002094 <_Z18submenu_2_set_datehb+0x2a4>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2201      	movs	r2, #1
 8001f68:	4053      	eors	r3, r2
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	4b49      	ldr	r3, [pc, #292]	; (8002094 <_Z18submenu_2_set_datehb+0x2a4>)
 8001f6e:	701a      	strb	r2, [r3, #0]
	}

	//copy time info into local variable for manipulation and checks
	switch(current_state){
 8001f70:	4b45      	ldr	r3, [pc, #276]	; (8002088 <_Z18submenu_2_set_datehb+0x298>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d01a      	beq.n	8001fae <_Z18submenu_2_set_datehb+0x1be>
 8001f78:	dc1f      	bgt.n	8001fba <_Z18submenu_2_set_datehb+0x1ca>
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d011      	beq.n	8001fa2 <_Z18submenu_2_set_datehb+0x1b2>
 8001f7e:	dc1c      	bgt.n	8001fba <_Z18submenu_2_set_datehb+0x1ca>
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d002      	beq.n	8001f8a <_Z18submenu_2_set_datehb+0x19a>
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d006      	beq.n	8001f96 <_Z18submenu_2_set_datehb+0x1a6>
		case 0x1: value = data_to_RTC.day; break;
		case 0x2: value = data_to_RTC.date; break;
		case 0x3: value = data_to_RTC.month; break;
		case 0x4: value = data_to_RTC.year; break;
		default: break;
 8001f88:	e017      	b.n	8001fba <_Z18submenu_2_set_datehb+0x1ca>
		case 0x1: value = data_to_RTC.day; break;
 8001f8a:	4b41      	ldr	r3, [pc, #260]	; (8002090 <_Z18submenu_2_set_datehb+0x2a0>)
 8001f8c:	78da      	ldrb	r2, [r3, #3]
 8001f8e:	230e      	movs	r3, #14
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	801a      	strh	r2, [r3, #0]
 8001f94:	e012      	b.n	8001fbc <_Z18submenu_2_set_datehb+0x1cc>
		case 0x2: value = data_to_RTC.date; break;
 8001f96:	4b3e      	ldr	r3, [pc, #248]	; (8002090 <_Z18submenu_2_set_datehb+0x2a0>)
 8001f98:	791a      	ldrb	r2, [r3, #4]
 8001f9a:	230e      	movs	r3, #14
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	801a      	strh	r2, [r3, #0]
 8001fa0:	e00c      	b.n	8001fbc <_Z18submenu_2_set_datehb+0x1cc>
		case 0x3: value = data_to_RTC.month; break;
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	; (8002090 <_Z18submenu_2_set_datehb+0x2a0>)
 8001fa4:	795a      	ldrb	r2, [r3, #5]
 8001fa6:	230e      	movs	r3, #14
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	801a      	strh	r2, [r3, #0]
 8001fac:	e006      	b.n	8001fbc <_Z18submenu_2_set_datehb+0x1cc>
		case 0x4: value = data_to_RTC.year; break;
 8001fae:	230e      	movs	r3, #14
 8001fb0:	18fb      	adds	r3, r7, r3
 8001fb2:	4a37      	ldr	r2, [pc, #220]	; (8002090 <_Z18submenu_2_set_datehb+0x2a0>)
 8001fb4:	88d2      	ldrh	r2, [r2, #6]
 8001fb6:	801a      	strh	r2, [r3, #0]
 8001fb8:	e000      	b.n	8001fbc <_Z18submenu_2_set_datehb+0x1cc>
		default: break;
 8001fba:	46c0      	nop			; (mov r8, r8)
	}

	//change data according to input
	switch(local_input){
 8001fbc:	1dfb      	adds	r3, r7, #7
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d002      	beq.n	8001fca <_Z18submenu_2_set_datehb+0x1da>
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d007      	beq.n	8001fd8 <_Z18submenu_2_set_datehb+0x1e8>
		case 0x1:	value++;	break;
		case 0x2:	value--;	break;
		default: break;
 8001fc8:	e00d      	b.n	8001fe6 <_Z18submenu_2_set_datehb+0x1f6>
		case 0x1:	value++;	break;
 8001fca:	210e      	movs	r1, #14
 8001fcc:	187b      	adds	r3, r7, r1
 8001fce:	881a      	ldrh	r2, [r3, #0]
 8001fd0:	187b      	adds	r3, r7, r1
 8001fd2:	3201      	adds	r2, #1
 8001fd4:	801a      	strh	r2, [r3, #0]
 8001fd6:	e006      	b.n	8001fe6 <_Z18submenu_2_set_datehb+0x1f6>
		case 0x2:	value--;	break;
 8001fd8:	210e      	movs	r1, #14
 8001fda:	187b      	adds	r3, r7, r1
 8001fdc:	881a      	ldrh	r2, [r3, #0]
 8001fde:	187b      	adds	r3, r7, r1
 8001fe0:	3a01      	subs	r2, #1
 8001fe2:	801a      	strh	r2, [r3, #0]
 8001fe4:	46c0      	nop			; (mov r8, r8)
	}

	//correction for overrunning of valid value area
	if(value==val_max[current_state-1])
 8001fe6:	4b28      	ldr	r3, [pc, #160]	; (8002088 <_Z18submenu_2_set_datehb+0x298>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	1e5a      	subs	r2, r3, #1
 8001fec:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <_Z18submenu_2_set_datehb+0x2b4>)
 8001fee:	0052      	lsls	r2, r2, #1
 8001ff0:	5ad3      	ldrh	r3, [r2, r3]
 8001ff2:	210e      	movs	r1, #14
 8001ff4:	187a      	adds	r2, r7, r1
 8001ff6:	8812      	ldrh	r2, [r2, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d108      	bne.n	800200e <_Z18submenu_2_set_datehb+0x21e>
		value = val_min[current_state-1]+1;
 8001ffc:	4b22      	ldr	r3, [pc, #136]	; (8002088 <_Z18submenu_2_set_datehb+0x298>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	1e5a      	subs	r2, r3, #1
 8002002:	4b29      	ldr	r3, [pc, #164]	; (80020a8 <_Z18submenu_2_set_datehb+0x2b8>)
 8002004:	0052      	lsls	r2, r2, #1
 8002006:	5ad2      	ldrh	r2, [r2, r3]
 8002008:	187b      	adds	r3, r7, r1
 800200a:	3201      	adds	r2, #1
 800200c:	801a      	strh	r2, [r3, #0]
	if(value==val_min[current_state-1])
 800200e:	4b1e      	ldr	r3, [pc, #120]	; (8002088 <_Z18submenu_2_set_datehb+0x298>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	1e5a      	subs	r2, r3, #1
 8002014:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <_Z18submenu_2_set_datehb+0x2b8>)
 8002016:	0052      	lsls	r2, r2, #1
 8002018:	5ad3      	ldrh	r3, [r2, r3]
 800201a:	210e      	movs	r1, #14
 800201c:	187a      	adds	r2, r7, r1
 800201e:	8812      	ldrh	r2, [r2, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d108      	bne.n	8002036 <_Z18submenu_2_set_datehb+0x246>
		value = val_max[current_state-1]-1;
 8002024:	4b18      	ldr	r3, [pc, #96]	; (8002088 <_Z18submenu_2_set_datehb+0x298>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	1e5a      	subs	r2, r3, #1
 800202a:	4b1e      	ldr	r3, [pc, #120]	; (80020a4 <_Z18submenu_2_set_datehb+0x2b4>)
 800202c:	0052      	lsls	r2, r2, #1
 800202e:	5ad2      	ldrh	r2, [r2, r3]
 8002030:	187b      	adds	r3, r7, r1
 8002032:	3a01      	subs	r2, #1
 8002034:	801a      	strh	r2, [r3, #0]

	//write manipulated value back to time struct
	switch(current_state){
 8002036:	4b14      	ldr	r3, [pc, #80]	; (8002088 <_Z18submenu_2_set_datehb+0x298>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b04      	cmp	r3, #4
 800203c:	d01d      	beq.n	800207a <_Z18submenu_2_set_datehb+0x28a>
 800203e:	dc35      	bgt.n	80020ac <_Z18submenu_2_set_datehb+0x2bc>
 8002040:	2b03      	cmp	r3, #3
 8002042:	d013      	beq.n	800206c <_Z18submenu_2_set_datehb+0x27c>
 8002044:	dc32      	bgt.n	80020ac <_Z18submenu_2_set_datehb+0x2bc>
 8002046:	2b01      	cmp	r3, #1
 8002048:	d002      	beq.n	8002050 <_Z18submenu_2_set_datehb+0x260>
 800204a:	2b02      	cmp	r3, #2
 800204c:	d007      	beq.n	800205e <_Z18submenu_2_set_datehb+0x26e>
		case 0x1: data_to_RTC.day = value; break;
		case 0x2: data_to_RTC.date = value; break;
		case 0x3: data_to_RTC.month = value; break;
		case 0x4: data_to_RTC.year = value; break;
		default: break;
 800204e:	e02d      	b.n	80020ac <_Z18submenu_2_set_datehb+0x2bc>
		case 0x1: data_to_RTC.day = value; break;
 8002050:	230e      	movs	r3, #14
 8002052:	18fb      	adds	r3, r7, r3
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <_Z18submenu_2_set_datehb+0x2a0>)
 800205a:	70da      	strb	r2, [r3, #3]
 800205c:	e027      	b.n	80020ae <_Z18submenu_2_set_datehb+0x2be>
		case 0x2: data_to_RTC.date = value; break;
 800205e:	230e      	movs	r3, #14
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <_Z18submenu_2_set_datehb+0x2a0>)
 8002068:	711a      	strb	r2, [r3, #4]
 800206a:	e020      	b.n	80020ae <_Z18submenu_2_set_datehb+0x2be>
		case 0x3: data_to_RTC.month = value; break;
 800206c:	230e      	movs	r3, #14
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	b2da      	uxtb	r2, r3
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <_Z18submenu_2_set_datehb+0x2a0>)
 8002076:	715a      	strb	r2, [r3, #5]
 8002078:	e019      	b.n	80020ae <_Z18submenu_2_set_datehb+0x2be>
		case 0x4: data_to_RTC.year = value; break;
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <_Z18submenu_2_set_datehb+0x2a0>)
 800207c:	220e      	movs	r2, #14
 800207e:	18ba      	adds	r2, r7, r2
 8002080:	8812      	ldrh	r2, [r2, #0]
 8002082:	80da      	strh	r2, [r3, #6]
 8002084:	e013      	b.n	80020ae <_Z18submenu_2_set_datehb+0x2be>
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	20000470 	.word	0x20000470
 800208c:	2000004c 	.word	0x2000004c
 8002090:	20000058 	.word	0x20000058
 8002094:	20000469 	.word	0x20000469
 8002098:	20000458 	.word	0x20000458
 800209c:	20000000 	.word	0x20000000
 80020a0:	2000046c 	.word	0x2000046c
 80020a4:	20000040 	.word	0x20000040
 80020a8:	20000038 	.word	0x20000038
		default: break;
 80020ac:	46c0      	nop			; (mov r8, r8)
	}

	//display output
	if(current_state == 1){	//day
 80020ae:	4b45      	ldr	r3, [pc, #276]	; (80021c4 <_Z18submenu_2_set_datehb+0x3d4>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d105      	bne.n	80020c2 <_Z18submenu_2_set_datehb+0x2d2>
		set_number(1,data_to_RTC.day);
 80020b6:	4b44      	ldr	r3, [pc, #272]	; (80021c8 <_Z18submenu_2_set_datehb+0x3d8>)
 80020b8:	78db      	ldrb	r3, [r3, #3]
 80020ba:	0019      	movs	r1, r3
 80020bc:	2001      	movs	r0, #1
 80020be:	f7ff f881 	bl	80011c4 <_Z10set_numberhh>
	}
	if(current_state == 2 || current_state == 3){	//date+month
 80020c2:	4b40      	ldr	r3, [pc, #256]	; (80021c4 <_Z18submenu_2_set_datehb+0x3d4>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d003      	beq.n	80020d2 <_Z18submenu_2_set_datehb+0x2e2>
 80020ca:	4b3e      	ldr	r3, [pc, #248]	; (80021c4 <_Z18submenu_2_set_datehb+0x3d4>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d12f      	bne.n	8002132 <_Z18submenu_2_set_datehb+0x342>
		set_number(0,data_to_RTC.date/10);
 80020d2:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <_Z18submenu_2_set_datehb+0x3d8>)
 80020d4:	791b      	ldrb	r3, [r3, #4]
 80020d6:	210a      	movs	r1, #10
 80020d8:	0018      	movs	r0, r3
 80020da:	f7fe f815 	bl	8000108 <__udivsi3>
 80020de:	0003      	movs	r3, r0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	0019      	movs	r1, r3
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7ff f86d 	bl	80011c4 <_Z10set_numberhh>
		set_number(1,data_to_RTC.date%10);
 80020ea:	4b37      	ldr	r3, [pc, #220]	; (80021c8 <_Z18submenu_2_set_datehb+0x3d8>)
 80020ec:	791b      	ldrb	r3, [r3, #4]
 80020ee:	210a      	movs	r1, #10
 80020f0:	0018      	movs	r0, r3
 80020f2:	f7fe f88f 	bl	8000214 <__aeabi_uidivmod>
 80020f6:	000b      	movs	r3, r1
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	0019      	movs	r1, r3
 80020fc:	2001      	movs	r0, #1
 80020fe:	f7ff f861 	bl	80011c4 <_Z10set_numberhh>
		set_number(2,data_to_RTC.month/10);
 8002102:	4b31      	ldr	r3, [pc, #196]	; (80021c8 <_Z18submenu_2_set_datehb+0x3d8>)
 8002104:	795b      	ldrb	r3, [r3, #5]
 8002106:	210a      	movs	r1, #10
 8002108:	0018      	movs	r0, r3
 800210a:	f7fd fffd 	bl	8000108 <__udivsi3>
 800210e:	0003      	movs	r3, r0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	0019      	movs	r1, r3
 8002114:	2002      	movs	r0, #2
 8002116:	f7ff f855 	bl	80011c4 <_Z10set_numberhh>
		set_number(3,data_to_RTC.month%10);
 800211a:	4b2b      	ldr	r3, [pc, #172]	; (80021c8 <_Z18submenu_2_set_datehb+0x3d8>)
 800211c:	795b      	ldrb	r3, [r3, #5]
 800211e:	210a      	movs	r1, #10
 8002120:	0018      	movs	r0, r3
 8002122:	f7fe f877 	bl	8000214 <__aeabi_uidivmod>
 8002126:	000b      	movs	r3, r1
 8002128:	b2db      	uxtb	r3, r3
 800212a:	0019      	movs	r1, r3
 800212c:	2003      	movs	r0, #3
 800212e:	f7ff f849 	bl	80011c4 <_Z10set_numberhh>
	}
	if(current_state == 4){	//year
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <_Z18submenu_2_set_datehb+0x3d4>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b04      	cmp	r3, #4
 8002138:	d140      	bne.n	80021bc <_Z18submenu_2_set_datehb+0x3cc>
		set_number(0,data_to_RTC.year/1000);
 800213a:	4b23      	ldr	r3, [pc, #140]	; (80021c8 <_Z18submenu_2_set_datehb+0x3d8>)
 800213c:	88db      	ldrh	r3, [r3, #6]
 800213e:	22fa      	movs	r2, #250	; 0xfa
 8002140:	0091      	lsls	r1, r2, #2
 8002142:	0018      	movs	r0, r3
 8002144:	f7fd ffe0 	bl	8000108 <__udivsi3>
 8002148:	0003      	movs	r3, r0
 800214a:	b29b      	uxth	r3, r3
 800214c:	b2db      	uxtb	r3, r3
 800214e:	0019      	movs	r1, r3
 8002150:	2000      	movs	r0, #0
 8002152:	f7ff f837 	bl	80011c4 <_Z10set_numberhh>
		set_number(1,(data_to_RTC.year/100)%10);
 8002156:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <_Z18submenu_2_set_datehb+0x3d8>)
 8002158:	88db      	ldrh	r3, [r3, #6]
 800215a:	2164      	movs	r1, #100	; 0x64
 800215c:	0018      	movs	r0, r3
 800215e:	f7fd ffd3 	bl	8000108 <__udivsi3>
 8002162:	0003      	movs	r3, r0
 8002164:	b29b      	uxth	r3, r3
 8002166:	210a      	movs	r1, #10
 8002168:	0018      	movs	r0, r3
 800216a:	f7fe f853 	bl	8000214 <__aeabi_uidivmod>
 800216e:	000b      	movs	r3, r1
 8002170:	b29b      	uxth	r3, r3
 8002172:	b2db      	uxtb	r3, r3
 8002174:	0019      	movs	r1, r3
 8002176:	2001      	movs	r0, #1
 8002178:	f7ff f824 	bl	80011c4 <_Z10set_numberhh>
		set_number(2,(data_to_RTC.year/10)%10);
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <_Z18submenu_2_set_datehb+0x3d8>)
 800217e:	88db      	ldrh	r3, [r3, #6]
 8002180:	210a      	movs	r1, #10
 8002182:	0018      	movs	r0, r3
 8002184:	f7fd ffc0 	bl	8000108 <__udivsi3>
 8002188:	0003      	movs	r3, r0
 800218a:	b29b      	uxth	r3, r3
 800218c:	210a      	movs	r1, #10
 800218e:	0018      	movs	r0, r3
 8002190:	f7fe f840 	bl	8000214 <__aeabi_uidivmod>
 8002194:	000b      	movs	r3, r1
 8002196:	b29b      	uxth	r3, r3
 8002198:	b2db      	uxtb	r3, r3
 800219a:	0019      	movs	r1, r3
 800219c:	2002      	movs	r0, #2
 800219e:	f7ff f811 	bl	80011c4 <_Z10set_numberhh>
		set_number(3,data_to_RTC.year%10);
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <_Z18submenu_2_set_datehb+0x3d8>)
 80021a4:	88db      	ldrh	r3, [r3, #6]
 80021a6:	210a      	movs	r1, #10
 80021a8:	0018      	movs	r0, r3
 80021aa:	f7fe f833 	bl	8000214 <__aeabi_uidivmod>
 80021ae:	000b      	movs	r3, r1
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	0019      	movs	r1, r3
 80021b6:	2003      	movs	r0, #3
 80021b8:	f7ff f804 	bl	80011c4 <_Z10set_numberhh>
	}
}
 80021bc:	46c0      	nop			; (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	b005      	add	sp, #20
 80021c2:	bd90      	pop	{r4, r7, pc}
 80021c4:	20000470 	.word	0x20000470
 80021c8:	20000058 	.word	0x20000058

080021cc <_Z19submenu_3_set_onoffhb>:
/**
 * @brief function to set different time-zones when the clock should be acitve
 * @param: enter input info 0x1=left; 0x2=right; 0x4=press; 0x8=long press
 * @param: new_entry set true, when menu is entered through menu select
 */
void submenu_3_set_onoff(uint8_t local_input, bool new_entry){
 80021cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	0002      	movs	r2, r0
 80021d4:	1dfb      	adds	r3, r7, #7
 80021d6:	701a      	strb	r2, [r3, #0]
 80021d8:	1dbb      	adds	r3, r7, #6
 80021da:	1c0a      	adds	r2, r1, #0
 80021dc:	701a      	strb	r2, [r3, #0]
	uint8_t number_value = 0;
 80021de:	2317      	movs	r3, #23
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
	static uint8_t current_substate = 0;
	static uint8_t otc[8][6] = {0};	//on time copy

	//current state: 0 - 8; each state contains 6 substates: start day, end day, start time hours/minutes, endtime hours/minutes

	if(new_entry == true){
 80021e6:	1dbb      	adds	r3, r7, #6
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d13f      	bne.n	800226e <_Z19submenu_3_set_onoffhb+0xa2>
		current_state = 0;
 80021ee:	4ba8      	ldr	r3, [pc, #672]	; (8002490 <_Z19submenu_3_set_onoffhb+0x2c4>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
		current_substate = 0;
 80021f4:	4ba7      	ldr	r3, [pc, #668]	; (8002494 <_Z19submenu_3_set_onoffhb+0x2c8>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
		blink_state = false;
 80021fa:	4ba7      	ldr	r3, [pc, #668]	; (8002498 <_Z19submenu_3_set_onoffhb+0x2cc>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<8;i++){		//copy on_time to temporary register
 8002200:	2316      	movs	r3, #22
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
 8002208:	2316      	movs	r3, #22
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b07      	cmp	r3, #7
 8002210:	d82d      	bhi.n	800226e <_Z19submenu_3_set_onoffhb+0xa2>
			for(uint8_t j = 0; j<6; j++){
 8002212:	2315      	movs	r3, #21
 8002214:	18fb      	adds	r3, r7, r3
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
 800221a:	2615      	movs	r6, #21
 800221c:	19bb      	adds	r3, r7, r6
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b05      	cmp	r3, #5
 8002222:	d81d      	bhi.n	8002260 <_Z19submenu_3_set_onoffhb+0x94>
				otc[i][j] = on_time[i][j];
 8002224:	2216      	movs	r2, #22
 8002226:	18bb      	adds	r3, r7, r2
 8002228:	7819      	ldrb	r1, [r3, #0]
 800222a:	19bb      	adds	r3, r7, r6
 800222c:	781c      	ldrb	r4, [r3, #0]
 800222e:	18bb      	adds	r3, r7, r2
 8002230:	781a      	ldrb	r2, [r3, #0]
 8002232:	19bb      	adds	r3, r7, r6
 8002234:	7818      	ldrb	r0, [r3, #0]
 8002236:	4d99      	ldr	r5, [pc, #612]	; (800249c <_Z19submenu_3_set_onoffhb+0x2d0>)
 8002238:	000b      	movs	r3, r1
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	185b      	adds	r3, r3, r1
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	18eb      	adds	r3, r5, r3
 8002242:	5d1c      	ldrb	r4, [r3, r4]
 8002244:	4996      	ldr	r1, [pc, #600]	; (80024a0 <_Z19submenu_3_set_onoffhb+0x2d4>)
 8002246:	0013      	movs	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	189b      	adds	r3, r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	18cb      	adds	r3, r1, r3
 8002250:	1c22      	adds	r2, r4, #0
 8002252:	541a      	strb	r2, [r3, r0]
			for(uint8_t j = 0; j<6; j++){
 8002254:	19bb      	adds	r3, r7, r6
 8002256:	781a      	ldrb	r2, [r3, #0]
 8002258:	19bb      	adds	r3, r7, r6
 800225a:	3201      	adds	r2, #1
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	e7dc      	b.n	800221a <_Z19submenu_3_set_onoffhb+0x4e>
		for(uint8_t i=0;i<8;i++){		//copy on_time to temporary register
 8002260:	2116      	movs	r1, #22
 8002262:	187b      	adds	r3, r7, r1
 8002264:	781a      	ldrb	r2, [r3, #0]
 8002266:	187b      	adds	r3, r7, r1
 8002268:	3201      	adds	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	e7cc      	b.n	8002208 <_Z19submenu_3_set_onoffhb+0x3c>
			}
		}
	}

	//handle menu control
	if(local_input == 0x4){
 800226e:	1dfb      	adds	r3, r7, #7
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b04      	cmp	r3, #4
 8002274:	d14f      	bne.n	8002316 <_Z19submenu_3_set_onoffhb+0x14a>
		current_substate++;
 8002276:	4b87      	ldr	r3, [pc, #540]	; (8002494 <_Z19submenu_3_set_onoffhb+0x2c8>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	3301      	adds	r3, #1
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4b85      	ldr	r3, [pc, #532]	; (8002494 <_Z19submenu_3_set_onoffhb+0x2c8>)
 8002280:	701a      	strb	r2, [r3, #0]
		if(current_substate==6){
 8002282:	4b84      	ldr	r3, [pc, #528]	; (8002494 <_Z19submenu_3_set_onoffhb+0x2c8>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b06      	cmp	r3, #6
 8002288:	d13f      	bne.n	800230a <_Z19submenu_3_set_onoffhb+0x13e>
			current_state++;
 800228a:	4b81      	ldr	r3, [pc, #516]	; (8002490 <_Z19submenu_3_set_onoffhb+0x2c4>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	3301      	adds	r3, #1
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4b7f      	ldr	r3, [pc, #508]	; (8002490 <_Z19submenu_3_set_onoffhb+0x2c4>)
 8002294:	701a      	strb	r2, [r3, #0]
			current_substate = 0;
 8002296:	4b7f      	ldr	r3, [pc, #508]	; (8002494 <_Z19submenu_3_set_onoffhb+0x2c8>)
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0;i<8;i++){		//copy temporary data back to on_time with every time profile changed
 800229c:	2314      	movs	r3, #20
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
 80022a4:	2314      	movs	r3, #20
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b07      	cmp	r3, #7
 80022ac:	d82d      	bhi.n	800230a <_Z19submenu_3_set_onoffhb+0x13e>
				for(uint8_t j = 0; j<6; j++){
 80022ae:	2313      	movs	r3, #19
 80022b0:	18fb      	adds	r3, r7, r3
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
 80022b6:	2613      	movs	r6, #19
 80022b8:	19bb      	adds	r3, r7, r6
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b05      	cmp	r3, #5
 80022be:	d81d      	bhi.n	80022fc <_Z19submenu_3_set_onoffhb+0x130>
					on_time[i][j] = otc[i][j];
 80022c0:	2214      	movs	r2, #20
 80022c2:	18bb      	adds	r3, r7, r2
 80022c4:	7819      	ldrb	r1, [r3, #0]
 80022c6:	19bb      	adds	r3, r7, r6
 80022c8:	781c      	ldrb	r4, [r3, #0]
 80022ca:	18bb      	adds	r3, r7, r2
 80022cc:	781a      	ldrb	r2, [r3, #0]
 80022ce:	19bb      	adds	r3, r7, r6
 80022d0:	7818      	ldrb	r0, [r3, #0]
 80022d2:	4d73      	ldr	r5, [pc, #460]	; (80024a0 <_Z19submenu_3_set_onoffhb+0x2d4>)
 80022d4:	000b      	movs	r3, r1
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	185b      	adds	r3, r3, r1
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	18eb      	adds	r3, r5, r3
 80022de:	5d1c      	ldrb	r4, [r3, r4]
 80022e0:	496e      	ldr	r1, [pc, #440]	; (800249c <_Z19submenu_3_set_onoffhb+0x2d0>)
 80022e2:	0013      	movs	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	189b      	adds	r3, r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	18cb      	adds	r3, r1, r3
 80022ec:	1c22      	adds	r2, r4, #0
 80022ee:	541a      	strb	r2, [r3, r0]
				for(uint8_t j = 0; j<6; j++){
 80022f0:	19bb      	adds	r3, r7, r6
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	19bb      	adds	r3, r7, r6
 80022f6:	3201      	adds	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	e7dc      	b.n	80022b6 <_Z19submenu_3_set_onoffhb+0xea>
			for(uint8_t i=0;i<8;i++){		//copy temporary data back to on_time with every time profile changed
 80022fc:	2114      	movs	r1, #20
 80022fe:	187b      	adds	r3, r7, r1
 8002300:	781a      	ldrb	r2, [r3, #0]
 8002302:	187b      	adds	r3, r7, r1
 8002304:	3201      	adds	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
 8002308:	e7cc      	b.n	80022a4 <_Z19submenu_3_set_onoffhb+0xd8>
				}
			}
		}
		local_input=0;
 800230a:	1dfb      	adds	r3, r7, #7
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
		blink_state = false;
 8002310:	4b61      	ldr	r3, [pc, #388]	; (8002498 <_Z19submenu_3_set_onoffhb+0x2cc>)
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
	}

	if(local_input == 0x8){	//safe made changes and leave
 8002316:	1dfb      	adds	r3, r7, #7
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b08      	cmp	r3, #8
 800231c:	d105      	bne.n	800232a <_Z19submenu_3_set_onoffhb+0x15e>
		current_menu = 9;
 800231e:	4b61      	ldr	r3, [pc, #388]	; (80024a4 <_Z19submenu_3_set_onoffhb+0x2d8>)
 8002320:	2209      	movs	r2, #9
 8002322:	701a      	strb	r2, [r3, #0]
		flash_write = true;
 8002324:	4b60      	ldr	r3, [pc, #384]	; (80024a8 <_Z19submenu_3_set_onoffhb+0x2dc>)
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
	}

	if(current_state == 8){
 800232a:	4b59      	ldr	r3, [pc, #356]	; (8002490 <_Z19submenu_3_set_onoffhb+0x2c4>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b08      	cmp	r3, #8
 8002330:	d108      	bne.n	8002344 <_Z19submenu_3_set_onoffhb+0x178>
		current_state = 7;	//set state back to legal value to prevent writing in illegal memory space
 8002332:	4b57      	ldr	r3, [pc, #348]	; (8002490 <_Z19submenu_3_set_onoffhb+0x2c4>)
 8002334:	2207      	movs	r2, #7
 8002336:	701a      	strb	r2, [r3, #0]
		current_menu = 9;
 8002338:	4b5a      	ldr	r3, [pc, #360]	; (80024a4 <_Z19submenu_3_set_onoffhb+0x2d8>)
 800233a:	2209      	movs	r2, #9
 800233c:	701a      	strb	r2, [r3, #0]
		flash_write = true;
 800233e:	4b5a      	ldr	r3, [pc, #360]	; (80024a8 <_Z19submenu_3_set_onoffhb+0x2dc>)
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
	}

	//menu function
	number_value = otc[current_state][current_substate];
 8002344:	4b52      	ldr	r3, [pc, #328]	; (8002490 <_Z19submenu_3_set_onoffhb+0x2c4>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	0018      	movs	r0, r3
 800234a:	4b52      	ldr	r3, [pc, #328]	; (8002494 <_Z19submenu_3_set_onoffhb+0x2c8>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	001c      	movs	r4, r3
 8002350:	2317      	movs	r3, #23
 8002352:	18fa      	adds	r2, r7, r3
 8002354:	4952      	ldr	r1, [pc, #328]	; (80024a0 <_Z19submenu_3_set_onoffhb+0x2d4>)
 8002356:	0003      	movs	r3, r0
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	181b      	adds	r3, r3, r0
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	18cb      	adds	r3, r1, r3
 8002360:	5d1b      	ldrb	r3, [r3, r4]
 8002362:	7013      	strb	r3, [r2, #0]

	//blink active digits
	uint32_t blink_color = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
	uint32_t static_color = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]

	if(current_substate == 0){
 800236c:	4b49      	ldr	r3, [pc, #292]	; (8002494 <_Z19submenu_3_set_onoffhb+0x2c8>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d105      	bne.n	8002380 <_Z19submenu_3_set_onoffhb+0x1b4>
		static_color = colors_hex[red];
 8002374:	4b4d      	ldr	r3, [pc, #308]	; (80024ac <_Z19submenu_3_set_onoffhb+0x2e0>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	60bb      	str	r3, [r7, #8]
		blink_color = colors_hex[green];
 800237a:	4b4c      	ldr	r3, [pc, #304]	; (80024ac <_Z19submenu_3_set_onoffhb+0x2e0>)
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	60fb      	str	r3, [r7, #12]
	}
	if(current_substate == 1){
 8002380:	4b44      	ldr	r3, [pc, #272]	; (8002494 <_Z19submenu_3_set_onoffhb+0x2c8>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d106      	bne.n	8002396 <_Z19submenu_3_set_onoffhb+0x1ca>
		static_color = colors_hex[green];
 8002388:	4b48      	ldr	r3, [pc, #288]	; (80024ac <_Z19submenu_3_set_onoffhb+0x2e0>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	60bb      	str	r3, [r7, #8]
		blink_color = colors_hex[red];
 800238e:	4b47      	ldr	r3, [pc, #284]	; (80024ac <_Z19submenu_3_set_onoffhb+0x2e0>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	e016      	b.n	80023c4 <_Z19submenu_3_set_onoffhb+0x1f8>
	}
	else if(current_substate == 2 || current_substate == 3){
 8002396:	4b3f      	ldr	r3, [pc, #252]	; (8002494 <_Z19submenu_3_set_onoffhb+0x2c8>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d003      	beq.n	80023a6 <_Z19submenu_3_set_onoffhb+0x1da>
 800239e:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <_Z19submenu_3_set_onoffhb+0x2c8>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d105      	bne.n	80023b2 <_Z19submenu_3_set_onoffhb+0x1e6>
		static_color = blink_color = colors_hex[green];
 80023a6:	4b41      	ldr	r3, [pc, #260]	; (80024ac <_Z19submenu_3_set_onoffhb+0x2e0>)
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	e008      	b.n	80023c4 <_Z19submenu_3_set_onoffhb+0x1f8>
	}
	else if(current_substate > 3){	// current_substate == 4 || == 5
 80023b2:	4b38      	ldr	r3, [pc, #224]	; (8002494 <_Z19submenu_3_set_onoffhb+0x2c8>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d904      	bls.n	80023c4 <_Z19submenu_3_set_onoffhb+0x1f8>
		static_color = blink_color = colors_hex[red];
 80023ba:	4b3c      	ldr	r3, [pc, #240]	; (80024ac <_Z19submenu_3_set_onoffhb+0x2e0>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	60bb      	str	r3, [r7, #8]
	}

	if(blink_state==!true)
 80023c4:	4b34      	ldr	r3, [pc, #208]	; (8002498 <_Z19submenu_3_set_onoffhb+0x2cc>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <_Z19submenu_3_set_onoffhb+0x204>
		blink_color = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]

	if(current_substate%2 == 0){	//when first two tubes display changed number
 80023d0:	4b30      	ldr	r3, [pc, #192]	; (8002494 <_Z19submenu_3_set_onoffhb+0x2c8>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	001a      	movs	r2, r3
 80023d6:	2301      	movs	r3, #1
 80023d8:	4013      	ands	r3, r2
 80023da:	d118      	bne.n	800240e <_Z19submenu_3_set_onoffhb+0x242>
		set_color(0,blink_color,25);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2219      	movs	r2, #25
 80023e0:	0019      	movs	r1, r3
 80023e2:	2000      	movs	r0, #0
 80023e4:	f7fe fc08 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(1,blink_color,25);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2219      	movs	r2, #25
 80023ec:	0019      	movs	r1, r3
 80023ee:	2001      	movs	r0, #1
 80023f0:	f7fe fc02 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(2,static_color,25);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2219      	movs	r2, #25
 80023f8:	0019      	movs	r1, r3
 80023fa:	2002      	movs	r0, #2
 80023fc:	f7fe fbfc 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(3,static_color,25);
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2219      	movs	r2, #25
 8002404:	0019      	movs	r1, r3
 8002406:	2003      	movs	r0, #3
 8002408:	f7fe fbf6 	bl	8000bf8 <_Z9set_colorhmh>
 800240c:	e017      	b.n	800243e <_Z19submenu_3_set_onoffhb+0x272>
	}else{
		set_color(0,static_color,25);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2219      	movs	r2, #25
 8002412:	0019      	movs	r1, r3
 8002414:	2000      	movs	r0, #0
 8002416:	f7fe fbef 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(1,static_color,25);
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2219      	movs	r2, #25
 800241e:	0019      	movs	r1, r3
 8002420:	2001      	movs	r0, #1
 8002422:	f7fe fbe9 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(2,blink_color,25);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2219      	movs	r2, #25
 800242a:	0019      	movs	r1, r3
 800242c:	2002      	movs	r0, #2
 800242e:	f7fe fbe3 	bl	8000bf8 <_Z9set_colorhmh>
		set_color(3,blink_color,25);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2219      	movs	r2, #25
 8002436:	0019      	movs	r1, r3
 8002438:	2003      	movs	r0, #3
 800243a:	f7fe fbdd 	bl	8000bf8 <_Z9set_colorhmh>
	}

	if(timeout(blink_timer)==true){	//500ms loop
 800243e:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <_Z19submenu_3_set_onoffhb+0x2e4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	0018      	movs	r0, r3
 8002444:	f7fe fe88 	bl	8001158 <timeout>
 8002448:	0003      	movs	r3, r0
 800244a:	3b01      	subs	r3, #1
 800244c:	425a      	negs	r2, r3
 800244e:	4153      	adcs	r3, r2
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00e      	beq.n	8002474 <_Z19submenu_3_set_onoffhb+0x2a8>
		blink_timer = start_timer_ms(500);
 8002456:	23fa      	movs	r3, #250	; 0xfa
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	0018      	movs	r0, r3
 800245c:	f7fe fe6c 	bl	8001138 <start_timer_ms>
 8002460:	0002      	movs	r2, r0
 8002462:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <_Z19submenu_3_set_onoffhb+0x2e4>)
 8002464:	601a      	str	r2, [r3, #0]
		blink_state = !blink_state;
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <_Z19submenu_3_set_onoffhb+0x2cc>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2201      	movs	r2, #1
 800246c:	4053      	eors	r3, r2
 800246e:	b2da      	uxtb	r2, r3
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <_Z19submenu_3_set_onoffhb+0x2cc>)
 8002472:	701a      	strb	r2, [r3, #0]
	}

	//change data according to input
	switch(local_input){
 8002474:	1dfb      	adds	r3, r7, #7
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d002      	beq.n	8002482 <_Z19submenu_3_set_onoffhb+0x2b6>
 800247c:	2b02      	cmp	r3, #2
 800247e:	d019      	beq.n	80024b4 <_Z19submenu_3_set_onoffhb+0x2e8>
		case 0x1:	number_value++;	break;
		case 0x2:	number_value--;	break;
		default: break;
 8002480:	e01f      	b.n	80024c2 <_Z19submenu_3_set_onoffhb+0x2f6>
		case 0x1:	number_value++;	break;
 8002482:	2117      	movs	r1, #23
 8002484:	187b      	adds	r3, r7, r1
 8002486:	781a      	ldrb	r2, [r3, #0]
 8002488:	187b      	adds	r3, r7, r1
 800248a:	3201      	adds	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
 800248e:	e018      	b.n	80024c2 <_Z19submenu_3_set_onoffhb+0x2f6>
 8002490:	20000478 	.word	0x20000478
 8002494:	20000479 	.word	0x20000479
 8002498:	20000471 	.word	0x20000471
 800249c:	20000414 	.word	0x20000414
 80024a0:	2000047c 	.word	0x2000047c
 80024a4:	20000458 	.word	0x20000458
 80024a8:	2000045c 	.word	0x2000045c
 80024ac:	20000000 	.word	0x20000000
 80024b0:	20000474 	.word	0x20000474
		case 0x2:	number_value--;	break;
 80024b4:	2117      	movs	r1, #23
 80024b6:	187b      	adds	r3, r7, r1
 80024b8:	781a      	ldrb	r2, [r3, #0]
 80024ba:	187b      	adds	r3, r7, r1
 80024bc:	3a01      	subs	r2, #1
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	46c0      	nop			; (mov r8, r8)
	}

	if(current_substate == 0 || current_substate == 1){	//days
 80024c2:	4b95      	ldr	r3, [pc, #596]	; (8002718 <_Z19submenu_3_set_onoffhb+0x54c>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <_Z19submenu_3_set_onoffhb+0x306>
 80024ca:	4b93      	ldr	r3, [pc, #588]	; (8002718 <_Z19submenu_3_set_onoffhb+0x54c>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d10f      	bne.n	80024f2 <_Z19submenu_3_set_onoffhb+0x326>
		if(number_value == 0)
 80024d2:	2217      	movs	r2, #23
 80024d4:	18bb      	adds	r3, r7, r2
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d102      	bne.n	80024e2 <_Z19submenu_3_set_onoffhb+0x316>
			number_value = 7;
 80024dc:	18bb      	adds	r3, r7, r2
 80024de:	2207      	movs	r2, #7
 80024e0:	701a      	strb	r2, [r3, #0]
		if(number_value == 8)
 80024e2:	2217      	movs	r2, #23
 80024e4:	18bb      	adds	r3, r7, r2
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d102      	bne.n	80024f2 <_Z19submenu_3_set_onoffhb+0x326>
			number_value = 1;
 80024ec:	18bb      	adds	r3, r7, r2
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
	}
	if(current_substate == 2 || current_substate == 4){ //hours
 80024f2:	4b89      	ldr	r3, [pc, #548]	; (8002718 <_Z19submenu_3_set_onoffhb+0x54c>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d003      	beq.n	8002502 <_Z19submenu_3_set_onoffhb+0x336>
 80024fa:	4b87      	ldr	r3, [pc, #540]	; (8002718 <_Z19submenu_3_set_onoffhb+0x54c>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d10f      	bne.n	8002522 <_Z19submenu_3_set_onoffhb+0x356>
		if(number_value == 255)
 8002502:	2217      	movs	r2, #23
 8002504:	18bb      	adds	r3, r7, r2
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2bff      	cmp	r3, #255	; 0xff
 800250a:	d102      	bne.n	8002512 <_Z19submenu_3_set_onoffhb+0x346>
			number_value = 23;
 800250c:	18bb      	adds	r3, r7, r2
 800250e:	2217      	movs	r2, #23
 8002510:	701a      	strb	r2, [r3, #0]
		if(number_value == 24)
 8002512:	2217      	movs	r2, #23
 8002514:	18bb      	adds	r3, r7, r2
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b18      	cmp	r3, #24
 800251a:	d102      	bne.n	8002522 <_Z19submenu_3_set_onoffhb+0x356>
			number_value = 0;
 800251c:	18bb      	adds	r3, r7, r2
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
	}
	if(current_substate == 3 || current_substate == 5){ //minutes
 8002522:	4b7d      	ldr	r3, [pc, #500]	; (8002718 <_Z19submenu_3_set_onoffhb+0x54c>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b03      	cmp	r3, #3
 8002528:	d003      	beq.n	8002532 <_Z19submenu_3_set_onoffhb+0x366>
 800252a:	4b7b      	ldr	r3, [pc, #492]	; (8002718 <_Z19submenu_3_set_onoffhb+0x54c>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b05      	cmp	r3, #5
 8002530:	d10f      	bne.n	8002552 <_Z19submenu_3_set_onoffhb+0x386>
		if(number_value == 255)
 8002532:	2217      	movs	r2, #23
 8002534:	18bb      	adds	r3, r7, r2
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2bff      	cmp	r3, #255	; 0xff
 800253a:	d102      	bne.n	8002542 <_Z19submenu_3_set_onoffhb+0x376>
			number_value = 59;
 800253c:	18bb      	adds	r3, r7, r2
 800253e:	223b      	movs	r2, #59	; 0x3b
 8002540:	701a      	strb	r2, [r3, #0]
		if(number_value == 60)
 8002542:	2217      	movs	r2, #23
 8002544:	18bb      	adds	r3, r7, r2
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b3c      	cmp	r3, #60	; 0x3c
 800254a:	d102      	bne.n	8002552 <_Z19submenu_3_set_onoffhb+0x386>
			number_value = 0;
 800254c:	18bb      	adds	r3, r7, r2
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
	}

	otc[current_state][current_substate] = number_value;
 8002552:	4b72      	ldr	r3, [pc, #456]	; (800271c <_Z19submenu_3_set_onoffhb+0x550>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	0019      	movs	r1, r3
 8002558:	4b6f      	ldr	r3, [pc, #444]	; (8002718 <_Z19submenu_3_set_onoffhb+0x54c>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	0018      	movs	r0, r3
 800255e:	4a70      	ldr	r2, [pc, #448]	; (8002720 <_Z19submenu_3_set_onoffhb+0x554>)
 8002560:	000b      	movs	r3, r1
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	185b      	adds	r3, r3, r1
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	18d3      	adds	r3, r2, r3
 800256a:	2117      	movs	r1, #23
 800256c:	187a      	adds	r2, r7, r1
 800256e:	7812      	ldrb	r2, [r2, #0]
 8002570:	541a      	strb	r2, [r3, r0]

	//display output
	if(current_substate == 0){
 8002572:	4b69      	ldr	r3, [pc, #420]	; (8002718 <_Z19submenu_3_set_onoffhb+0x54c>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d114      	bne.n	80025a4 <_Z19submenu_3_set_onoffhb+0x3d8>
		set_number(1, number_value);
 800257a:	187b      	adds	r3, r7, r1
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	0019      	movs	r1, r3
 8002580:	2001      	movs	r0, #1
 8002582:	f7fe fe1f 	bl	80011c4 <_Z10set_numberhh>
		set_number(3, otc[current_state][1]);
 8002586:	4b65      	ldr	r3, [pc, #404]	; (800271c <_Z19submenu_3_set_onoffhb+0x550>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	0019      	movs	r1, r3
 800258c:	4a64      	ldr	r2, [pc, #400]	; (8002720 <_Z19submenu_3_set_onoffhb+0x554>)
 800258e:	000b      	movs	r3, r1
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	185b      	adds	r3, r3, r1
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	18d3      	adds	r3, r2, r3
 8002598:	3301      	adds	r3, #1
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	0019      	movs	r1, r3
 800259e:	2003      	movs	r0, #3
 80025a0:	f7fe fe10 	bl	80011c4 <_Z10set_numberhh>
	}
	if(current_substate == 1){
 80025a4:	4b5c      	ldr	r3, [pc, #368]	; (8002718 <_Z19submenu_3_set_onoffhb+0x54c>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d113      	bne.n	80025d4 <_Z19submenu_3_set_onoffhb+0x408>
		set_number(1, otc[current_state][0]);
 80025ac:	4b5b      	ldr	r3, [pc, #364]	; (800271c <_Z19submenu_3_set_onoffhb+0x550>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	0019      	movs	r1, r3
 80025b2:	4a5b      	ldr	r2, [pc, #364]	; (8002720 <_Z19submenu_3_set_onoffhb+0x554>)
 80025b4:	000b      	movs	r3, r1
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	185b      	adds	r3, r3, r1
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	5c9b      	ldrb	r3, [r3, r2]
 80025be:	0019      	movs	r1, r3
 80025c0:	2001      	movs	r0, #1
 80025c2:	f7fe fdff 	bl	80011c4 <_Z10set_numberhh>
		set_number(3, number_value);
 80025c6:	2317      	movs	r3, #23
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	0019      	movs	r1, r3
 80025ce:	2003      	movs	r0, #3
 80025d0:	f7fe fdf8 	bl	80011c4 <_Z10set_numberhh>
	}
	if(current_substate == 2 || current_substate == 4){
 80025d4:	4b50      	ldr	r3, [pc, #320]	; (8002718 <_Z19submenu_3_set_onoffhb+0x54c>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d003      	beq.n	80025e4 <_Z19submenu_3_set_onoffhb+0x418>
 80025dc:	4b4e      	ldr	r3, [pc, #312]	; (8002718 <_Z19submenu_3_set_onoffhb+0x54c>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d146      	bne.n	8002672 <_Z19submenu_3_set_onoffhb+0x4a6>
		set_number(0, number_value/10);
 80025e4:	2417      	movs	r4, #23
 80025e6:	193b      	adds	r3, r7, r4
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	210a      	movs	r1, #10
 80025ec:	0018      	movs	r0, r3
 80025ee:	f7fd fd8b 	bl	8000108 <__udivsi3>
 80025f2:	0003      	movs	r3, r0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	0019      	movs	r1, r3
 80025f8:	2000      	movs	r0, #0
 80025fa:	f7fe fde3 	bl	80011c4 <_Z10set_numberhh>
		set_number(1, number_value%10);
 80025fe:	193b      	adds	r3, r7, r4
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	210a      	movs	r1, #10
 8002604:	0018      	movs	r0, r3
 8002606:	f7fd fe05 	bl	8000214 <__aeabi_uidivmod>
 800260a:	000b      	movs	r3, r1
 800260c:	b2db      	uxtb	r3, r3
 800260e:	0019      	movs	r1, r3
 8002610:	2001      	movs	r0, #1
 8002612:	f7fe fdd7 	bl	80011c4 <_Z10set_numberhh>
		set_number(2, otc[current_state][current_substate+1]/10);
 8002616:	4b41      	ldr	r3, [pc, #260]	; (800271c <_Z19submenu_3_set_onoffhb+0x550>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	0018      	movs	r0, r3
 800261c:	4b3e      	ldr	r3, [pc, #248]	; (8002718 <_Z19submenu_3_set_onoffhb+0x54c>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	493f      	ldr	r1, [pc, #252]	; (8002720 <_Z19submenu_3_set_onoffhb+0x554>)
 8002624:	0003      	movs	r3, r0
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	181b      	adds	r3, r3, r0
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	18cb      	adds	r3, r1, r3
 800262e:	5c9b      	ldrb	r3, [r3, r2]
 8002630:	210a      	movs	r1, #10
 8002632:	0018      	movs	r0, r3
 8002634:	f7fd fd68 	bl	8000108 <__udivsi3>
 8002638:	0003      	movs	r3, r0
 800263a:	b2db      	uxtb	r3, r3
 800263c:	0019      	movs	r1, r3
 800263e:	2002      	movs	r0, #2
 8002640:	f7fe fdc0 	bl	80011c4 <_Z10set_numberhh>
		set_number(3, otc[current_state][current_substate+1]%10);
 8002644:	4b35      	ldr	r3, [pc, #212]	; (800271c <_Z19submenu_3_set_onoffhb+0x550>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	0018      	movs	r0, r3
 800264a:	4b33      	ldr	r3, [pc, #204]	; (8002718 <_Z19submenu_3_set_onoffhb+0x54c>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	4933      	ldr	r1, [pc, #204]	; (8002720 <_Z19submenu_3_set_onoffhb+0x554>)
 8002652:	0003      	movs	r3, r0
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	181b      	adds	r3, r3, r0
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	18cb      	adds	r3, r1, r3
 800265c:	5c9b      	ldrb	r3, [r3, r2]
 800265e:	210a      	movs	r1, #10
 8002660:	0018      	movs	r0, r3
 8002662:	f7fd fdd7 	bl	8000214 <__aeabi_uidivmod>
 8002666:	000b      	movs	r3, r1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	0019      	movs	r1, r3
 800266c:	2003      	movs	r0, #3
 800266e:	f7fe fda9 	bl	80011c4 <_Z10set_numberhh>

	}
	if(current_substate == 3 || current_substate == 5){
 8002672:	4b29      	ldr	r3, [pc, #164]	; (8002718 <_Z19submenu_3_set_onoffhb+0x54c>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b03      	cmp	r3, #3
 8002678:	d003      	beq.n	8002682 <_Z19submenu_3_set_onoffhb+0x4b6>
 800267a:	4b27      	ldr	r3, [pc, #156]	; (8002718 <_Z19submenu_3_set_onoffhb+0x54c>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b05      	cmp	r3, #5
 8002680:	d146      	bne.n	8002710 <_Z19submenu_3_set_onoffhb+0x544>
		set_number(0, otc[current_state][current_substate-1]/10);
 8002682:	4b26      	ldr	r3, [pc, #152]	; (800271c <_Z19submenu_3_set_onoffhb+0x550>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	0018      	movs	r0, r3
 8002688:	4b23      	ldr	r3, [pc, #140]	; (8002718 <_Z19submenu_3_set_onoffhb+0x54c>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	1e5a      	subs	r2, r3, #1
 800268e:	4924      	ldr	r1, [pc, #144]	; (8002720 <_Z19submenu_3_set_onoffhb+0x554>)
 8002690:	0003      	movs	r3, r0
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	181b      	adds	r3, r3, r0
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	18cb      	adds	r3, r1, r3
 800269a:	5c9b      	ldrb	r3, [r3, r2]
 800269c:	210a      	movs	r1, #10
 800269e:	0018      	movs	r0, r3
 80026a0:	f7fd fd32 	bl	8000108 <__udivsi3>
 80026a4:	0003      	movs	r3, r0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	0019      	movs	r1, r3
 80026aa:	2000      	movs	r0, #0
 80026ac:	f7fe fd8a 	bl	80011c4 <_Z10set_numberhh>
		set_number(1, otc[current_state][current_substate-1]%10);
 80026b0:	4b1a      	ldr	r3, [pc, #104]	; (800271c <_Z19submenu_3_set_onoffhb+0x550>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	0018      	movs	r0, r3
 80026b6:	4b18      	ldr	r3, [pc, #96]	; (8002718 <_Z19submenu_3_set_onoffhb+0x54c>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	1e5a      	subs	r2, r3, #1
 80026bc:	4918      	ldr	r1, [pc, #96]	; (8002720 <_Z19submenu_3_set_onoffhb+0x554>)
 80026be:	0003      	movs	r3, r0
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	181b      	adds	r3, r3, r0
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	18cb      	adds	r3, r1, r3
 80026c8:	5c9b      	ldrb	r3, [r3, r2]
 80026ca:	210a      	movs	r1, #10
 80026cc:	0018      	movs	r0, r3
 80026ce:	f7fd fda1 	bl	8000214 <__aeabi_uidivmod>
 80026d2:	000b      	movs	r3, r1
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	0019      	movs	r1, r3
 80026d8:	2001      	movs	r0, #1
 80026da:	f7fe fd73 	bl	80011c4 <_Z10set_numberhh>
		set_number(2, number_value/10);
 80026de:	2417      	movs	r4, #23
 80026e0:	193b      	adds	r3, r7, r4
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	210a      	movs	r1, #10
 80026e6:	0018      	movs	r0, r3
 80026e8:	f7fd fd0e 	bl	8000108 <__udivsi3>
 80026ec:	0003      	movs	r3, r0
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	0019      	movs	r1, r3
 80026f2:	2002      	movs	r0, #2
 80026f4:	f7fe fd66 	bl	80011c4 <_Z10set_numberhh>
		set_number(3, number_value%10);
 80026f8:	193b      	adds	r3, r7, r4
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	210a      	movs	r1, #10
 80026fe:	0018      	movs	r0, r3
 8002700:	f7fd fd88 	bl	8000214 <__aeabi_uidivmod>
 8002704:	000b      	movs	r3, r1
 8002706:	b2db      	uxtb	r3, r3
 8002708:	0019      	movs	r1, r3
 800270a:	2003      	movs	r0, #3
 800270c:	f7fe fd5a 	bl	80011c4 <_Z10set_numberhh>
	}
}
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	b007      	add	sp, #28
 8002716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002718:	20000479 	.word	0x20000479
 800271c:	20000478 	.word	0x20000478
 8002720:	2000047c 	.word	0x2000047c

08002724 <_Z23submenu_4_set_led_colorhb>:
 * @brief: function to select which led color should be displayed beneath the tubes
 * @info: when entering, show already selected color
 * @param: local_input: input info: 0x1=left; 0x2=right; 0x4=press; 0x8=long press
 * @param: new_entry: true = first entry, reset all variables, false = do nothing
 */
void submenu_4_set_led_color(uint8_t local_input, bool new_entry){
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	0002      	movs	r2, r0
 800272c:	1dfb      	adds	r3, r7, #7
 800272e:	701a      	strb	r2, [r3, #0]
 8002730:	1dbb      	adds	r3, r7, #6
 8002732:	1c0a      	adds	r2, r1, #0
 8002734:	701a      	strb	r2, [r3, #0]
	//when we enter current state 2, we save led data and load brightness data into that variable
	//since we only have two activations of the local_imput==0x4 loop, and the second entry is meaningless, this works :D


	// load temporary values and reset state on new entry
	if(new_entry){
 8002736:	1dbb      	adds	r3, r7, #6
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d006      	beq.n	800274c <_Z23submenu_4_set_led_colorhb+0x28>
		current_state = 1;						//0 - 3
 800273e:	4b73      	ldr	r3, [pc, #460]	; (800290c <_Z23submenu_4_set_led_colorhb+0x1e8>)
 8002740:	2201      	movs	r2, #1
 8002742:	701a      	strb	r2, [r3, #0]
		changing_value = misc_setting[0];		//now holds LED data: 0 - 13
 8002744:	4b72      	ldr	r3, [pc, #456]	; (8002910 <_Z23submenu_4_set_led_colorhb+0x1ec>)
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	4b72      	ldr	r3, [pc, #456]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 800274a:	701a      	strb	r2, [r3, #0]
	}

	//go to next step in setting
	if(local_input==0x4){
 800274c:	1dfb      	adds	r3, r7, #7
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b04      	cmp	r3, #4
 8002752:	d11a      	bne.n	800278a <_Z23submenu_4_set_led_colorhb+0x66>
		if(current_state == 1){
 8002754:	4b6d      	ldr	r3, [pc, #436]	; (800290c <_Z23submenu_4_set_led_colorhb+0x1e8>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d10d      	bne.n	8002778 <_Z23submenu_4_set_led_colorhb+0x54>
			misc_setting[0] = changing_value;
 800275c:	4b6d      	ldr	r3, [pc, #436]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 800275e:	781a      	ldrb	r2, [r3, #0]
 8002760:	4b6b      	ldr	r3, [pc, #428]	; (8002910 <_Z23submenu_4_set_led_colorhb+0x1ec>)
 8002762:	701a      	strb	r2, [r3, #0]
			changing_value = misc_setting[1]/10;	//now holds brightness data: 0 - 10 - is multiplied later
 8002764:	4b6a      	ldr	r3, [pc, #424]	; (8002910 <_Z23submenu_4_set_led_colorhb+0x1ec>)
 8002766:	785b      	ldrb	r3, [r3, #1]
 8002768:	210a      	movs	r1, #10
 800276a:	0018      	movs	r0, r3
 800276c:	f7fd fccc 	bl	8000108 <__udivsi3>
 8002770:	0003      	movs	r3, r0
 8002772:	b2da      	uxtb	r2, r3
 8002774:	4b67      	ldr	r3, [pc, #412]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 8002776:	701a      	strb	r2, [r3, #0]
		}
		current_state++;
 8002778:	4b64      	ldr	r3, [pc, #400]	; (800290c <_Z23submenu_4_set_led_colorhb+0x1e8>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	3301      	adds	r3, #1
 800277e:	b2da      	uxtb	r2, r3
 8002780:	4b62      	ldr	r3, [pc, #392]	; (800290c <_Z23submenu_4_set_led_colorhb+0x1e8>)
 8002782:	701a      	strb	r2, [r3, #0]
		local_input=0;
 8002784:	1dfb      	adds	r3, r7, #7
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
	}

	//leave setting and safe changes - go back to menu selection
	if(current_state == 3){
 800278a:	4b60      	ldr	r3, [pc, #384]	; (800290c <_Z23submenu_4_set_led_colorhb+0x1e8>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b03      	cmp	r3, #3
 8002790:	d10e      	bne.n	80027b0 <_Z23submenu_4_set_led_colorhb+0x8c>
		misc_setting[1] = changing_value*10;
 8002792:	4b60      	ldr	r3, [pc, #384]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	1c1a      	adds	r2, r3, #0
 8002798:	0092      	lsls	r2, r2, #2
 800279a:	18d3      	adds	r3, r2, r3
 800279c:	18db      	adds	r3, r3, r3
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	4b5b      	ldr	r3, [pc, #364]	; (8002910 <_Z23submenu_4_set_led_colorhb+0x1ec>)
 80027a2:	705a      	strb	r2, [r3, #1]
		flash_write = true;
 80027a4:	4b5c      	ldr	r3, [pc, #368]	; (8002918 <_Z23submenu_4_set_led_colorhb+0x1f4>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
		current_menu = 9;
 80027aa:	4b5c      	ldr	r3, [pc, #368]	; (800291c <_Z23submenu_4_set_led_colorhb+0x1f8>)
 80027ac:	2209      	movs	r2, #9
 80027ae:	701a      	strb	r2, [r3, #0]
	}

	if(local_input == 0x1)
 80027b0:	1dfb      	adds	r3, r7, #7
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d105      	bne.n	80027c4 <_Z23submenu_4_set_led_colorhb+0xa0>
		changing_value++;
 80027b8:	4b56      	ldr	r3, [pc, #344]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	3301      	adds	r3, #1
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	4b54      	ldr	r3, [pc, #336]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 80027c2:	701a      	strb	r2, [r3, #0]
	if(local_input == 0x2)
 80027c4:	1dfb      	adds	r3, r7, #7
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d105      	bne.n	80027d8 <_Z23submenu_4_set_led_colorhb+0xb4>
		changing_value--;
 80027cc:	4b51      	ldr	r3, [pc, #324]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	4b4f      	ldr	r3, [pc, #316]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 80027d6:	701a      	strb	r2, [r3, #0]

	if(current_state == 1){
 80027d8:	4b4c      	ldr	r3, [pc, #304]	; (800290c <_Z23submenu_4_set_led_colorhb+0x1e8>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d10e      	bne.n	80027fe <_Z23submenu_4_set_led_colorhb+0xda>
		if(changing_value == 14)
 80027e0:	4b4c      	ldr	r3, [pc, #304]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b0e      	cmp	r3, #14
 80027e6:	d102      	bne.n	80027ee <_Z23submenu_4_set_led_colorhb+0xca>
			changing_value = 0;
 80027e8:	4b4a      	ldr	r3, [pc, #296]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
		if(changing_value == 255)
 80027ee:	4b49      	ldr	r3, [pc, #292]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2bff      	cmp	r3, #255	; 0xff
 80027f4:	d111      	bne.n	800281a <_Z23submenu_4_set_led_colorhb+0xf6>
			changing_value = 13;
 80027f6:	4b47      	ldr	r3, [pc, #284]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 80027f8:	220d      	movs	r2, #13
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	e00d      	b.n	800281a <_Z23submenu_4_set_led_colorhb+0xf6>
	}
	else{
		if(changing_value == 11)
 80027fe:	4b45      	ldr	r3, [pc, #276]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b0b      	cmp	r3, #11
 8002804:	d102      	bne.n	800280c <_Z23submenu_4_set_led_colorhb+0xe8>
			changing_value = 0;
 8002806:	4b43      	ldr	r3, [pc, #268]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
		if(changing_value == 255)
 800280c:	4b41      	ldr	r3, [pc, #260]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2bff      	cmp	r3, #255	; 0xff
 8002812:	d102      	bne.n	800281a <_Z23submenu_4_set_led_colorhb+0xf6>
			changing_value = 10;
 8002814:	4b3f      	ldr	r3, [pc, #252]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 8002816:	220a      	movs	r2, #10
 8002818:	701a      	strb	r2, [r3, #0]
	}

	//Display color and brightness as well as setting number
	for(uint8_t i=0; i<3; i++){
 800281a:	230f      	movs	r3, #15
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
 8002822:	200f      	movs	r0, #15
 8002824:	183b      	adds	r3, r7, r0
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d82e      	bhi.n	800288a <_Z23submenu_4_set_led_colorhb+0x166>
		if(current_state == 1)
 800282c:	4b37      	ldr	r3, [pc, #220]	; (800290c <_Z23submenu_4_set_led_colorhb+0x1e8>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d10c      	bne.n	800284e <_Z23submenu_4_set_led_colorhb+0x12a>
			set_color(i, colors_hex[changing_value], misc_setting[1]);
 8002834:	4b37      	ldr	r3, [pc, #220]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	001a      	movs	r2, r3
 800283a:	4b39      	ldr	r3, [pc, #228]	; (8002920 <_Z23submenu_4_set_led_colorhb+0x1fc>)
 800283c:	0092      	lsls	r2, r2, #2
 800283e:	58d1      	ldr	r1, [r2, r3]
 8002840:	4b33      	ldr	r3, [pc, #204]	; (8002910 <_Z23submenu_4_set_led_colorhb+0x1ec>)
 8002842:	785a      	ldrb	r2, [r3, #1]
 8002844:	183b      	adds	r3, r7, r0
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	0018      	movs	r0, r3
 800284a:	f7fe f9d5 	bl	8000bf8 <_Z9set_colorhmh>
		if(current_state == 2)
 800284e:	4b2f      	ldr	r3, [pc, #188]	; (800290c <_Z23submenu_4_set_led_colorhb+0x1e8>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d112      	bne.n	800287c <_Z23submenu_4_set_led_colorhb+0x158>
			set_color(i, colors_hex[misc_setting[0]], changing_value*10);
 8002856:	4b2e      	ldr	r3, [pc, #184]	; (8002910 <_Z23submenu_4_set_led_colorhb+0x1ec>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	001a      	movs	r2, r3
 800285c:	4b30      	ldr	r3, [pc, #192]	; (8002920 <_Z23submenu_4_set_led_colorhb+0x1fc>)
 800285e:	0092      	lsls	r2, r2, #2
 8002860:	58d1      	ldr	r1, [r2, r3]
 8002862:	4b2c      	ldr	r3, [pc, #176]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	1c1a      	adds	r2, r3, #0
 8002868:	0092      	lsls	r2, r2, #2
 800286a:	18d3      	adds	r3, r2, r3
 800286c:	18db      	adds	r3, r3, r3
 800286e:	b2da      	uxtb	r2, r3
 8002870:	230f      	movs	r3, #15
 8002872:	18fb      	adds	r3, r7, r3
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	0018      	movs	r0, r3
 8002878:	f7fe f9be 	bl	8000bf8 <_Z9set_colorhmh>
	for(uint8_t i=0; i<3; i++){
 800287c:	210f      	movs	r1, #15
 800287e:	187b      	adds	r3, r7, r1
 8002880:	781a      	ldrb	r2, [r3, #0]
 8002882:	187b      	adds	r3, r7, r1
 8002884:	3201      	adds	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]
 8002888:	e7cb      	b.n	8002822 <_Z23submenu_4_set_led_colorhb+0xfe>
	}
	if(current_state == 1){
 800288a:	4b20      	ldr	r3, [pc, #128]	; (800290c <_Z23submenu_4_set_led_colorhb+0x1e8>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d11c      	bne.n	80028cc <_Z23submenu_4_set_led_colorhb+0x1a8>
		set_number(0, 0xA);
 8002892:	210a      	movs	r1, #10
 8002894:	2000      	movs	r0, #0
 8002896:	f7fe fc95 	bl	80011c4 <_Z10set_numberhh>
		set_number(1, changing_value/10);
 800289a:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	210a      	movs	r1, #10
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7fd fc31 	bl	8000108 <__udivsi3>
 80028a6:	0003      	movs	r3, r0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	0019      	movs	r1, r3
 80028ac:	2001      	movs	r0, #1
 80028ae:	f7fe fc89 	bl	80011c4 <_Z10set_numberhh>
		set_number(2, changing_value%10);
 80028b2:	4b18      	ldr	r3, [pc, #96]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	210a      	movs	r1, #10
 80028b8:	0018      	movs	r0, r3
 80028ba:	f7fd fcab 	bl	8000214 <__aeabi_uidivmod>
 80028be:	000b      	movs	r3, r1
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	0019      	movs	r1, r3
 80028c4:	2002      	movs	r0, #2
 80028c6:	f7fe fc7d 	bl	80011c4 <_Z10set_numberhh>
	else{
		set_number(0, changing_value/10);
		set_number(1, changing_value%10);
		set_number(2, 0);
	}
}
 80028ca:	e01b      	b.n	8002904 <_Z23submenu_4_set_led_colorhb+0x1e0>
		set_number(0, changing_value/10);
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	210a      	movs	r1, #10
 80028d2:	0018      	movs	r0, r3
 80028d4:	f7fd fc18 	bl	8000108 <__udivsi3>
 80028d8:	0003      	movs	r3, r0
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	0019      	movs	r1, r3
 80028de:	2000      	movs	r0, #0
 80028e0:	f7fe fc70 	bl	80011c4 <_Z10set_numberhh>
		set_number(1, changing_value%10);
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <_Z23submenu_4_set_led_colorhb+0x1f0>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	210a      	movs	r1, #10
 80028ea:	0018      	movs	r0, r3
 80028ec:	f7fd fc92 	bl	8000214 <__aeabi_uidivmod>
 80028f0:	000b      	movs	r3, r1
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	0019      	movs	r1, r3
 80028f6:	2001      	movs	r0, #1
 80028f8:	f7fe fc64 	bl	80011c4 <_Z10set_numberhh>
		set_number(2, 0);
 80028fc:	2100      	movs	r1, #0
 80028fe:	2002      	movs	r0, #2
 8002900:	f7fe fc60 	bl	80011c4 <_Z10set_numberhh>
}
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	b004      	add	sp, #16
 800290a:	bd80      	pop	{r7, pc}
 800290c:	200004ac 	.word	0x200004ac
 8002910:	20000444 	.word	0x20000444
 8002914:	200004ad 	.word	0x200004ad
 8002918:	2000045c 	.word	0x2000045c
 800291c:	20000458 	.word	0x20000458
 8002920:	20000000 	.word	0x20000000

08002924 <_Z21submenu_9_menu_selecth>:

/**
 * @brief: function to select new setting option
 * @param: enter input info 0x1=left; 0x2=right; 0x4=press; 0x8=long press
 */
bool submenu_9_menu_select(uint8_t local_input){
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	0002      	movs	r2, r0
 800292c:	1dfb      	adds	r3, r7, #7
 800292e:	701a      	strb	r2, [r3, #0]
	if(local_input == 0x1)
 8002930:	1dfb      	adds	r3, r7, #7
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d105      	bne.n	8002944 <_Z21submenu_9_menu_selecth+0x20>
		selected_menu++;
 8002938:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <_Z21submenu_9_menu_selecth+0xa0>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	3301      	adds	r3, #1
 800293e:	b2da      	uxtb	r2, r3
 8002940:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <_Z21submenu_9_menu_selecth+0xa0>)
 8002942:	701a      	strb	r2, [r3, #0]
	if(local_input == 0x2)
 8002944:	1dfb      	adds	r3, r7, #7
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d105      	bne.n	8002958 <_Z21submenu_9_menu_selecth+0x34>
		selected_menu--;
 800294c:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <_Z21submenu_9_menu_selecth+0xa0>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	3b01      	subs	r3, #1
 8002952:	b2da      	uxtb	r2, r3
 8002954:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <_Z21submenu_9_menu_selecth+0xa0>)
 8002956:	701a      	strb	r2, [r3, #0]

	if(selected_menu == 255)
 8002958:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <_Z21submenu_9_menu_selecth+0xa0>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2bff      	cmp	r3, #255	; 0xff
 800295e:	d102      	bne.n	8002966 <_Z21submenu_9_menu_selecth+0x42>
		selected_menu = 6;
 8002960:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <_Z21submenu_9_menu_selecth+0xa0>)
 8002962:	2206      	movs	r2, #6
 8002964:	701a      	strb	r2, [r3, #0]
	if(selected_menu == 7)
 8002966:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <_Z21submenu_9_menu_selecth+0xa0>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b07      	cmp	r3, #7
 800296c:	d102      	bne.n	8002974 <_Z21submenu_9_menu_selecth+0x50>
		selected_menu = 0;
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <_Z21submenu_9_menu_selecth+0xa0>)
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
	set_number(0, selected_menu);	//multiple digits don't remove flickering
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <_Z21submenu_9_menu_selecth+0xa0>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	0019      	movs	r1, r3
 800297a:	2000      	movs	r0, #0
 800297c:	f7fe fc22 	bl	80011c4 <_Z10set_numberhh>
	if(local_input == 0x4){
 8002980:	1dfb      	adds	r3, r7, #7
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b04      	cmp	r3, #4
 8002986:	d117      	bne.n	80029b8 <_Z21submenu_9_menu_selecth+0x94>
		current_menu = selected_menu;
 8002988:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <_Z21submenu_9_menu_selecth+0xa0>)
 800298a:	781a      	ldrb	r2, [r3, #0]
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <_Z21submenu_9_menu_selecth+0xa4>)
 800298e:	701a      	strb	r2, [r3, #0]
		//debug!!!
		if(selected_menu == 5){		//shift menu
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <_Z21submenu_9_menu_selecth+0xa0>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b05      	cmp	r3, #5
 8002996:	d104      	bne.n	80029a2 <_Z21submenu_9_menu_selecth+0x7e>
			current_menu = 0;
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <_Z21submenu_9_menu_selecth+0xa4>)
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
			animation_shifting();
 800299e:	f000 f93d 	bl	8002c1c <_Z18animation_shiftingv>

		}
		if(selected_menu == 6){		//random menu
 80029a2:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <_Z21submenu_9_menu_selecth+0xa0>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	d104      	bne.n	80029b4 <_Z21submenu_9_menu_selecth+0x90>
			current_menu = 0;
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <_Z21submenu_9_menu_selecth+0xa4>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
			animation_random();
 80029b0:	f000 f87c 	bl	8002aac <_Z16animation_randomv>
		}
		return true;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <_Z21submenu_9_menu_selecth+0x96>
	}
	else
		return false;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	0018      	movs	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	b002      	add	sp, #8
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	20000459 	.word	0x20000459
 80029c8:	20000458 	.word	0x20000458

080029cc <_Z20write_flash_new_datav>:

/**
 * @brief function to write new settings to flash, when input is complete
 * @return returns 0 if write was successful, else return 1
 */
bool write_flash_new_data(void){
 80029cc:	b5b0      	push	{r4, r5, r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
	uint8_t temp = 1;
 80029d2:	210f      	movs	r1, #15
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
	uint8_t data = 0;
 80029da:	230e      	movs	r3, #14
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
	uint32_t addr = UP_FLASH_ADDR;
 80029e2:	4b2f      	ldr	r3, [pc, #188]	; (8002aa0 <_Z20write_flash_new_datav+0xd4>)
 80029e4:	60bb      	str	r3, [r7, #8]

	temp = HAL_FLASHEx_DATAEEPROM_Unlock();
 80029e6:	000d      	movs	r5, r1
 80029e8:	187c      	adds	r4, r7, r1
 80029ea:	f001 fb3b 	bl	8004064 <HAL_FLASHEx_DATAEEPROM_Unlock>
 80029ee:	0003      	movs	r3, r0
 80029f0:	7023      	strb	r3, [r4, #0]

	if(temp == 0){
 80029f2:	197b      	adds	r3, r7, r5
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d145      	bne.n	8002a86 <_Z20write_flash_new_datav+0xba>
		for(uint8_t i=0; i<51; i++){	//51 bytes to write in flash (8*6 time area; 3 led+brightness+points)
 80029fa:	1dfb      	adds	r3, r7, #7
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
 8002a00:	1dfb      	adds	r3, r7, #7
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b32      	cmp	r3, #50	; 0x32
 8002a06:	d83e      	bhi.n	8002a86 <_Z20write_flash_new_datav+0xba>
			if(i<48)
 8002a08:	1dfb      	adds	r3, r7, #7
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b2f      	cmp	r3, #47	; 0x2f
 8002a0e:	d81c      	bhi.n	8002a4a <_Z20write_flash_new_datav+0x7e>
				data = on_time[i/6][i%6];
 8002a10:	1dfb      	adds	r3, r7, #7
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2106      	movs	r1, #6
 8002a16:	0018      	movs	r0, r3
 8002a18:	f7fd fb76 	bl	8000108 <__udivsi3>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	001c      	movs	r4, r3
 8002a22:	1dfb      	adds	r3, r7, #7
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2106      	movs	r1, #6
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f7fd fbf3 	bl	8000214 <__aeabi_uidivmod>
 8002a2e:	000b      	movs	r3, r1
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	0018      	movs	r0, r3
 8002a34:	230e      	movs	r3, #14
 8002a36:	18fa      	adds	r2, r7, r3
 8002a38:	491a      	ldr	r1, [pc, #104]	; (8002aa4 <_Z20write_flash_new_datav+0xd8>)
 8002a3a:	0023      	movs	r3, r4
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	191b      	adds	r3, r3, r4
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	18cb      	adds	r3, r1, r3
 8002a44:	5c1b      	ldrb	r3, [r3, r0]
 8002a46:	7013      	strb	r3, [r2, #0]
 8002a48:	e008      	b.n	8002a5c <_Z20write_flash_new_datav+0x90>
			else
				data = misc_setting[i-48];
 8002a4a:	1dfb      	adds	r3, r7, #7
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	3b30      	subs	r3, #48	; 0x30
 8002a50:	001a      	movs	r2, r3
 8002a52:	230e      	movs	r3, #14
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	4914      	ldr	r1, [pc, #80]	; (8002aa8 <_Z20write_flash_new_datav+0xdc>)
 8002a58:	5c8a      	ldrb	r2, [r1, r2]
 8002a5a:	701a      	strb	r2, [r3, #0]
			temp = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data);
 8002a5c:	230e      	movs	r3, #14
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	230f      	movs	r3, #15
 8002a64:	18fc      	adds	r4, r7, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	0019      	movs	r1, r3
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f001 fb36 	bl	80040dc <HAL_FLASHEx_DATAEEPROM_Program>
 8002a70:	0003      	movs	r3, r0
 8002a72:	7023      	strb	r3, [r4, #0]
			addr++;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	3301      	adds	r3, #1
 8002a78:	60bb      	str	r3, [r7, #8]
		for(uint8_t i=0; i<51; i++){	//51 bytes to write in flash (8*6 time area; 3 led+brightness+points)
 8002a7a:	1dfb      	adds	r3, r7, #7
 8002a7c:	781a      	ldrb	r2, [r3, #0]
 8002a7e:	1dfb      	adds	r3, r7, #7
 8002a80:	3201      	adds	r2, #1
 8002a82:	701a      	strb	r2, [r3, #0]
 8002a84:	e7bc      	b.n	8002a00 <_Z20write_flash_new_datav+0x34>
		}
	}
	HAL_FLASHEx_DATAEEPROM_Lock();
 8002a86:	f001 fb1b 	bl	80040c0 <HAL_FLASHEx_DATAEEPROM_Lock>
	return temp;
 8002a8a:	230f      	movs	r3, #15
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	1e5a      	subs	r2, r3, #1
 8002a92:	4193      	sbcs	r3, r2
 8002a94:	b2db      	uxtb	r3, r3
}
 8002a96:	0018      	movs	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b004      	add	sp, #16
 8002a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	08080000 	.word	0x08080000
 8002aa4:	20000414 	.word	0x20000414
 8002aa8:	20000444 	.word	0x20000444

08002aac <_Z16animation_randomv>:

/**
 * @brief: animation that shifts the numbers like a slot machine for a few seconds
 * @info: gets called every full hour and on startup
 */
void animation_random(void){
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
	uint32_t stage_timer = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
	uint32_t random_timer = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
	uint8_t rng = 42;			// because 42 is always the answer. Or is it Miata?
 8002aba:	1cfb      	adds	r3, r7, #3
 8002abc:	222a      	movs	r2, #42	; 0x2a
 8002abe:	701a      	strb	r2, [r3, #0]
	static uint32_t seed = start_timer_ms(rng);		//use timer as seed
 8002ac0:	4b51      	ldr	r3, [pc, #324]	; (8002c08 <_Z16animation_randomv+0x15c>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	f3bf 8f5b 	dmb	ish
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	001a      	movs	r2, r3
 8002acc:	2301      	movs	r3, #1
 8002ace:	4013      	ands	r3, r2
 8002ad0:	425a      	negs	r2, r3
 8002ad2:	4153      	adcs	r3, r2
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d015      	beq.n	8002b06 <_Z16animation_randomv+0x5a>
 8002ada:	4b4b      	ldr	r3, [pc, #300]	; (8002c08 <_Z16animation_randomv+0x15c>)
 8002adc:	0018      	movs	r0, r3
 8002ade:	f004 fe59 	bl	8007794 <__cxa_guard_acquire>
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	1e5a      	subs	r2, r3, #1
 8002ae6:	4193      	sbcs	r3, r2
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00b      	beq.n	8002b06 <_Z16animation_randomv+0x5a>
 8002aee:	1cfb      	adds	r3, r7, #3
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	0018      	movs	r0, r3
 8002af4:	f7fe fb20 	bl	8001138 <start_timer_ms>
 8002af8:	0002      	movs	r2, r0
 8002afa:	4b44      	ldr	r3, [pc, #272]	; (8002c0c <_Z16animation_randomv+0x160>)
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	4b42      	ldr	r3, [pc, #264]	; (8002c08 <_Z16animation_randomv+0x15c>)
 8002b00:	0018      	movs	r0, r3
 8002b02:	f004 fe54 	bl	80077ae <__cxa_guard_release>

	for(uint8_t i=0; i<board_size; i++){						//4 or 6 random stages
 8002b06:	230f      	movs	r3, #15
 8002b08:	18fb      	adds	r3, r7, r3
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	4b40      	ldr	r3, [pc, #256]	; (8002c10 <_Z16animation_randomv+0x164>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	220f      	movs	r2, #15
 8002b14:	18ba      	adds	r2, r7, r2
 8002b16:	7812      	ldrb	r2, [r2, #0]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d271      	bcs.n	8002c00 <_Z16animation_randomv+0x154>
		stage_timer = start_timer_ms(500);						// stay in one stage for 500ms
 8002b1c:	23fa      	movs	r3, #250	; 0xfa
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	0018      	movs	r0, r3
 8002b22:	f7fe fb09 	bl	8001138 <start_timer_ms>
 8002b26:	0003      	movs	r3, r0
 8002b28:	60bb      	str	r3, [r7, #8]
		while(timeout(stage_timer) != true){
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7fe fb13 	bl	8001158 <timeout>
 8002b32:	0003      	movs	r3, r0
 8002b34:	3b01      	subs	r3, #1
 8002b36:	1e5a      	subs	r2, r3, #1
 8002b38:	4193      	sbcs	r3, r2
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d058      	beq.n	8002bf2 <_Z16animation_randomv+0x146>

			for(uint8_t j=board_size-(i+1);j<board_size;j++){	//increase random numbers per stage - start with seconds
 8002b40:	4b33      	ldr	r3, [pc, #204]	; (8002c10 <_Z16animation_randomv+0x164>)
 8002b42:	781a      	ldrb	r2, [r3, #0]
 8002b44:	230f      	movs	r3, #15
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	230e      	movs	r3, #14
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	3a01      	subs	r2, #1
 8002b54:	701a      	strb	r2, [r3, #0]
 8002b56:	4b2e      	ldr	r3, [pc, #184]	; (8002c10 <_Z16animation_randomv+0x164>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	240e      	movs	r4, #14
 8002b5c:	193a      	adds	r2, r7, r4
 8002b5e:	7812      	ldrb	r2, [r2, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d243      	bcs.n	8002bec <_Z16animation_randomv+0x140>

				seed = (uint32_t)(seed * 1103515245 + 79841)&0x7fffffff;
 8002b64:	4b29      	ldr	r3, [pc, #164]	; (8002c0c <_Z16animation_randomv+0x160>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a2a      	ldr	r2, [pc, #168]	; (8002c14 <_Z16animation_randomv+0x168>)
 8002b6a:	4353      	muls	r3, r2
 8002b6c:	4a2a      	ldr	r2, [pc, #168]	; (8002c18 <_Z16animation_randomv+0x16c>)
 8002b6e:	4694      	mov	ip, r2
 8002b70:	4463      	add	r3, ip
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	085a      	lsrs	r2, r3, #1
 8002b76:	4b25      	ldr	r3, [pc, #148]	; (8002c0c <_Z16animation_randomv+0x160>)
 8002b78:	601a      	str	r2, [r3, #0]
				rng = seed % 27;
 8002b7a:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <_Z16animation_randomv+0x160>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	211b      	movs	r1, #27
 8002b80:	0018      	movs	r0, r3
 8002b82:	f7fd fb47 	bl	8000214 <__aeabi_uidivmod>
 8002b86:	000b      	movs	r3, r1
 8002b88:	001a      	movs	r2, r3
 8002b8a:	1cfb      	adds	r3, r7, #3
 8002b8c:	701a      	strb	r2, [r3, #0]

				set_number(j, rng%10);
 8002b8e:	1cfb      	adds	r3, r7, #3
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	210a      	movs	r1, #10
 8002b94:	0018      	movs	r0, r3
 8002b96:	f7fd fb3d 	bl	8000214 <__aeabi_uidivmod>
 8002b9a:	000b      	movs	r3, r1
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	193b      	adds	r3, r7, r4
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	0011      	movs	r1, r2
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f7fe fb0d 	bl	80011c4 <_Z10set_numberhh>
				random_timer = start_timer_ms(30/(i+1));		//refreshes numbers every 10 ms
 8002baa:	230f      	movs	r3, #15
 8002bac:	18fb      	adds	r3, r7, r3
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	201e      	movs	r0, #30
 8002bb6:	f7fd fb31 	bl	800021c <__divsi3>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f7fe fabb 	bl	8001138 <start_timer_ms>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	607b      	str	r3, [r7, #4]
				while(timeout(random_timer) != true)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7fe fac5 	bl	8001158 <timeout>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	1e5a      	subs	r2, r3, #1
 8002bd4:	4193      	sbcs	r3, r2
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d000      	beq.n	8002bde <_Z16animation_randomv+0x132>
 8002bdc:	e7f3      	b.n	8002bc6 <_Z16animation_randomv+0x11a>
			for(uint8_t j=board_size-(i+1);j<board_size;j++){	//increase random numbers per stage - start with seconds
 8002bde:	210e      	movs	r1, #14
 8002be0:	187b      	adds	r3, r7, r1
 8002be2:	781a      	ldrb	r2, [r3, #0]
 8002be4:	187b      	adds	r3, r7, r1
 8002be6:	3201      	adds	r2, #1
 8002be8:	701a      	strb	r2, [r3, #0]
 8002bea:	e7b4      	b.n	8002b56 <_Z16animation_randomv+0xaa>
					;
			}
			set_output();
 8002bec:	f7fe fbee 	bl	80013cc <_Z10set_outputv>
		while(timeout(stage_timer) != true){
 8002bf0:	e79b      	b.n	8002b2a <_Z16animation_randomv+0x7e>
	for(uint8_t i=0; i<board_size; i++){						//4 or 6 random stages
 8002bf2:	210f      	movs	r1, #15
 8002bf4:	187b      	adds	r3, r7, r1
 8002bf6:	781a      	ldrb	r2, [r3, #0]
 8002bf8:	187b      	adds	r3, r7, r1
 8002bfa:	3201      	adds	r2, #1
 8002bfc:	701a      	strb	r2, [r3, #0]
 8002bfe:	e786      	b.n	8002b0e <_Z16animation_randomv+0x62>

		}
	}
}
 8002c00:	46c0      	nop			; (mov r8, r8)
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b005      	add	sp, #20
 8002c06:	bd90      	pop	{r4, r7, pc}
 8002c08:	200004b4 	.word	0x200004b4
 8002c0c:	200004b0 	.word	0x200004b0
 8002c10:	20000410 	.word	0x20000410
 8002c14:	41c64e6d 	.word	0x41c64e6d
 8002c18:	000137e1 	.word	0x000137e1

08002c1c <_Z18animation_shiftingv>:

/**
 *@brief: animation that shifts the numbers from 0 to 9 to address cathode poisoning
 *@info: gets called every ten minutes
 */
void animation_shifting(void){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
	uint32_t animation_timer = 0;
 8002c22:	2300      	movs	r3, #0
 8002c24:	603b      	str	r3, [r7, #0]
	for(uint8_t i=0; i<10; i++){
 8002c26:	1dfb      	adds	r3, r7, #7
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
 8002c2c:	1dfb      	adds	r3, r7, #7
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b09      	cmp	r3, #9
 8002c32:	d82f      	bhi.n	8002c94 <_Z18animation_shiftingv+0x78>
		animation_timer = start_timer_ms(250);	//100ms per display
 8002c34:	20fa      	movs	r0, #250	; 0xfa
 8002c36:	f7fe fa7f 	bl	8001138 <start_timer_ms>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	603b      	str	r3, [r7, #0]
		for(uint8_t j=0; j<board_size; j++){
 8002c3e:	1dbb      	adds	r3, r7, #6
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
 8002c44:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <_Z18animation_shiftingv+0x80>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	1dba      	adds	r2, r7, #6
 8002c4a:	7812      	ldrb	r2, [r2, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d20d      	bcs.n	8002c6c <_Z18animation_shiftingv+0x50>
			set_number(j, i);
 8002c50:	1dfb      	adds	r3, r7, #7
 8002c52:	781a      	ldrb	r2, [r3, #0]
 8002c54:	1dbb      	adds	r3, r7, #6
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	0011      	movs	r1, r2
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f7fe fab2 	bl	80011c4 <_Z10set_numberhh>
		for(uint8_t j=0; j<board_size; j++){
 8002c60:	1dbb      	adds	r3, r7, #6
 8002c62:	781a      	ldrb	r2, [r3, #0]
 8002c64:	1dbb      	adds	r3, r7, #6
 8002c66:	3201      	adds	r2, #1
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	e7eb      	b.n	8002c44 <_Z18animation_shiftingv+0x28>
		}
		set_output();
 8002c6c:	f7fe fbae 	bl	80013cc <_Z10set_outputv>
		while(timeout(animation_timer) != true)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	0018      	movs	r0, r3
 8002c74:	f7fe fa70 	bl	8001158 <timeout>
 8002c78:	0003      	movs	r3, r0
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	1e5a      	subs	r2, r3, #1
 8002c7e:	4193      	sbcs	r3, r2
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d000      	beq.n	8002c88 <_Z18animation_shiftingv+0x6c>
 8002c86:	e7f3      	b.n	8002c70 <_Z18animation_shiftingv+0x54>
	for(uint8_t i=0; i<10; i++){
 8002c88:	1dfb      	adds	r3, r7, #7
 8002c8a:	781a      	ldrb	r2, [r3, #0]
 8002c8c:	1dfb      	adds	r3, r7, #7
 8002c8e:	3201      	adds	r2, #1
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	e7cb      	b.n	8002c2c <_Z18animation_shiftingv+0x10>
			;
	}
}
 8002c94:	46c0      	nop			; (mov r8, r8)
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b002      	add	sp, #8
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000410 	.word	0x20000410

08002ca0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ca4:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002ca6:	4a19      	ldr	r2, [pc, #100]	; (8002d0c <MX_SPI1_Init+0x6c>)
 8002ca8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002caa:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002cac:	2282      	movs	r2, #130	; 0x82
 8002cae:	0052      	lsls	r2, r2, #1
 8002cb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cb8:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cbe:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cc4:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cca:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002ccc:	2280      	movs	r2, #128	; 0x80
 8002cce:	0092      	lsls	r2, r2, #2
 8002cd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cde:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ce4:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002cea:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002cec:	2207      	movs	r2, #7
 8002cee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f003 f87c 	bl	8005df0 <HAL_SPI_Init>
 8002cf8:	1e03      	subs	r3, r0, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002cfc:	f7fe fa3e 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d00:	46c0      	nop			; (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	200004b8 	.word	0x200004b8
 8002d0c:	40013000 	.word	0x40013000

08002d10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d10:	b590      	push	{r4, r7, lr}
 8002d12:	b089      	sub	sp, #36	; 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	240c      	movs	r4, #12
 8002d1a:	193b      	adds	r3, r7, r4
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	2314      	movs	r3, #20
 8002d20:	001a      	movs	r2, r3
 8002d22:	2100      	movs	r1, #0
 8002d24:	f004 fd6a 	bl	80077fc <memset>
  if(spiHandle->Instance==SPI1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a18      	ldr	r2, [pc, #96]	; (8002d90 <HAL_SPI_MspInit+0x80>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d129      	bne.n	8002d86 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d32:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <HAL_SPI_MspInit+0x84>)
 8002d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d36:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <HAL_SPI_MspInit+0x84>)
 8002d38:	2180      	movs	r1, #128	; 0x80
 8002d3a:	0149      	lsls	r1, r1, #5
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d40:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <HAL_SPI_MspInit+0x84>)
 8002d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d44:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <HAL_SPI_MspInit+0x84>)
 8002d46:	2101      	movs	r1, #1
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d4c:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <HAL_SPI_MspInit+0x84>)
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	2201      	movs	r2, #1
 8002d52:	4013      	ands	r3, r2
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002d58:	0021      	movs	r1, r4
 8002d5a:	187b      	adds	r3, r7, r1
 8002d5c:	22a0      	movs	r2, #160	; 0xa0
 8002d5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d60:	187b      	adds	r3, r7, r1
 8002d62:	2202      	movs	r2, #2
 8002d64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	187b      	adds	r3, r7, r1
 8002d68:	2200      	movs	r2, #0
 8002d6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6c:	187b      	adds	r3, r7, r1
 8002d6e:	2203      	movs	r2, #3
 8002d70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002d72:	187b      	adds	r3, r7, r1
 8002d74:	2200      	movs	r2, #0
 8002d76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d78:	187a      	adds	r2, r7, r1
 8002d7a:	23a0      	movs	r3, #160	; 0xa0
 8002d7c:	05db      	lsls	r3, r3, #23
 8002d7e:	0011      	movs	r1, r2
 8002d80:	0018      	movs	r0, r3
 8002d82:	f001 fa03 	bl	800418c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b009      	add	sp, #36	; 0x24
 8002d8c:	bd90      	pop	{r4, r7, pc}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	40013000 	.word	0x40013000
 8002d94:	40021000 	.word	0x40021000

08002d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9c:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <HAL_MspInit+0x24>)
 8002d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_MspInit+0x24>)
 8002da2:	2101      	movs	r1, #1
 8002da4:	430a      	orrs	r2, r1
 8002da6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002da8:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <HAL_MspInit+0x24>)
 8002daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dac:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <HAL_MspInit+0x24>)
 8002dae:	2180      	movs	r1, #128	; 0x80
 8002db0:	0549      	lsls	r1, r1, #21
 8002db2:	430a      	orrs	r2, r1
 8002db4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40021000 	.word	0x40021000

08002dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dc4:	e7fe      	b.n	8002dc4 <NMI_Handler+0x4>

08002dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dca:	e7fe      	b.n	8002dca <HardFault_Handler+0x4>

08002dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002dd0:	46c0      	nop			; (mov r8, r8)
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002de4:	f000 fd34 	bl	8003850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <DMA1_Channel1_IRQHandler+0x14>)
 8002df6:	0018      	movs	r0, r3
 8002df8:	f000 ff49 	bl	8003c8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	20000590 	.word	0x20000590

08002e08 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */
	counter_update_it();
 8002e0c:	f7fe f988 	bl	8001120 <counter_update_it>
  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <TIM21_IRQHandler+0x18>)
 8002e12:	0018      	movs	r0, r3
 8002e14:	f003 fe72 	bl	8006afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8002e18:	46c0      	nop			; (mov r8, r8)
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	20000550 	.word	0x20000550

08002e24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e28:	46c0      	nop			; (mov r8, r8)
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <MX_TIM2_Init>:
TIM_HandleTypeDef htim21;
DMA_HandleTypeDef hdma_tim2_ch3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e36:	2318      	movs	r3, #24
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	2310      	movs	r3, #16
 8002e3e:	001a      	movs	r2, r3
 8002e40:	2100      	movs	r1, #0
 8002e42:	f004 fcdb 	bl	80077fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e46:	2310      	movs	r3, #16
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	2308      	movs	r3, #8
 8002e4e:	001a      	movs	r2, r3
 8002e50:	2100      	movs	r1, #0
 8002e52:	f004 fcd3 	bl	80077fc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e56:	003b      	movs	r3, r7
 8002e58:	0018      	movs	r0, r3
 8002e5a:	2310      	movs	r3, #16
 8002e5c:	001a      	movs	r2, r3
 8002e5e:	2100      	movs	r1, #0
 8002e60:	f004 fccc 	bl	80077fc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e64:	4b30      	ldr	r3, [pc, #192]	; (8002f28 <MX_TIM2_Init+0xf8>)
 8002e66:	2280      	movs	r2, #128	; 0x80
 8002e68:	05d2      	lsls	r2, r2, #23
 8002e6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002e6c:	4b2e      	ldr	r3, [pc, #184]	; (8002f28 <MX_TIM2_Init+0xf8>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e72:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <MX_TIM2_Init+0xf8>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40-1;
 8002e78:	4b2b      	ldr	r3, [pc, #172]	; (8002f28 <MX_TIM2_Init+0xf8>)
 8002e7a:	2227      	movs	r2, #39	; 0x27
 8002e7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e7e:	4b2a      	ldr	r3, [pc, #168]	; (8002f28 <MX_TIM2_Init+0xf8>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e84:	4b28      	ldr	r3, [pc, #160]	; (8002f28 <MX_TIM2_Init+0xf8>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e8a:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <MX_TIM2_Init+0xf8>)
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f003 fa69 	bl	8006364 <HAL_TIM_Base_Init>
 8002e92:	1e03      	subs	r3, r0, #0
 8002e94:	d001      	beq.n	8002e9a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002e96:	f7fe f971 	bl	800117c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e9a:	2118      	movs	r1, #24
 8002e9c:	187b      	adds	r3, r7, r1
 8002e9e:	2280      	movs	r2, #128	; 0x80
 8002ea0:	0152      	lsls	r2, r2, #5
 8002ea2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ea4:	187a      	adds	r2, r7, r1
 8002ea6:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <MX_TIM2_Init+0xf8>)
 8002ea8:	0011      	movs	r1, r2
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f004 f82c 	bl	8006f08 <HAL_TIM_ConfigClockSource>
 8002eb0:	1e03      	subs	r3, r0, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8002eb4:	f7fe f962 	bl	800117c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <MX_TIM2_Init+0xf8>)
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f003 fbac 	bl	8006618 <HAL_TIM_PWM_Init>
 8002ec0:	1e03      	subs	r3, r0, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002ec4:	f7fe f95a 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ec8:	2110      	movs	r1, #16
 8002eca:	187b      	adds	r3, r7, r1
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ed0:	187b      	adds	r3, r7, r1
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ed6:	187a      	adds	r2, r7, r1
 8002ed8:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <MX_TIM2_Init+0xf8>)
 8002eda:	0011      	movs	r1, r2
 8002edc:	0018      	movs	r0, r3
 8002ede:	f004 fc01 	bl	80076e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ee2:	1e03      	subs	r3, r0, #0
 8002ee4:	d001      	beq.n	8002eea <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8002ee6:	f7fe f949 	bl	800117c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002eea:	003b      	movs	r3, r7
 8002eec:	2260      	movs	r2, #96	; 0x60
 8002eee:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002ef0:	003b      	movs	r3, r7
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ef6:	003b      	movs	r3, r7
 8002ef8:	2200      	movs	r2, #0
 8002efa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002efc:	003b      	movs	r3, r7
 8002efe:	2200      	movs	r2, #0
 8002f00:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f02:	0039      	movs	r1, r7
 8002f04:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <MX_TIM2_Init+0xf8>)
 8002f06:	2208      	movs	r2, #8
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f003 ff37 	bl	8006d7c <HAL_TIM_PWM_ConfigChannel>
 8002f0e:	1e03      	subs	r3, r0, #0
 8002f10:	d001      	beq.n	8002f16 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8002f12:	f7fe f933 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002f16:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <MX_TIM2_Init+0xf8>)
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f000 f8e7 	bl	80030ec <HAL_TIM_MspPostInit>

}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	46bd      	mov	sp, r7
 8002f22:	b00a      	add	sp, #40	; 0x28
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	20000510 	.word	0x20000510

08002f2c <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08a      	sub	sp, #40	; 0x28
 8002f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f32:	2318      	movs	r3, #24
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	0018      	movs	r0, r3
 8002f38:	2310      	movs	r3, #16
 8002f3a:	001a      	movs	r2, r3
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	f004 fc5d 	bl	80077fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f42:	2310      	movs	r3, #16
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	0018      	movs	r0, r3
 8002f48:	2308      	movs	r3, #8
 8002f4a:	001a      	movs	r2, r3
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	f004 fc55 	bl	80077fc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f52:	003b      	movs	r3, r7
 8002f54:	0018      	movs	r0, r3
 8002f56:	2310      	movs	r3, #16
 8002f58:	001a      	movs	r2, r3
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	f004 fc4e 	bl	80077fc <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8002f60:	4b31      	ldr	r3, [pc, #196]	; (8003028 <MX_TIM21_Init+0xfc>)
 8002f62:	4a32      	ldr	r2, [pc, #200]	; (800302c <MX_TIM21_Init+0x100>)
 8002f64:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 32-1;
 8002f66:	4b30      	ldr	r3, [pc, #192]	; (8003028 <MX_TIM21_Init+0xfc>)
 8002f68:	221f      	movs	r2, #31
 8002f6a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f6c:	4b2e      	ldr	r3, [pc, #184]	; (8003028 <MX_TIM21_Init+0xfc>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 1000-1;
 8002f72:	4b2d      	ldr	r3, [pc, #180]	; (8003028 <MX_TIM21_Init+0xfc>)
 8002f74:	4a2e      	ldr	r2, [pc, #184]	; (8003030 <MX_TIM21_Init+0x104>)
 8002f76:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f78:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <MX_TIM21_Init+0xfc>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f7e:	4b2a      	ldr	r3, [pc, #168]	; (8003028 <MX_TIM21_Init+0xfc>)
 8002f80:	2280      	movs	r2, #128	; 0x80
 8002f82:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8002f84:	4b28      	ldr	r3, [pc, #160]	; (8003028 <MX_TIM21_Init+0xfc>)
 8002f86:	0018      	movs	r0, r3
 8002f88:	f003 f9ec 	bl	8006364 <HAL_TIM_Base_Init>
 8002f8c:	1e03      	subs	r3, r0, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 8002f90:	f7fe f8f4 	bl	800117c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f94:	2118      	movs	r1, #24
 8002f96:	187b      	adds	r3, r7, r1
 8002f98:	2280      	movs	r2, #128	; 0x80
 8002f9a:	0152      	lsls	r2, r2, #5
 8002f9c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8002f9e:	187a      	adds	r2, r7, r1
 8002fa0:	4b21      	ldr	r3, [pc, #132]	; (8003028 <MX_TIM21_Init+0xfc>)
 8002fa2:	0011      	movs	r1, r2
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f003 ffaf 	bl	8006f08 <HAL_TIM_ConfigClockSource>
 8002faa:	1e03      	subs	r3, r0, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_TIM21_Init+0x86>
  {
    Error_Handler();
 8002fae:	f7fe f8e5 	bl	800117c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <MX_TIM21_Init+0xfc>)
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f003 fa15 	bl	80063e4 <HAL_TIM_OC_Init>
 8002fba:	1e03      	subs	r3, r0, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8002fbe:	f7fe f8dd 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fc2:	2110      	movs	r1, #16
 8002fc4:	187b      	adds	r3, r7, r1
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fca:	187b      	adds	r3, r7, r1
 8002fcc:	2200      	movs	r2, #0
 8002fce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8002fd0:	187a      	adds	r2, r7, r1
 8002fd2:	4b15      	ldr	r3, [pc, #84]	; (8003028 <MX_TIM21_Init+0xfc>)
 8002fd4:	0011      	movs	r1, r2
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f004 fb84 	bl	80076e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002fdc:	1e03      	subs	r3, r0, #0
 8002fde:	d001      	beq.n	8002fe4 <MX_TIM21_Init+0xb8>
  {
    Error_Handler();
 8002fe0:	f7fe f8cc 	bl	800117c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002fe4:	003b      	movs	r3, r7
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002fea:	003b      	movs	r3, r7
 8002fec:	2200      	movs	r2, #0
 8002fee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ff0:	003b      	movs	r3, r7
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ff6:	003b      	movs	r3, r7
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ffc:	0039      	movs	r1, r7
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <MX_TIM21_Init+0xfc>)
 8003000:	2200      	movs	r2, #0
 8003002:	0018      	movs	r0, r3
 8003004:	f003 fe62 	bl	8006ccc <HAL_TIM_OC_ConfigChannel>
 8003008:	1e03      	subs	r3, r0, #0
 800300a:	d001      	beq.n	8003010 <MX_TIM21_Init+0xe4>
  {
    Error_Handler();
 800300c:	f7fe f8b6 	bl	800117c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim21, TIM_CHANNEL_1);
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <MX_TIM21_Init+0xfc>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	4b04      	ldr	r3, [pc, #16]	; (8003028 <MX_TIM21_Init+0xfc>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2108      	movs	r1, #8
 800301c:	430a      	orrs	r2, r1
 800301e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8003020:	46c0      	nop			; (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	b00a      	add	sp, #40	; 0x28
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000550 	.word	0x20000550
 800302c:	40010800 	.word	0x40010800
 8003030:	000003e7 	.word	0x000003e7

08003034 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	05db      	lsls	r3, r3, #23
 8003044:	429a      	cmp	r2, r3
 8003046:	d132      	bne.n	80030ae <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003048:	4b24      	ldr	r3, [pc, #144]	; (80030dc <HAL_TIM_Base_MspInit+0xa8>)
 800304a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800304c:	4b23      	ldr	r3, [pc, #140]	; (80030dc <HAL_TIM_Base_MspInit+0xa8>)
 800304e:	2101      	movs	r1, #1
 8003050:	430a      	orrs	r2, r1
 8003052:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8003054:	4b22      	ldr	r3, [pc, #136]	; (80030e0 <HAL_TIM_Base_MspInit+0xac>)
 8003056:	4a23      	ldr	r2, [pc, #140]	; (80030e4 <HAL_TIM_Base_MspInit+0xb0>)
 8003058:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
 800305a:	4b21      	ldr	r3, [pc, #132]	; (80030e0 <HAL_TIM_Base_MspInit+0xac>)
 800305c:	2208      	movs	r2, #8
 800305e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003060:	4b1f      	ldr	r3, [pc, #124]	; (80030e0 <HAL_TIM_Base_MspInit+0xac>)
 8003062:	2210      	movs	r2, #16
 8003064:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003066:	4b1e      	ldr	r3, [pc, #120]	; (80030e0 <HAL_TIM_Base_MspInit+0xac>)
 8003068:	2200      	movs	r2, #0
 800306a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800306c:	4b1c      	ldr	r3, [pc, #112]	; (80030e0 <HAL_TIM_Base_MspInit+0xac>)
 800306e:	2280      	movs	r2, #128	; 0x80
 8003070:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003072:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <HAL_TIM_Base_MspInit+0xac>)
 8003074:	2280      	movs	r2, #128	; 0x80
 8003076:	0052      	lsls	r2, r2, #1
 8003078:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800307a:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <HAL_TIM_Base_MspInit+0xac>)
 800307c:	2280      	movs	r2, #128	; 0x80
 800307e:	00d2      	lsls	r2, r2, #3
 8003080:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8003082:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <HAL_TIM_Base_MspInit+0xac>)
 8003084:	2200      	movs	r2, #0
 8003086:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003088:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <HAL_TIM_Base_MspInit+0xac>)
 800308a:	2280      	movs	r2, #128	; 0x80
 800308c:	0152      	lsls	r2, r2, #5
 800308e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003090:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <HAL_TIM_Base_MspInit+0xac>)
 8003092:	0018      	movs	r0, r3
 8003094:	f000 fcd6 	bl	8003a44 <HAL_DMA_Init>
 8003098:	1e03      	subs	r3, r0, #0
 800309a:	d001      	beq.n	80030a0 <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 800309c:	f7fe f86e 	bl	800117c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a0f      	ldr	r2, [pc, #60]	; (80030e0 <HAL_TIM_Base_MspInit+0xac>)
 80030a4:	629a      	str	r2, [r3, #40]	; 0x28
 80030a6:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <HAL_TIM_Base_MspInit+0xac>)
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 80030ac:	e012      	b.n	80030d4 <HAL_TIM_Base_MspInit+0xa0>
  else if(tim_baseHandle->Instance==TIM21)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a0d      	ldr	r2, [pc, #52]	; (80030e8 <HAL_TIM_Base_MspInit+0xb4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d10d      	bne.n	80030d4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM21_CLK_ENABLE();
 80030b8:	4b08      	ldr	r3, [pc, #32]	; (80030dc <HAL_TIM_Base_MspInit+0xa8>)
 80030ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030bc:	4b07      	ldr	r3, [pc, #28]	; (80030dc <HAL_TIM_Base_MspInit+0xa8>)
 80030be:	2104      	movs	r1, #4
 80030c0:	430a      	orrs	r2, r1
 80030c2:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80030c4:	2200      	movs	r2, #0
 80030c6:	2100      	movs	r1, #0
 80030c8:	2014      	movs	r0, #20
 80030ca:	f000 fc89 	bl	80039e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80030ce:	2014      	movs	r0, #20
 80030d0:	f000 fc9b 	bl	8003a0a <HAL_NVIC_EnableIRQ>
}
 80030d4:	46c0      	nop			; (mov r8, r8)
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b002      	add	sp, #8
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021000 	.word	0x40021000
 80030e0:	20000590 	.word	0x20000590
 80030e4:	40020008 	.word	0x40020008
 80030e8:	40010800 	.word	0x40010800

080030ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80030ec:	b590      	push	{r4, r7, lr}
 80030ee:	b089      	sub	sp, #36	; 0x24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f4:	240c      	movs	r4, #12
 80030f6:	193b      	adds	r3, r7, r4
 80030f8:	0018      	movs	r0, r3
 80030fa:	2314      	movs	r3, #20
 80030fc:	001a      	movs	r2, r3
 80030fe:	2100      	movs	r1, #0
 8003100:	f004 fb7c 	bl	80077fc <memset>
  if(timHandle->Instance==TIM2)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	05db      	lsls	r3, r3, #23
 800310c:	429a      	cmp	r2, r3
 800310e:	d122      	bne.n	8003156 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003110:	4b13      	ldr	r3, [pc, #76]	; (8003160 <HAL_TIM_MspPostInit+0x74>)
 8003112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003114:	4b12      	ldr	r3, [pc, #72]	; (8003160 <HAL_TIM_MspPostInit+0x74>)
 8003116:	2101      	movs	r1, #1
 8003118:	430a      	orrs	r2, r1
 800311a:	62da      	str	r2, [r3, #44]	; 0x2c
 800311c:	4b10      	ldr	r3, [pc, #64]	; (8003160 <HAL_TIM_MspPostInit+0x74>)
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	2201      	movs	r2, #1
 8003122:	4013      	ands	r3, r2
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003128:	0021      	movs	r1, r4
 800312a:	187b      	adds	r3, r7, r1
 800312c:	2204      	movs	r2, #4
 800312e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003130:	187b      	adds	r3, r7, r1
 8003132:	2202      	movs	r2, #2
 8003134:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003136:	187b      	adds	r3, r7, r1
 8003138:	2202      	movs	r2, #2
 800313a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800313c:	187b      	adds	r3, r7, r1
 800313e:	2202      	movs	r2, #2
 8003140:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003142:	187b      	adds	r3, r7, r1
 8003144:	2202      	movs	r2, #2
 8003146:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003148:	187a      	adds	r2, r7, r1
 800314a:	23a0      	movs	r3, #160	; 0xa0
 800314c:	05db      	lsls	r3, r3, #23
 800314e:	0011      	movs	r1, r2
 8003150:	0018      	movs	r0, r3
 8003152:	f001 f81b 	bl	800418c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	46bd      	mov	sp, r7
 800315a:	b009      	add	sp, #36	; 0x24
 800315c:	bd90      	pop	{r4, r7, pc}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	40021000 	.word	0x40021000

08003164 <_Z16run_time_handlerv>:
struct time_struct data_to_RTC;

/**
 * @brief function is constantly called to get fresh time data from rtc - get time every 500ms
 */
void run_time_handler(void){
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
	static bool dls_flag_only = false;
	if(data_to_RTC.new_data==2){
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <_Z16run_time_handlerv+0x6c>)
 800316a:	7a9b      	ldrb	r3, [r3, #10]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d107      	bne.n	8003180 <_Z16run_time_handlerv+0x1c>
		data_to_RTC.new_data = 0;
 8003170:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <_Z16run_time_handlerv+0x6c>)
 8003172:	2200      	movs	r2, #0
 8003174:	729a      	strb	r2, [r3, #10]
		write_date_i2c();
 8003176:	f000 f967 	bl	8003448 <_Z14write_date_i2cv>
		dls_flag_only = true;	//enable change flag only for next Daylight safe check
 800317a:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <_Z16run_time_handlerv+0x70>)
 800317c:	2201      	movs	r2, #1
 800317e:	701a      	strb	r2, [r3, #0]
	}
	if(data_to_RTC.new_data==1){
 8003180:	4b13      	ldr	r3, [pc, #76]	; (80031d0 <_Z16run_time_handlerv+0x6c>)
 8003182:	7a9b      	ldrb	r3, [r3, #10]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d107      	bne.n	8003198 <_Z16run_time_handlerv+0x34>
		data_to_RTC.new_data = 0;
 8003188:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <_Z16run_time_handlerv+0x6c>)
 800318a:	2200      	movs	r2, #0
 800318c:	729a      	strb	r2, [r3, #10]
		write_time_i2c();
 800318e:	f000 f87d 	bl	800328c <_Z14write_time_i2cv>
		dls_flag_only = true;
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <_Z16run_time_handlerv+0x70>)
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]


	//TODO: add summertime
	//TODO: add plausibility check when safing date

	if(timeout(time_handler_timer)){
 8003198:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <_Z16run_time_handlerv+0x74>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	0018      	movs	r0, r3
 800319e:	f7fd ffdb 	bl	8001158 <timeout>
 80031a2:	1e03      	subs	r3, r0, #0
 80031a4:	d011      	beq.n	80031ca <_Z16run_time_handlerv+0x66>
		time_handler_timer = start_timer_ms(TIME_UPDATE_MS);
 80031a6:	2064      	movs	r0, #100	; 0x64
 80031a8:	f7fd ffc6 	bl	8001138 <start_timer_ms>
 80031ac:	0002      	movs	r2, r0
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <_Z16run_time_handlerv+0x74>)
 80031b0:	601a      	str	r2, [r3, #0]

		read_date_i2c();
 80031b2:	f000 f8c9 	bl	8003348 <_Z13read_date_i2cv>
		read_time_i2c();
 80031b6:	f000 f811 	bl	80031dc <_Z13read_time_i2cv>
		dls_check(dls_flag_only);	//check for daylight saving + apply
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <_Z16run_time_handlerv+0x70>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	0018      	movs	r0, r3
 80031c0:	f000 f9bc 	bl	800353c <_Z9dls_checkb>
		dls_flag_only = false;
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <_Z16run_time_handlerv+0x70>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	701a      	strb	r2, [r3, #0]
	}
}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	20000058 	.word	0x20000058
 80031d4:	200005dc 	.word	0x200005dc
 80031d8:	200005d8 	.word	0x200005d8

080031dc <_Z13read_time_i2cv>:

/**
 * @brief function to read time information from RTC info RAM
 * store read data in time_struct data_from_RTC
 */
void read_time_i2c(void){
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af02      	add	r7, sp, #8
	uint8_t temp[3];
	temp[0] = ADDR_SECONDS;	//start address for read operation
 80031e2:	1d3b      	adds	r3, r7, #4
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&hi2c1, DS3231_MASTER_ADDRESS, (uint8_t *)temp, 1, 10);
 80031e8:	1d3a      	adds	r2, r7, #4
 80031ea:	4826      	ldr	r0, [pc, #152]	; (8003284 <_Z13read_time_i2cv+0xa8>)
 80031ec:	230a      	movs	r3, #10
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	2301      	movs	r3, #1
 80031f2:	21d1      	movs	r1, #209	; 0xd1
 80031f4:	f001 fa08 	bl	8004608 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, DS3231_SLAVE_ADDRESS, (uint8_t *)temp, 3, 10);
 80031f8:	1d3a      	adds	r2, r7, #4
 80031fa:	4822      	ldr	r0, [pc, #136]	; (8003284 <_Z13read_time_i2cv+0xa8>)
 80031fc:	230a      	movs	r3, #10
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	2303      	movs	r3, #3
 8003202:	21d0      	movs	r1, #208	; 0xd0
 8003204:	f001 fb08 	bl	8004818 <HAL_I2C_Master_Receive>

	data_from_RTC.seconds = ((temp[0]&0xf0)>>4)*10 + (temp[0]&0x0f);	//conversion from hex to dec
 8003208:	1d3b      	adds	r3, r7, #4
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	b2db      	uxtb	r3, r3
 8003210:	1c1a      	adds	r2, r3, #0
 8003212:	0092      	lsls	r2, r2, #2
 8003214:	18d3      	adds	r3, r2, r3
 8003216:	18db      	adds	r3, r3, r3
 8003218:	b2da      	uxtb	r2, r3
 800321a:	1d3b      	adds	r3, r7, #4
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	210f      	movs	r1, #15
 8003220:	400b      	ands	r3, r1
 8003222:	b2db      	uxtb	r3, r3
 8003224:	18d3      	adds	r3, r2, r3
 8003226:	b2da      	uxtb	r2, r3
 8003228:	4b17      	ldr	r3, [pc, #92]	; (8003288 <_Z13read_time_i2cv+0xac>)
 800322a:	701a      	strb	r2, [r3, #0]
	data_from_RTC.minutes = ((temp[1]&0xf0)>>4)*10 + (temp[1]&0x0f);
 800322c:	1d3b      	adds	r3, r7, #4
 800322e:	785b      	ldrb	r3, [r3, #1]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	b2db      	uxtb	r3, r3
 8003234:	1c1a      	adds	r2, r3, #0
 8003236:	0092      	lsls	r2, r2, #2
 8003238:	18d3      	adds	r3, r2, r3
 800323a:	18db      	adds	r3, r3, r3
 800323c:	b2da      	uxtb	r2, r3
 800323e:	1d3b      	adds	r3, r7, #4
 8003240:	785b      	ldrb	r3, [r3, #1]
 8003242:	210f      	movs	r1, #15
 8003244:	400b      	ands	r3, r1
 8003246:	b2db      	uxtb	r3, r3
 8003248:	18d3      	adds	r3, r2, r3
 800324a:	b2da      	uxtb	r2, r3
 800324c:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <_Z13read_time_i2cv+0xac>)
 800324e:	705a      	strb	r2, [r3, #1]
	data_from_RTC.hours = ((temp[2]&0x30)>>4)*10 + (temp[2]&0x0f);
 8003250:	1d3b      	adds	r3, r7, #4
 8003252:	789b      	ldrb	r3, [r3, #2]
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2203      	movs	r2, #3
 800325a:	4013      	ands	r3, r2
 800325c:	b2db      	uxtb	r3, r3
 800325e:	1c1a      	adds	r2, r3, #0
 8003260:	0092      	lsls	r2, r2, #2
 8003262:	18d3      	adds	r3, r2, r3
 8003264:	18db      	adds	r3, r3, r3
 8003266:	b2da      	uxtb	r2, r3
 8003268:	1d3b      	adds	r3, r7, #4
 800326a:	789b      	ldrb	r3, [r3, #2]
 800326c:	210f      	movs	r1, #15
 800326e:	400b      	ands	r3, r1
 8003270:	b2db      	uxtb	r3, r3
 8003272:	18d3      	adds	r3, r2, r3
 8003274:	b2da      	uxtb	r2, r3
 8003276:	4b04      	ldr	r3, [pc, #16]	; (8003288 <_Z13read_time_i2cv+0xac>)
 8003278:	709a      	strb	r2, [r3, #2]

	//check for summer time

}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	46bd      	mov	sp, r7
 800327e:	b002      	add	sp, #8
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	20000088 	.word	0x20000088
 8003288:	2000004c 	.word	0x2000004c

0800328c <_Z14write_time_i2cv>:

/**
 * @brief function to write time information from RAM into RTC
 * read data from data_to_RTC and transfer to RTC
 */
void write_time_i2c(void){
 800328c:	b590      	push	{r4, r7, lr}
 800328e:	b085      	sub	sp, #20
 8003290:	af02      	add	r7, sp, #8
	uint8_t temp[4];

	//convert from summer time

	temp[0] = ADDR_SECONDS;	//start address for write operation
 8003292:	1d3b      	adds	r3, r7, #4
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]
	temp[1] = ((data_to_RTC.seconds/10)<<4)|data_to_RTC.seconds%10;
 8003298:	4b29      	ldr	r3, [pc, #164]	; (8003340 <_Z14write_time_i2cv+0xb4>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	210a      	movs	r1, #10
 800329e:	0018      	movs	r0, r3
 80032a0:	f7fc ff32 	bl	8000108 <__udivsi3>
 80032a4:	0003      	movs	r3, r0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	b25c      	sxtb	r4, r3
 80032ac:	4b24      	ldr	r3, [pc, #144]	; (8003340 <_Z14write_time_i2cv+0xb4>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	210a      	movs	r1, #10
 80032b2:	0018      	movs	r0, r3
 80032b4:	f7fc ffae 	bl	8000214 <__aeabi_uidivmod>
 80032b8:	000b      	movs	r3, r1
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	b25b      	sxtb	r3, r3
 80032be:	4323      	orrs	r3, r4
 80032c0:	b25b      	sxtb	r3, r3
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	1d3b      	adds	r3, r7, #4
 80032c6:	705a      	strb	r2, [r3, #1]
	temp[2] = ((data_to_RTC.minutes/10)<<4)|data_to_RTC.minutes%10;
 80032c8:	4b1d      	ldr	r3, [pc, #116]	; (8003340 <_Z14write_time_i2cv+0xb4>)
 80032ca:	785b      	ldrb	r3, [r3, #1]
 80032cc:	210a      	movs	r1, #10
 80032ce:	0018      	movs	r0, r3
 80032d0:	f7fc ff1a 	bl	8000108 <__udivsi3>
 80032d4:	0003      	movs	r3, r0
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	b25c      	sxtb	r4, r3
 80032dc:	4b18      	ldr	r3, [pc, #96]	; (8003340 <_Z14write_time_i2cv+0xb4>)
 80032de:	785b      	ldrb	r3, [r3, #1]
 80032e0:	210a      	movs	r1, #10
 80032e2:	0018      	movs	r0, r3
 80032e4:	f7fc ff96 	bl	8000214 <__aeabi_uidivmod>
 80032e8:	000b      	movs	r3, r1
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	b25b      	sxtb	r3, r3
 80032ee:	4323      	orrs	r3, r4
 80032f0:	b25b      	sxtb	r3, r3
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	1d3b      	adds	r3, r7, #4
 80032f6:	709a      	strb	r2, [r3, #2]
	temp[3] = ((data_to_RTC.hours/10)<<4)|data_to_RTC.hours%10;
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <_Z14write_time_i2cv+0xb4>)
 80032fa:	789b      	ldrb	r3, [r3, #2]
 80032fc:	210a      	movs	r1, #10
 80032fe:	0018      	movs	r0, r3
 8003300:	f7fc ff02 	bl	8000108 <__udivsi3>
 8003304:	0003      	movs	r3, r0
 8003306:	b2db      	uxtb	r3, r3
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	b25c      	sxtb	r4, r3
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <_Z14write_time_i2cv+0xb4>)
 800330e:	789b      	ldrb	r3, [r3, #2]
 8003310:	210a      	movs	r1, #10
 8003312:	0018      	movs	r0, r3
 8003314:	f7fc ff7e 	bl	8000214 <__aeabi_uidivmod>
 8003318:	000b      	movs	r3, r1
 800331a:	b2db      	uxtb	r3, r3
 800331c:	b25b      	sxtb	r3, r3
 800331e:	4323      	orrs	r3, r4
 8003320:	b25b      	sxtb	r3, r3
 8003322:	b2da      	uxtb	r2, r3
 8003324:	1d3b      	adds	r3, r7, #4
 8003326:	70da      	strb	r2, [r3, #3]

	HAL_I2C_Master_Transmit(&hi2c1, DS3231_MASTER_ADDRESS,(uint8_t *)temp, 4, 10);
 8003328:	1d3a      	adds	r2, r7, #4
 800332a:	4806      	ldr	r0, [pc, #24]	; (8003344 <_Z14write_time_i2cv+0xb8>)
 800332c:	230a      	movs	r3, #10
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	2304      	movs	r3, #4
 8003332:	21d1      	movs	r1, #209	; 0xd1
 8003334:	f001 f968 	bl	8004608 <HAL_I2C_Master_Transmit>
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b003      	add	sp, #12
 800333e:	bd90      	pop	{r4, r7, pc}
 8003340:	20000058 	.word	0x20000058
 8003344:	20000088 	.word	0x20000088

08003348 <_Z13read_date_i2cv>:

/**
 * @brief function to read date information from RTC info RAM
 * store read date in time_struct data_from_RTC
 */
void read_date_i2c(void){
 8003348:	b590      	push	{r4, r7, lr}
 800334a:	b085      	sub	sp, #20
 800334c:	af02      	add	r7, sp, #8
	uint8_t temp[4];
	temp[0] = ADDR_DAY;	//start address of read operation
 800334e:	1d3b      	adds	r3, r7, #4
 8003350:	2203      	movs	r2, #3
 8003352:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&hi2c1, DS3231_MASTER_ADDRESS, (uint8_t *)temp, 1, 10);
 8003354:	1d3a      	adds	r2, r7, #4
 8003356:	4839      	ldr	r0, [pc, #228]	; (800343c <_Z13read_date_i2cv+0xf4>)
 8003358:	230a      	movs	r3, #10
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	2301      	movs	r3, #1
 800335e:	21d1      	movs	r1, #209	; 0xd1
 8003360:	f001 f952 	bl	8004608 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, DS3231_SLAVE_ADDRESS, (uint8_t *)temp, 4, 10);
 8003364:	1d3a      	adds	r2, r7, #4
 8003366:	4835      	ldr	r0, [pc, #212]	; (800343c <_Z13read_date_i2cv+0xf4>)
 8003368:	230a      	movs	r3, #10
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	2304      	movs	r3, #4
 800336e:	21d0      	movs	r1, #208	; 0xd0
 8003370:	f001 fa52 	bl	8004818 <HAL_I2C_Master_Receive>

	data_from_RTC.day = temp[0];
 8003374:	1d3b      	adds	r3, r7, #4
 8003376:	781a      	ldrb	r2, [r3, #0]
 8003378:	4b31      	ldr	r3, [pc, #196]	; (8003440 <_Z13read_date_i2cv+0xf8>)
 800337a:	70da      	strb	r2, [r3, #3]
	data_from_RTC.date = ((temp[1]&0x30)>>4)*10 + (temp[1]&0x0f);
 800337c:	1d3b      	adds	r3, r7, #4
 800337e:	785b      	ldrb	r3, [r3, #1]
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2203      	movs	r2, #3
 8003386:	4013      	ands	r3, r2
 8003388:	b2db      	uxtb	r3, r3
 800338a:	1c1a      	adds	r2, r3, #0
 800338c:	0092      	lsls	r2, r2, #2
 800338e:	18d3      	adds	r3, r2, r3
 8003390:	18db      	adds	r3, r3, r3
 8003392:	b2da      	uxtb	r2, r3
 8003394:	1d3b      	adds	r3, r7, #4
 8003396:	785b      	ldrb	r3, [r3, #1]
 8003398:	210f      	movs	r1, #15
 800339a:	400b      	ands	r3, r1
 800339c:	b2db      	uxtb	r3, r3
 800339e:	18d3      	adds	r3, r2, r3
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	4b27      	ldr	r3, [pc, #156]	; (8003440 <_Z13read_date_i2cv+0xf8>)
 80033a4:	711a      	strb	r2, [r3, #4]
	data_from_RTC.month = ((temp[2]&0x10)>>4)*10 + (temp[2]&0x0f);
 80033a6:	1d3b      	adds	r3, r7, #4
 80033a8:	789b      	ldrb	r3, [r3, #2]
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2201      	movs	r2, #1
 80033b0:	4013      	ands	r3, r2
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	1c1a      	adds	r2, r3, #0
 80033b6:	0092      	lsls	r2, r2, #2
 80033b8:	18d3      	adds	r3, r2, r3
 80033ba:	18db      	adds	r3, r3, r3
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	1d3b      	adds	r3, r7, #4
 80033c0:	789b      	ldrb	r3, [r3, #2]
 80033c2:	210f      	movs	r1, #15
 80033c4:	400b      	ands	r3, r1
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	18d3      	adds	r3, r2, r3
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	4b1c      	ldr	r3, [pc, #112]	; (8003440 <_Z13read_date_i2cv+0xf8>)
 80033ce:	715a      	strb	r2, [r3, #5]
	data_from_RTC.century = (temp[2] & 0x80) >> 7;	//if century == 1 --> year is bigger that 2000
 80033d0:	1d3b      	adds	r3, r7, #4
 80033d2:	789b      	ldrb	r3, [r3, #2]
 80033d4:	b25b      	sxtb	r3, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	09db      	lsrs	r3, r3, #7
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	4b18      	ldr	r3, [pc, #96]	; (8003440 <_Z13read_date_i2cv+0xf8>)
 80033de:	721a      	strb	r2, [r3, #8]
	data_from_RTC.year = 1900 + (data_from_RTC.century * 100);
 80033e0:	4b17      	ldr	r3, [pc, #92]	; (8003440 <_Z13read_date_i2cv+0xf8>)
 80033e2:	7a1b      	ldrb	r3, [r3, #8]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2264      	movs	r2, #100	; 0x64
 80033e8:	4353      	muls	r3, r2
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	4a15      	ldr	r2, [pc, #84]	; (8003444 <_Z13read_date_i2cv+0xfc>)
 80033ee:	4694      	mov	ip, r2
 80033f0:	4463      	add	r3, ip
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	4b12      	ldr	r3, [pc, #72]	; (8003440 <_Z13read_date_i2cv+0xf8>)
 80033f6:	80da      	strh	r2, [r3, #6]
	data_from_RTC.year = data_from_RTC.year + (((temp[3]&0xf0)>>4)*10) + ((temp[3]&0x0f)%10);
 80033f8:	4b11      	ldr	r3, [pc, #68]	; (8003440 <_Z13read_date_i2cv+0xf8>)
 80033fa:	88da      	ldrh	r2, [r3, #6]
 80033fc:	1d3b      	adds	r3, r7, #4
 80033fe:	78db      	ldrb	r3, [r3, #3]
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	b2db      	uxtb	r3, r3
 8003404:	b29b      	uxth	r3, r3
 8003406:	1c19      	adds	r1, r3, #0
 8003408:	0089      	lsls	r1, r1, #2
 800340a:	18cb      	adds	r3, r1, r3
 800340c:	18db      	adds	r3, r3, r3
 800340e:	b29b      	uxth	r3, r3
 8003410:	18d3      	adds	r3, r2, r3
 8003412:	b29c      	uxth	r4, r3
 8003414:	1d3b      	adds	r3, r7, #4
 8003416:	78db      	ldrb	r3, [r3, #3]
 8003418:	220f      	movs	r2, #15
 800341a:	4013      	ands	r3, r2
 800341c:	b2db      	uxtb	r3, r3
 800341e:	210a      	movs	r1, #10
 8003420:	0018      	movs	r0, r3
 8003422:	f7fc fef7 	bl	8000214 <__aeabi_uidivmod>
 8003426:	000b      	movs	r3, r1
 8003428:	b2db      	uxtb	r3, r3
 800342a:	b29b      	uxth	r3, r3
 800342c:	18e3      	adds	r3, r4, r3
 800342e:	b29a      	uxth	r2, r3
 8003430:	4b03      	ldr	r3, [pc, #12]	; (8003440 <_Z13read_date_i2cv+0xf8>)
 8003432:	80da      	strh	r2, [r3, #6]

	//check for summer time
}
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	b003      	add	sp, #12
 800343a:	bd90      	pop	{r4, r7, pc}
 800343c:	20000088 	.word	0x20000088
 8003440:	2000004c 	.word	0x2000004c
 8003444:	0000076c 	.word	0x0000076c

08003448 <_Z14write_date_i2cv>:

/**
 * @brief function to write date information from RAM into RTC
 * read data from data_to_RTC and transfer to RTC
 */
void write_date_i2c(void){
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b085      	sub	sp, #20
 800344c:	af02      	add	r7, sp, #8
	uint8_t temp[5]={0};
 800344e:	003b      	movs	r3, r7
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	2200      	movs	r2, #0
 8003456:	711a      	strb	r2, [r3, #4]

	//convert from summer time

	temp[0] = ADDR_DAY;	//start address for write operation
 8003458:	003b      	movs	r3, r7
 800345a:	2203      	movs	r2, #3
 800345c:	701a      	strb	r2, [r3, #0]
	temp[1] = data_to_RTC.day;
 800345e:	4b35      	ldr	r3, [pc, #212]	; (8003534 <_Z14write_date_i2cv+0xec>)
 8003460:	78da      	ldrb	r2, [r3, #3]
 8003462:	003b      	movs	r3, r7
 8003464:	705a      	strb	r2, [r3, #1]
	temp[2] = ((data_to_RTC.date/10)<<4)|data_to_RTC.date%10;
 8003466:	4b33      	ldr	r3, [pc, #204]	; (8003534 <_Z14write_date_i2cv+0xec>)
 8003468:	791b      	ldrb	r3, [r3, #4]
 800346a:	210a      	movs	r1, #10
 800346c:	0018      	movs	r0, r3
 800346e:	f7fc fe4b 	bl	8000108 <__udivsi3>
 8003472:	0003      	movs	r3, r0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	b25c      	sxtb	r4, r3
 800347a:	4b2e      	ldr	r3, [pc, #184]	; (8003534 <_Z14write_date_i2cv+0xec>)
 800347c:	791b      	ldrb	r3, [r3, #4]
 800347e:	210a      	movs	r1, #10
 8003480:	0018      	movs	r0, r3
 8003482:	f7fc fec7 	bl	8000214 <__aeabi_uidivmod>
 8003486:	000b      	movs	r3, r1
 8003488:	b2db      	uxtb	r3, r3
 800348a:	b25b      	sxtb	r3, r3
 800348c:	4323      	orrs	r3, r4
 800348e:	b25b      	sxtb	r3, r3
 8003490:	b2da      	uxtb	r2, r3
 8003492:	003b      	movs	r3, r7
 8003494:	709a      	strb	r2, [r3, #2]
	temp[3] = ((data_to_RTC.month/10)<<4)|data_to_RTC.month%10 | (data_to_RTC.year/2000)<<7;
 8003496:	4b27      	ldr	r3, [pc, #156]	; (8003534 <_Z14write_date_i2cv+0xec>)
 8003498:	795b      	ldrb	r3, [r3, #5]
 800349a:	210a      	movs	r1, #10
 800349c:	0018      	movs	r0, r3
 800349e:	f7fc fe33 	bl	8000108 <__udivsi3>
 80034a2:	0003      	movs	r3, r0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	b25c      	sxtb	r4, r3
 80034aa:	4b22      	ldr	r3, [pc, #136]	; (8003534 <_Z14write_date_i2cv+0xec>)
 80034ac:	795b      	ldrb	r3, [r3, #5]
 80034ae:	210a      	movs	r1, #10
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7fc feaf 	bl	8000214 <__aeabi_uidivmod>
 80034b6:	000b      	movs	r3, r1
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	b25b      	sxtb	r3, r3
 80034bc:	4323      	orrs	r3, r4
 80034be:	b25c      	sxtb	r4, r3
 80034c0:	4b1c      	ldr	r3, [pc, #112]	; (8003534 <_Z14write_date_i2cv+0xec>)
 80034c2:	88db      	ldrh	r3, [r3, #6]
 80034c4:	22fa      	movs	r2, #250	; 0xfa
 80034c6:	00d1      	lsls	r1, r2, #3
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7fc fe1d 	bl	8000108 <__udivsi3>
 80034ce:	0003      	movs	r3, r0
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	01db      	lsls	r3, r3, #7
 80034d4:	b25b      	sxtb	r3, r3
 80034d6:	4323      	orrs	r3, r4
 80034d8:	b25b      	sxtb	r3, r3
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	003b      	movs	r3, r7
 80034de:	70da      	strb	r2, [r3, #3]
	temp[4] = ((data_to_RTC.year %100) / 10)<<4 | data_to_RTC.year%10;
 80034e0:	4b14      	ldr	r3, [pc, #80]	; (8003534 <_Z14write_date_i2cv+0xec>)
 80034e2:	88db      	ldrh	r3, [r3, #6]
 80034e4:	2164      	movs	r1, #100	; 0x64
 80034e6:	0018      	movs	r0, r3
 80034e8:	f7fc fe94 	bl	8000214 <__aeabi_uidivmod>
 80034ec:	000b      	movs	r3, r1
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	210a      	movs	r1, #10
 80034f2:	0018      	movs	r0, r3
 80034f4:	f7fc fe08 	bl	8000108 <__udivsi3>
 80034f8:	0003      	movs	r3, r0
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	b25c      	sxtb	r4, r3
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <_Z14write_date_i2cv+0xec>)
 8003502:	88db      	ldrh	r3, [r3, #6]
 8003504:	210a      	movs	r1, #10
 8003506:	0018      	movs	r0, r3
 8003508:	f7fc fe84 	bl	8000214 <__aeabi_uidivmod>
 800350c:	000b      	movs	r3, r1
 800350e:	b29b      	uxth	r3, r3
 8003510:	b25b      	sxtb	r3, r3
 8003512:	4323      	orrs	r3, r4
 8003514:	b25b      	sxtb	r3, r3
 8003516:	b2da      	uxtb	r2, r3
 8003518:	003b      	movs	r3, r7
 800351a:	711a      	strb	r2, [r3, #4]

	HAL_I2C_Master_Transmit(&hi2c1, DS3231_MASTER_ADDRESS, (uint8_t *)temp, 5, 10);
 800351c:	003a      	movs	r2, r7
 800351e:	4806      	ldr	r0, [pc, #24]	; (8003538 <_Z14write_date_i2cv+0xf0>)
 8003520:	230a      	movs	r3, #10
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	2305      	movs	r3, #5
 8003526:	21d1      	movs	r1, #209	; 0xd1
 8003528:	f001 f86e 	bl	8004608 <HAL_I2C_Master_Transmit>
}
 800352c:	46c0      	nop			; (mov r8, r8)
 800352e:	46bd      	mov	sp, r7
 8003530:	b003      	add	sp, #12
 8003532:	bd90      	pop	{r4, r7, pc}
 8003534:	20000058 	.word	0x20000058
 8003538:	20000088 	.word	0x20000088

0800353c <_Z9dls_checkb>:
 *  @brief function checks Flag, if day light saving is applied, applies if necessary, re/sets Flag if necessary
 *  @param flag_only: functions only alters the flag and not the actual time value inside the RTC
 *  @info: If DLS applies, the hour byte in the RTC is increased by one and the change is signalized by turning the
 *  ALARM 1 SECONDS Byte to 1 - this bit is used for the DLS FLAG (1 = DLS is applied, 0 = DLS is not applied)
 */
void dls_check(bool flag_only){
 800353c:	b590      	push	{r4, r7, lr}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	0002      	movs	r2, r0
 8003544:	1dfb      	adds	r3, r7, #7
 8003546:	701a      	strb	r2, [r3, #0]
	static bool dls_needed = false;
	static bool dls_active = false;
	uint8_t offset = 0;			//add hysterese behaviour for fall, when clock switches from 03:00 to 02:00 - code will reactivate dls, since dls is deactivated altough it should be activated based on time+date
 8003548:	240f      	movs	r4, #15
 800354a:	193b      	adds	r3, r7, r4
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]

	//read DLS bit
	dls_active = read_i2c_single(ADDR_A1SECONDS);
 8003550:	2007      	movs	r0, #7
 8003552:	f000 f8db 	bl	800370c <_Z15read_i2c_singleh>
 8003556:	0003      	movs	r3, r0
 8003558:	1e5a      	subs	r2, r3, #1
 800355a:	4193      	sbcs	r3, r2
 800355c:	b2da      	uxtb	r2, r3
 800355e:	4b58      	ldr	r3, [pc, #352]	; (80036c0 <_Z9dls_checkb+0x184>)
 8003560:	701a      	strb	r2, [r3, #0]
	if(dls_active==0x1){
 8003562:	4b57      	ldr	r3, [pc, #348]	; (80036c0 <_Z9dls_checkb+0x184>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d106      	bne.n	8003578 <_Z9dls_checkb+0x3c>
		offset = 1;
 800356a:	193b      	adds	r3, r7, r4
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
		data_from_RTC.summer_time = true;
 8003570:	4b54      	ldr	r3, [pc, #336]	; (80036c4 <_Z9dls_checkb+0x188>)
 8003572:	2201      	movs	r2, #1
 8003574:	725a      	strb	r2, [r3, #9]
 8003576:	e006      	b.n	8003586 <_Z9dls_checkb+0x4a>
	}
	else{
		offset = 0;
 8003578:	230f      	movs	r3, #15
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
		data_from_RTC.summer_time = false;
 8003580:	4b50      	ldr	r3, [pc, #320]	; (80036c4 <_Z9dls_checkb+0x188>)
 8003582:	2200      	movs	r2, #0
 8003584:	725a      	strb	r2, [r3, #9]
	}
	//check date + time: Should DLS be active?
	if((data_from_RTC.month == 3 && data_from_RTC.date>=25 && data_from_RTC.day==7 && data_from_RTC.hours>=2 )	//March, last sunday, later than 02:00
 8003586:	4b4f      	ldr	r3, [pc, #316]	; (80036c4 <_Z9dls_checkb+0x188>)
 8003588:	795b      	ldrb	r3, [r3, #5]
 800358a:	2b03      	cmp	r3, #3
 800358c:	d10b      	bne.n	80035a6 <_Z9dls_checkb+0x6a>
 800358e:	4b4d      	ldr	r3, [pc, #308]	; (80036c4 <_Z9dls_checkb+0x188>)
 8003590:	791b      	ldrb	r3, [r3, #4]
 8003592:	2b18      	cmp	r3, #24
 8003594:	d907      	bls.n	80035a6 <_Z9dls_checkb+0x6a>
 8003596:	4b4b      	ldr	r3, [pc, #300]	; (80036c4 <_Z9dls_checkb+0x188>)
 8003598:	78db      	ldrb	r3, [r3, #3]
 800359a:	2b07      	cmp	r3, #7
 800359c:	d103      	bne.n	80035a6 <_Z9dls_checkb+0x6a>
 800359e:	4b49      	ldr	r3, [pc, #292]	; (80036c4 <_Z9dls_checkb+0x188>)
 80035a0:	789b      	ldrb	r3, [r3, #2]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d844      	bhi.n	8003630 <_Z9dls_checkb+0xf4>
	 || (data_from_RTC.month == 3 && data_from_RTC.day<=6 && (data_from_RTC.date-data_from_RTC.day)>=25 )		//March after last sunday
 80035a6:	4b47      	ldr	r3, [pc, #284]	; (80036c4 <_Z9dls_checkb+0x188>)
 80035a8:	795b      	ldrb	r3, [r3, #5]
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d10b      	bne.n	80035c6 <_Z9dls_checkb+0x8a>
 80035ae:	4b45      	ldr	r3, [pc, #276]	; (80036c4 <_Z9dls_checkb+0x188>)
 80035b0:	78db      	ldrb	r3, [r3, #3]
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	d807      	bhi.n	80035c6 <_Z9dls_checkb+0x8a>
 80035b6:	4b43      	ldr	r3, [pc, #268]	; (80036c4 <_Z9dls_checkb+0x188>)
 80035b8:	791b      	ldrb	r3, [r3, #4]
 80035ba:	001a      	movs	r2, r3
 80035bc:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <_Z9dls_checkb+0x188>)
 80035be:	78db      	ldrb	r3, [r3, #3]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b18      	cmp	r3, #24
 80035c4:	dc34      	bgt.n	8003630 <_Z9dls_checkb+0xf4>
	 || (data_from_RTC.month >= 4 && data_from_RTC.month <=9)													//April - September
 80035c6:	4b3f      	ldr	r3, [pc, #252]	; (80036c4 <_Z9dls_checkb+0x188>)
 80035c8:	795b      	ldrb	r3, [r3, #5]
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d903      	bls.n	80035d6 <_Z9dls_checkb+0x9a>
 80035ce:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <_Z9dls_checkb+0x188>)
 80035d0:	795b      	ldrb	r3, [r3, #5]
 80035d2:	2b09      	cmp	r3, #9
 80035d4:	d92c      	bls.n	8003630 <_Z9dls_checkb+0xf4>
	 || (data_from_RTC.month == 10 && ( (((data_from_RTC.date-data_from_RTC.day)<=24)&& data_from_RTC.day<=6) || (data_from_RTC.day==7 && data_from_RTC.date<=24)))
 80035d6:	4b3b      	ldr	r3, [pc, #236]	; (80036c4 <_Z9dls_checkb+0x188>)
 80035d8:	795b      	ldrb	r3, [r3, #5]
 80035da:	2b0a      	cmp	r3, #10
 80035dc:	d113      	bne.n	8003606 <_Z9dls_checkb+0xca>
 80035de:	4b39      	ldr	r3, [pc, #228]	; (80036c4 <_Z9dls_checkb+0x188>)
 80035e0:	791b      	ldrb	r3, [r3, #4]
 80035e2:	001a      	movs	r2, r3
 80035e4:	4b37      	ldr	r3, [pc, #220]	; (80036c4 <_Z9dls_checkb+0x188>)
 80035e6:	78db      	ldrb	r3, [r3, #3]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b18      	cmp	r3, #24
 80035ec:	dc03      	bgt.n	80035f6 <_Z9dls_checkb+0xba>
 80035ee:	4b35      	ldr	r3, [pc, #212]	; (80036c4 <_Z9dls_checkb+0x188>)
 80035f0:	78db      	ldrb	r3, [r3, #3]
 80035f2:	2b06      	cmp	r3, #6
 80035f4:	d91c      	bls.n	8003630 <_Z9dls_checkb+0xf4>
 80035f6:	4b33      	ldr	r3, [pc, #204]	; (80036c4 <_Z9dls_checkb+0x188>)
 80035f8:	78db      	ldrb	r3, [r3, #3]
 80035fa:	2b07      	cmp	r3, #7
 80035fc:	d103      	bne.n	8003606 <_Z9dls_checkb+0xca>
 80035fe:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <_Z9dls_checkb+0x188>)
 8003600:	791b      	ldrb	r3, [r3, #4]
 8003602:	2b18      	cmp	r3, #24
 8003604:	d914      	bls.n	8003630 <_Z9dls_checkb+0xf4>
	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	//October till saturday befor last sunday
	 || (data_from_RTC.month == 10 && data_from_RTC.day == 7 && data_from_RTC.date >=25 && data_from_RTC.hours<=(1+offset))){
 8003606:	4b2f      	ldr	r3, [pc, #188]	; (80036c4 <_Z9dls_checkb+0x188>)
 8003608:	795b      	ldrb	r3, [r3, #5]
 800360a:	2b0a      	cmp	r3, #10
 800360c:	d114      	bne.n	8003638 <_Z9dls_checkb+0xfc>
 800360e:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <_Z9dls_checkb+0x188>)
 8003610:	78db      	ldrb	r3, [r3, #3]
 8003612:	2b07      	cmp	r3, #7
 8003614:	d110      	bne.n	8003638 <_Z9dls_checkb+0xfc>
 8003616:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <_Z9dls_checkb+0x188>)
 8003618:	791b      	ldrb	r3, [r3, #4]
 800361a:	2b18      	cmp	r3, #24
 800361c:	d90c      	bls.n	8003638 <_Z9dls_checkb+0xfc>
 800361e:	4b29      	ldr	r3, [pc, #164]	; (80036c4 <_Z9dls_checkb+0x188>)
 8003620:	789b      	ldrb	r3, [r3, #2]
 8003622:	001a      	movs	r2, r3
 8003624:	230f      	movs	r3, #15
 8003626:	18fb      	adds	r3, r7, r3
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	3301      	adds	r3, #1
 800362c:	429a      	cmp	r2, r3
 800362e:	dc03      	bgt.n	8003638 <_Z9dls_checkb+0xfc>
	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	//October last sunday till 02:00
		dls_needed = true;
 8003630:	4b25      	ldr	r3, [pc, #148]	; (80036c8 <_Z9dls_checkb+0x18c>)
 8003632:	2201      	movs	r2, #1
 8003634:	701a      	strb	r2, [r3, #0]
 8003636:	e002      	b.n	800363e <_Z9dls_checkb+0x102>
	}
	else{
		dls_needed = false;
 8003638:	4b23      	ldr	r3, [pc, #140]	; (80036c8 <_Z9dls_checkb+0x18c>)
 800363a:	2200      	movs	r2, #0
 800363c:	701a      	strb	r2, [r3, #0]
	}

	//check if DLS bit should be applied: is DLS active?
	if(dls_active == false && dls_needed == true){
 800363e:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <_Z9dls_checkb+0x184>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d119      	bne.n	800367a <_Z9dls_checkb+0x13e>
 8003646:	4b20      	ldr	r3, [pc, #128]	; (80036c8 <_Z9dls_checkb+0x18c>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d115      	bne.n	800367a <_Z9dls_checkb+0x13e>
		if(flag_only==false){
 800364e:	1dfb      	adds	r3, r7, #7
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10d      	bne.n	8003672 <_Z9dls_checkb+0x136>
			write_i2c_single(ADDR_HOURS, data_from_RTC.hours+1);
 8003656:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <_Z9dls_checkb+0x188>)
 8003658:	789b      	ldrb	r3, [r3, #2]
 800365a:	3301      	adds	r3, #1
 800365c:	b2db      	uxtb	r3, r3
 800365e:	0019      	movs	r1, r3
 8003660:	2002      	movs	r0, #2
 8003662:	f000 f833 	bl	80036cc <_Z16write_i2c_singlehh>
			data_from_RTC.hours++;		//alter local variable, so no new read is required before new value is displayed
 8003666:	4b17      	ldr	r3, [pc, #92]	; (80036c4 <_Z9dls_checkb+0x188>)
 8003668:	789b      	ldrb	r3, [r3, #2]
 800366a:	3301      	adds	r3, #1
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4b15      	ldr	r3, [pc, #84]	; (80036c4 <_Z9dls_checkb+0x188>)
 8003670:	709a      	strb	r2, [r3, #2]
			//increase RTC by one hour - should only happen when summer is reached, not through time set
		}
		write_i2c_single(ADDR_A1SECONDS, 0x1);	//set DLS FLAG
 8003672:	2101      	movs	r1, #1
 8003674:	2007      	movs	r0, #7
 8003676:	f000 f829 	bl	80036cc <_Z16write_i2c_singlehh>
	}
	if(dls_active == true && dls_needed == false){
 800367a:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <_Z9dls_checkb+0x184>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d119      	bne.n	80036b6 <_Z9dls_checkb+0x17a>
 8003682:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <_Z9dls_checkb+0x18c>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d115      	bne.n	80036b6 <_Z9dls_checkb+0x17a>
		if(flag_only == false){
 800368a:	1dfb      	adds	r3, r7, #7
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10d      	bne.n	80036ae <_Z9dls_checkb+0x172>
			write_i2c_single(ADDR_HOURS, data_from_RTC.hours-1);
 8003692:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <_Z9dls_checkb+0x188>)
 8003694:	789b      	ldrb	r3, [r3, #2]
 8003696:	3b01      	subs	r3, #1
 8003698:	b2db      	uxtb	r3, r3
 800369a:	0019      	movs	r1, r3
 800369c:	2002      	movs	r0, #2
 800369e:	f000 f815 	bl	80036cc <_Z16write_i2c_singlehh>
			data_from_RTC.hours--;
 80036a2:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <_Z9dls_checkb+0x188>)
 80036a4:	789b      	ldrb	r3, [r3, #2]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <_Z9dls_checkb+0x188>)
 80036ac:	709a      	strb	r2, [r3, #2]
			//decrease RTC by one hour - should only happen when winter is reached, not through time set
		}
		write_i2c_single(ADDR_A1SECONDS, 0x0);	//reset DLS FLAG
 80036ae:	2100      	movs	r1, #0
 80036b0:	2007      	movs	r0, #7
 80036b2:	f000 f80b 	bl	80036cc <_Z16write_i2c_singlehh>
	}
}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	46bd      	mov	sp, r7
 80036ba:	b005      	add	sp, #20
 80036bc:	bd90      	pop	{r4, r7, pc}
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	200005de 	.word	0x200005de
 80036c4:	2000004c 	.word	0x2000004c
 80036c8:	200005dd 	.word	0x200005dd

080036cc <_Z16write_i2c_singlehh>:
/**
 * @brief write single register
 * @param cmd: register address to which the data should be written
 * @param data: 8bit data which should be written to the register
 */
void write_i2c_single(uint8_t cmd, uint8_t data){
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	0002      	movs	r2, r0
 80036d4:	1dfb      	adds	r3, r7, #7
 80036d6:	701a      	strb	r2, [r3, #0]
 80036d8:	1dbb      	adds	r3, r7, #6
 80036da:	1c0a      	adds	r2, r1, #0
 80036dc:	701a      	strb	r2, [r3, #0]
	uint8_t data_t[2];
	data_t[0] = cmd;
 80036de:	210c      	movs	r1, #12
 80036e0:	187b      	adds	r3, r7, r1
 80036e2:	1dfa      	adds	r2, r7, #7
 80036e4:	7812      	ldrb	r2, [r2, #0]
 80036e6:	701a      	strb	r2, [r3, #0]
	data_t[1] = data;
 80036e8:	187b      	adds	r3, r7, r1
 80036ea:	1dba      	adds	r2, r7, #6
 80036ec:	7812      	ldrb	r2, [r2, #0]
 80036ee:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_MASTER_ADDRESS, (uint8_t *)data_t, 2, 100);
 80036f0:	187a      	adds	r2, r7, r1
 80036f2:	4805      	ldr	r0, [pc, #20]	; (8003708 <_Z16write_i2c_singlehh+0x3c>)
 80036f4:	2364      	movs	r3, #100	; 0x64
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	2302      	movs	r3, #2
 80036fa:	21d1      	movs	r1, #209	; 0xd1
 80036fc:	f000 ff84 	bl	8004608 <HAL_I2C_Master_Transmit>
}
 8003700:	46c0      	nop			; (mov r8, r8)
 8003702:	46bd      	mov	sp, r7
 8003704:	b004      	add	sp, #16
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000088 	.word	0x20000088

0800370c <_Z15read_i2c_singleh>:
/**
 * @brief function to read one byte of data from specified register
 * @param cmd address which content should be read
 * @return data which is read from the specified register
 */
uint8_t read_i2c_single(uint8_t cmd){
 800370c:	b590      	push	{r4, r7, lr}
 800370e:	b087      	sub	sp, #28
 8003710:	af02      	add	r7, sp, #8
 8003712:	0002      	movs	r2, r0
 8003714:	1dfb      	adds	r3, r7, #7
 8003716:	701a      	strb	r2, [r3, #0]
	uint8_t data_t[1];
	data_t[0] = cmd;
 8003718:	210c      	movs	r1, #12
 800371a:	187b      	adds	r3, r7, r1
 800371c:	1dfa      	adds	r2, r7, #7
 800371e:	7812      	ldrb	r2, [r2, #0]
 8003720:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_MASTER_ADDRESS, (uint8_t *)data_t, 1, 10);
 8003722:	000c      	movs	r4, r1
 8003724:	193a      	adds	r2, r7, r4
 8003726:	480a      	ldr	r0, [pc, #40]	; (8003750 <_Z15read_i2c_singleh+0x44>)
 8003728:	230a      	movs	r3, #10
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	2301      	movs	r3, #1
 800372e:	21d1      	movs	r1, #209	; 0xd1
 8003730:	f000 ff6a 	bl	8004608 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, DS3231_SLAVE_ADDRESS, (uint8_t *)data_t, 1, 10);
 8003734:	193a      	adds	r2, r7, r4
 8003736:	4806      	ldr	r0, [pc, #24]	; (8003750 <_Z15read_i2c_singleh+0x44>)
 8003738:	230a      	movs	r3, #10
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	2301      	movs	r3, #1
 800373e:	21d0      	movs	r1, #208	; 0xd0
 8003740:	f001 f86a 	bl	8004818 <HAL_I2C_Master_Receive>
	return data_t[0];
 8003744:	193b      	adds	r3, r7, r4
 8003746:	781b      	ldrb	r3, [r3, #0]
}
 8003748:	0018      	movs	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	b005      	add	sp, #20
 800374e:	bd90      	pop	{r4, r7, pc}
 8003750:	20000088 	.word	0x20000088

08003754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003754:	480d      	ldr	r0, [pc, #52]	; (800378c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003756:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003758:	f7ff fb64 	bl	8002e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800375c:	480c      	ldr	r0, [pc, #48]	; (8003790 <LoopForever+0x6>)
  ldr r1, =_edata
 800375e:	490d      	ldr	r1, [pc, #52]	; (8003794 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003760:	4a0d      	ldr	r2, [pc, #52]	; (8003798 <LoopForever+0xe>)
  movs r3, #0
 8003762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003764:	e002      	b.n	800376c <LoopCopyDataInit>

08003766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800376a:	3304      	adds	r3, #4

0800376c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800376c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800376e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003770:	d3f9      	bcc.n	8003766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003772:	4a0a      	ldr	r2, [pc, #40]	; (800379c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003774:	4c0a      	ldr	r4, [pc, #40]	; (80037a0 <LoopForever+0x16>)
  movs r3, #0
 8003776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003778:	e001      	b.n	800377e <LoopFillZerobss>

0800377a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800377a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800377c:	3204      	adds	r2, #4

0800377e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800377e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003780:	d3fb      	bcc.n	800377a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003782:	f004 f817 	bl	80077b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003786:	f7fd fb65 	bl	8000e54 <main>

0800378a <LoopForever>:

LoopForever:
    b LoopForever
 800378a:	e7fe      	b.n	800378a <LoopForever>
   ldr   r0, =_estack
 800378c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003794:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8003798:	08007868 	.word	0x08007868
  ldr r2, =_sbss
 800379c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80037a0:	200005fc 	.word	0x200005fc

080037a4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037a4:	e7fe      	b.n	80037a4 <ADC1_COMP_IRQHandler>
	...

080037a8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037ae:	1dfb      	adds	r3, r7, #7
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_Init+0x3c>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <HAL_Init+0x3c>)
 80037ba:	2140      	movs	r1, #64	; 0x40
 80037bc:	430a      	orrs	r2, r1
 80037be:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037c0:	2003      	movs	r0, #3
 80037c2:	f000 f811 	bl	80037e8 <HAL_InitTick>
 80037c6:	1e03      	subs	r3, r0, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80037ca:	1dfb      	adds	r3, r7, #7
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	e001      	b.n	80037d6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037d2:	f7ff fae1 	bl	8002d98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037d6:	1dfb      	adds	r3, r7, #7
 80037d8:	781b      	ldrb	r3, [r3, #0]
}
 80037da:	0018      	movs	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	b002      	add	sp, #8
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	40022000 	.word	0x40022000

080037e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037f0:	4b14      	ldr	r3, [pc, #80]	; (8003844 <HAL_InitTick+0x5c>)
 80037f2:	681c      	ldr	r4, [r3, #0]
 80037f4:	4b14      	ldr	r3, [pc, #80]	; (8003848 <HAL_InitTick+0x60>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	0019      	movs	r1, r3
 80037fa:	23fa      	movs	r3, #250	; 0xfa
 80037fc:	0098      	lsls	r0, r3, #2
 80037fe:	f7fc fc83 	bl	8000108 <__udivsi3>
 8003802:	0003      	movs	r3, r0
 8003804:	0019      	movs	r1, r3
 8003806:	0020      	movs	r0, r4
 8003808:	f7fc fc7e 	bl	8000108 <__udivsi3>
 800380c:	0003      	movs	r3, r0
 800380e:	0018      	movs	r0, r3
 8003810:	f000 f90b 	bl	8003a2a <HAL_SYSTICK_Config>
 8003814:	1e03      	subs	r3, r0, #0
 8003816:	d001      	beq.n	800381c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e00f      	b.n	800383c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b03      	cmp	r3, #3
 8003820:	d80b      	bhi.n	800383a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	2301      	movs	r3, #1
 8003826:	425b      	negs	r3, r3
 8003828:	2200      	movs	r2, #0
 800382a:	0018      	movs	r0, r3
 800382c:	f000 f8d8 	bl	80039e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_InitTick+0x64>)
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e000      	b.n	800383c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
}
 800383c:	0018      	movs	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	b003      	add	sp, #12
 8003842:	bd90      	pop	{r4, r7, pc}
 8003844:	20000048 	.word	0x20000048
 8003848:	20000068 	.word	0x20000068
 800384c:	20000064 	.word	0x20000064

08003850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_IncTick+0x1c>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	001a      	movs	r2, r3
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <HAL_IncTick+0x20>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	18d2      	adds	r2, r2, r3
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <HAL_IncTick+0x20>)
 8003862:	601a      	str	r2, [r3, #0]
}
 8003864:	46c0      	nop			; (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	20000068 	.word	0x20000068
 8003870:	200005e0 	.word	0x200005e0

08003874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  return uwTick;
 8003878:	4b02      	ldr	r3, [pc, #8]	; (8003884 <HAL_GetTick+0x10>)
 800387a:	681b      	ldr	r3, [r3, #0]
}
 800387c:	0018      	movs	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	200005e0 	.word	0x200005e0

08003888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	0002      	movs	r2, r0
 8003890:	1dfb      	adds	r3, r7, #7
 8003892:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003894:	1dfb      	adds	r3, r7, #7
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b7f      	cmp	r3, #127	; 0x7f
 800389a:	d809      	bhi.n	80038b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800389c:	1dfb      	adds	r3, r7, #7
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	001a      	movs	r2, r3
 80038a2:	231f      	movs	r3, #31
 80038a4:	401a      	ands	r2, r3
 80038a6:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <__NVIC_EnableIRQ+0x30>)
 80038a8:	2101      	movs	r1, #1
 80038aa:	4091      	lsls	r1, r2
 80038ac:	000a      	movs	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]
  }
}
 80038b0:	46c0      	nop			; (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b002      	add	sp, #8
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	e000e100 	.word	0xe000e100

080038bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038bc:	b590      	push	{r4, r7, lr}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	0002      	movs	r2, r0
 80038c4:	6039      	str	r1, [r7, #0]
 80038c6:	1dfb      	adds	r3, r7, #7
 80038c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038ca:	1dfb      	adds	r3, r7, #7
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b7f      	cmp	r3, #127	; 0x7f
 80038d0:	d828      	bhi.n	8003924 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038d2:	4a2f      	ldr	r2, [pc, #188]	; (8003990 <__NVIC_SetPriority+0xd4>)
 80038d4:	1dfb      	adds	r3, r7, #7
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	b25b      	sxtb	r3, r3
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	33c0      	adds	r3, #192	; 0xc0
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	589b      	ldr	r3, [r3, r2]
 80038e2:	1dfa      	adds	r2, r7, #7
 80038e4:	7812      	ldrb	r2, [r2, #0]
 80038e6:	0011      	movs	r1, r2
 80038e8:	2203      	movs	r2, #3
 80038ea:	400a      	ands	r2, r1
 80038ec:	00d2      	lsls	r2, r2, #3
 80038ee:	21ff      	movs	r1, #255	; 0xff
 80038f0:	4091      	lsls	r1, r2
 80038f2:	000a      	movs	r2, r1
 80038f4:	43d2      	mvns	r2, r2
 80038f6:	401a      	ands	r2, r3
 80038f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	019b      	lsls	r3, r3, #6
 80038fe:	22ff      	movs	r2, #255	; 0xff
 8003900:	401a      	ands	r2, r3
 8003902:	1dfb      	adds	r3, r7, #7
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	0018      	movs	r0, r3
 8003908:	2303      	movs	r3, #3
 800390a:	4003      	ands	r3, r0
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003910:	481f      	ldr	r0, [pc, #124]	; (8003990 <__NVIC_SetPriority+0xd4>)
 8003912:	1dfb      	adds	r3, r7, #7
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	b25b      	sxtb	r3, r3
 8003918:	089b      	lsrs	r3, r3, #2
 800391a:	430a      	orrs	r2, r1
 800391c:	33c0      	adds	r3, #192	; 0xc0
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003922:	e031      	b.n	8003988 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003924:	4a1b      	ldr	r2, [pc, #108]	; (8003994 <__NVIC_SetPriority+0xd8>)
 8003926:	1dfb      	adds	r3, r7, #7
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	0019      	movs	r1, r3
 800392c:	230f      	movs	r3, #15
 800392e:	400b      	ands	r3, r1
 8003930:	3b08      	subs	r3, #8
 8003932:	089b      	lsrs	r3, r3, #2
 8003934:	3306      	adds	r3, #6
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	18d3      	adds	r3, r2, r3
 800393a:	3304      	adds	r3, #4
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	1dfa      	adds	r2, r7, #7
 8003940:	7812      	ldrb	r2, [r2, #0]
 8003942:	0011      	movs	r1, r2
 8003944:	2203      	movs	r2, #3
 8003946:	400a      	ands	r2, r1
 8003948:	00d2      	lsls	r2, r2, #3
 800394a:	21ff      	movs	r1, #255	; 0xff
 800394c:	4091      	lsls	r1, r2
 800394e:	000a      	movs	r2, r1
 8003950:	43d2      	mvns	r2, r2
 8003952:	401a      	ands	r2, r3
 8003954:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	019b      	lsls	r3, r3, #6
 800395a:	22ff      	movs	r2, #255	; 0xff
 800395c:	401a      	ands	r2, r3
 800395e:	1dfb      	adds	r3, r7, #7
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	0018      	movs	r0, r3
 8003964:	2303      	movs	r3, #3
 8003966:	4003      	ands	r3, r0
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800396c:	4809      	ldr	r0, [pc, #36]	; (8003994 <__NVIC_SetPriority+0xd8>)
 800396e:	1dfb      	adds	r3, r7, #7
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	001c      	movs	r4, r3
 8003974:	230f      	movs	r3, #15
 8003976:	4023      	ands	r3, r4
 8003978:	3b08      	subs	r3, #8
 800397a:	089b      	lsrs	r3, r3, #2
 800397c:	430a      	orrs	r2, r1
 800397e:	3306      	adds	r3, #6
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	18c3      	adds	r3, r0, r3
 8003984:	3304      	adds	r3, #4
 8003986:	601a      	str	r2, [r3, #0]
}
 8003988:	46c0      	nop			; (mov r8, r8)
 800398a:	46bd      	mov	sp, r7
 800398c:	b003      	add	sp, #12
 800398e:	bd90      	pop	{r4, r7, pc}
 8003990:	e000e100 	.word	0xe000e100
 8003994:	e000ed00 	.word	0xe000ed00

08003998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	1e5a      	subs	r2, r3, #1
 80039a4:	2380      	movs	r3, #128	; 0x80
 80039a6:	045b      	lsls	r3, r3, #17
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d301      	bcc.n	80039b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ac:	2301      	movs	r3, #1
 80039ae:	e010      	b.n	80039d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039b0:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <SysTick_Config+0x44>)
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	3a01      	subs	r2, #1
 80039b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039b8:	2301      	movs	r3, #1
 80039ba:	425b      	negs	r3, r3
 80039bc:	2103      	movs	r1, #3
 80039be:	0018      	movs	r0, r3
 80039c0:	f7ff ff7c 	bl	80038bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <SysTick_Config+0x44>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ca:	4b04      	ldr	r3, [pc, #16]	; (80039dc <SysTick_Config+0x44>)
 80039cc:	2207      	movs	r2, #7
 80039ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	0018      	movs	r0, r3
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b002      	add	sp, #8
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	e000e010 	.word	0xe000e010

080039e0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	210f      	movs	r1, #15
 80039ec:	187b      	adds	r3, r7, r1
 80039ee:	1c02      	adds	r2, r0, #0
 80039f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	187b      	adds	r3, r7, r1
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	b25b      	sxtb	r3, r3
 80039fa:	0011      	movs	r1, r2
 80039fc:	0018      	movs	r0, r3
 80039fe:	f7ff ff5d 	bl	80038bc <__NVIC_SetPriority>
}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b004      	add	sp, #16
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	0002      	movs	r2, r0
 8003a12:	1dfb      	adds	r3, r7, #7
 8003a14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a16:	1dfb      	adds	r3, r7, #7
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	b25b      	sxtb	r3, r3
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f7ff ff33 	bl	8003888 <__NVIC_EnableIRQ>
}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	46bd      	mov	sp, r7
 8003a26:	b002      	add	sp, #8
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	0018      	movs	r0, r3
 8003a36:	f7ff ffaf 	bl	8003998 <SysTick_Config>
 8003a3a:	0003      	movs	r3, r0
}
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b002      	add	sp, #8
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e061      	b.n	8003b1a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a32      	ldr	r2, [pc, #200]	; (8003b24 <HAL_DMA_Init+0xe0>)
 8003a5c:	4694      	mov	ip, r2
 8003a5e:	4463      	add	r3, ip
 8003a60:	2114      	movs	r1, #20
 8003a62:	0018      	movs	r0, r3
 8003a64:	f7fc fb50 	bl	8000108 <__udivsi3>
 8003a68:	0003      	movs	r3, r0
 8003a6a:	009a      	lsls	r2, r3, #2
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a2d      	ldr	r2, [pc, #180]	; (8003b28 <HAL_DMA_Init+0xe4>)
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2225      	movs	r2, #37	; 0x25
 8003a7a:	2102      	movs	r1, #2
 8003a7c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4a28      	ldr	r2, [pc, #160]	; (8003b2c <HAL_DMA_Init+0xe8>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	2380      	movs	r3, #128	; 0x80
 8003aca:	01db      	lsls	r3, r3, #7
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d018      	beq.n	8003b02 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003ad0:	4b17      	ldr	r3, [pc, #92]	; (8003b30 <HAL_DMA_Init+0xec>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad8:	211c      	movs	r1, #28
 8003ada:	400b      	ands	r3, r1
 8003adc:	210f      	movs	r1, #15
 8003ade:	4099      	lsls	r1, r3
 8003ae0:	000b      	movs	r3, r1
 8003ae2:	43d9      	mvns	r1, r3
 8003ae4:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <HAL_DMA_Init+0xec>)
 8003ae6:	400a      	ands	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003aea:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <HAL_DMA_Init+0xec>)
 8003aec:	6819      	ldr	r1, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	201c      	movs	r0, #28
 8003af8:	4003      	ands	r3, r0
 8003afa:	409a      	lsls	r2, r3
 8003afc:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <HAL_DMA_Init+0xec>)
 8003afe:	430a      	orrs	r2, r1
 8003b00:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2225      	movs	r2, #37	; 0x25
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2224      	movs	r2, #36	; 0x24
 8003b14:	2100      	movs	r1, #0
 8003b16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	b004      	add	sp, #16
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	bffdfff8 	.word	0xbffdfff8
 8003b28:	40020000 	.word	0x40020000
 8003b2c:	ffff800f 	.word	0xffff800f
 8003b30:	400200a8 	.word	0x400200a8

08003b34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b42:	2317      	movs	r3, #23
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	2200      	movs	r2, #0
 8003b48:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2224      	movs	r2, #36	; 0x24
 8003b4e:	5c9b      	ldrb	r3, [r3, r2]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_DMA_Start_IT+0x24>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e04f      	b.n	8003bf8 <HAL_DMA_Start_IT+0xc4>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2224      	movs	r2, #36	; 0x24
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2225      	movs	r2, #37	; 0x25
 8003b64:	5c9b      	ldrb	r3, [r3, r2]
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d13a      	bne.n	8003be2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2225      	movs	r2, #37	; 0x25
 8003b70:	2102      	movs	r1, #2
 8003b72:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2101      	movs	r1, #1
 8003b86:	438a      	bics	r2, r1
 8003b88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	68b9      	ldr	r1, [r7, #8]
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f92a 	bl	8003dea <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	210e      	movs	r1, #14
 8003baa:	430a      	orrs	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	e00f      	b.n	8003bd0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2104      	movs	r1, #4
 8003bbc:	438a      	bics	r2, r1
 8003bbe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	210a      	movs	r1, #10
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2101      	movs	r1, #1
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	e007      	b.n	8003bf2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2224      	movs	r2, #36	; 0x24
 8003be6:	2100      	movs	r1, #0
 8003be8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bea:	2317      	movs	r3, #23
 8003bec:	18fb      	adds	r3, r7, r3
 8003bee:	2202      	movs	r2, #2
 8003bf0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8003bf2:	2317      	movs	r3, #23
 8003bf4:	18fb      	adds	r3, r7, r3
 8003bf6:	781b      	ldrb	r3, [r3, #0]
}
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b006      	add	sp, #24
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c08:	210f      	movs	r1, #15
 8003c0a:	187b      	adds	r3, r7, r1
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2225      	movs	r2, #37	; 0x25
 8003c14:	5c9b      	ldrb	r3, [r3, r2]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d006      	beq.n	8003c2a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2204      	movs	r2, #4
 8003c20:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c22:	187b      	adds	r3, r7, r1
 8003c24:	2201      	movs	r2, #1
 8003c26:	701a      	strb	r2, [r3, #0]
 8003c28:	e02a      	b.n	8003c80 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	210e      	movs	r1, #14
 8003c36:	438a      	bics	r2, r1
 8003c38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2101      	movs	r1, #1
 8003c46:	438a      	bics	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	221c      	movs	r2, #28
 8003c50:	401a      	ands	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	2101      	movs	r1, #1
 8003c58:	4091      	lsls	r1, r2
 8003c5a:	000a      	movs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2225      	movs	r2, #37	; 0x25
 8003c62:	2101      	movs	r1, #1
 8003c64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2224      	movs	r2, #36	; 0x24
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d004      	beq.n	8003c80 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	0010      	movs	r0, r2
 8003c7e:	4798      	blx	r3
    }
  }
  return status;
 8003c80:	230f      	movs	r3, #15
 8003c82:	18fb      	adds	r3, r7, r3
 8003c84:	781b      	ldrb	r3, [r3, #0]
}
 8003c86:	0018      	movs	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b004      	add	sp, #16
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b084      	sub	sp, #16
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003caa:	221c      	movs	r2, #28
 8003cac:	4013      	ands	r3, r2
 8003cae:	2204      	movs	r2, #4
 8003cb0:	409a      	lsls	r2, r3
 8003cb2:	0013      	movs	r3, r2
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d026      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x7a>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2204      	movs	r2, #4
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d022      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	4013      	ands	r3, r2
 8003ccc:	d107      	bne.n	8003cde <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2104      	movs	r1, #4
 8003cda:	438a      	bics	r2, r1
 8003cdc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	221c      	movs	r2, #28
 8003ce4:	401a      	ands	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	2104      	movs	r1, #4
 8003cec:	4091      	lsls	r1, r2
 8003cee:	000a      	movs	r2, r1
 8003cf0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d100      	bne.n	8003cfc <HAL_DMA_IRQHandler+0x6e>
 8003cfa:	e071      	b.n	8003de0 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	0010      	movs	r0, r2
 8003d04:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8003d06:	e06b      	b.n	8003de0 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0c:	221c      	movs	r2, #28
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2202      	movs	r2, #2
 8003d12:	409a      	lsls	r2, r3
 8003d14:	0013      	movs	r3, r2
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d02d      	beq.n	8003d78 <HAL_DMA_IRQHandler+0xea>
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	4013      	ands	r3, r2
 8003d22:	d029      	beq.n	8003d78 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d10b      	bne.n	8003d48 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	210a      	movs	r1, #10
 8003d3c:	438a      	bics	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2225      	movs	r2, #37	; 0x25
 8003d44:	2101      	movs	r1, #1
 8003d46:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4c:	221c      	movs	r2, #28
 8003d4e:	401a      	ands	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	2102      	movs	r1, #2
 8003d56:	4091      	lsls	r1, r2
 8003d58:	000a      	movs	r2, r1
 8003d5a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2224      	movs	r2, #36	; 0x24
 8003d60:	2100      	movs	r1, #0
 8003d62:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d039      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	0010      	movs	r0, r2
 8003d74:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d76:	e033      	b.n	8003de0 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7c:	221c      	movs	r2, #28
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2208      	movs	r2, #8
 8003d82:	409a      	lsls	r2, r3
 8003d84:	0013      	movs	r3, r2
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	d02a      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x154>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2208      	movs	r2, #8
 8003d90:	4013      	ands	r3, r2
 8003d92:	d026      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	210e      	movs	r1, #14
 8003da0:	438a      	bics	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da8:	221c      	movs	r2, #28
 8003daa:	401a      	ands	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	2101      	movs	r1, #1
 8003db2:	4091      	lsls	r1, r2
 8003db4:	000a      	movs	r2, r1
 8003db6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2225      	movs	r2, #37	; 0x25
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2224      	movs	r2, #36	; 0x24
 8003dca:	2100      	movs	r1, #0
 8003dcc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	0010      	movs	r0, r2
 8003dde:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003de0:	46c0      	nop			; (mov r8, r8)
 8003de2:	46c0      	nop			; (mov r8, r8)
}
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b004      	add	sp, #16
 8003de8:	bd80      	pop	{r7, pc}

08003dea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b084      	sub	sp, #16
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfc:	221c      	movs	r2, #28
 8003dfe:	401a      	ands	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	2101      	movs	r1, #1
 8003e06:	4091      	lsls	r1, r2
 8003e08:	000a      	movs	r2, r1
 8003e0a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2b10      	cmp	r3, #16
 8003e1a:	d108      	bne.n	8003e2e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e2c:	e007      	b.n	8003e3e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	60da      	str	r2, [r3, #12]
}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	46bd      	mov	sp, r7
 8003e42:	b004      	add	sp, #16
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003e50:	f7ff fd10 	bl	8003874 <HAL_GetTick>
 8003e54:	0003      	movs	r3, r0
 8003e56:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003e58:	e00f      	b.n	8003e7a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	d00c      	beq.n	8003e7a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d007      	beq.n	8003e76 <FLASH_WaitForLastOperation+0x2e>
 8003e66:	f7ff fd05 	bl	8003874 <HAL_GetTick>
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d201      	bcs.n	8003e7a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e052      	b.n	8003f20 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003e7a:	4b2b      	ldr	r3, [pc, #172]	; (8003f28 <FLASH_WaitForLastOperation+0xe0>)
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d0e9      	beq.n	8003e5a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003e86:	4b28      	ldr	r3, [pc, #160]	; (8003f28 <FLASH_WaitForLastOperation+0xe0>)
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d102      	bne.n	8003e98 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003e92:	4b25      	ldr	r3, [pc, #148]	; (8003f28 <FLASH_WaitForLastOperation+0xe0>)
 8003e94:	2202      	movs	r2, #2
 8003e96:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003e98:	4b23      	ldr	r3, [pc, #140]	; (8003f28 <FLASH_WaitForLastOperation+0xe0>)
 8003e9a:	699a      	ldr	r2, [r3, #24]
 8003e9c:	2380      	movs	r3, #128	; 0x80
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	401a      	ands	r2, r3
 8003ea2:	2380      	movs	r3, #128	; 0x80
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d035      	beq.n	8003f16 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003eaa:	4b1f      	ldr	r3, [pc, #124]	; (8003f28 <FLASH_WaitForLastOperation+0xe0>)
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003eb4:	2380      	movs	r3, #128	; 0x80
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d02c      	beq.n	8003f16 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003ebc:	4b1a      	ldr	r3, [pc, #104]	; (8003f28 <FLASH_WaitForLastOperation+0xe0>)
 8003ebe:	699a      	ldr	r2, [r3, #24]
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003ec6:	2380      	movs	r3, #128	; 0x80
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d023      	beq.n	8003f16 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8003ece:	4b16      	ldr	r3, [pc, #88]	; (8003f28 <FLASH_WaitForLastOperation+0xe0>)
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	2380      	movs	r3, #128	; 0x80
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003ed8:	2380      	movs	r3, #128	; 0x80
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d01a      	beq.n	8003f16 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8003ee0:	4b11      	ldr	r3, [pc, #68]	; (8003f28 <FLASH_WaitForLastOperation+0xe0>)
 8003ee2:	699a      	ldr	r2, [r3, #24]
 8003ee4:	2380      	movs	r3, #128	; 0x80
 8003ee6:	019b      	lsls	r3, r3, #6
 8003ee8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8003eea:	2380      	movs	r3, #128	; 0x80
 8003eec:	019b      	lsls	r3, r3, #6
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d011      	beq.n	8003f16 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <FLASH_WaitForLastOperation+0xe0>)
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	2380      	movs	r3, #128	; 0x80
 8003ef8:	029b      	lsls	r3, r3, #10
 8003efa:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8003efc:	2380      	movs	r3, #128	; 0x80
 8003efe:	029b      	lsls	r3, r3, #10
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d008      	beq.n	8003f16 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8003f04:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <FLASH_WaitForLastOperation+0xe0>)
 8003f06:	699a      	ldr	r2, [r3, #24]
 8003f08:	2380      	movs	r3, #128	; 0x80
 8003f0a:	025b      	lsls	r3, r3, #9
 8003f0c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003f0e:	2380      	movs	r3, #128	; 0x80
 8003f10:	025b      	lsls	r3, r3, #9
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d103      	bne.n	8003f1e <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8003f16:	f000 f809 	bl	8003f2c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	0018      	movs	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b004      	add	sp, #16
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40022000 	.word	0x40022000

08003f2c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8003f32:	2300      	movs	r3, #0
 8003f34:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003f36:	4b49      	ldr	r3, [pc, #292]	; (800405c <FLASH_SetErrorCode+0x130>)
 8003f38:	699a      	ldr	r2, [r3, #24]
 8003f3a:	2380      	movs	r3, #128	; 0x80
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	401a      	ands	r2, r3
 8003f40:	2380      	movs	r3, #128	; 0x80
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d10a      	bne.n	8003f5e <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003f48:	4b45      	ldr	r3, [pc, #276]	; (8004060 <FLASH_SetErrorCode+0x134>)
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	4b43      	ldr	r3, [pc, #268]	; (8004060 <FLASH_SetErrorCode+0x134>)
 8003f52:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2280      	movs	r2, #128	; 0x80
 8003f58:	0052      	lsls	r2, r2, #1
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8003f5e:	4b3f      	ldr	r3, [pc, #252]	; (800405c <FLASH_SetErrorCode+0x130>)
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	2380      	movs	r3, #128	; 0x80
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	401a      	ands	r2, r3
 8003f68:	2380      	movs	r3, #128	; 0x80
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d10a      	bne.n	8003f86 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003f70:	4b3b      	ldr	r3, [pc, #236]	; (8004060 <FLASH_SetErrorCode+0x134>)
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	2201      	movs	r2, #1
 8003f76:	431a      	orrs	r2, r3
 8003f78:	4b39      	ldr	r3, [pc, #228]	; (8004060 <FLASH_SetErrorCode+0x134>)
 8003f7a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2280      	movs	r2, #128	; 0x80
 8003f80:	0092      	lsls	r2, r2, #2
 8003f82:	4313      	orrs	r3, r2
 8003f84:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8003f86:	4b35      	ldr	r3, [pc, #212]	; (800405c <FLASH_SetErrorCode+0x130>)
 8003f88:	699a      	ldr	r2, [r3, #24]
 8003f8a:	2380      	movs	r3, #128	; 0x80
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	401a      	ands	r2, r3
 8003f90:	2380      	movs	r3, #128	; 0x80
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d10a      	bne.n	8003fae <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8003f98:	4b31      	ldr	r3, [pc, #196]	; (8004060 <FLASH_SetErrorCode+0x134>)
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	2208      	movs	r2, #8
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	4b2f      	ldr	r3, [pc, #188]	; (8004060 <FLASH_SetErrorCode+0x134>)
 8003fa2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2280      	movs	r2, #128	; 0x80
 8003fa8:	00d2      	lsls	r2, r2, #3
 8003faa:	4313      	orrs	r3, r2
 8003fac:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003fae:	4b2b      	ldr	r3, [pc, #172]	; (800405c <FLASH_SetErrorCode+0x130>)
 8003fb0:	699a      	ldr	r2, [r3, #24]
 8003fb2:	2380      	movs	r3, #128	; 0x80
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	2380      	movs	r3, #128	; 0x80
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d10a      	bne.n	8003fd6 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003fc0:	4b27      	ldr	r3, [pc, #156]	; (8004060 <FLASH_SetErrorCode+0x134>)
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	2204      	movs	r2, #4
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	4b25      	ldr	r3, [pc, #148]	; (8004060 <FLASH_SetErrorCode+0x134>)
 8003fca:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2280      	movs	r2, #128	; 0x80
 8003fd0:	0112      	lsls	r2, r2, #4
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8003fd6:	4b21      	ldr	r3, [pc, #132]	; (800405c <FLASH_SetErrorCode+0x130>)
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	2380      	movs	r3, #128	; 0x80
 8003fdc:	019b      	lsls	r3, r3, #6
 8003fde:	401a      	ands	r2, r3
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	019b      	lsls	r3, r3, #6
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d10a      	bne.n	8003ffe <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003fe8:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <FLASH_SetErrorCode+0x134>)
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	2210      	movs	r2, #16
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <FLASH_SetErrorCode+0x134>)
 8003ff2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2280      	movs	r2, #128	; 0x80
 8003ff8:	0192      	lsls	r2, r2, #6
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8003ffe:	4b17      	ldr	r3, [pc, #92]	; (800405c <FLASH_SetErrorCode+0x130>)
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	2380      	movs	r3, #128	; 0x80
 8004004:	029b      	lsls	r3, r3, #10
 8004006:	401a      	ands	r2, r3
 8004008:	2380      	movs	r3, #128	; 0x80
 800400a:	029b      	lsls	r3, r3, #10
 800400c:	429a      	cmp	r2, r3
 800400e:	d109      	bne.n	8004024 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8004010:	4b13      	ldr	r3, [pc, #76]	; (8004060 <FLASH_SetErrorCode+0x134>)
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	2220      	movs	r2, #32
 8004016:	431a      	orrs	r2, r3
 8004018:	4b11      	ldr	r3, [pc, #68]	; (8004060 <FLASH_SetErrorCode+0x134>)
 800401a:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	4313      	orrs	r3, r2
 8004022:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8004024:	4b0d      	ldr	r3, [pc, #52]	; (800405c <FLASH_SetErrorCode+0x130>)
 8004026:	699a      	ldr	r2, [r3, #24]
 8004028:	2380      	movs	r3, #128	; 0x80
 800402a:	025b      	lsls	r3, r3, #9
 800402c:	401a      	ands	r2, r3
 800402e:	2380      	movs	r3, #128	; 0x80
 8004030:	025b      	lsls	r3, r3, #9
 8004032:	429a      	cmp	r2, r3
 8004034:	d10a      	bne.n	800404c <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8004036:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <FLASH_SetErrorCode+0x134>)
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	2240      	movs	r2, #64	; 0x40
 800403c:	431a      	orrs	r2, r3
 800403e:	4b08      	ldr	r3, [pc, #32]	; (8004060 <FLASH_SetErrorCode+0x134>)
 8004040:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2280      	movs	r2, #128	; 0x80
 8004046:	0252      	lsls	r2, r2, #9
 8004048:	4313      	orrs	r3, r2
 800404a:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800404c:	4b03      	ldr	r3, [pc, #12]	; (800405c <FLASH_SetErrorCode+0x130>)
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	619a      	str	r2, [r3, #24]
}  
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	46bd      	mov	sp, r7
 8004056:	b002      	add	sp, #8
 8004058:	bd80      	pop	{r7, pc}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	40022000 	.word	0x40022000
 8004060:	200005e4 	.word	0x200005e4

08004064 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800406a:	4b12      	ldr	r3, [pc, #72]	; (80040b4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	4013      	ands	r3, r2
 8004072:	d019      	beq.n	80040a8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004074:	f3ef 8310 	mrs	r3, PRIMASK
 8004078:	607b      	str	r3, [r7, #4]
  return(result);
 800407a:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800407c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800407e:	b672      	cpsid	i
}
 8004080:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8004082:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8004084:	4a0c      	ldr	r2, [pc, #48]	; (80040b8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8004086:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8004088:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800408a:	4a0c      	ldr	r2, [pc, #48]	; (80040bc <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800408c:	60da      	str	r2, [r3, #12]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f383 8810 	msr	PRIMASK, r3
}
 8004098:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800409a:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	4013      	ands	r3, r2
 80040a2:	d001      	beq.n	80040a8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	0018      	movs	r0, r3
 80040ac:	46bd      	mov	sp, r7
 80040ae:	b004      	add	sp, #16
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	40022000 	.word	0x40022000
 80040b8:	89abcdef 	.word	0x89abcdef
 80040bc:	02030405 	.word	0x02030405

080040c0 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80040c4:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	4b03      	ldr	r3, [pc, #12]	; (80040d8 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80040ca:	2101      	movs	r1, #1
 80040cc:	430a      	orrs	r2, r1
 80040ce:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	0018      	movs	r0, r3
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40022000 	.word	0x40022000

080040dc <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80040dc:	b5b0      	push	{r4, r5, r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80040e8:	2317      	movs	r3, #23
 80040ea:	18fb      	adds	r3, r7, r3
 80040ec:	2201      	movs	r2, #1
 80040ee:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80040f0:	4b24      	ldr	r3, [pc, #144]	; (8004184 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80040f2:	7c1b      	ldrb	r3, [r3, #16]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e03e      	b.n	800417a <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 80040fc:	4b21      	ldr	r3, [pc, #132]	; (8004184 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80040fe:	2201      	movs	r2, #1
 8004100:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004102:	2517      	movs	r5, #23
 8004104:	197c      	adds	r4, r7, r5
 8004106:	4b20      	ldr	r3, [pc, #128]	; (8004188 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8004108:	0018      	movs	r0, r3
 800410a:	f7ff fe9d 	bl	8003e48 <FLASH_WaitForLastOperation>
 800410e:	0003      	movs	r3, r0
 8004110:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8004112:	197b      	adds	r3, r7, r5
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d129      	bne.n	800416e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800411a:	4b1a      	ldr	r3, [pc, #104]	; (8004184 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800411c:	2200      	movs	r2, #0
 800411e:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d103      	bne.n	800412e <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	e013      	b.n	8004156 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d104      	bne.n	800413e <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	b292      	uxth	r2, r2
 800413a:	801a      	strh	r2, [r3, #0]
 800413c:	e00b      	b.n	8004156 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d104      	bne.n	800414e <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]
 800414c:	e003      	b.n	8004156 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800414e:	2317      	movs	r3, #23
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	2201      	movs	r2, #1
 8004154:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004156:	2217      	movs	r2, #23
 8004158:	18bb      	adds	r3, r7, r2
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d106      	bne.n	800416e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004160:	18bc      	adds	r4, r7, r2
 8004162:	4b09      	ldr	r3, [pc, #36]	; (8004188 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8004164:	0018      	movs	r0, r3
 8004166:	f7ff fe6f 	bl	8003e48 <FLASH_WaitForLastOperation>
 800416a:	0003      	movs	r3, r0
 800416c:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800416e:	4b05      	ldr	r3, [pc, #20]	; (8004184 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8004170:	2200      	movs	r2, #0
 8004172:	741a      	strb	r2, [r3, #16]

  return status;
 8004174:	2317      	movs	r3, #23
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	781b      	ldrb	r3, [r3, #0]
}
 800417a:	0018      	movs	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	b006      	add	sp, #24
 8004180:	bdb0      	pop	{r4, r5, r7, pc}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	200005e4 	.word	0x200005e4
 8004188:	0000c350 	.word	0x0000c350

0800418c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004196:	2300      	movs	r3, #0
 8004198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800419e:	2300      	movs	r3, #0
 80041a0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80041a2:	e149      	b.n	8004438 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2101      	movs	r1, #1
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4091      	lsls	r1, r2
 80041ae:	000a      	movs	r2, r1
 80041b0:	4013      	ands	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d100      	bne.n	80041bc <HAL_GPIO_Init+0x30>
 80041ba:	e13a      	b.n	8004432 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2203      	movs	r2, #3
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d005      	beq.n	80041d4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2203      	movs	r2, #3
 80041ce:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d130      	bne.n	8004236 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	2203      	movs	r2, #3
 80041e0:	409a      	lsls	r2, r3
 80041e2:	0013      	movs	r3, r2
 80041e4:	43da      	mvns	r2, r3
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4013      	ands	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	409a      	lsls	r2, r3
 80041f6:	0013      	movs	r3, r2
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800420a:	2201      	movs	r2, #1
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	409a      	lsls	r2, r3
 8004210:	0013      	movs	r3, r2
 8004212:	43da      	mvns	r2, r3
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4013      	ands	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	091b      	lsrs	r3, r3, #4
 8004220:	2201      	movs	r2, #1
 8004222:	401a      	ands	r2, r3
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	409a      	lsls	r2, r3
 8004228:	0013      	movs	r3, r2
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2203      	movs	r2, #3
 800423c:	4013      	ands	r3, r2
 800423e:	2b03      	cmp	r3, #3
 8004240:	d017      	beq.n	8004272 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	2203      	movs	r2, #3
 800424e:	409a      	lsls	r2, r3
 8004250:	0013      	movs	r3, r2
 8004252:	43da      	mvns	r2, r3
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4013      	ands	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	409a      	lsls	r2, r3
 8004264:	0013      	movs	r3, r2
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2203      	movs	r2, #3
 8004278:	4013      	ands	r3, r2
 800427a:	2b02      	cmp	r3, #2
 800427c:	d123      	bne.n	80042c6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	08da      	lsrs	r2, r3, #3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3208      	adds	r2, #8
 8004286:	0092      	lsls	r2, r2, #2
 8004288:	58d3      	ldr	r3, [r2, r3]
 800428a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2207      	movs	r2, #7
 8004290:	4013      	ands	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	220f      	movs	r2, #15
 8004296:	409a      	lsls	r2, r3
 8004298:	0013      	movs	r3, r2
 800429a:	43da      	mvns	r2, r3
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	4013      	ands	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2107      	movs	r1, #7
 80042aa:	400b      	ands	r3, r1
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	409a      	lsls	r2, r3
 80042b0:	0013      	movs	r3, r2
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	08da      	lsrs	r2, r3, #3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3208      	adds	r2, #8
 80042c0:	0092      	lsls	r2, r2, #2
 80042c2:	6939      	ldr	r1, [r7, #16]
 80042c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	2203      	movs	r2, #3
 80042d2:	409a      	lsls	r2, r3
 80042d4:	0013      	movs	r3, r2
 80042d6:	43da      	mvns	r2, r3
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	4013      	ands	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2203      	movs	r2, #3
 80042e4:	401a      	ands	r2, r3
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	409a      	lsls	r2, r3
 80042ec:	0013      	movs	r3, r2
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	23c0      	movs	r3, #192	; 0xc0
 8004300:	029b      	lsls	r3, r3, #10
 8004302:	4013      	ands	r3, r2
 8004304:	d100      	bne.n	8004308 <HAL_GPIO_Init+0x17c>
 8004306:	e094      	b.n	8004432 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004308:	4b51      	ldr	r3, [pc, #324]	; (8004450 <HAL_GPIO_Init+0x2c4>)
 800430a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800430c:	4b50      	ldr	r3, [pc, #320]	; (8004450 <HAL_GPIO_Init+0x2c4>)
 800430e:	2101      	movs	r1, #1
 8004310:	430a      	orrs	r2, r1
 8004312:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004314:	4a4f      	ldr	r2, [pc, #316]	; (8004454 <HAL_GPIO_Init+0x2c8>)
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	089b      	lsrs	r3, r3, #2
 800431a:	3302      	adds	r3, #2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	589b      	ldr	r3, [r3, r2]
 8004320:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2203      	movs	r2, #3
 8004326:	4013      	ands	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	220f      	movs	r2, #15
 800432c:	409a      	lsls	r2, r3
 800432e:	0013      	movs	r3, r2
 8004330:	43da      	mvns	r2, r3
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4013      	ands	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	23a0      	movs	r3, #160	; 0xa0
 800433c:	05db      	lsls	r3, r3, #23
 800433e:	429a      	cmp	r2, r3
 8004340:	d013      	beq.n	800436a <HAL_GPIO_Init+0x1de>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a44      	ldr	r2, [pc, #272]	; (8004458 <HAL_GPIO_Init+0x2cc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00d      	beq.n	8004366 <HAL_GPIO_Init+0x1da>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a43      	ldr	r2, [pc, #268]	; (800445c <HAL_GPIO_Init+0x2d0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d007      	beq.n	8004362 <HAL_GPIO_Init+0x1d6>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a42      	ldr	r2, [pc, #264]	; (8004460 <HAL_GPIO_Init+0x2d4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d101      	bne.n	800435e <HAL_GPIO_Init+0x1d2>
 800435a:	2305      	movs	r3, #5
 800435c:	e006      	b.n	800436c <HAL_GPIO_Init+0x1e0>
 800435e:	2306      	movs	r3, #6
 8004360:	e004      	b.n	800436c <HAL_GPIO_Init+0x1e0>
 8004362:	2302      	movs	r3, #2
 8004364:	e002      	b.n	800436c <HAL_GPIO_Init+0x1e0>
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <HAL_GPIO_Init+0x1e0>
 800436a:	2300      	movs	r3, #0
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	2103      	movs	r1, #3
 8004370:	400a      	ands	r2, r1
 8004372:	0092      	lsls	r2, r2, #2
 8004374:	4093      	lsls	r3, r2
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800437c:	4935      	ldr	r1, [pc, #212]	; (8004454 <HAL_GPIO_Init+0x2c8>)
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	089b      	lsrs	r3, r3, #2
 8004382:	3302      	adds	r3, #2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800438a:	4b36      	ldr	r3, [pc, #216]	; (8004464 <HAL_GPIO_Init+0x2d8>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	43da      	mvns	r2, r3
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	4013      	ands	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	2380      	movs	r3, #128	; 0x80
 80043a0:	035b      	lsls	r3, r3, #13
 80043a2:	4013      	ands	r3, r2
 80043a4:	d003      	beq.n	80043ae <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80043ae:	4b2d      	ldr	r3, [pc, #180]	; (8004464 <HAL_GPIO_Init+0x2d8>)
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80043b4:	4b2b      	ldr	r3, [pc, #172]	; (8004464 <HAL_GPIO_Init+0x2d8>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	43da      	mvns	r2, r3
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	4013      	ands	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	2380      	movs	r3, #128	; 0x80
 80043ca:	039b      	lsls	r3, r3, #14
 80043cc:	4013      	ands	r3, r2
 80043ce:	d003      	beq.n	80043d8 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80043d8:	4b22      	ldr	r3, [pc, #136]	; (8004464 <HAL_GPIO_Init+0x2d8>)
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80043de:	4b21      	ldr	r3, [pc, #132]	; (8004464 <HAL_GPIO_Init+0x2d8>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	43da      	mvns	r2, r3
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4013      	ands	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	2380      	movs	r3, #128	; 0x80
 80043f4:	029b      	lsls	r3, r3, #10
 80043f6:	4013      	ands	r3, r2
 80043f8:	d003      	beq.n	8004402 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004402:	4b18      	ldr	r3, [pc, #96]	; (8004464 <HAL_GPIO_Init+0x2d8>)
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004408:	4b16      	ldr	r3, [pc, #88]	; (8004464 <HAL_GPIO_Init+0x2d8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	43da      	mvns	r2, r3
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	4013      	ands	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	2380      	movs	r3, #128	; 0x80
 800441e:	025b      	lsls	r3, r3, #9
 8004420:	4013      	ands	r3, r2
 8004422:	d003      	beq.n	800442c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800442c:	4b0d      	ldr	r3, [pc, #52]	; (8004464 <HAL_GPIO_Init+0x2d8>)
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	3301      	adds	r3, #1
 8004436:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	40da      	lsrs	r2, r3
 8004440:	1e13      	subs	r3, r2, #0
 8004442:	d000      	beq.n	8004446 <HAL_GPIO_Init+0x2ba>
 8004444:	e6ae      	b.n	80041a4 <HAL_GPIO_Init+0x18>
  }
}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	46c0      	nop			; (mov r8, r8)
 800444a:	46bd      	mov	sp, r7
 800444c:	b006      	add	sp, #24
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40021000 	.word	0x40021000
 8004454:	40010000 	.word	0x40010000
 8004458:	50000400 	.word	0x50000400
 800445c:	50000800 	.word	0x50000800
 8004460:	50001c00 	.word	0x50001c00
 8004464:	40010400 	.word	0x40010400

08004468 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	000a      	movs	r2, r1
 8004472:	1cbb      	adds	r3, r7, #2
 8004474:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	1cba      	adds	r2, r7, #2
 800447c:	8812      	ldrh	r2, [r2, #0]
 800447e:	4013      	ands	r3, r2
 8004480:	d004      	beq.n	800448c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004482:	230f      	movs	r3, #15
 8004484:	18fb      	adds	r3, r7, r3
 8004486:	2201      	movs	r2, #1
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	e003      	b.n	8004494 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800448c:	230f      	movs	r3, #15
 800448e:	18fb      	adds	r3, r7, r3
 8004490:	2200      	movs	r2, #0
 8004492:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004494:	230f      	movs	r3, #15
 8004496:	18fb      	adds	r3, r7, r3
 8004498:	781b      	ldrb	r3, [r3, #0]
}
 800449a:	0018      	movs	r0, r3
 800449c:	46bd      	mov	sp, r7
 800449e:	b004      	add	sp, #16
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	0008      	movs	r0, r1
 80044ac:	0011      	movs	r1, r2
 80044ae:	1cbb      	adds	r3, r7, #2
 80044b0:	1c02      	adds	r2, r0, #0
 80044b2:	801a      	strh	r2, [r3, #0]
 80044b4:	1c7b      	adds	r3, r7, #1
 80044b6:	1c0a      	adds	r2, r1, #0
 80044b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044ba:	1c7b      	adds	r3, r7, #1
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d004      	beq.n	80044cc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044c2:	1cbb      	adds	r3, r7, #2
 80044c4:	881a      	ldrh	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80044ca:	e003      	b.n	80044d4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80044cc:	1cbb      	adds	r3, r7, #2
 80044ce:	881a      	ldrh	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044d4:	46c0      	nop			; (mov r8, r8)
 80044d6:	46bd      	mov	sp, r7
 80044d8:	b002      	add	sp, #8
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e082      	b.n	80045f4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2241      	movs	r2, #65	; 0x41
 80044f2:	5c9b      	ldrb	r3, [r3, r2]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d107      	bne.n	800450a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2240      	movs	r2, #64	; 0x40
 80044fe:	2100      	movs	r1, #0
 8004500:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	0018      	movs	r0, r3
 8004506:	f7fc f985 	bl	8000814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2241      	movs	r2, #65	; 0x41
 800450e:	2124      	movs	r1, #36	; 0x24
 8004510:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2101      	movs	r1, #1
 800451e:	438a      	bics	r2, r1
 8004520:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4934      	ldr	r1, [pc, #208]	; (80045fc <HAL_I2C_Init+0x120>)
 800452c:	400a      	ands	r2, r1
 800452e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4931      	ldr	r1, [pc, #196]	; (8004600 <HAL_I2C_Init+0x124>)
 800453c:	400a      	ands	r2, r1
 800453e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d108      	bne.n	800455a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2180      	movs	r1, #128	; 0x80
 8004552:	0209      	lsls	r1, r1, #8
 8004554:	430a      	orrs	r2, r1
 8004556:	609a      	str	r2, [r3, #8]
 8004558:	e007      	b.n	800456a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2184      	movs	r1, #132	; 0x84
 8004564:	0209      	lsls	r1, r1, #8
 8004566:	430a      	orrs	r2, r1
 8004568:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d104      	bne.n	800457c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2280      	movs	r2, #128	; 0x80
 8004578:	0112      	lsls	r2, r2, #4
 800457a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	491f      	ldr	r1, [pc, #124]	; (8004604 <HAL_I2C_Init+0x128>)
 8004588:	430a      	orrs	r2, r1
 800458a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	491a      	ldr	r1, [pc, #104]	; (8004600 <HAL_I2C_Init+0x124>)
 8004598:	400a      	ands	r2, r1
 800459a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	431a      	orrs	r2, r3
 80045a6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69d9      	ldr	r1, [r3, #28]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1a      	ldr	r2, [r3, #32]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2101      	movs	r1, #1
 80045d2:	430a      	orrs	r2, r1
 80045d4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2241      	movs	r2, #65	; 0x41
 80045e0:	2120      	movs	r1, #32
 80045e2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2242      	movs	r2, #66	; 0x42
 80045ee:	2100      	movs	r1, #0
 80045f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	0018      	movs	r0, r3
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b002      	add	sp, #8
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	f0ffffff 	.word	0xf0ffffff
 8004600:	ffff7fff 	.word	0xffff7fff
 8004604:	02008000 	.word	0x02008000

08004608 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004608:	b590      	push	{r4, r7, lr}
 800460a:	b089      	sub	sp, #36	; 0x24
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	0008      	movs	r0, r1
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	0019      	movs	r1, r3
 8004616:	230a      	movs	r3, #10
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	1c02      	adds	r2, r0, #0
 800461c:	801a      	strh	r2, [r3, #0]
 800461e:	2308      	movs	r3, #8
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	1c0a      	adds	r2, r1, #0
 8004624:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2241      	movs	r2, #65	; 0x41
 800462a:	5c9b      	ldrb	r3, [r3, r2]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b20      	cmp	r3, #32
 8004630:	d000      	beq.n	8004634 <HAL_I2C_Master_Transmit+0x2c>
 8004632:	e0e7      	b.n	8004804 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2240      	movs	r2, #64	; 0x40
 8004638:	5c9b      	ldrb	r3, [r3, r2]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_I2C_Master_Transmit+0x3a>
 800463e:	2302      	movs	r3, #2
 8004640:	e0e1      	b.n	8004806 <HAL_I2C_Master_Transmit+0x1fe>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2240      	movs	r2, #64	; 0x40
 8004646:	2101      	movs	r1, #1
 8004648:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800464a:	f7ff f913 	bl	8003874 <HAL_GetTick>
 800464e:	0003      	movs	r3, r0
 8004650:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004652:	2380      	movs	r3, #128	; 0x80
 8004654:	0219      	lsls	r1, r3, #8
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	2319      	movs	r3, #25
 800465e:	2201      	movs	r2, #1
 8004660:	f000 fa04 	bl	8004a6c <I2C_WaitOnFlagUntilTimeout>
 8004664:	1e03      	subs	r3, r0, #0
 8004666:	d001      	beq.n	800466c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e0cc      	b.n	8004806 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2241      	movs	r2, #65	; 0x41
 8004670:	2121      	movs	r1, #33	; 0x21
 8004672:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2242      	movs	r2, #66	; 0x42
 8004678:	2110      	movs	r1, #16
 800467a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2208      	movs	r2, #8
 800468c:	18ba      	adds	r2, r7, r2
 800468e:	8812      	ldrh	r2, [r2, #0]
 8004690:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469c:	b29b      	uxth	r3, r3
 800469e:	2bff      	cmp	r3, #255	; 0xff
 80046a0:	d911      	bls.n	80046c6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	22ff      	movs	r2, #255	; 0xff
 80046a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	2380      	movs	r3, #128	; 0x80
 80046b0:	045c      	lsls	r4, r3, #17
 80046b2:	230a      	movs	r3, #10
 80046b4:	18fb      	adds	r3, r7, r3
 80046b6:	8819      	ldrh	r1, [r3, #0]
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	4b55      	ldr	r3, [pc, #340]	; (8004810 <HAL_I2C_Master_Transmit+0x208>)
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	0023      	movs	r3, r4
 80046c0:	f000 fc2e 	bl	8004f20 <I2C_TransferConfig>
 80046c4:	e075      	b.n	80047b2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	2380      	movs	r3, #128	; 0x80
 80046d8:	049c      	lsls	r4, r3, #18
 80046da:	230a      	movs	r3, #10
 80046dc:	18fb      	adds	r3, r7, r3
 80046de:	8819      	ldrh	r1, [r3, #0]
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	4b4b      	ldr	r3, [pc, #300]	; (8004810 <HAL_I2C_Master_Transmit+0x208>)
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	0023      	movs	r3, r4
 80046e8:	f000 fc1a 	bl	8004f20 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80046ec:	e061      	b.n	80047b2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	0018      	movs	r0, r3
 80046f6:	f000 fa07 	bl	8004b08 <I2C_WaitOnTXISFlagUntilTimeout>
 80046fa:	1e03      	subs	r3, r0, #0
 80046fc:	d001      	beq.n	8004702 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e081      	b.n	8004806 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	781a      	ldrb	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d03a      	beq.n	80047b2 <HAL_I2C_Master_Transmit+0x1aa>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004740:	2b00      	cmp	r3, #0
 8004742:	d136      	bne.n	80047b2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	0013      	movs	r3, r2
 800474e:	2200      	movs	r2, #0
 8004750:	2180      	movs	r1, #128	; 0x80
 8004752:	f000 f98b 	bl	8004a6c <I2C_WaitOnFlagUntilTimeout>
 8004756:	1e03      	subs	r3, r0, #0
 8004758:	d001      	beq.n	800475e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e053      	b.n	8004806 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004762:	b29b      	uxth	r3, r3
 8004764:	2bff      	cmp	r3, #255	; 0xff
 8004766:	d911      	bls.n	800478c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	22ff      	movs	r2, #255	; 0xff
 800476c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004772:	b2da      	uxtb	r2, r3
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	045c      	lsls	r4, r3, #17
 8004778:	230a      	movs	r3, #10
 800477a:	18fb      	adds	r3, r7, r3
 800477c:	8819      	ldrh	r1, [r3, #0]
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	2300      	movs	r3, #0
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	0023      	movs	r3, r4
 8004786:	f000 fbcb 	bl	8004f20 <I2C_TransferConfig>
 800478a:	e012      	b.n	80047b2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479a:	b2da      	uxtb	r2, r3
 800479c:	2380      	movs	r3, #128	; 0x80
 800479e:	049c      	lsls	r4, r3, #18
 80047a0:	230a      	movs	r3, #10
 80047a2:	18fb      	adds	r3, r7, r3
 80047a4:	8819      	ldrh	r1, [r3, #0]
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	2300      	movs	r3, #0
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	0023      	movs	r3, r4
 80047ae:	f000 fbb7 	bl	8004f20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d198      	bne.n	80046ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	0018      	movs	r0, r3
 80047c4:	f000 f9e6 	bl	8004b94 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047c8:	1e03      	subs	r3, r0, #0
 80047ca:	d001      	beq.n	80047d0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e01a      	b.n	8004806 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2220      	movs	r2, #32
 80047d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	490c      	ldr	r1, [pc, #48]	; (8004814 <HAL_I2C_Master_Transmit+0x20c>)
 80047e4:	400a      	ands	r2, r1
 80047e6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2241      	movs	r2, #65	; 0x41
 80047ec:	2120      	movs	r1, #32
 80047ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2242      	movs	r2, #66	; 0x42
 80047f4:	2100      	movs	r1, #0
 80047f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2240      	movs	r2, #64	; 0x40
 80047fc:	2100      	movs	r1, #0
 80047fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004800:	2300      	movs	r3, #0
 8004802:	e000      	b.n	8004806 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004804:	2302      	movs	r3, #2
  }
}
 8004806:	0018      	movs	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	b007      	add	sp, #28
 800480c:	bd90      	pop	{r4, r7, pc}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	80002000 	.word	0x80002000
 8004814:	fe00e800 	.word	0xfe00e800

08004818 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004818:	b590      	push	{r4, r7, lr}
 800481a:	b089      	sub	sp, #36	; 0x24
 800481c:	af02      	add	r7, sp, #8
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	0008      	movs	r0, r1
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	0019      	movs	r1, r3
 8004826:	230a      	movs	r3, #10
 8004828:	18fb      	adds	r3, r7, r3
 800482a:	1c02      	adds	r2, r0, #0
 800482c:	801a      	strh	r2, [r3, #0]
 800482e:	2308      	movs	r3, #8
 8004830:	18fb      	adds	r3, r7, r3
 8004832:	1c0a      	adds	r2, r1, #0
 8004834:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2241      	movs	r2, #65	; 0x41
 800483a:	5c9b      	ldrb	r3, [r3, r2]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b20      	cmp	r3, #32
 8004840:	d000      	beq.n	8004844 <HAL_I2C_Master_Receive+0x2c>
 8004842:	e0e8      	b.n	8004a16 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2240      	movs	r2, #64	; 0x40
 8004848:	5c9b      	ldrb	r3, [r3, r2]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d101      	bne.n	8004852 <HAL_I2C_Master_Receive+0x3a>
 800484e:	2302      	movs	r3, #2
 8004850:	e0e2      	b.n	8004a18 <HAL_I2C_Master_Receive+0x200>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2240      	movs	r2, #64	; 0x40
 8004856:	2101      	movs	r1, #1
 8004858:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800485a:	f7ff f80b 	bl	8003874 <HAL_GetTick>
 800485e:	0003      	movs	r3, r0
 8004860:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004862:	2380      	movs	r3, #128	; 0x80
 8004864:	0219      	lsls	r1, r3, #8
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	2319      	movs	r3, #25
 800486e:	2201      	movs	r2, #1
 8004870:	f000 f8fc 	bl	8004a6c <I2C_WaitOnFlagUntilTimeout>
 8004874:	1e03      	subs	r3, r0, #0
 8004876:	d001      	beq.n	800487c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e0cd      	b.n	8004a18 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2241      	movs	r2, #65	; 0x41
 8004880:	2122      	movs	r1, #34	; 0x22
 8004882:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2242      	movs	r2, #66	; 0x42
 8004888:	2110      	movs	r1, #16
 800488a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2208      	movs	r2, #8
 800489c:	18ba      	adds	r2, r7, r2
 800489e:	8812      	ldrh	r2, [r2, #0]
 80048a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2bff      	cmp	r3, #255	; 0xff
 80048b0:	d911      	bls.n	80048d6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	22ff      	movs	r2, #255	; 0xff
 80048b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	045c      	lsls	r4, r3, #17
 80048c2:	230a      	movs	r3, #10
 80048c4:	18fb      	adds	r3, r7, r3
 80048c6:	8819      	ldrh	r1, [r3, #0]
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	4b55      	ldr	r3, [pc, #340]	; (8004a20 <HAL_I2C_Master_Receive+0x208>)
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	0023      	movs	r3, r4
 80048d0:	f000 fb26 	bl	8004f20 <I2C_TransferConfig>
 80048d4:	e076      	b.n	80049c4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	2380      	movs	r3, #128	; 0x80
 80048e8:	049c      	lsls	r4, r3, #18
 80048ea:	230a      	movs	r3, #10
 80048ec:	18fb      	adds	r3, r7, r3
 80048ee:	8819      	ldrh	r1, [r3, #0]
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	4b4b      	ldr	r3, [pc, #300]	; (8004a20 <HAL_I2C_Master_Receive+0x208>)
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	0023      	movs	r3, r4
 80048f8:	f000 fb12 	bl	8004f20 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80048fc:	e062      	b.n	80049c4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	0018      	movs	r0, r3
 8004906:	f000 f989 	bl	8004c1c <I2C_WaitOnRXNEFlagUntilTimeout>
 800490a:	1e03      	subs	r3, r0, #0
 800490c:	d001      	beq.n	8004912 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e082      	b.n	8004a18 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492e:	3b01      	subs	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d03a      	beq.n	80049c4 <HAL_I2C_Master_Receive+0x1ac>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004952:	2b00      	cmp	r3, #0
 8004954:	d136      	bne.n	80049c4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	0013      	movs	r3, r2
 8004960:	2200      	movs	r2, #0
 8004962:	2180      	movs	r1, #128	; 0x80
 8004964:	f000 f882 	bl	8004a6c <I2C_WaitOnFlagUntilTimeout>
 8004968:	1e03      	subs	r3, r0, #0
 800496a:	d001      	beq.n	8004970 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e053      	b.n	8004a18 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	2bff      	cmp	r3, #255	; 0xff
 8004978:	d911      	bls.n	800499e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	22ff      	movs	r2, #255	; 0xff
 800497e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004984:	b2da      	uxtb	r2, r3
 8004986:	2380      	movs	r3, #128	; 0x80
 8004988:	045c      	lsls	r4, r3, #17
 800498a:	230a      	movs	r3, #10
 800498c:	18fb      	adds	r3, r7, r3
 800498e:	8819      	ldrh	r1, [r3, #0]
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	2300      	movs	r3, #0
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	0023      	movs	r3, r4
 8004998:	f000 fac2 	bl	8004f20 <I2C_TransferConfig>
 800499c:	e012      	b.n	80049c4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	2380      	movs	r3, #128	; 0x80
 80049b0:	049c      	lsls	r4, r3, #18
 80049b2:	230a      	movs	r3, #10
 80049b4:	18fb      	adds	r3, r7, r3
 80049b6:	8819      	ldrh	r1, [r3, #0]
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	2300      	movs	r3, #0
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	0023      	movs	r3, r4
 80049c0:	f000 faae 	bl	8004f20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d197      	bne.n	80048fe <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	0018      	movs	r0, r3
 80049d6:	f000 f8dd 	bl	8004b94 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049da:	1e03      	subs	r3, r0, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e01a      	b.n	8004a18 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2220      	movs	r2, #32
 80049e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	490b      	ldr	r1, [pc, #44]	; (8004a24 <HAL_I2C_Master_Receive+0x20c>)
 80049f6:	400a      	ands	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2241      	movs	r2, #65	; 0x41
 80049fe:	2120      	movs	r1, #32
 8004a00:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2242      	movs	r2, #66	; 0x42
 8004a06:	2100      	movs	r1, #0
 8004a08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2240      	movs	r2, #64	; 0x40
 8004a0e:	2100      	movs	r1, #0
 8004a10:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	e000      	b.n	8004a18 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004a16:	2302      	movs	r3, #2
  }
}
 8004a18:	0018      	movs	r0, r3
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	b007      	add	sp, #28
 8004a1e:	bd90      	pop	{r4, r7, pc}
 8004a20:	80002400 	.word	0x80002400
 8004a24:	fe00e800 	.word	0xfe00e800

08004a28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	2202      	movs	r2, #2
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d103      	bne.n	8004a46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2200      	movs	r2, #0
 8004a44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d007      	beq.n	8004a64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699a      	ldr	r2, [r3, #24]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2101      	movs	r1, #1
 8004a60:	430a      	orrs	r2, r1
 8004a62:	619a      	str	r2, [r3, #24]
  }
}
 8004a64:	46c0      	nop			; (mov r8, r8)
 8004a66:	46bd      	mov	sp, r7
 8004a68:	b002      	add	sp, #8
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	1dfb      	adds	r3, r7, #7
 8004a7a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a7c:	e030      	b.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	3301      	adds	r3, #1
 8004a82:	d02d      	beq.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a84:	f7fe fef6 	bl	8003874 <HAL_GetTick>
 8004a88:	0002      	movs	r2, r0
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d302      	bcc.n	8004a9a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d122      	bne.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	425a      	negs	r2, r3
 8004aaa:	4153      	adcs	r3, r2
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	001a      	movs	r2, r3
 8004ab0:	1dfb      	adds	r3, r7, #7
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d113      	bne.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abc:	2220      	movs	r2, #32
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2241      	movs	r2, #65	; 0x41
 8004ac8:	2120      	movs	r1, #32
 8004aca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2242      	movs	r2, #66	; 0x42
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2240      	movs	r2, #64	; 0x40
 8004ad8:	2100      	movs	r1, #0
 8004ada:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e00f      	b.n	8004b00 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	425a      	negs	r2, r3
 8004af0:	4153      	adcs	r3, r2
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	001a      	movs	r2, r3
 8004af6:	1dfb      	adds	r3, r7, #7
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d0bf      	beq.n	8004a7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	0018      	movs	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	b004      	add	sp, #16
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b14:	e032      	b.n	8004b7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f000 f8ff 	bl	8004d20 <I2C_IsErrorOccurred>
 8004b22:	1e03      	subs	r3, r0, #0
 8004b24:	d001      	beq.n	8004b2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e030      	b.n	8004b8c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	d025      	beq.n	8004b7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b30:	f7fe fea0 	bl	8003874 <HAL_GetTick>
 8004b34:	0002      	movs	r2, r0
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d302      	bcc.n	8004b46 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d11a      	bne.n	8004b7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d013      	beq.n	8004b7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b58:	2220      	movs	r2, #32
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2241      	movs	r2, #65	; 0x41
 8004b64:	2120      	movs	r1, #32
 8004b66:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2242      	movs	r2, #66	; 0x42
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2240      	movs	r2, #64	; 0x40
 8004b74:	2100      	movs	r1, #0
 8004b76:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e007      	b.n	8004b8c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	2202      	movs	r2, #2
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d1c5      	bne.n	8004b16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b004      	add	sp, #16
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ba0:	e02f      	b.n	8004c02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f000 f8b9 	bl	8004d20 <I2C_IsErrorOccurred>
 8004bae:	1e03      	subs	r3, r0, #0
 8004bb0:	d001      	beq.n	8004bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e02d      	b.n	8004c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb6:	f7fe fe5d 	bl	8003874 <HAL_GetTick>
 8004bba:	0002      	movs	r2, r0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d302      	bcc.n	8004bcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d11a      	bne.n	8004c02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	d013      	beq.n	8004c02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bde:	2220      	movs	r2, #32
 8004be0:	431a      	orrs	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2241      	movs	r2, #65	; 0x41
 8004bea:	2120      	movs	r1, #32
 8004bec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2242      	movs	r2, #66	; 0x42
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2240      	movs	r2, #64	; 0x40
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e007      	b.n	8004c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d1c8      	bne.n	8004ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	0018      	movs	r0, r3
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b004      	add	sp, #16
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c28:	e06b      	b.n	8004d02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	0018      	movs	r0, r3
 8004c32:	f000 f875 	bl	8004d20 <I2C_IsErrorOccurred>
 8004c36:	1e03      	subs	r3, r0, #0
 8004c38:	d001      	beq.n	8004c3e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e069      	b.n	8004d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	2220      	movs	r2, #32
 8004c46:	4013      	ands	r3, r2
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	d138      	bne.n	8004cbe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	2204      	movs	r2, #4
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d105      	bne.n	8004c66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	e055      	b.n	8004d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	2210      	movs	r2, #16
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d107      	bne.n	8004c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2210      	movs	r2, #16
 8004c7a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2204      	movs	r2, #4
 8004c80:	645a      	str	r2, [r3, #68]	; 0x44
 8004c82:	e002      	b.n	8004c8a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	491f      	ldr	r1, [pc, #124]	; (8004d1c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004c9e:	400a      	ands	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2241      	movs	r2, #65	; 0x41
 8004ca6:	2120      	movs	r1, #32
 8004ca8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2242      	movs	r2, #66	; 0x42
 8004cae:	2100      	movs	r1, #0
 8004cb0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2240      	movs	r2, #64	; 0x40
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e029      	b.n	8004d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cbe:	f7fe fdd9 	bl	8003874 <HAL_GetTick>
 8004cc2:	0002      	movs	r2, r0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d302      	bcc.n	8004cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d116      	bne.n	8004d02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	2204      	movs	r2, #4
 8004cdc:	4013      	ands	r3, r2
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d00f      	beq.n	8004d02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2241      	movs	r2, #65	; 0x41
 8004cf2:	2120      	movs	r1, #32
 8004cf4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2240      	movs	r2, #64	; 0x40
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e007      	b.n	8004d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	2204      	movs	r2, #4
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d18c      	bne.n	8004c2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	0018      	movs	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b004      	add	sp, #16
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	fe00e800 	.word	0xfe00e800

08004d20 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d20:	b590      	push	{r4, r7, lr}
 8004d22:	b08b      	sub	sp, #44	; 0x2c
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d2c:	2327      	movs	r3, #39	; 0x27
 8004d2e:	18fb      	adds	r3, r7, r3
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	2210      	movs	r2, #16
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d100      	bne.n	8004d4e <I2C_IsErrorOccurred+0x2e>
 8004d4c:	e082      	b.n	8004e54 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2210      	movs	r2, #16
 8004d54:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d56:	e060      	b.n	8004e1a <I2C_IsErrorOccurred+0xfa>
 8004d58:	2427      	movs	r4, #39	; 0x27
 8004d5a:	193b      	adds	r3, r7, r4
 8004d5c:	193a      	adds	r2, r7, r4
 8004d5e:	7812      	ldrb	r2, [r2, #0]
 8004d60:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	3301      	adds	r3, #1
 8004d66:	d058      	beq.n	8004e1a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d68:	f7fe fd84 	bl	8003874 <HAL_GetTick>
 8004d6c:	0002      	movs	r2, r0
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d306      	bcc.n	8004d86 <I2C_IsErrorOccurred+0x66>
 8004d78:	193b      	adds	r3, r7, r4
 8004d7a:	193a      	adds	r2, r7, r4
 8004d7c:	7812      	ldrb	r2, [r2, #0]
 8004d7e:	701a      	strb	r2, [r3, #0]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d149      	bne.n	8004e1a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	2380      	movs	r3, #128	; 0x80
 8004d8e:	01db      	lsls	r3, r3, #7
 8004d90:	4013      	ands	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004d94:	2013      	movs	r0, #19
 8004d96:	183b      	adds	r3, r7, r0
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	2142      	movs	r1, #66	; 0x42
 8004d9c:	5c52      	ldrb	r2, [r2, r1]
 8004d9e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699a      	ldr	r2, [r3, #24]
 8004da6:	2380      	movs	r3, #128	; 0x80
 8004da8:	021b      	lsls	r3, r3, #8
 8004daa:	401a      	ands	r2, r3
 8004dac:	2380      	movs	r3, #128	; 0x80
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d126      	bne.n	8004e02 <I2C_IsErrorOccurred+0xe2>
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	2380      	movs	r3, #128	; 0x80
 8004db8:	01db      	lsls	r3, r3, #7
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d021      	beq.n	8004e02 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8004dbe:	183b      	adds	r3, r7, r0
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b20      	cmp	r3, #32
 8004dc4:	d01d      	beq.n	8004e02 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2180      	movs	r1, #128	; 0x80
 8004dd2:	01c9      	lsls	r1, r1, #7
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004dd8:	f7fe fd4c 	bl	8003874 <HAL_GetTick>
 8004ddc:	0003      	movs	r3, r0
 8004dde:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004de0:	e00f      	b.n	8004e02 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004de2:	f7fe fd47 	bl	8003874 <HAL_GetTick>
 8004de6:	0002      	movs	r2, r0
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b19      	cmp	r3, #25
 8004dee:	d908      	bls.n	8004e02 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	2220      	movs	r2, #32
 8004df4:	4313      	orrs	r3, r2
 8004df6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004df8:	2327      	movs	r3, #39	; 0x27
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	701a      	strb	r2, [r3, #0]

              break;
 8004e00:	e00b      	b.n	8004e1a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	2127      	movs	r1, #39	; 0x27
 8004e0e:	187a      	adds	r2, r7, r1
 8004e10:	1879      	adds	r1, r7, r1
 8004e12:	7809      	ldrb	r1, [r1, #0]
 8004e14:	7011      	strb	r1, [r2, #0]
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d1e3      	bne.n	8004de2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	2220      	movs	r2, #32
 8004e22:	4013      	ands	r3, r2
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	d004      	beq.n	8004e32 <I2C_IsErrorOccurred+0x112>
 8004e28:	2327      	movs	r3, #39	; 0x27
 8004e2a:	18fb      	adds	r3, r7, r3
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d092      	beq.n	8004d58 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e32:	2327      	movs	r3, #39	; 0x27
 8004e34:	18fb      	adds	r3, r7, r3
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d103      	bne.n	8004e44 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2220      	movs	r2, #32
 8004e42:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	2204      	movs	r2, #4
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e4c:	2327      	movs	r3, #39	; 0x27
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	2201      	movs	r2, #1
 8004e52:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	2380      	movs	r3, #128	; 0x80
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	4013      	ands	r3, r2
 8004e64:	d00c      	beq.n	8004e80 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2280      	movs	r2, #128	; 0x80
 8004e74:	0052      	lsls	r2, r2, #1
 8004e76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e78:	2327      	movs	r3, #39	; 0x27
 8004e7a:	18fb      	adds	r3, r7, r3
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	2380      	movs	r3, #128	; 0x80
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	4013      	ands	r3, r2
 8004e88:	d00c      	beq.n	8004ea4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	2208      	movs	r2, #8
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2280      	movs	r2, #128	; 0x80
 8004e98:	00d2      	lsls	r2, r2, #3
 8004e9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e9c:	2327      	movs	r3, #39	; 0x27
 8004e9e:	18fb      	adds	r3, r7, r3
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	2380      	movs	r3, #128	; 0x80
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4013      	ands	r3, r2
 8004eac:	d00c      	beq.n	8004ec8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2280      	movs	r2, #128	; 0x80
 8004ebc:	0092      	lsls	r2, r2, #2
 8004ebe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ec0:	2327      	movs	r3, #39	; 0x27
 8004ec2:	18fb      	adds	r3, r7, r3
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004ec8:	2327      	movs	r3, #39	; 0x27
 8004eca:	18fb      	adds	r3, r7, r3
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d01d      	beq.n	8004f0e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f7ff fda7 	bl	8004a28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	490d      	ldr	r1, [pc, #52]	; (8004f1c <I2C_IsErrorOccurred+0x1fc>)
 8004ee6:	400a      	ands	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2241      	movs	r2, #65	; 0x41
 8004efa:	2120      	movs	r1, #32
 8004efc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2242      	movs	r2, #66	; 0x42
 8004f02:	2100      	movs	r1, #0
 8004f04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2240      	movs	r2, #64	; 0x40
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004f0e:	2327      	movs	r3, #39	; 0x27
 8004f10:	18fb      	adds	r3, r7, r3
 8004f12:	781b      	ldrb	r3, [r3, #0]
}
 8004f14:	0018      	movs	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	b00b      	add	sp, #44	; 0x2c
 8004f1a:	bd90      	pop	{r4, r7, pc}
 8004f1c:	fe00e800 	.word	0xfe00e800

08004f20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f20:	b590      	push	{r4, r7, lr}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	0008      	movs	r0, r1
 8004f2a:	0011      	movs	r1, r2
 8004f2c:	607b      	str	r3, [r7, #4]
 8004f2e:	240a      	movs	r4, #10
 8004f30:	193b      	adds	r3, r7, r4
 8004f32:	1c02      	adds	r2, r0, #0
 8004f34:	801a      	strh	r2, [r3, #0]
 8004f36:	2009      	movs	r0, #9
 8004f38:	183b      	adds	r3, r7, r0
 8004f3a:	1c0a      	adds	r2, r1, #0
 8004f3c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f3e:	193b      	adds	r3, r7, r4
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	059b      	lsls	r3, r3, #22
 8004f44:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f46:	183b      	adds	r3, r7, r0
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	0419      	lsls	r1, r3, #16
 8004f4c:	23ff      	movs	r3, #255	; 0xff
 8004f4e:	041b      	lsls	r3, r3, #16
 8004f50:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f52:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	085b      	lsrs	r3, r3, #1
 8004f60:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f6a:	0d51      	lsrs	r1, r2, #21
 8004f6c:	2280      	movs	r2, #128	; 0x80
 8004f6e:	00d2      	lsls	r2, r2, #3
 8004f70:	400a      	ands	r2, r1
 8004f72:	4907      	ldr	r1, [pc, #28]	; (8004f90 <I2C_TransferConfig+0x70>)
 8004f74:	430a      	orrs	r2, r1
 8004f76:	43d2      	mvns	r2, r2
 8004f78:	401a      	ands	r2, r3
 8004f7a:	0011      	movs	r1, r2
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	b007      	add	sp, #28
 8004f8c:	bd90      	pop	{r4, r7, pc}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	03ff63ff 	.word	0x03ff63ff

08004f94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2241      	movs	r2, #65	; 0x41
 8004fa2:	5c9b      	ldrb	r3, [r3, r2]
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b20      	cmp	r3, #32
 8004fa8:	d138      	bne.n	800501c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2240      	movs	r2, #64	; 0x40
 8004fae:	5c9b      	ldrb	r3, [r3, r2]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e032      	b.n	800501e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2240      	movs	r2, #64	; 0x40
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2241      	movs	r2, #65	; 0x41
 8004fc4:	2124      	movs	r1, #36	; 0x24
 8004fc6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	438a      	bics	r2, r1
 8004fd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4911      	ldr	r1, [pc, #68]	; (8005028 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004fe4:	400a      	ands	r2, r1
 8004fe6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6819      	ldr	r1, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2101      	movs	r1, #1
 8005004:	430a      	orrs	r2, r1
 8005006:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2241      	movs	r2, #65	; 0x41
 800500c:	2120      	movs	r1, #32
 800500e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2240      	movs	r2, #64	; 0x40
 8005014:	2100      	movs	r1, #0
 8005016:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	e000      	b.n	800501e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800501c:	2302      	movs	r3, #2
  }
}
 800501e:	0018      	movs	r0, r3
 8005020:	46bd      	mov	sp, r7
 8005022:	b002      	add	sp, #8
 8005024:	bd80      	pop	{r7, pc}
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	ffffefff 	.word	0xffffefff

0800502c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2241      	movs	r2, #65	; 0x41
 800503a:	5c9b      	ldrb	r3, [r3, r2]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b20      	cmp	r3, #32
 8005040:	d139      	bne.n	80050b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2240      	movs	r2, #64	; 0x40
 8005046:	5c9b      	ldrb	r3, [r3, r2]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800504c:	2302      	movs	r3, #2
 800504e:	e033      	b.n	80050b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2240      	movs	r2, #64	; 0x40
 8005054:	2101      	movs	r1, #1
 8005056:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2241      	movs	r2, #65	; 0x41
 800505c:	2124      	movs	r1, #36	; 0x24
 800505e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2101      	movs	r1, #1
 800506c:	438a      	bics	r2, r1
 800506e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4a11      	ldr	r2, [pc, #68]	; (80050c0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800507c:	4013      	ands	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	021b      	lsls	r3, r3, #8
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2101      	movs	r1, #1
 800509e:	430a      	orrs	r2, r1
 80050a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2241      	movs	r2, #65	; 0x41
 80050a6:	2120      	movs	r1, #32
 80050a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2240      	movs	r2, #64	; 0x40
 80050ae:	2100      	movs	r1, #0
 80050b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	e000      	b.n	80050b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80050b6:	2302      	movs	r3, #2
  }
}
 80050b8:	0018      	movs	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	b004      	add	sp, #16
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	fffff0ff 	.word	0xfffff0ff

080050c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050c4:	b5b0      	push	{r4, r5, r7, lr}
 80050c6:	b08a      	sub	sp, #40	; 0x28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d102      	bne.n	80050d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	f000 fb6c 	bl	80057b0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050d8:	4bc8      	ldr	r3, [pc, #800]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	220c      	movs	r2, #12
 80050de:	4013      	ands	r3, r2
 80050e0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050e2:	4bc6      	ldr	r3, [pc, #792]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 80050e4:	68da      	ldr	r2, [r3, #12]
 80050e6:	2380      	movs	r3, #128	; 0x80
 80050e8:	025b      	lsls	r3, r3, #9
 80050ea:	4013      	ands	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2201      	movs	r2, #1
 80050f4:	4013      	ands	r3, r2
 80050f6:	d100      	bne.n	80050fa <HAL_RCC_OscConfig+0x36>
 80050f8:	e07d      	b.n	80051f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d007      	beq.n	8005110 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	2b0c      	cmp	r3, #12
 8005104:	d112      	bne.n	800512c <HAL_RCC_OscConfig+0x68>
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	2380      	movs	r3, #128	; 0x80
 800510a:	025b      	lsls	r3, r3, #9
 800510c:	429a      	cmp	r2, r3
 800510e:	d10d      	bne.n	800512c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005110:	4bba      	ldr	r3, [pc, #744]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	2380      	movs	r3, #128	; 0x80
 8005116:	029b      	lsls	r3, r3, #10
 8005118:	4013      	ands	r3, r2
 800511a:	d100      	bne.n	800511e <HAL_RCC_OscConfig+0x5a>
 800511c:	e06a      	b.n	80051f4 <HAL_RCC_OscConfig+0x130>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d166      	bne.n	80051f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	f000 fb42 	bl	80057b0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	2380      	movs	r3, #128	; 0x80
 8005132:	025b      	lsls	r3, r3, #9
 8005134:	429a      	cmp	r2, r3
 8005136:	d107      	bne.n	8005148 <HAL_RCC_OscConfig+0x84>
 8005138:	4bb0      	ldr	r3, [pc, #704]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	4baf      	ldr	r3, [pc, #700]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 800513e:	2180      	movs	r1, #128	; 0x80
 8005140:	0249      	lsls	r1, r1, #9
 8005142:	430a      	orrs	r2, r1
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	e027      	b.n	8005198 <HAL_RCC_OscConfig+0xd4>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	23a0      	movs	r3, #160	; 0xa0
 800514e:	02db      	lsls	r3, r3, #11
 8005150:	429a      	cmp	r2, r3
 8005152:	d10e      	bne.n	8005172 <HAL_RCC_OscConfig+0xae>
 8005154:	4ba9      	ldr	r3, [pc, #676]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	4ba8      	ldr	r3, [pc, #672]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 800515a:	2180      	movs	r1, #128	; 0x80
 800515c:	02c9      	lsls	r1, r1, #11
 800515e:	430a      	orrs	r2, r1
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	4ba6      	ldr	r3, [pc, #664]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	4ba5      	ldr	r3, [pc, #660]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 8005168:	2180      	movs	r1, #128	; 0x80
 800516a:	0249      	lsls	r1, r1, #9
 800516c:	430a      	orrs	r2, r1
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	e012      	b.n	8005198 <HAL_RCC_OscConfig+0xd4>
 8005172:	4ba2      	ldr	r3, [pc, #648]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	4ba1      	ldr	r3, [pc, #644]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 8005178:	49a1      	ldr	r1, [pc, #644]	; (8005400 <HAL_RCC_OscConfig+0x33c>)
 800517a:	400a      	ands	r2, r1
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	4b9f      	ldr	r3, [pc, #636]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	2380      	movs	r3, #128	; 0x80
 8005184:	025b      	lsls	r3, r3, #9
 8005186:	4013      	ands	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4b9b      	ldr	r3, [pc, #620]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	4b9a      	ldr	r3, [pc, #616]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 8005192:	499c      	ldr	r1, [pc, #624]	; (8005404 <HAL_RCC_OscConfig+0x340>)
 8005194:	400a      	ands	r2, r1
 8005196:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d014      	beq.n	80051ca <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a0:	f7fe fb68 	bl	8003874 <HAL_GetTick>
 80051a4:	0003      	movs	r3, r0
 80051a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051aa:	f7fe fb63 	bl	8003874 <HAL_GetTick>
 80051ae:	0002      	movs	r2, r0
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b64      	cmp	r3, #100	; 0x64
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e2f9      	b.n	80057b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051bc:	4b8f      	ldr	r3, [pc, #572]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	2380      	movs	r3, #128	; 0x80
 80051c2:	029b      	lsls	r3, r3, #10
 80051c4:	4013      	ands	r3, r2
 80051c6:	d0f0      	beq.n	80051aa <HAL_RCC_OscConfig+0xe6>
 80051c8:	e015      	b.n	80051f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ca:	f7fe fb53 	bl	8003874 <HAL_GetTick>
 80051ce:	0003      	movs	r3, r0
 80051d0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051d4:	f7fe fb4e 	bl	8003874 <HAL_GetTick>
 80051d8:	0002      	movs	r2, r0
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b64      	cmp	r3, #100	; 0x64
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e2e4      	b.n	80057b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051e6:	4b85      	ldr	r3, [pc, #532]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	2380      	movs	r3, #128	; 0x80
 80051ec:	029b      	lsls	r3, r3, #10
 80051ee:	4013      	ands	r3, r2
 80051f0:	d1f0      	bne.n	80051d4 <HAL_RCC_OscConfig+0x110>
 80051f2:	e000      	b.n	80051f6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051f4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2202      	movs	r2, #2
 80051fc:	4013      	ands	r3, r2
 80051fe:	d100      	bne.n	8005202 <HAL_RCC_OscConfig+0x13e>
 8005200:	e099      	b.n	8005336 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	2220      	movs	r2, #32
 800520c:	4013      	ands	r3, r2
 800520e:	d009      	beq.n	8005224 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005210:	4b7a      	ldr	r3, [pc, #488]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	4b79      	ldr	r3, [pc, #484]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 8005216:	2120      	movs	r1, #32
 8005218:	430a      	orrs	r2, r1
 800521a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	2220      	movs	r2, #32
 8005220:	4393      	bics	r3, r2
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	2b04      	cmp	r3, #4
 8005228:	d005      	beq.n	8005236 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	2b0c      	cmp	r3, #12
 800522e:	d13e      	bne.n	80052ae <HAL_RCC_OscConfig+0x1ea>
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d13b      	bne.n	80052ae <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005236:	4b71      	ldr	r3, [pc, #452]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2204      	movs	r2, #4
 800523c:	4013      	ands	r3, r2
 800523e:	d004      	beq.n	800524a <HAL_RCC_OscConfig+0x186>
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e2b2      	b.n	80057b0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800524a:	4b6c      	ldr	r3, [pc, #432]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	4a6e      	ldr	r2, [pc, #440]	; (8005408 <HAL_RCC_OscConfig+0x344>)
 8005250:	4013      	ands	r3, r2
 8005252:	0019      	movs	r1, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	021a      	lsls	r2, r3, #8
 800525a:	4b68      	ldr	r3, [pc, #416]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 800525c:	430a      	orrs	r2, r1
 800525e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005260:	4b66      	ldr	r3, [pc, #408]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2209      	movs	r2, #9
 8005266:	4393      	bics	r3, r2
 8005268:	0019      	movs	r1, r3
 800526a:	4b64      	ldr	r3, [pc, #400]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 800526c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526e:	430a      	orrs	r2, r1
 8005270:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005272:	f000 fbeb 	bl	8005a4c <HAL_RCC_GetSysClockFreq>
 8005276:	0001      	movs	r1, r0
 8005278:	4b60      	ldr	r3, [pc, #384]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	091b      	lsrs	r3, r3, #4
 800527e:	220f      	movs	r2, #15
 8005280:	4013      	ands	r3, r2
 8005282:	4a62      	ldr	r2, [pc, #392]	; (800540c <HAL_RCC_OscConfig+0x348>)
 8005284:	5cd3      	ldrb	r3, [r2, r3]
 8005286:	000a      	movs	r2, r1
 8005288:	40da      	lsrs	r2, r3
 800528a:	4b61      	ldr	r3, [pc, #388]	; (8005410 <HAL_RCC_OscConfig+0x34c>)
 800528c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800528e:	4b61      	ldr	r3, [pc, #388]	; (8005414 <HAL_RCC_OscConfig+0x350>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2513      	movs	r5, #19
 8005294:	197c      	adds	r4, r7, r5
 8005296:	0018      	movs	r0, r3
 8005298:	f7fe faa6 	bl	80037e8 <HAL_InitTick>
 800529c:	0003      	movs	r3, r0
 800529e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80052a0:	197b      	adds	r3, r7, r5
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d046      	beq.n	8005336 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80052a8:	197b      	adds	r3, r7, r5
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	e280      	b.n	80057b0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d027      	beq.n	8005304 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80052b4:	4b51      	ldr	r3, [pc, #324]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2209      	movs	r2, #9
 80052ba:	4393      	bics	r3, r2
 80052bc:	0019      	movs	r1, r3
 80052be:	4b4f      	ldr	r3, [pc, #316]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 80052c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c2:	430a      	orrs	r2, r1
 80052c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c6:	f7fe fad5 	bl	8003874 <HAL_GetTick>
 80052ca:	0003      	movs	r3, r0
 80052cc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052d0:	f7fe fad0 	bl	8003874 <HAL_GetTick>
 80052d4:	0002      	movs	r2, r0
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e266      	b.n	80057b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052e2:	4b46      	ldr	r3, [pc, #280]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2204      	movs	r2, #4
 80052e8:	4013      	ands	r3, r2
 80052ea:	d0f1      	beq.n	80052d0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ec:	4b43      	ldr	r3, [pc, #268]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	4a45      	ldr	r2, [pc, #276]	; (8005408 <HAL_RCC_OscConfig+0x344>)
 80052f2:	4013      	ands	r3, r2
 80052f4:	0019      	movs	r1, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	021a      	lsls	r2, r3, #8
 80052fc:	4b3f      	ldr	r3, [pc, #252]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 80052fe:	430a      	orrs	r2, r1
 8005300:	605a      	str	r2, [r3, #4]
 8005302:	e018      	b.n	8005336 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005304:	4b3d      	ldr	r3, [pc, #244]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	4b3c      	ldr	r3, [pc, #240]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 800530a:	2101      	movs	r1, #1
 800530c:	438a      	bics	r2, r1
 800530e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005310:	f7fe fab0 	bl	8003874 <HAL_GetTick>
 8005314:	0003      	movs	r3, r0
 8005316:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005318:	e008      	b.n	800532c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800531a:	f7fe faab 	bl	8003874 <HAL_GetTick>
 800531e:	0002      	movs	r2, r0
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e241      	b.n	80057b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800532c:	4b33      	ldr	r3, [pc, #204]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2204      	movs	r2, #4
 8005332:	4013      	ands	r3, r2
 8005334:	d1f1      	bne.n	800531a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2210      	movs	r2, #16
 800533c:	4013      	ands	r3, r2
 800533e:	d100      	bne.n	8005342 <HAL_RCC_OscConfig+0x27e>
 8005340:	e0a1      	b.n	8005486 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d140      	bne.n	80053ca <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005348:	4b2c      	ldr	r3, [pc, #176]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	2380      	movs	r3, #128	; 0x80
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4013      	ands	r3, r2
 8005352:	d005      	beq.n	8005360 <HAL_RCC_OscConfig+0x29c>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e227      	b.n	80057b0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005360:	4b26      	ldr	r3, [pc, #152]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	4a2c      	ldr	r2, [pc, #176]	; (8005418 <HAL_RCC_OscConfig+0x354>)
 8005366:	4013      	ands	r3, r2
 8005368:	0019      	movs	r1, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1a      	ldr	r2, [r3, #32]
 800536e:	4b23      	ldr	r3, [pc, #140]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 8005370:	430a      	orrs	r2, r1
 8005372:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005374:	4b21      	ldr	r3, [pc, #132]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	021b      	lsls	r3, r3, #8
 800537a:	0a19      	lsrs	r1, r3, #8
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	061a      	lsls	r2, r3, #24
 8005382:	4b1e      	ldr	r3, [pc, #120]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 8005384:	430a      	orrs	r2, r1
 8005386:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	0b5b      	lsrs	r3, r3, #13
 800538e:	3301      	adds	r3, #1
 8005390:	2280      	movs	r2, #128	; 0x80
 8005392:	0212      	lsls	r2, r2, #8
 8005394:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005396:	4b19      	ldr	r3, [pc, #100]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	091b      	lsrs	r3, r3, #4
 800539c:	210f      	movs	r1, #15
 800539e:	400b      	ands	r3, r1
 80053a0:	491a      	ldr	r1, [pc, #104]	; (800540c <HAL_RCC_OscConfig+0x348>)
 80053a2:	5ccb      	ldrb	r3, [r1, r3]
 80053a4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80053a6:	4b1a      	ldr	r3, [pc, #104]	; (8005410 <HAL_RCC_OscConfig+0x34c>)
 80053a8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80053aa:	4b1a      	ldr	r3, [pc, #104]	; (8005414 <HAL_RCC_OscConfig+0x350>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2513      	movs	r5, #19
 80053b0:	197c      	adds	r4, r7, r5
 80053b2:	0018      	movs	r0, r3
 80053b4:	f7fe fa18 	bl	80037e8 <HAL_InitTick>
 80053b8:	0003      	movs	r3, r0
 80053ba:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80053bc:	197b      	adds	r3, r7, r5
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d060      	beq.n	8005486 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80053c4:	197b      	adds	r3, r7, r5
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	e1f2      	b.n	80057b0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d03f      	beq.n	8005452 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80053d2:	4b0a      	ldr	r3, [pc, #40]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <HAL_RCC_OscConfig+0x338>)
 80053d8:	2180      	movs	r1, #128	; 0x80
 80053da:	0049      	lsls	r1, r1, #1
 80053dc:	430a      	orrs	r2, r1
 80053de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e0:	f7fe fa48 	bl	8003874 <HAL_GetTick>
 80053e4:	0003      	movs	r3, r0
 80053e6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80053e8:	e018      	b.n	800541c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053ea:	f7fe fa43 	bl	8003874 <HAL_GetTick>
 80053ee:	0002      	movs	r2, r0
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d911      	bls.n	800541c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e1d9      	b.n	80057b0 <HAL_RCC_OscConfig+0x6ec>
 80053fc:	40021000 	.word	0x40021000
 8005400:	fffeffff 	.word	0xfffeffff
 8005404:	fffbffff 	.word	0xfffbffff
 8005408:	ffffe0ff 	.word	0xffffe0ff
 800540c:	0800783c 	.word	0x0800783c
 8005410:	20000048 	.word	0x20000048
 8005414:	20000064 	.word	0x20000064
 8005418:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800541c:	4bc9      	ldr	r3, [pc, #804]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	2380      	movs	r3, #128	; 0x80
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4013      	ands	r3, r2
 8005426:	d0e0      	beq.n	80053ea <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005428:	4bc6      	ldr	r3, [pc, #792]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	4ac6      	ldr	r2, [pc, #792]	; (8005748 <HAL_RCC_OscConfig+0x684>)
 800542e:	4013      	ands	r3, r2
 8005430:	0019      	movs	r1, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1a      	ldr	r2, [r3, #32]
 8005436:	4bc3      	ldr	r3, [pc, #780]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 8005438:	430a      	orrs	r2, r1
 800543a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800543c:	4bc1      	ldr	r3, [pc, #772]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	0a19      	lsrs	r1, r3, #8
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	061a      	lsls	r2, r3, #24
 800544a:	4bbe      	ldr	r3, [pc, #760]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 800544c:	430a      	orrs	r2, r1
 800544e:	605a      	str	r2, [r3, #4]
 8005450:	e019      	b.n	8005486 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005452:	4bbc      	ldr	r3, [pc, #752]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	4bbb      	ldr	r3, [pc, #748]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 8005458:	49bc      	ldr	r1, [pc, #752]	; (800574c <HAL_RCC_OscConfig+0x688>)
 800545a:	400a      	ands	r2, r1
 800545c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800545e:	f7fe fa09 	bl	8003874 <HAL_GetTick>
 8005462:	0003      	movs	r3, r0
 8005464:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005468:	f7fe fa04 	bl	8003874 <HAL_GetTick>
 800546c:	0002      	movs	r2, r0
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e19a      	b.n	80057b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800547a:	4bb2      	ldr	r3, [pc, #712]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	2380      	movs	r3, #128	; 0x80
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4013      	ands	r3, r2
 8005484:	d1f0      	bne.n	8005468 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2208      	movs	r2, #8
 800548c:	4013      	ands	r3, r2
 800548e:	d036      	beq.n	80054fe <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d019      	beq.n	80054cc <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005498:	4baa      	ldr	r3, [pc, #680]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 800549a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800549c:	4ba9      	ldr	r3, [pc, #676]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 800549e:	2101      	movs	r1, #1
 80054a0:	430a      	orrs	r2, r1
 80054a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054a4:	f7fe f9e6 	bl	8003874 <HAL_GetTick>
 80054a8:	0003      	movs	r3, r0
 80054aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054ac:	e008      	b.n	80054c0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054ae:	f7fe f9e1 	bl	8003874 <HAL_GetTick>
 80054b2:	0002      	movs	r2, r0
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e177      	b.n	80057b0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054c0:	4ba0      	ldr	r3, [pc, #640]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 80054c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c4:	2202      	movs	r2, #2
 80054c6:	4013      	ands	r3, r2
 80054c8:	d0f1      	beq.n	80054ae <HAL_RCC_OscConfig+0x3ea>
 80054ca:	e018      	b.n	80054fe <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054cc:	4b9d      	ldr	r3, [pc, #628]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 80054ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054d0:	4b9c      	ldr	r3, [pc, #624]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 80054d2:	2101      	movs	r1, #1
 80054d4:	438a      	bics	r2, r1
 80054d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054d8:	f7fe f9cc 	bl	8003874 <HAL_GetTick>
 80054dc:	0003      	movs	r3, r0
 80054de:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054e2:	f7fe f9c7 	bl	8003874 <HAL_GetTick>
 80054e6:	0002      	movs	r2, r0
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e15d      	b.n	80057b0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054f4:	4b93      	ldr	r3, [pc, #588]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 80054f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f8:	2202      	movs	r2, #2
 80054fa:	4013      	ands	r3, r2
 80054fc:	d1f1      	bne.n	80054e2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2204      	movs	r2, #4
 8005504:	4013      	ands	r3, r2
 8005506:	d100      	bne.n	800550a <HAL_RCC_OscConfig+0x446>
 8005508:	e0ae      	b.n	8005668 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800550a:	2023      	movs	r0, #35	; 0x23
 800550c:	183b      	adds	r3, r7, r0
 800550e:	2200      	movs	r2, #0
 8005510:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005512:	4b8c      	ldr	r3, [pc, #560]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 8005514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005516:	2380      	movs	r3, #128	; 0x80
 8005518:	055b      	lsls	r3, r3, #21
 800551a:	4013      	ands	r3, r2
 800551c:	d109      	bne.n	8005532 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800551e:	4b89      	ldr	r3, [pc, #548]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 8005520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005522:	4b88      	ldr	r3, [pc, #544]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 8005524:	2180      	movs	r1, #128	; 0x80
 8005526:	0549      	lsls	r1, r1, #21
 8005528:	430a      	orrs	r2, r1
 800552a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800552c:	183b      	adds	r3, r7, r0
 800552e:	2201      	movs	r2, #1
 8005530:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005532:	4b87      	ldr	r3, [pc, #540]	; (8005750 <HAL_RCC_OscConfig+0x68c>)
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	2380      	movs	r3, #128	; 0x80
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	4013      	ands	r3, r2
 800553c:	d11a      	bne.n	8005574 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800553e:	4b84      	ldr	r3, [pc, #528]	; (8005750 <HAL_RCC_OscConfig+0x68c>)
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4b83      	ldr	r3, [pc, #524]	; (8005750 <HAL_RCC_OscConfig+0x68c>)
 8005544:	2180      	movs	r1, #128	; 0x80
 8005546:	0049      	lsls	r1, r1, #1
 8005548:	430a      	orrs	r2, r1
 800554a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800554c:	f7fe f992 	bl	8003874 <HAL_GetTick>
 8005550:	0003      	movs	r3, r0
 8005552:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005554:	e008      	b.n	8005568 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005556:	f7fe f98d 	bl	8003874 <HAL_GetTick>
 800555a:	0002      	movs	r2, r0
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b64      	cmp	r3, #100	; 0x64
 8005562:	d901      	bls.n	8005568 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e123      	b.n	80057b0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005568:	4b79      	ldr	r3, [pc, #484]	; (8005750 <HAL_RCC_OscConfig+0x68c>)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	2380      	movs	r3, #128	; 0x80
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	4013      	ands	r3, r2
 8005572:	d0f0      	beq.n	8005556 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	2380      	movs	r3, #128	; 0x80
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	429a      	cmp	r2, r3
 800557e:	d107      	bne.n	8005590 <HAL_RCC_OscConfig+0x4cc>
 8005580:	4b70      	ldr	r3, [pc, #448]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 8005582:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005584:	4b6f      	ldr	r3, [pc, #444]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 8005586:	2180      	movs	r1, #128	; 0x80
 8005588:	0049      	lsls	r1, r1, #1
 800558a:	430a      	orrs	r2, r1
 800558c:	651a      	str	r2, [r3, #80]	; 0x50
 800558e:	e031      	b.n	80055f4 <HAL_RCC_OscConfig+0x530>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10c      	bne.n	80055b2 <HAL_RCC_OscConfig+0x4ee>
 8005598:	4b6a      	ldr	r3, [pc, #424]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 800559a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800559c:	4b69      	ldr	r3, [pc, #420]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 800559e:	496b      	ldr	r1, [pc, #428]	; (800574c <HAL_RCC_OscConfig+0x688>)
 80055a0:	400a      	ands	r2, r1
 80055a2:	651a      	str	r2, [r3, #80]	; 0x50
 80055a4:	4b67      	ldr	r3, [pc, #412]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 80055a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055a8:	4b66      	ldr	r3, [pc, #408]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 80055aa:	496a      	ldr	r1, [pc, #424]	; (8005754 <HAL_RCC_OscConfig+0x690>)
 80055ac:	400a      	ands	r2, r1
 80055ae:	651a      	str	r2, [r3, #80]	; 0x50
 80055b0:	e020      	b.n	80055f4 <HAL_RCC_OscConfig+0x530>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	23a0      	movs	r3, #160	; 0xa0
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d10e      	bne.n	80055dc <HAL_RCC_OscConfig+0x518>
 80055be:	4b61      	ldr	r3, [pc, #388]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 80055c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055c2:	4b60      	ldr	r3, [pc, #384]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 80055c4:	2180      	movs	r1, #128	; 0x80
 80055c6:	00c9      	lsls	r1, r1, #3
 80055c8:	430a      	orrs	r2, r1
 80055ca:	651a      	str	r2, [r3, #80]	; 0x50
 80055cc:	4b5d      	ldr	r3, [pc, #372]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 80055ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055d0:	4b5c      	ldr	r3, [pc, #368]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 80055d2:	2180      	movs	r1, #128	; 0x80
 80055d4:	0049      	lsls	r1, r1, #1
 80055d6:	430a      	orrs	r2, r1
 80055d8:	651a      	str	r2, [r3, #80]	; 0x50
 80055da:	e00b      	b.n	80055f4 <HAL_RCC_OscConfig+0x530>
 80055dc:	4b59      	ldr	r3, [pc, #356]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 80055de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055e0:	4b58      	ldr	r3, [pc, #352]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 80055e2:	495a      	ldr	r1, [pc, #360]	; (800574c <HAL_RCC_OscConfig+0x688>)
 80055e4:	400a      	ands	r2, r1
 80055e6:	651a      	str	r2, [r3, #80]	; 0x50
 80055e8:	4b56      	ldr	r3, [pc, #344]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 80055ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055ec:	4b55      	ldr	r3, [pc, #340]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 80055ee:	4959      	ldr	r1, [pc, #356]	; (8005754 <HAL_RCC_OscConfig+0x690>)
 80055f0:	400a      	ands	r2, r1
 80055f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d015      	beq.n	8005628 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055fc:	f7fe f93a 	bl	8003874 <HAL_GetTick>
 8005600:	0003      	movs	r3, r0
 8005602:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005604:	e009      	b.n	800561a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005606:	f7fe f935 	bl	8003874 <HAL_GetTick>
 800560a:	0002      	movs	r2, r0
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	4a51      	ldr	r2, [pc, #324]	; (8005758 <HAL_RCC_OscConfig+0x694>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e0ca      	b.n	80057b0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800561a:	4b4a      	ldr	r3, [pc, #296]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 800561c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800561e:	2380      	movs	r3, #128	; 0x80
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4013      	ands	r3, r2
 8005624:	d0ef      	beq.n	8005606 <HAL_RCC_OscConfig+0x542>
 8005626:	e014      	b.n	8005652 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005628:	f7fe f924 	bl	8003874 <HAL_GetTick>
 800562c:	0003      	movs	r3, r0
 800562e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005630:	e009      	b.n	8005646 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005632:	f7fe f91f 	bl	8003874 <HAL_GetTick>
 8005636:	0002      	movs	r2, r0
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	4a46      	ldr	r2, [pc, #280]	; (8005758 <HAL_RCC_OscConfig+0x694>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e0b4      	b.n	80057b0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005646:	4b3f      	ldr	r3, [pc, #252]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 8005648:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800564a:	2380      	movs	r3, #128	; 0x80
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4013      	ands	r3, r2
 8005650:	d1ef      	bne.n	8005632 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005652:	2323      	movs	r3, #35	; 0x23
 8005654:	18fb      	adds	r3, r7, r3
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d105      	bne.n	8005668 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800565c:	4b39      	ldr	r3, [pc, #228]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 800565e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005660:	4b38      	ldr	r3, [pc, #224]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 8005662:	493e      	ldr	r1, [pc, #248]	; (800575c <HAL_RCC_OscConfig+0x698>)
 8005664:	400a      	ands	r2, r1
 8005666:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	2b00      	cmp	r3, #0
 800566e:	d100      	bne.n	8005672 <HAL_RCC_OscConfig+0x5ae>
 8005670:	e09d      	b.n	80057ae <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	2b0c      	cmp	r3, #12
 8005676:	d100      	bne.n	800567a <HAL_RCC_OscConfig+0x5b6>
 8005678:	e076      	b.n	8005768 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567e:	2b02      	cmp	r3, #2
 8005680:	d145      	bne.n	800570e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005682:	4b30      	ldr	r3, [pc, #192]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	4b2f      	ldr	r3, [pc, #188]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 8005688:	4935      	ldr	r1, [pc, #212]	; (8005760 <HAL_RCC_OscConfig+0x69c>)
 800568a:	400a      	ands	r2, r1
 800568c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800568e:	f7fe f8f1 	bl	8003874 <HAL_GetTick>
 8005692:	0003      	movs	r3, r0
 8005694:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005698:	f7fe f8ec 	bl	8003874 <HAL_GetTick>
 800569c:	0002      	movs	r2, r0
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e082      	b.n	80057b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80056aa:	4b26      	ldr	r3, [pc, #152]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	2380      	movs	r3, #128	; 0x80
 80056b0:	049b      	lsls	r3, r3, #18
 80056b2:	4013      	ands	r3, r2
 80056b4:	d1f0      	bne.n	8005698 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056b6:	4b23      	ldr	r3, [pc, #140]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	4a2a      	ldr	r2, [pc, #168]	; (8005764 <HAL_RCC_OscConfig+0x6a0>)
 80056bc:	4013      	ands	r3, r2
 80056be:	0019      	movs	r1, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	431a      	orrs	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ce:	431a      	orrs	r2, r3
 80056d0:	4b1c      	ldr	r3, [pc, #112]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 80056d2:	430a      	orrs	r2, r1
 80056d4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056d6:	4b1b      	ldr	r3, [pc, #108]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	4b1a      	ldr	r3, [pc, #104]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 80056dc:	2180      	movs	r1, #128	; 0x80
 80056de:	0449      	lsls	r1, r1, #17
 80056e0:	430a      	orrs	r2, r1
 80056e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e4:	f7fe f8c6 	bl	8003874 <HAL_GetTick>
 80056e8:	0003      	movs	r3, r0
 80056ea:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80056ec:	e008      	b.n	8005700 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ee:	f7fe f8c1 	bl	8003874 <HAL_GetTick>
 80056f2:	0002      	movs	r2, r0
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e057      	b.n	80057b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005700:	4b10      	ldr	r3, [pc, #64]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	2380      	movs	r3, #128	; 0x80
 8005706:	049b      	lsls	r3, r3, #18
 8005708:	4013      	ands	r3, r2
 800570a:	d0f0      	beq.n	80056ee <HAL_RCC_OscConfig+0x62a>
 800570c:	e04f      	b.n	80057ae <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800570e:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4b0c      	ldr	r3, [pc, #48]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 8005714:	4912      	ldr	r1, [pc, #72]	; (8005760 <HAL_RCC_OscConfig+0x69c>)
 8005716:	400a      	ands	r2, r1
 8005718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571a:	f7fe f8ab 	bl	8003874 <HAL_GetTick>
 800571e:	0003      	movs	r3, r0
 8005720:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005724:	f7fe f8a6 	bl	8003874 <HAL_GetTick>
 8005728:	0002      	movs	r2, r0
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e03c      	b.n	80057b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005736:	4b03      	ldr	r3, [pc, #12]	; (8005744 <HAL_RCC_OscConfig+0x680>)
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	2380      	movs	r3, #128	; 0x80
 800573c:	049b      	lsls	r3, r3, #18
 800573e:	4013      	ands	r3, r2
 8005740:	d1f0      	bne.n	8005724 <HAL_RCC_OscConfig+0x660>
 8005742:	e034      	b.n	80057ae <HAL_RCC_OscConfig+0x6ea>
 8005744:	40021000 	.word	0x40021000
 8005748:	ffff1fff 	.word	0xffff1fff
 800574c:	fffffeff 	.word	0xfffffeff
 8005750:	40007000 	.word	0x40007000
 8005754:	fffffbff 	.word	0xfffffbff
 8005758:	00001388 	.word	0x00001388
 800575c:	efffffff 	.word	0xefffffff
 8005760:	feffffff 	.word	0xfeffffff
 8005764:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e01d      	b.n	80057b0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005774:	4b10      	ldr	r3, [pc, #64]	; (80057b8 <HAL_RCC_OscConfig+0x6f4>)
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	2380      	movs	r3, #128	; 0x80
 800577e:	025b      	lsls	r3, r3, #9
 8005780:	401a      	ands	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005786:	429a      	cmp	r2, r3
 8005788:	d10f      	bne.n	80057aa <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	23f0      	movs	r3, #240	; 0xf0
 800578e:	039b      	lsls	r3, r3, #14
 8005790:	401a      	ands	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005796:	429a      	cmp	r2, r3
 8005798:	d107      	bne.n	80057aa <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	23c0      	movs	r3, #192	; 0xc0
 800579e:	041b      	lsls	r3, r3, #16
 80057a0:	401a      	ands	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d001      	beq.n	80057ae <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	0018      	movs	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	b00a      	add	sp, #40	; 0x28
 80057b6:	bdb0      	pop	{r4, r5, r7, pc}
 80057b8:	40021000 	.word	0x40021000

080057bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057bc:	b5b0      	push	{r4, r5, r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e128      	b.n	8005a22 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057d0:	4b96      	ldr	r3, [pc, #600]	; (8005a2c <HAL_RCC_ClockConfig+0x270>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2201      	movs	r2, #1
 80057d6:	4013      	ands	r3, r2
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d91e      	bls.n	800581c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057de:	4b93      	ldr	r3, [pc, #588]	; (8005a2c <HAL_RCC_ClockConfig+0x270>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2201      	movs	r2, #1
 80057e4:	4393      	bics	r3, r2
 80057e6:	0019      	movs	r1, r3
 80057e8:	4b90      	ldr	r3, [pc, #576]	; (8005a2c <HAL_RCC_ClockConfig+0x270>)
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057f0:	f7fe f840 	bl	8003874 <HAL_GetTick>
 80057f4:	0003      	movs	r3, r0
 80057f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057f8:	e009      	b.n	800580e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057fa:	f7fe f83b 	bl	8003874 <HAL_GetTick>
 80057fe:	0002      	movs	r2, r0
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	4a8a      	ldr	r2, [pc, #552]	; (8005a30 <HAL_RCC_ClockConfig+0x274>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d901      	bls.n	800580e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e109      	b.n	8005a22 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800580e:	4b87      	ldr	r3, [pc, #540]	; (8005a2c <HAL_RCC_ClockConfig+0x270>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2201      	movs	r2, #1
 8005814:	4013      	ands	r3, r2
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d1ee      	bne.n	80057fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2202      	movs	r2, #2
 8005822:	4013      	ands	r3, r2
 8005824:	d009      	beq.n	800583a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005826:	4b83      	ldr	r3, [pc, #524]	; (8005a34 <HAL_RCC_ClockConfig+0x278>)
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	22f0      	movs	r2, #240	; 0xf0
 800582c:	4393      	bics	r3, r2
 800582e:	0019      	movs	r1, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	4b7f      	ldr	r3, [pc, #508]	; (8005a34 <HAL_RCC_ClockConfig+0x278>)
 8005836:	430a      	orrs	r2, r1
 8005838:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2201      	movs	r2, #1
 8005840:	4013      	ands	r3, r2
 8005842:	d100      	bne.n	8005846 <HAL_RCC_ClockConfig+0x8a>
 8005844:	e089      	b.n	800595a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2b02      	cmp	r3, #2
 800584c:	d107      	bne.n	800585e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800584e:	4b79      	ldr	r3, [pc, #484]	; (8005a34 <HAL_RCC_ClockConfig+0x278>)
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	2380      	movs	r3, #128	; 0x80
 8005854:	029b      	lsls	r3, r3, #10
 8005856:	4013      	ands	r3, r2
 8005858:	d120      	bne.n	800589c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e0e1      	b.n	8005a22 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b03      	cmp	r3, #3
 8005864:	d107      	bne.n	8005876 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005866:	4b73      	ldr	r3, [pc, #460]	; (8005a34 <HAL_RCC_ClockConfig+0x278>)
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	2380      	movs	r3, #128	; 0x80
 800586c:	049b      	lsls	r3, r3, #18
 800586e:	4013      	ands	r3, r2
 8005870:	d114      	bne.n	800589c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e0d5      	b.n	8005a22 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d106      	bne.n	800588c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800587e:	4b6d      	ldr	r3, [pc, #436]	; (8005a34 <HAL_RCC_ClockConfig+0x278>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2204      	movs	r2, #4
 8005884:	4013      	ands	r3, r2
 8005886:	d109      	bne.n	800589c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e0ca      	b.n	8005a22 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800588c:	4b69      	ldr	r3, [pc, #420]	; (8005a34 <HAL_RCC_ClockConfig+0x278>)
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	2380      	movs	r3, #128	; 0x80
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4013      	ands	r3, r2
 8005896:	d101      	bne.n	800589c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e0c2      	b.n	8005a22 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800589c:	4b65      	ldr	r3, [pc, #404]	; (8005a34 <HAL_RCC_ClockConfig+0x278>)
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	2203      	movs	r2, #3
 80058a2:	4393      	bics	r3, r2
 80058a4:	0019      	movs	r1, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	4b62      	ldr	r3, [pc, #392]	; (8005a34 <HAL_RCC_ClockConfig+0x278>)
 80058ac:	430a      	orrs	r2, r1
 80058ae:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058b0:	f7fd ffe0 	bl	8003874 <HAL_GetTick>
 80058b4:	0003      	movs	r3, r0
 80058b6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d111      	bne.n	80058e4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058c0:	e009      	b.n	80058d6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058c2:	f7fd ffd7 	bl	8003874 <HAL_GetTick>
 80058c6:	0002      	movs	r2, r0
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	4a58      	ldr	r2, [pc, #352]	; (8005a30 <HAL_RCC_ClockConfig+0x274>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e0a5      	b.n	8005a22 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058d6:	4b57      	ldr	r3, [pc, #348]	; (8005a34 <HAL_RCC_ClockConfig+0x278>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	220c      	movs	r2, #12
 80058dc:	4013      	ands	r3, r2
 80058de:	2b08      	cmp	r3, #8
 80058e0:	d1ef      	bne.n	80058c2 <HAL_RCC_ClockConfig+0x106>
 80058e2:	e03a      	b.n	800595a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d111      	bne.n	8005910 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058ec:	e009      	b.n	8005902 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ee:	f7fd ffc1 	bl	8003874 <HAL_GetTick>
 80058f2:	0002      	movs	r2, r0
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	4a4d      	ldr	r2, [pc, #308]	; (8005a30 <HAL_RCC_ClockConfig+0x274>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e08f      	b.n	8005a22 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005902:	4b4c      	ldr	r3, [pc, #304]	; (8005a34 <HAL_RCC_ClockConfig+0x278>)
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	220c      	movs	r2, #12
 8005908:	4013      	ands	r3, r2
 800590a:	2b0c      	cmp	r3, #12
 800590c:	d1ef      	bne.n	80058ee <HAL_RCC_ClockConfig+0x132>
 800590e:	e024      	b.n	800595a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d11b      	bne.n	8005950 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005918:	e009      	b.n	800592e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800591a:	f7fd ffab 	bl	8003874 <HAL_GetTick>
 800591e:	0002      	movs	r2, r0
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	4a42      	ldr	r2, [pc, #264]	; (8005a30 <HAL_RCC_ClockConfig+0x274>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d901      	bls.n	800592e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e079      	b.n	8005a22 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800592e:	4b41      	ldr	r3, [pc, #260]	; (8005a34 <HAL_RCC_ClockConfig+0x278>)
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	220c      	movs	r2, #12
 8005934:	4013      	ands	r3, r2
 8005936:	2b04      	cmp	r3, #4
 8005938:	d1ef      	bne.n	800591a <HAL_RCC_ClockConfig+0x15e>
 800593a:	e00e      	b.n	800595a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800593c:	f7fd ff9a 	bl	8003874 <HAL_GetTick>
 8005940:	0002      	movs	r2, r0
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	4a3a      	ldr	r2, [pc, #232]	; (8005a30 <HAL_RCC_ClockConfig+0x274>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d901      	bls.n	8005950 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e068      	b.n	8005a22 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005950:	4b38      	ldr	r3, [pc, #224]	; (8005a34 <HAL_RCC_ClockConfig+0x278>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	220c      	movs	r2, #12
 8005956:	4013      	ands	r3, r2
 8005958:	d1f0      	bne.n	800593c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800595a:	4b34      	ldr	r3, [pc, #208]	; (8005a2c <HAL_RCC_ClockConfig+0x270>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2201      	movs	r2, #1
 8005960:	4013      	ands	r3, r2
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d21e      	bcs.n	80059a6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005968:	4b30      	ldr	r3, [pc, #192]	; (8005a2c <HAL_RCC_ClockConfig+0x270>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2201      	movs	r2, #1
 800596e:	4393      	bics	r3, r2
 8005970:	0019      	movs	r1, r3
 8005972:	4b2e      	ldr	r3, [pc, #184]	; (8005a2c <HAL_RCC_ClockConfig+0x270>)
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800597a:	f7fd ff7b 	bl	8003874 <HAL_GetTick>
 800597e:	0003      	movs	r3, r0
 8005980:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005982:	e009      	b.n	8005998 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005984:	f7fd ff76 	bl	8003874 <HAL_GetTick>
 8005988:	0002      	movs	r2, r0
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	4a28      	ldr	r2, [pc, #160]	; (8005a30 <HAL_RCC_ClockConfig+0x274>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e044      	b.n	8005a22 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005998:	4b24      	ldr	r3, [pc, #144]	; (8005a2c <HAL_RCC_ClockConfig+0x270>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2201      	movs	r2, #1
 800599e:	4013      	ands	r3, r2
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d1ee      	bne.n	8005984 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2204      	movs	r2, #4
 80059ac:	4013      	ands	r3, r2
 80059ae:	d009      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059b0:	4b20      	ldr	r3, [pc, #128]	; (8005a34 <HAL_RCC_ClockConfig+0x278>)
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	4a20      	ldr	r2, [pc, #128]	; (8005a38 <HAL_RCC_ClockConfig+0x27c>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	0019      	movs	r1, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	4b1d      	ldr	r3, [pc, #116]	; (8005a34 <HAL_RCC_ClockConfig+0x278>)
 80059c0:	430a      	orrs	r2, r1
 80059c2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2208      	movs	r2, #8
 80059ca:	4013      	ands	r3, r2
 80059cc:	d00a      	beq.n	80059e4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059ce:	4b19      	ldr	r3, [pc, #100]	; (8005a34 <HAL_RCC_ClockConfig+0x278>)
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	4a1a      	ldr	r2, [pc, #104]	; (8005a3c <HAL_RCC_ClockConfig+0x280>)
 80059d4:	4013      	ands	r3, r2
 80059d6:	0019      	movs	r1, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	00da      	lsls	r2, r3, #3
 80059de:	4b15      	ldr	r3, [pc, #84]	; (8005a34 <HAL_RCC_ClockConfig+0x278>)
 80059e0:	430a      	orrs	r2, r1
 80059e2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059e4:	f000 f832 	bl	8005a4c <HAL_RCC_GetSysClockFreq>
 80059e8:	0001      	movs	r1, r0
 80059ea:	4b12      	ldr	r3, [pc, #72]	; (8005a34 <HAL_RCC_ClockConfig+0x278>)
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	091b      	lsrs	r3, r3, #4
 80059f0:	220f      	movs	r2, #15
 80059f2:	4013      	ands	r3, r2
 80059f4:	4a12      	ldr	r2, [pc, #72]	; (8005a40 <HAL_RCC_ClockConfig+0x284>)
 80059f6:	5cd3      	ldrb	r3, [r2, r3]
 80059f8:	000a      	movs	r2, r1
 80059fa:	40da      	lsrs	r2, r3
 80059fc:	4b11      	ldr	r3, [pc, #68]	; (8005a44 <HAL_RCC_ClockConfig+0x288>)
 80059fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a00:	4b11      	ldr	r3, [pc, #68]	; (8005a48 <HAL_RCC_ClockConfig+0x28c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	250b      	movs	r5, #11
 8005a06:	197c      	adds	r4, r7, r5
 8005a08:	0018      	movs	r0, r3
 8005a0a:	f7fd feed 	bl	80037e8 <HAL_InitTick>
 8005a0e:	0003      	movs	r3, r0
 8005a10:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005a12:	197b      	adds	r3, r7, r5
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005a1a:	197b      	adds	r3, r7, r5
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	e000      	b.n	8005a22 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	0018      	movs	r0, r3
 8005a24:	46bd      	mov	sp, r7
 8005a26:	b004      	add	sp, #16
 8005a28:	bdb0      	pop	{r4, r5, r7, pc}
 8005a2a:	46c0      	nop			; (mov r8, r8)
 8005a2c:	40022000 	.word	0x40022000
 8005a30:	00001388 	.word	0x00001388
 8005a34:	40021000 	.word	0x40021000
 8005a38:	fffff8ff 	.word	0xfffff8ff
 8005a3c:	ffffc7ff 	.word	0xffffc7ff
 8005a40:	0800783c 	.word	0x0800783c
 8005a44:	20000048 	.word	0x20000048
 8005a48:	20000064 	.word	0x20000064

08005a4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a4c:	b5b0      	push	{r4, r5, r7, lr}
 8005a4e:	b08e      	sub	sp, #56	; 0x38
 8005a50:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005a52:	4b4c      	ldr	r3, [pc, #304]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x138>)
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a5a:	230c      	movs	r3, #12
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	2b0c      	cmp	r3, #12
 8005a60:	d014      	beq.n	8005a8c <HAL_RCC_GetSysClockFreq+0x40>
 8005a62:	d900      	bls.n	8005a66 <HAL_RCC_GetSysClockFreq+0x1a>
 8005a64:	e07b      	b.n	8005b5e <HAL_RCC_GetSysClockFreq+0x112>
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d002      	beq.n	8005a70 <HAL_RCC_GetSysClockFreq+0x24>
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d00b      	beq.n	8005a86 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a6e:	e076      	b.n	8005b5e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005a70:	4b44      	ldr	r3, [pc, #272]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x138>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2210      	movs	r2, #16
 8005a76:	4013      	ands	r3, r2
 8005a78:	d002      	beq.n	8005a80 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005a7a:	4b43      	ldr	r3, [pc, #268]	; (8005b88 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005a7c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005a7e:	e07c      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005a80:	4b42      	ldr	r3, [pc, #264]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x140>)
 8005a82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005a84:	e079      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a86:	4b42      	ldr	r3, [pc, #264]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x144>)
 8005a88:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005a8a:	e076      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8e:	0c9a      	lsrs	r2, r3, #18
 8005a90:	230f      	movs	r3, #15
 8005a92:	401a      	ands	r2, r3
 8005a94:	4b3f      	ldr	r3, [pc, #252]	; (8005b94 <HAL_RCC_GetSysClockFreq+0x148>)
 8005a96:	5c9b      	ldrb	r3, [r3, r2]
 8005a98:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9c:	0d9a      	lsrs	r2, r3, #22
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005aa6:	4b37      	ldr	r3, [pc, #220]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x138>)
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	2380      	movs	r3, #128	; 0x80
 8005aac:	025b      	lsls	r3, r3, #9
 8005aae:	4013      	ands	r3, r2
 8005ab0:	d01a      	beq.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	61bb      	str	r3, [r7, #24]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	61fb      	str	r3, [r7, #28]
 8005aba:	4a35      	ldr	r2, [pc, #212]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x144>)
 8005abc:	2300      	movs	r3, #0
 8005abe:	69b8      	ldr	r0, [r7, #24]
 8005ac0:	69f9      	ldr	r1, [r7, #28]
 8005ac2:	f7fa fcb7 	bl	8000434 <__aeabi_lmul>
 8005ac6:	0002      	movs	r2, r0
 8005ac8:	000b      	movs	r3, r1
 8005aca:	0010      	movs	r0, r2
 8005acc:	0019      	movs	r1, r3
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f7fa fc8b 	bl	80003f4 <__aeabi_uldivmod>
 8005ade:	0002      	movs	r2, r0
 8005ae0:	000b      	movs	r3, r1
 8005ae2:	0013      	movs	r3, r2
 8005ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae6:	e037      	b.n	8005b58 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005ae8:	4b26      	ldr	r3, [pc, #152]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x138>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2210      	movs	r2, #16
 8005aee:	4013      	ands	r3, r2
 8005af0:	d01a      	beq.n	8005b28 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	60bb      	str	r3, [r7, #8]
 8005af6:	2300      	movs	r3, #0
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	4a23      	ldr	r2, [pc, #140]	; (8005b88 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005afc:	2300      	movs	r3, #0
 8005afe:	68b8      	ldr	r0, [r7, #8]
 8005b00:	68f9      	ldr	r1, [r7, #12]
 8005b02:	f7fa fc97 	bl	8000434 <__aeabi_lmul>
 8005b06:	0002      	movs	r2, r0
 8005b08:	000b      	movs	r3, r1
 8005b0a:	0010      	movs	r0, r2
 8005b0c:	0019      	movs	r1, r3
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	603b      	str	r3, [r7, #0]
 8005b12:	2300      	movs	r3, #0
 8005b14:	607b      	str	r3, [r7, #4]
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f7fa fc6b 	bl	80003f4 <__aeabi_uldivmod>
 8005b1e:	0002      	movs	r2, r0
 8005b20:	000b      	movs	r3, r1
 8005b22:	0013      	movs	r3, r2
 8005b24:	637b      	str	r3, [r7, #52]	; 0x34
 8005b26:	e017      	b.n	8005b58 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	0019      	movs	r1, r3
 8005b30:	4a16      	ldr	r2, [pc, #88]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x140>)
 8005b32:	2300      	movs	r3, #0
 8005b34:	f7fa fc7e 	bl	8000434 <__aeabi_lmul>
 8005b38:	0002      	movs	r2, r0
 8005b3a:	000b      	movs	r3, r1
 8005b3c:	0010      	movs	r0, r2
 8005b3e:	0019      	movs	r1, r3
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	001c      	movs	r4, r3
 8005b44:	2300      	movs	r3, #0
 8005b46:	001d      	movs	r5, r3
 8005b48:	0022      	movs	r2, r4
 8005b4a:	002b      	movs	r3, r5
 8005b4c:	f7fa fc52 	bl	80003f4 <__aeabi_uldivmod>
 8005b50:	0002      	movs	r2, r0
 8005b52:	000b      	movs	r3, r1
 8005b54:	0013      	movs	r3, r2
 8005b56:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b5c:	e00d      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005b5e:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x138>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	0b5b      	lsrs	r3, r3, #13
 8005b64:	2207      	movs	r2, #7
 8005b66:	4013      	ands	r3, r2
 8005b68:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	2280      	movs	r2, #128	; 0x80
 8005b70:	0212      	lsls	r2, r2, #8
 8005b72:	409a      	lsls	r2, r3
 8005b74:	0013      	movs	r3, r2
 8005b76:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b78:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	b00e      	add	sp, #56	; 0x38
 8005b82:	bdb0      	pop	{r4, r5, r7, pc}
 8005b84:	40021000 	.word	0x40021000
 8005b88:	003d0900 	.word	0x003d0900
 8005b8c:	00f42400 	.word	0x00f42400
 8005b90:	007a1200 	.word	0x007a1200
 8005b94:	0800784c 	.word	0x0800784c

08005b98 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005ba0:	2017      	movs	r0, #23
 8005ba2:	183b      	adds	r3, r7, r0
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2220      	movs	r2, #32
 8005bae:	4013      	ands	r3, r2
 8005bb0:	d100      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8005bb2:	e0c7      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bb4:	4b84      	ldr	r3, [pc, #528]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bb8:	2380      	movs	r3, #128	; 0x80
 8005bba:	055b      	lsls	r3, r3, #21
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	d109      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bc0:	4b81      	ldr	r3, [pc, #516]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bc4:	4b80      	ldr	r3, [pc, #512]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005bc6:	2180      	movs	r1, #128	; 0x80
 8005bc8:	0549      	lsls	r1, r1, #21
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005bce:	183b      	adds	r3, r7, r0
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd4:	4b7d      	ldr	r3, [pc, #500]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	2380      	movs	r3, #128	; 0x80
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	4013      	ands	r3, r2
 8005bde:	d11a      	bne.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005be0:	4b7a      	ldr	r3, [pc, #488]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	4b79      	ldr	r3, [pc, #484]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005be6:	2180      	movs	r1, #128	; 0x80
 8005be8:	0049      	lsls	r1, r1, #1
 8005bea:	430a      	orrs	r2, r1
 8005bec:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bee:	f7fd fe41 	bl	8003874 <HAL_GetTick>
 8005bf2:	0003      	movs	r3, r0
 8005bf4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf6:	e008      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bf8:	f7fd fe3c 	bl	8003874 <HAL_GetTick>
 8005bfc:	0002      	movs	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b64      	cmp	r3, #100	; 0x64
 8005c04:	d901      	bls.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e0d9      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c0a:	4b70      	ldr	r3, [pc, #448]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	2380      	movs	r3, #128	; 0x80
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	4013      	ands	r3, r2
 8005c14:	d0f0      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005c16:	4b6c      	ldr	r3, [pc, #432]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	23c0      	movs	r3, #192	; 0xc0
 8005c1c:	039b      	lsls	r3, r3, #14
 8005c1e:	4013      	ands	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	23c0      	movs	r3, #192	; 0xc0
 8005c28:	039b      	lsls	r3, r3, #14
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d013      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	23c0      	movs	r3, #192	; 0xc0
 8005c38:	029b      	lsls	r3, r3, #10
 8005c3a:	401a      	ands	r2, r3
 8005c3c:	23c0      	movs	r3, #192	; 0xc0
 8005c3e:	029b      	lsls	r3, r3, #10
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d10a      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c44:	4b60      	ldr	r3, [pc, #384]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	2380      	movs	r3, #128	; 0x80
 8005c4a:	029b      	lsls	r3, r3, #10
 8005c4c:	401a      	ands	r2, r3
 8005c4e:	2380      	movs	r3, #128	; 0x80
 8005c50:	029b      	lsls	r3, r3, #10
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d101      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e0b1      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005c5a:	4b5b      	ldr	r3, [pc, #364]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005c5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c5e:	23c0      	movs	r3, #192	; 0xc0
 8005c60:	029b      	lsls	r3, r3, #10
 8005c62:	4013      	ands	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d03b      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	23c0      	movs	r3, #192	; 0xc0
 8005c72:	029b      	lsls	r3, r3, #10
 8005c74:	4013      	ands	r3, r2
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d033      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2220      	movs	r2, #32
 8005c82:	4013      	ands	r3, r2
 8005c84:	d02e      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005c86:	4b50      	ldr	r3, [pc, #320]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c8a:	4a51      	ldr	r2, [pc, #324]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c90:	4b4d      	ldr	r3, [pc, #308]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005c92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c94:	4b4c      	ldr	r3, [pc, #304]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005c96:	2180      	movs	r1, #128	; 0x80
 8005c98:	0309      	lsls	r1, r1, #12
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c9e:	4b4a      	ldr	r3, [pc, #296]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005ca0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ca2:	4b49      	ldr	r3, [pc, #292]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005ca4:	494b      	ldr	r1, [pc, #300]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005ca6:	400a      	ands	r2, r1
 8005ca8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005caa:	4b47      	ldr	r3, [pc, #284]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	2380      	movs	r3, #128	; 0x80
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	d014      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cba:	f7fd fddb 	bl	8003874 <HAL_GetTick>
 8005cbe:	0003      	movs	r3, r0
 8005cc0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cc2:	e009      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cc4:	f7fd fdd6 	bl	8003874 <HAL_GetTick>
 8005cc8:	0002      	movs	r2, r0
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	4a42      	ldr	r2, [pc, #264]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d901      	bls.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e072      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cd8:	4b3b      	ldr	r3, [pc, #236]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005cda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cdc:	2380      	movs	r3, #128	; 0x80
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	d0ef      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	4013      	ands	r3, r2
 8005cec:	d01f      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	23c0      	movs	r3, #192	; 0xc0
 8005cf4:	029b      	lsls	r3, r3, #10
 8005cf6:	401a      	ands	r2, r3
 8005cf8:	23c0      	movs	r3, #192	; 0xc0
 8005cfa:	029b      	lsls	r3, r3, #10
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d10c      	bne.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005d00:	4b31      	ldr	r3, [pc, #196]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a35      	ldr	r2, [pc, #212]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005d06:	4013      	ands	r3, r2
 8005d08:	0019      	movs	r1, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	23c0      	movs	r3, #192	; 0xc0
 8005d10:	039b      	lsls	r3, r3, #14
 8005d12:	401a      	ands	r2, r3
 8005d14:	4b2c      	ldr	r3, [pc, #176]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005d16:	430a      	orrs	r2, r1
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	4b2b      	ldr	r3, [pc, #172]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005d1c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	23c0      	movs	r3, #192	; 0xc0
 8005d24:	029b      	lsls	r3, r3, #10
 8005d26:	401a      	ands	r2, r3
 8005d28:	4b27      	ldr	r3, [pc, #156]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005d2e:	2317      	movs	r3, #23
 8005d30:	18fb      	adds	r3, r7, r3
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d105      	bne.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d38:	4b23      	ldr	r3, [pc, #140]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d3c:	4b22      	ldr	r3, [pc, #136]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005d3e:	4928      	ldr	r1, [pc, #160]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005d40:	400a      	ands	r2, r1
 8005d42:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2202      	movs	r2, #2
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	d009      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d4e:	4b1e      	ldr	r3, [pc, #120]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d52:	220c      	movs	r2, #12
 8005d54:	4393      	bics	r3, r2
 8005d56:	0019      	movs	r1, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	4b1a      	ldr	r3, [pc, #104]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2204      	movs	r2, #4
 8005d68:	4013      	ands	r3, r2
 8005d6a:	d009      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d6c:	4b16      	ldr	r3, [pc, #88]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d70:	4a1c      	ldr	r2, [pc, #112]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005d72:	4013      	ands	r3, r2
 8005d74:	0019      	movs	r1, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68da      	ldr	r2, [r3, #12]
 8005d7a:	4b13      	ldr	r3, [pc, #76]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2208      	movs	r2, #8
 8005d86:	4013      	ands	r3, r2
 8005d88:	d009      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d8a:	4b0f      	ldr	r3, [pc, #60]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d8e:	4a16      	ldr	r2, [pc, #88]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005d90:	4013      	ands	r3, r2
 8005d92:	0019      	movs	r1, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691a      	ldr	r2, [r3, #16]
 8005d98:	4b0b      	ldr	r3, [pc, #44]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2280      	movs	r2, #128	; 0x80
 8005da4:	4013      	ands	r3, r2
 8005da6:	d009      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005da8:	4b07      	ldr	r3, [pc, #28]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dac:	4a0f      	ldr	r2, [pc, #60]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005dae:	4013      	ands	r3, r2
 8005db0:	0019      	movs	r1, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	695a      	ldr	r2, [r3, #20]
 8005db6:	4b04      	ldr	r3, [pc, #16]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005db8:	430a      	orrs	r2, r1
 8005dba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	b006      	add	sp, #24
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	46c0      	nop			; (mov r8, r8)
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	40007000 	.word	0x40007000
 8005dd0:	fffcffff 	.word	0xfffcffff
 8005dd4:	fff7ffff 	.word	0xfff7ffff
 8005dd8:	00001388 	.word	0x00001388
 8005ddc:	ffcfffff 	.word	0xffcfffff
 8005de0:	efffffff 	.word	0xefffffff
 8005de4:	fffff3ff 	.word	0xfffff3ff
 8005de8:	ffffcfff 	.word	0xffffcfff
 8005dec:	fff3ffff 	.word	0xfff3ffff

08005df0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e07b      	b.n	8005efa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d109      	bne.n	8005e1e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	2382      	movs	r3, #130	; 0x82
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d009      	beq.n	8005e2a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	61da      	str	r2, [r3, #28]
 8005e1c:	e005      	b.n	8005e2a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2251      	movs	r2, #81	; 0x51
 8005e34:	5c9b      	ldrb	r3, [r3, r2]
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d107      	bne.n	8005e4c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2250      	movs	r2, #80	; 0x50
 8005e40:	2100      	movs	r1, #0
 8005e42:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	0018      	movs	r0, r3
 8005e48:	f7fc ff62 	bl	8002d10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2251      	movs	r2, #81	; 0x51
 8005e50:	2102      	movs	r1, #2
 8005e52:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2140      	movs	r1, #64	; 0x40
 8005e60:	438a      	bics	r2, r1
 8005e62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	2382      	movs	r3, #130	; 0x82
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	401a      	ands	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6899      	ldr	r1, [r3, #8]
 8005e72:	2384      	movs	r3, #132	; 0x84
 8005e74:	021b      	lsls	r3, r3, #8
 8005e76:	400b      	ands	r3, r1
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68d9      	ldr	r1, [r3, #12]
 8005e7e:	2380      	movs	r3, #128	; 0x80
 8005e80:	011b      	lsls	r3, r3, #4
 8005e82:	400b      	ands	r3, r1
 8005e84:	431a      	orrs	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2102      	movs	r1, #2
 8005e8c:	400b      	ands	r3, r1
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	2101      	movs	r1, #1
 8005e96:	400b      	ands	r3, r1
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6999      	ldr	r1, [r3, #24]
 8005e9e:	2380      	movs	r3, #128	; 0x80
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	400b      	ands	r3, r1
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	2138      	movs	r1, #56	; 0x38
 8005eac:	400b      	ands	r3, r1
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	2180      	movs	r1, #128	; 0x80
 8005eb6:	400b      	ands	r3, r1
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	0011      	movs	r1, r2
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ec0:	2380      	movs	r3, #128	; 0x80
 8005ec2:	019b      	lsls	r3, r3, #6
 8005ec4:	401a      	ands	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	0c1b      	lsrs	r3, r3, #16
 8005ed4:	2204      	movs	r2, #4
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	0019      	movs	r1, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	2210      	movs	r2, #16
 8005ee0:	401a      	ands	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2251      	movs	r2, #81	; 0x51
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	0018      	movs	r0, r3
 8005efc:	46bd      	mov	sp, r7
 8005efe:	b002      	add	sp, #8
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b088      	sub	sp, #32
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	60f8      	str	r0, [r7, #12]
 8005f0a:	60b9      	str	r1, [r7, #8]
 8005f0c:	603b      	str	r3, [r7, #0]
 8005f0e:	1dbb      	adds	r3, r7, #6
 8005f10:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f12:	231f      	movs	r3, #31
 8005f14:	18fb      	adds	r3, r7, r3
 8005f16:	2200      	movs	r2, #0
 8005f18:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2250      	movs	r2, #80	; 0x50
 8005f1e:	5c9b      	ldrb	r3, [r3, r2]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_SPI_Transmit+0x26>
 8005f24:	2302      	movs	r3, #2
 8005f26:	e145      	b.n	80061b4 <HAL_SPI_Transmit+0x2b2>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2250      	movs	r2, #80	; 0x50
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f30:	f7fd fca0 	bl	8003874 <HAL_GetTick>
 8005f34:	0003      	movs	r3, r0
 8005f36:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005f38:	2316      	movs	r3, #22
 8005f3a:	18fb      	adds	r3, r7, r3
 8005f3c:	1dba      	adds	r2, r7, #6
 8005f3e:	8812      	ldrh	r2, [r2, #0]
 8005f40:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2251      	movs	r2, #81	; 0x51
 8005f46:	5c9b      	ldrb	r3, [r3, r2]
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d004      	beq.n	8005f58 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005f4e:	231f      	movs	r3, #31
 8005f50:	18fb      	adds	r3, r7, r3
 8005f52:	2202      	movs	r2, #2
 8005f54:	701a      	strb	r2, [r3, #0]
    goto error;
 8005f56:	e126      	b.n	80061a6 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_SPI_Transmit+0x64>
 8005f5e:	1dbb      	adds	r3, r7, #6
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d104      	bne.n	8005f70 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005f66:	231f      	movs	r3, #31
 8005f68:	18fb      	adds	r3, r7, r3
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	701a      	strb	r2, [r3, #0]
    goto error;
 8005f6e:	e11a      	b.n	80061a6 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2251      	movs	r2, #81	; 0x51
 8005f74:	2103      	movs	r1, #3
 8005f76:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	1dba      	adds	r2, r7, #6
 8005f88:	8812      	ldrh	r2, [r2, #0]
 8005f8a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	1dba      	adds	r2, r7, #6
 8005f90:	8812      	ldrh	r2, [r2, #0]
 8005f92:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	2380      	movs	r3, #128	; 0x80
 8005fb8:	021b      	lsls	r3, r3, #8
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d110      	bne.n	8005fe0 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2140      	movs	r1, #64	; 0x40
 8005fca:	438a      	bics	r2, r1
 8005fcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2180      	movs	r1, #128	; 0x80
 8005fda:	01c9      	lsls	r1, r1, #7
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2240      	movs	r2, #64	; 0x40
 8005fe8:	4013      	ands	r3, r2
 8005fea:	2b40      	cmp	r3, #64	; 0x40
 8005fec:	d007      	beq.n	8005ffe <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2140      	movs	r1, #64	; 0x40
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	2380      	movs	r3, #128	; 0x80
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	429a      	cmp	r2, r3
 8006008:	d152      	bne.n	80060b0 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d004      	beq.n	800601c <HAL_SPI_Transmit+0x11a>
 8006012:	2316      	movs	r3, #22
 8006014:	18fb      	adds	r3, r7, r3
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d143      	bne.n	80060a4 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006020:	881a      	ldrh	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602c:	1c9a      	adds	r2, r3, #2
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006036:	b29b      	uxth	r3, r3
 8006038:	3b01      	subs	r3, #1
 800603a:	b29a      	uxth	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006040:	e030      	b.n	80060a4 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	2202      	movs	r2, #2
 800604a:	4013      	ands	r3, r2
 800604c:	2b02      	cmp	r3, #2
 800604e:	d112      	bne.n	8006076 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006054:	881a      	ldrh	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006060:	1c9a      	adds	r2, r3, #2
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800606a:	b29b      	uxth	r3, r3
 800606c:	3b01      	subs	r3, #1
 800606e:	b29a      	uxth	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	86da      	strh	r2, [r3, #54]	; 0x36
 8006074:	e016      	b.n	80060a4 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006076:	f7fd fbfd 	bl	8003874 <HAL_GetTick>
 800607a:	0002      	movs	r2, r0
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d802      	bhi.n	800608c <HAL_SPI_Transmit+0x18a>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	3301      	adds	r3, #1
 800608a:	d102      	bne.n	8006092 <HAL_SPI_Transmit+0x190>
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d108      	bne.n	80060a4 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8006092:	231f      	movs	r3, #31
 8006094:	18fb      	adds	r3, r7, r3
 8006096:	2203      	movs	r2, #3
 8006098:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2251      	movs	r2, #81	; 0x51
 800609e:	2101      	movs	r1, #1
 80060a0:	5499      	strb	r1, [r3, r2]
          goto error;
 80060a2:	e080      	b.n	80061a6 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1c9      	bne.n	8006042 <HAL_SPI_Transmit+0x140>
 80060ae:	e053      	b.n	8006158 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d004      	beq.n	80060c2 <HAL_SPI_Transmit+0x1c0>
 80060b8:	2316      	movs	r3, #22
 80060ba:	18fb      	adds	r3, r7, r3
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d145      	bne.n	800614e <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	330c      	adds	r3, #12
 80060cc:	7812      	ldrb	r2, [r2, #0]
 80060ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80060e8:	e031      	b.n	800614e <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	2202      	movs	r2, #2
 80060f2:	4013      	ands	r3, r2
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d113      	bne.n	8006120 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	330c      	adds	r3, #12
 8006102:	7812      	ldrb	r2, [r2, #0]
 8006104:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	86da      	strh	r2, [r3, #54]	; 0x36
 800611e:	e016      	b.n	800614e <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006120:	f7fd fba8 	bl	8003874 <HAL_GetTick>
 8006124:	0002      	movs	r2, r0
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	429a      	cmp	r2, r3
 800612e:	d802      	bhi.n	8006136 <HAL_SPI_Transmit+0x234>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	3301      	adds	r3, #1
 8006134:	d102      	bne.n	800613c <HAL_SPI_Transmit+0x23a>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d108      	bne.n	800614e <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 800613c:	231f      	movs	r3, #31
 800613e:	18fb      	adds	r3, r7, r3
 8006140:	2203      	movs	r2, #3
 8006142:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2251      	movs	r2, #81	; 0x51
 8006148:	2101      	movs	r1, #1
 800614a:	5499      	strb	r1, [r3, r2]
          goto error;
 800614c:	e02b      	b.n	80061a6 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006152:	b29b      	uxth	r3, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1c8      	bne.n	80060ea <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	6839      	ldr	r1, [r7, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	0018      	movs	r0, r3
 8006160:	f000 f8ba 	bl	80062d8 <SPI_EndRxTxTransaction>
 8006164:	1e03      	subs	r3, r0, #0
 8006166:	d002      	beq.n	800616e <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2220      	movs	r2, #32
 800616c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10a      	bne.n	800618c <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006176:	2300      	movs	r3, #0
 8006178:	613b      	str	r3, [r7, #16]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	613b      	str	r3, [r7, #16]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	613b      	str	r3, [r7, #16]
 800618a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006190:	2b00      	cmp	r3, #0
 8006192:	d004      	beq.n	800619e <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8006194:	231f      	movs	r3, #31
 8006196:	18fb      	adds	r3, r7, r3
 8006198:	2201      	movs	r2, #1
 800619a:	701a      	strb	r2, [r3, #0]
 800619c:	e003      	b.n	80061a6 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2251      	movs	r2, #81	; 0x51
 80061a2:	2101      	movs	r1, #1
 80061a4:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2250      	movs	r2, #80	; 0x50
 80061aa:	2100      	movs	r1, #0
 80061ac:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80061ae:	231f      	movs	r3, #31
 80061b0:	18fb      	adds	r3, r7, r3
 80061b2:	781b      	ldrb	r3, [r3, #0]
}
 80061b4:	0018      	movs	r0, r3
 80061b6:	46bd      	mov	sp, r7
 80061b8:	b008      	add	sp, #32
 80061ba:	bd80      	pop	{r7, pc}

080061bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b088      	sub	sp, #32
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	603b      	str	r3, [r7, #0]
 80061c8:	1dfb      	adds	r3, r7, #7
 80061ca:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061cc:	f7fd fb52 	bl	8003874 <HAL_GetTick>
 80061d0:	0002      	movs	r2, r0
 80061d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d4:	1a9b      	subs	r3, r3, r2
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	18d3      	adds	r3, r2, r3
 80061da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061dc:	f7fd fb4a 	bl	8003874 <HAL_GetTick>
 80061e0:	0003      	movs	r3, r0
 80061e2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061e4:	4b3a      	ldr	r3, [pc, #232]	; (80062d0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	015b      	lsls	r3, r3, #5
 80061ea:	0d1b      	lsrs	r3, r3, #20
 80061ec:	69fa      	ldr	r2, [r7, #28]
 80061ee:	4353      	muls	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061f2:	e058      	b.n	80062a6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	3301      	adds	r3, #1
 80061f8:	d055      	beq.n	80062a6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061fa:	f7fd fb3b 	bl	8003874 <HAL_GetTick>
 80061fe:	0002      	movs	r2, r0
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	69fa      	ldr	r2, [r7, #28]
 8006206:	429a      	cmp	r2, r3
 8006208:	d902      	bls.n	8006210 <SPI_WaitFlagStateUntilTimeout+0x54>
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d142      	bne.n	8006296 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	21e0      	movs	r1, #224	; 0xe0
 800621c:	438a      	bics	r2, r1
 800621e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	2382      	movs	r3, #130	; 0x82
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	429a      	cmp	r2, r3
 800622a:	d113      	bne.n	8006254 <SPI_WaitFlagStateUntilTimeout+0x98>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	2380      	movs	r3, #128	; 0x80
 8006232:	021b      	lsls	r3, r3, #8
 8006234:	429a      	cmp	r2, r3
 8006236:	d005      	beq.n	8006244 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	2380      	movs	r3, #128	; 0x80
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	429a      	cmp	r2, r3
 8006242:	d107      	bne.n	8006254 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2140      	movs	r1, #64	; 0x40
 8006250:	438a      	bics	r2, r1
 8006252:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006258:	2380      	movs	r3, #128	; 0x80
 800625a:	019b      	lsls	r3, r3, #6
 800625c:	429a      	cmp	r2, r3
 800625e:	d110      	bne.n	8006282 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	491a      	ldr	r1, [pc, #104]	; (80062d4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800626c:	400a      	ands	r2, r1
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2180      	movs	r1, #128	; 0x80
 800627c:	0189      	lsls	r1, r1, #6
 800627e:	430a      	orrs	r2, r1
 8006280:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2251      	movs	r2, #81	; 0x51
 8006286:	2101      	movs	r1, #1
 8006288:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2250      	movs	r2, #80	; 0x50
 800628e:	2100      	movs	r1, #0
 8006290:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e017      	b.n	80062c6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	4013      	ands	r3, r2
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	425a      	negs	r2, r3
 80062b6:	4153      	adcs	r3, r2
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	001a      	movs	r2, r3
 80062bc:	1dfb      	adds	r3, r7, #7
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d197      	bne.n	80061f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	0018      	movs	r0, r3
 80062c8:	46bd      	mov	sp, r7
 80062ca:	b008      	add	sp, #32
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	46c0      	nop			; (mov r8, r8)
 80062d0:	20000048 	.word	0x20000048
 80062d4:	ffffdfff 	.word	0xffffdfff

080062d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b088      	sub	sp, #32
 80062dc:	af02      	add	r7, sp, #8
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80062e4:	4b1d      	ldr	r3, [pc, #116]	; (800635c <SPI_EndRxTxTransaction+0x84>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	491d      	ldr	r1, [pc, #116]	; (8006360 <SPI_EndRxTxTransaction+0x88>)
 80062ea:	0018      	movs	r0, r3
 80062ec:	f7f9 ff0c 	bl	8000108 <__udivsi3>
 80062f0:	0003      	movs	r3, r0
 80062f2:	001a      	movs	r2, r3
 80062f4:	0013      	movs	r3, r2
 80062f6:	015b      	lsls	r3, r3, #5
 80062f8:	1a9b      	subs	r3, r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	189b      	adds	r3, r3, r2
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	2382      	movs	r3, #130	; 0x82
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	429a      	cmp	r2, r3
 800630c:	d112      	bne.n	8006334 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	0013      	movs	r3, r2
 8006318:	2200      	movs	r2, #0
 800631a:	2180      	movs	r1, #128	; 0x80
 800631c:	f7ff ff4e 	bl	80061bc <SPI_WaitFlagStateUntilTimeout>
 8006320:	1e03      	subs	r3, r0, #0
 8006322:	d016      	beq.n	8006352 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006328:	2220      	movs	r2, #32
 800632a:	431a      	orrs	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e00f      	b.n	8006354 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00a      	beq.n	8006350 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	3b01      	subs	r3, #1
 800633e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	2280      	movs	r2, #128	; 0x80
 8006348:	4013      	ands	r3, r2
 800634a:	2b80      	cmp	r3, #128	; 0x80
 800634c:	d0f2      	beq.n	8006334 <SPI_EndRxTxTransaction+0x5c>
 800634e:	e000      	b.n	8006352 <SPI_EndRxTxTransaction+0x7a>
        break;
 8006350:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	0018      	movs	r0, r3
 8006356:	46bd      	mov	sp, r7
 8006358:	b006      	add	sp, #24
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20000048 	.word	0x20000048
 8006360:	016e3600 	.word	0x016e3600

08006364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e032      	b.n	80063dc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2239      	movs	r2, #57	; 0x39
 800637a:	5c9b      	ldrb	r3, [r3, r2]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d107      	bne.n	8006392 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2238      	movs	r2, #56	; 0x38
 8006386:	2100      	movs	r1, #0
 8006388:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	0018      	movs	r0, r3
 800638e:	f7fc fe51 	bl	8003034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2239      	movs	r2, #57	; 0x39
 8006396:	2102      	movs	r1, #2
 8006398:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	3304      	adds	r3, #4
 80063a2:	0019      	movs	r1, r3
 80063a4:	0010      	movs	r0, r2
 80063a6:	f000 ff87 	bl	80072b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	223e      	movs	r2, #62	; 0x3e
 80063ae:	2101      	movs	r1, #1
 80063b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	223a      	movs	r2, #58	; 0x3a
 80063b6:	2101      	movs	r1, #1
 80063b8:	5499      	strb	r1, [r3, r2]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	223b      	movs	r2, #59	; 0x3b
 80063be:	2101      	movs	r1, #1
 80063c0:	5499      	strb	r1, [r3, r2]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	223c      	movs	r2, #60	; 0x3c
 80063c6:	2101      	movs	r1, #1
 80063c8:	5499      	strb	r1, [r3, r2]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	223d      	movs	r2, #61	; 0x3d
 80063ce:	2101      	movs	r1, #1
 80063d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2239      	movs	r2, #57	; 0x39
 80063d6:	2101      	movs	r1, #1
 80063d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	0018      	movs	r0, r3
 80063de:	46bd      	mov	sp, r7
 80063e0:	b002      	add	sp, #8
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e032      	b.n	800645c <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2239      	movs	r2, #57	; 0x39
 80063fa:	5c9b      	ldrb	r3, [r3, r2]
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d107      	bne.n	8006412 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2238      	movs	r2, #56	; 0x38
 8006406:	2100      	movs	r1, #0
 8006408:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	0018      	movs	r0, r3
 800640e:	f000 f829 	bl	8006464 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2239      	movs	r2, #57	; 0x39
 8006416:	2102      	movs	r1, #2
 8006418:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3304      	adds	r3, #4
 8006422:	0019      	movs	r1, r3
 8006424:	0010      	movs	r0, r2
 8006426:	f000 ff47 	bl	80072b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	223e      	movs	r2, #62	; 0x3e
 800642e:	2101      	movs	r1, #1
 8006430:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	223a      	movs	r2, #58	; 0x3a
 8006436:	2101      	movs	r1, #1
 8006438:	5499      	strb	r1, [r3, r2]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	223b      	movs	r2, #59	; 0x3b
 800643e:	2101      	movs	r1, #1
 8006440:	5499      	strb	r1, [r3, r2]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	223c      	movs	r2, #60	; 0x3c
 8006446:	2101      	movs	r1, #1
 8006448:	5499      	strb	r1, [r3, r2]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	223d      	movs	r2, #61	; 0x3d
 800644e:	2101      	movs	r1, #1
 8006450:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2239      	movs	r2, #57	; 0x39
 8006456:	2101      	movs	r1, #1
 8006458:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	0018      	movs	r0, r3
 800645e:	46bd      	mov	sp, r7
 8006460:	b002      	add	sp, #8
 8006462:	bd80      	pop	{r7, pc}

08006464 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800646c:	46c0      	nop			; (mov r8, r8)
 800646e:	46bd      	mov	sp, r7
 8006470:	b002      	add	sp, #8
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800647e:	230f      	movs	r3, #15
 8006480:	18fb      	adds	r3, r7, r3
 8006482:	2200      	movs	r2, #0
 8006484:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d108      	bne.n	800649e <HAL_TIM_OC_Start_IT+0x2a>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	223a      	movs	r2, #58	; 0x3a
 8006490:	5c9b      	ldrb	r3, [r3, r2]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	3b01      	subs	r3, #1
 8006496:	1e5a      	subs	r2, r3, #1
 8006498:	4193      	sbcs	r3, r2
 800649a:	b2db      	uxtb	r3, r3
 800649c:	e01f      	b.n	80064de <HAL_TIM_OC_Start_IT+0x6a>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d108      	bne.n	80064b6 <HAL_TIM_OC_Start_IT+0x42>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	223b      	movs	r2, #59	; 0x3b
 80064a8:	5c9b      	ldrb	r3, [r3, r2]
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	3b01      	subs	r3, #1
 80064ae:	1e5a      	subs	r2, r3, #1
 80064b0:	4193      	sbcs	r3, r2
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	e013      	b.n	80064de <HAL_TIM_OC_Start_IT+0x6a>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d108      	bne.n	80064ce <HAL_TIM_OC_Start_IT+0x5a>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	223c      	movs	r2, #60	; 0x3c
 80064c0:	5c9b      	ldrb	r3, [r3, r2]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	3b01      	subs	r3, #1
 80064c6:	1e5a      	subs	r2, r3, #1
 80064c8:	4193      	sbcs	r3, r2
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	e007      	b.n	80064de <HAL_TIM_OC_Start_IT+0x6a>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	223d      	movs	r2, #61	; 0x3d
 80064d2:	5c9b      	ldrb	r3, [r3, r2]
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	3b01      	subs	r3, #1
 80064d8:	1e5a      	subs	r2, r3, #1
 80064da:	4193      	sbcs	r3, r2
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e090      	b.n	8006608 <HAL_TIM_OC_Start_IT+0x194>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d104      	bne.n	80064f6 <HAL_TIM_OC_Start_IT+0x82>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	223a      	movs	r2, #58	; 0x3a
 80064f0:	2102      	movs	r1, #2
 80064f2:	5499      	strb	r1, [r3, r2]
 80064f4:	e013      	b.n	800651e <HAL_TIM_OC_Start_IT+0xaa>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	d104      	bne.n	8006506 <HAL_TIM_OC_Start_IT+0x92>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	223b      	movs	r2, #59	; 0x3b
 8006500:	2102      	movs	r1, #2
 8006502:	5499      	strb	r1, [r3, r2]
 8006504:	e00b      	b.n	800651e <HAL_TIM_OC_Start_IT+0xaa>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b08      	cmp	r3, #8
 800650a:	d104      	bne.n	8006516 <HAL_TIM_OC_Start_IT+0xa2>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	223c      	movs	r2, #60	; 0x3c
 8006510:	2102      	movs	r1, #2
 8006512:	5499      	strb	r1, [r3, r2]
 8006514:	e003      	b.n	800651e <HAL_TIM_OC_Start_IT+0xaa>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	223d      	movs	r2, #61	; 0x3d
 800651a:	2102      	movs	r1, #2
 800651c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b0c      	cmp	r3, #12
 8006522:	d02a      	beq.n	800657a <HAL_TIM_OC_Start_IT+0x106>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b0c      	cmp	r3, #12
 8006528:	d830      	bhi.n	800658c <HAL_TIM_OC_Start_IT+0x118>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2b08      	cmp	r3, #8
 800652e:	d01b      	beq.n	8006568 <HAL_TIM_OC_Start_IT+0xf4>
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2b08      	cmp	r3, #8
 8006534:	d82a      	bhi.n	800658c <HAL_TIM_OC_Start_IT+0x118>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <HAL_TIM_OC_Start_IT+0xd0>
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2b04      	cmp	r3, #4
 8006540:	d009      	beq.n	8006556 <HAL_TIM_OC_Start_IT+0xe2>
 8006542:	e023      	b.n	800658c <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2102      	movs	r1, #2
 8006550:	430a      	orrs	r2, r1
 8006552:	60da      	str	r2, [r3, #12]
      break;
 8006554:	e01f      	b.n	8006596 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68da      	ldr	r2, [r3, #12]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2104      	movs	r1, #4
 8006562:	430a      	orrs	r2, r1
 8006564:	60da      	str	r2, [r3, #12]
      break;
 8006566:	e016      	b.n	8006596 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2108      	movs	r1, #8
 8006574:	430a      	orrs	r2, r1
 8006576:	60da      	str	r2, [r3, #12]
      break;
 8006578:	e00d      	b.n	8006596 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2110      	movs	r1, #16
 8006586:	430a      	orrs	r2, r1
 8006588:	60da      	str	r2, [r3, #12]
      break;
 800658a:	e004      	b.n	8006596 <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 800658c:	230f      	movs	r3, #15
 800658e:	18fb      	adds	r3, r7, r3
 8006590:	2201      	movs	r2, #1
 8006592:	701a      	strb	r2, [r3, #0]
      break;
 8006594:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8006596:	230f      	movs	r3, #15
 8006598:	18fb      	adds	r3, r7, r3
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d130      	bne.n	8006602 <HAL_TIM_OC_Start_IT+0x18e>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	2201      	movs	r2, #1
 80065a8:	0018      	movs	r0, r3
 80065aa:	f001 f877 	bl	800769c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	2380      	movs	r3, #128	; 0x80
 80065b4:	05db      	lsls	r3, r3, #23
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d009      	beq.n	80065ce <HAL_TIM_OC_Start_IT+0x15a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a14      	ldr	r2, [pc, #80]	; (8006610 <HAL_TIM_OC_Start_IT+0x19c>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d004      	beq.n	80065ce <HAL_TIM_OC_Start_IT+0x15a>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a12      	ldr	r2, [pc, #72]	; (8006614 <HAL_TIM_OC_Start_IT+0x1a0>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d111      	bne.n	80065f2 <HAL_TIM_OC_Start_IT+0x17e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	2207      	movs	r2, #7
 80065d6:	4013      	ands	r3, r2
 80065d8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	2b06      	cmp	r3, #6
 80065de:	d010      	beq.n	8006602 <HAL_TIM_OC_Start_IT+0x18e>
      {
        __HAL_TIM_ENABLE(htim);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2101      	movs	r1, #1
 80065ec:	430a      	orrs	r2, r1
 80065ee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f0:	e007      	b.n	8006602 <HAL_TIM_OC_Start_IT+0x18e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2101      	movs	r1, #1
 80065fe:	430a      	orrs	r2, r1
 8006600:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006602:	230f      	movs	r3, #15
 8006604:	18fb      	adds	r3, r7, r3
 8006606:	781b      	ldrb	r3, [r3, #0]
}
 8006608:	0018      	movs	r0, r3
 800660a:	46bd      	mov	sp, r7
 800660c:	b004      	add	sp, #16
 800660e:	bd80      	pop	{r7, pc}
 8006610:	40010800 	.word	0x40010800
 8006614:	40011400 	.word	0x40011400

08006618 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e032      	b.n	8006690 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2239      	movs	r2, #57	; 0x39
 800662e:	5c9b      	ldrb	r3, [r3, r2]
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d107      	bne.n	8006646 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2238      	movs	r2, #56	; 0x38
 800663a:	2100      	movs	r1, #0
 800663c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	0018      	movs	r0, r3
 8006642:	f000 f829 	bl	8006698 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2239      	movs	r2, #57	; 0x39
 800664a:	2102      	movs	r1, #2
 800664c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	3304      	adds	r3, #4
 8006656:	0019      	movs	r1, r3
 8006658:	0010      	movs	r0, r2
 800665a:	f000 fe2d 	bl	80072b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	223e      	movs	r2, #62	; 0x3e
 8006662:	2101      	movs	r1, #1
 8006664:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	223a      	movs	r2, #58	; 0x3a
 800666a:	2101      	movs	r1, #1
 800666c:	5499      	strb	r1, [r3, r2]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	223b      	movs	r2, #59	; 0x3b
 8006672:	2101      	movs	r1, #1
 8006674:	5499      	strb	r1, [r3, r2]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	223c      	movs	r2, #60	; 0x3c
 800667a:	2101      	movs	r1, #1
 800667c:	5499      	strb	r1, [r3, r2]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	223d      	movs	r2, #61	; 0x3d
 8006682:	2101      	movs	r1, #1
 8006684:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2239      	movs	r2, #57	; 0x39
 800668a:	2101      	movs	r1, #1
 800668c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	0018      	movs	r0, r3
 8006692:	46bd      	mov	sp, r7
 8006694:	b002      	add	sp, #8
 8006696:	bd80      	pop	{r7, pc}

08006698 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066a0:	46c0      	nop			; (mov r8, r8)
 80066a2:	46bd      	mov	sp, r7
 80066a4:	b002      	add	sp, #8
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	001a      	movs	r2, r3
 80066b6:	1cbb      	adds	r3, r7, #2
 80066b8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066ba:	2317      	movs	r3, #23
 80066bc:	18fb      	adds	r3, r7, r3
 80066be:	2200      	movs	r2, #0
 80066c0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d108      	bne.n	80066da <HAL_TIM_PWM_Start_DMA+0x32>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	223a      	movs	r2, #58	; 0x3a
 80066cc:	5c9b      	ldrb	r3, [r3, r2]
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	3b02      	subs	r3, #2
 80066d2:	425a      	negs	r2, r3
 80066d4:	4153      	adcs	r3, r2
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	e01f      	b.n	800671a <HAL_TIM_PWM_Start_DMA+0x72>
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2b04      	cmp	r3, #4
 80066de:	d108      	bne.n	80066f2 <HAL_TIM_PWM_Start_DMA+0x4a>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	223b      	movs	r2, #59	; 0x3b
 80066e4:	5c9b      	ldrb	r3, [r3, r2]
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	3b02      	subs	r3, #2
 80066ea:	425a      	negs	r2, r3
 80066ec:	4153      	adcs	r3, r2
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	e013      	b.n	800671a <HAL_TIM_PWM_Start_DMA+0x72>
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d108      	bne.n	800670a <HAL_TIM_PWM_Start_DMA+0x62>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	223c      	movs	r2, #60	; 0x3c
 80066fc:	5c9b      	ldrb	r3, [r3, r2]
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	3b02      	subs	r3, #2
 8006702:	425a      	negs	r2, r3
 8006704:	4153      	adcs	r3, r2
 8006706:	b2db      	uxtb	r3, r3
 8006708:	e007      	b.n	800671a <HAL_TIM_PWM_Start_DMA+0x72>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	223d      	movs	r2, #61	; 0x3d
 800670e:	5c9b      	ldrb	r3, [r3, r2]
 8006710:	b2db      	uxtb	r3, r3
 8006712:	3b02      	subs	r3, #2
 8006714:	425a      	negs	r2, r3
 8006716:	4153      	adcs	r3, r2
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800671e:	2302      	movs	r3, #2
 8006720:	e13d      	b.n	800699e <HAL_TIM_PWM_Start_DMA+0x2f6>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d108      	bne.n	800673a <HAL_TIM_PWM_Start_DMA+0x92>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	223a      	movs	r2, #58	; 0x3a
 800672c:	5c9b      	ldrb	r3, [r3, r2]
 800672e:	b2db      	uxtb	r3, r3
 8006730:	3b01      	subs	r3, #1
 8006732:	425a      	negs	r2, r3
 8006734:	4153      	adcs	r3, r2
 8006736:	b2db      	uxtb	r3, r3
 8006738:	e01f      	b.n	800677a <HAL_TIM_PWM_Start_DMA+0xd2>
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2b04      	cmp	r3, #4
 800673e:	d108      	bne.n	8006752 <HAL_TIM_PWM_Start_DMA+0xaa>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	223b      	movs	r2, #59	; 0x3b
 8006744:	5c9b      	ldrb	r3, [r3, r2]
 8006746:	b2db      	uxtb	r3, r3
 8006748:	3b01      	subs	r3, #1
 800674a:	425a      	negs	r2, r3
 800674c:	4153      	adcs	r3, r2
 800674e:	b2db      	uxtb	r3, r3
 8006750:	e013      	b.n	800677a <HAL_TIM_PWM_Start_DMA+0xd2>
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2b08      	cmp	r3, #8
 8006756:	d108      	bne.n	800676a <HAL_TIM_PWM_Start_DMA+0xc2>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	223c      	movs	r2, #60	; 0x3c
 800675c:	5c9b      	ldrb	r3, [r3, r2]
 800675e:	b2db      	uxtb	r3, r3
 8006760:	3b01      	subs	r3, #1
 8006762:	425a      	negs	r2, r3
 8006764:	4153      	adcs	r3, r2
 8006766:	b2db      	uxtb	r3, r3
 8006768:	e007      	b.n	800677a <HAL_TIM_PWM_Start_DMA+0xd2>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	223d      	movs	r2, #61	; 0x3d
 800676e:	5c9b      	ldrb	r3, [r3, r2]
 8006770:	b2db      	uxtb	r3, r3
 8006772:	3b01      	subs	r3, #1
 8006774:	425a      	negs	r2, r3
 8006776:	4153      	adcs	r3, r2
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d025      	beq.n	80067ca <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <HAL_TIM_PWM_Start_DMA+0xe4>
 8006784:	1cbb      	adds	r3, r7, #2
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e106      	b.n	800699e <HAL_TIM_PWM_Start_DMA+0x2f6>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d104      	bne.n	80067a0 <HAL_TIM_PWM_Start_DMA+0xf8>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	223a      	movs	r2, #58	; 0x3a
 800679a:	2102      	movs	r1, #2
 800679c:	5499      	strb	r1, [r3, r2]
 800679e:	e016      	b.n	80067ce <HAL_TIM_PWM_Start_DMA+0x126>
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d104      	bne.n	80067b0 <HAL_TIM_PWM_Start_DMA+0x108>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	223b      	movs	r2, #59	; 0x3b
 80067aa:	2102      	movs	r1, #2
 80067ac:	5499      	strb	r1, [r3, r2]
 80067ae:	e00e      	b.n	80067ce <HAL_TIM_PWM_Start_DMA+0x126>
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b08      	cmp	r3, #8
 80067b4:	d104      	bne.n	80067c0 <HAL_TIM_PWM_Start_DMA+0x118>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	223c      	movs	r2, #60	; 0x3c
 80067ba:	2102      	movs	r1, #2
 80067bc:	5499      	strb	r1, [r3, r2]
 80067be:	e006      	b.n	80067ce <HAL_TIM_PWM_Start_DMA+0x126>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	223d      	movs	r2, #61	; 0x3d
 80067c4:	2102      	movs	r1, #2
 80067c6:	5499      	strb	r1, [r3, r2]
 80067c8:	e001      	b.n	80067ce <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e0e7      	b.n	800699e <HAL_TIM_PWM_Start_DMA+0x2f6>
  }

  switch (Channel)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2b0c      	cmp	r3, #12
 80067d2:	d100      	bne.n	80067d6 <HAL_TIM_PWM_Start_DMA+0x12e>
 80067d4:	e080      	b.n	80068d8 <HAL_TIM_PWM_Start_DMA+0x230>
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2b0c      	cmp	r3, #12
 80067da:	d900      	bls.n	80067de <HAL_TIM_PWM_Start_DMA+0x136>
 80067dc:	e0a1      	b.n	8006922 <HAL_TIM_PWM_Start_DMA+0x27a>
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d054      	beq.n	800688e <HAL_TIM_PWM_Start_DMA+0x1e6>
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b08      	cmp	r3, #8
 80067e8:	d900      	bls.n	80067ec <HAL_TIM_PWM_Start_DMA+0x144>
 80067ea:	e09a      	b.n	8006922 <HAL_TIM_PWM_Start_DMA+0x27a>
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_TIM_PWM_Start_DMA+0x152>
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d025      	beq.n	8006844 <HAL_TIM_PWM_Start_DMA+0x19c>
 80067f8:	e093      	b.n	8006922 <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	4a6a      	ldr	r2, [pc, #424]	; (80069a8 <HAL_TIM_PWM_Start_DMA+0x300>)
 8006800:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	4a69      	ldr	r2, [pc, #420]	; (80069ac <HAL_TIM_PWM_Start_DMA+0x304>)
 8006808:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	4a68      	ldr	r2, [pc, #416]	; (80069b0 <HAL_TIM_PWM_Start_DMA+0x308>)
 8006810:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6a18      	ldr	r0, [r3, #32]
 8006816:	6879      	ldr	r1, [r7, #4]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3334      	adds	r3, #52	; 0x34
 800681e:	001a      	movs	r2, r3
 8006820:	1cbb      	adds	r3, r7, #2
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	f7fd f986 	bl	8003b34 <HAL_DMA_Start_IT>
 8006828:	1e03      	subs	r3, r0, #0
 800682a:	d001      	beq.n	8006830 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e0b6      	b.n	800699e <HAL_TIM_PWM_Start_DMA+0x2f6>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2180      	movs	r1, #128	; 0x80
 800683c:	0089      	lsls	r1, r1, #2
 800683e:	430a      	orrs	r2, r1
 8006840:	60da      	str	r2, [r3, #12]
      break;
 8006842:	e073      	b.n	800692c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	4a57      	ldr	r2, [pc, #348]	; (80069a8 <HAL_TIM_PWM_Start_DMA+0x300>)
 800684a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	4a56      	ldr	r2, [pc, #344]	; (80069ac <HAL_TIM_PWM_Start_DMA+0x304>)
 8006852:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	4a55      	ldr	r2, [pc, #340]	; (80069b0 <HAL_TIM_PWM_Start_DMA+0x308>)
 800685a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006860:	6879      	ldr	r1, [r7, #4]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3338      	adds	r3, #56	; 0x38
 8006868:	001a      	movs	r2, r3
 800686a:	1cbb      	adds	r3, r7, #2
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	f7fd f961 	bl	8003b34 <HAL_DMA_Start_IT>
 8006872:	1e03      	subs	r3, r0, #0
 8006874:	d001      	beq.n	800687a <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e091      	b.n	800699e <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68da      	ldr	r2, [r3, #12]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2180      	movs	r1, #128	; 0x80
 8006886:	00c9      	lsls	r1, r1, #3
 8006888:	430a      	orrs	r2, r1
 800688a:	60da      	str	r2, [r3, #12]
      break;
 800688c:	e04e      	b.n	800692c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006892:	4a45      	ldr	r2, [pc, #276]	; (80069a8 <HAL_TIM_PWM_Start_DMA+0x300>)
 8006894:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689a:	4a44      	ldr	r2, [pc, #272]	; (80069ac <HAL_TIM_PWM_Start_DMA+0x304>)
 800689c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a2:	4a43      	ldr	r2, [pc, #268]	; (80069b0 <HAL_TIM_PWM_Start_DMA+0x308>)
 80068a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	333c      	adds	r3, #60	; 0x3c
 80068b2:	001a      	movs	r2, r3
 80068b4:	1cbb      	adds	r3, r7, #2
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	f7fd f93c 	bl	8003b34 <HAL_DMA_Start_IT>
 80068bc:	1e03      	subs	r3, r0, #0
 80068be:	d001      	beq.n	80068c4 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e06c      	b.n	800699e <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2180      	movs	r1, #128	; 0x80
 80068d0:	0109      	lsls	r1, r1, #4
 80068d2:	430a      	orrs	r2, r1
 80068d4:	60da      	str	r2, [r3, #12]
      break;
 80068d6:	e029      	b.n	800692c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	4a32      	ldr	r2, [pc, #200]	; (80069a8 <HAL_TIM_PWM_Start_DMA+0x300>)
 80068de:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	4a31      	ldr	r2, [pc, #196]	; (80069ac <HAL_TIM_PWM_Start_DMA+0x304>)
 80068e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ec:	4a30      	ldr	r2, [pc, #192]	; (80069b0 <HAL_TIM_PWM_Start_DMA+0x308>)
 80068ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80068f4:	6879      	ldr	r1, [r7, #4]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3340      	adds	r3, #64	; 0x40
 80068fc:	001a      	movs	r2, r3
 80068fe:	1cbb      	adds	r3, r7, #2
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	f7fd f917 	bl	8003b34 <HAL_DMA_Start_IT>
 8006906:	1e03      	subs	r3, r0, #0
 8006908:	d001      	beq.n	800690e <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e047      	b.n	800699e <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2180      	movs	r1, #128	; 0x80
 800691a:	0149      	lsls	r1, r1, #5
 800691c:	430a      	orrs	r2, r1
 800691e:	60da      	str	r2, [r3, #12]
      break;
 8006920:	e004      	b.n	800692c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8006922:	2317      	movs	r3, #23
 8006924:	18fb      	adds	r3, r7, r3
 8006926:	2201      	movs	r2, #1
 8006928:	701a      	strb	r2, [r3, #0]
      break;
 800692a:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800692c:	2317      	movs	r3, #23
 800692e:	18fb      	adds	r3, r7, r3
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d130      	bne.n	8006998 <HAL_TIM_PWM_Start_DMA+0x2f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68b9      	ldr	r1, [r7, #8]
 800693c:	2201      	movs	r2, #1
 800693e:	0018      	movs	r0, r3
 8006940:	f000 feac 	bl	800769c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	2380      	movs	r3, #128	; 0x80
 800694a:	05db      	lsls	r3, r3, #23
 800694c:	429a      	cmp	r2, r3
 800694e:	d009      	beq.n	8006964 <HAL_TIM_PWM_Start_DMA+0x2bc>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a17      	ldr	r2, [pc, #92]	; (80069b4 <HAL_TIM_PWM_Start_DMA+0x30c>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d004      	beq.n	8006964 <HAL_TIM_PWM_Start_DMA+0x2bc>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a16      	ldr	r2, [pc, #88]	; (80069b8 <HAL_TIM_PWM_Start_DMA+0x310>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d111      	bne.n	8006988 <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	2207      	movs	r2, #7
 800696c:	4013      	ands	r3, r2
 800696e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	2b06      	cmp	r3, #6
 8006974:	d010      	beq.n	8006998 <HAL_TIM_PWM_Start_DMA+0x2f0>
      {
        __HAL_TIM_ENABLE(htim);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2101      	movs	r1, #1
 8006982:	430a      	orrs	r2, r1
 8006984:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006986:	e007      	b.n	8006998 <HAL_TIM_PWM_Start_DMA+0x2f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2101      	movs	r1, #1
 8006994:	430a      	orrs	r2, r1
 8006996:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006998:	2317      	movs	r3, #23
 800699a:	18fb      	adds	r3, r7, r3
 800699c:	781b      	ldrb	r3, [r3, #0]
}
 800699e:	0018      	movs	r0, r3
 80069a0:	46bd      	mov	sp, r7
 80069a2:	b006      	add	sp, #24
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	46c0      	nop			; (mov r8, r8)
 80069a8:	080071a5 	.word	0x080071a5
 80069ac:	0800724f 	.word	0x0800724f
 80069b0:	08007111 	.word	0x08007111
 80069b4:	40010800 	.word	0x40010800
 80069b8:	40011400 	.word	0x40011400

080069bc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069c6:	230f      	movs	r3, #15
 80069c8:	18fb      	adds	r3, r7, r3
 80069ca:	2200      	movs	r2, #0
 80069cc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b0c      	cmp	r3, #12
 80069d2:	d039      	beq.n	8006a48 <HAL_TIM_PWM_Stop_DMA+0x8c>
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2b0c      	cmp	r3, #12
 80069d8:	d844      	bhi.n	8006a64 <HAL_TIM_PWM_Stop_DMA+0xa8>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b08      	cmp	r3, #8
 80069de:	d025      	beq.n	8006a2c <HAL_TIM_PWM_Stop_DMA+0x70>
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	2b08      	cmp	r3, #8
 80069e4:	d83e      	bhi.n	8006a64 <HAL_TIM_PWM_Stop_DMA+0xa8>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <HAL_TIM_PWM_Stop_DMA+0x38>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	d00e      	beq.n	8006a10 <HAL_TIM_PWM_Stop_DMA+0x54>
 80069f2:	e037      	b.n	8006a64 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	493a      	ldr	r1, [pc, #232]	; (8006ae8 <HAL_TIM_PWM_Stop_DMA+0x12c>)
 8006a00:	400a      	ands	r2, r1
 8006a02:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f7fd f8f9 	bl	8003c00 <HAL_DMA_Abort_IT>
      break;
 8006a0e:	e02e      	b.n	8006a6e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68da      	ldr	r2, [r3, #12]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4934      	ldr	r1, [pc, #208]	; (8006aec <HAL_TIM_PWM_Stop_DMA+0x130>)
 8006a1c:	400a      	ands	r2, r1
 8006a1e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	0018      	movs	r0, r3
 8006a26:	f7fd f8eb 	bl	8003c00 <HAL_DMA_Abort_IT>
      break;
 8006a2a:	e020      	b.n	8006a6e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	492e      	ldr	r1, [pc, #184]	; (8006af0 <HAL_TIM_PWM_Stop_DMA+0x134>)
 8006a38:	400a      	ands	r2, r1
 8006a3a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a40:	0018      	movs	r0, r3
 8006a42:	f7fd f8dd 	bl	8003c00 <HAL_DMA_Abort_IT>
      break;
 8006a46:	e012      	b.n	8006a6e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4928      	ldr	r1, [pc, #160]	; (8006af4 <HAL_TIM_PWM_Stop_DMA+0x138>)
 8006a54:	400a      	ands	r2, r1
 8006a56:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	0018      	movs	r0, r3
 8006a5e:	f7fd f8cf 	bl	8003c00 <HAL_DMA_Abort_IT>
      break;
 8006a62:	e004      	b.n	8006a6e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8006a64:	230f      	movs	r3, #15
 8006a66:	18fb      	adds	r3, r7, r3
 8006a68:	2201      	movs	r2, #1
 8006a6a:	701a      	strb	r2, [r3, #0]
      break;
 8006a6c:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8006a6e:	230f      	movs	r3, #15
 8006a70:	18fb      	adds	r3, r7, r3
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d130      	bne.n	8006ada <HAL_TIM_PWM_Stop_DMA+0x11e>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	0018      	movs	r0, r3
 8006a82:	f000 fe0b 	bl	800769c <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	4a1a      	ldr	r2, [pc, #104]	; (8006af8 <HAL_TIM_PWM_Stop_DMA+0x13c>)
 8006a8e:	4013      	ands	r3, r2
 8006a90:	d107      	bne.n	8006aa2 <HAL_TIM_PWM_Stop_DMA+0xe6>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	438a      	bics	r2, r1
 8006aa0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d104      	bne.n	8006ab2 <HAL_TIM_PWM_Stop_DMA+0xf6>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	223a      	movs	r2, #58	; 0x3a
 8006aac:	2101      	movs	r1, #1
 8006aae:	5499      	strb	r1, [r3, r2]
 8006ab0:	e013      	b.n	8006ada <HAL_TIM_PWM_Stop_DMA+0x11e>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b04      	cmp	r3, #4
 8006ab6:	d104      	bne.n	8006ac2 <HAL_TIM_PWM_Stop_DMA+0x106>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	223b      	movs	r2, #59	; 0x3b
 8006abc:	2101      	movs	r1, #1
 8006abe:	5499      	strb	r1, [r3, r2]
 8006ac0:	e00b      	b.n	8006ada <HAL_TIM_PWM_Stop_DMA+0x11e>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b08      	cmp	r3, #8
 8006ac6:	d104      	bne.n	8006ad2 <HAL_TIM_PWM_Stop_DMA+0x116>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	223c      	movs	r2, #60	; 0x3c
 8006acc:	2101      	movs	r1, #1
 8006ace:	5499      	strb	r1, [r3, r2]
 8006ad0:	e003      	b.n	8006ada <HAL_TIM_PWM_Stop_DMA+0x11e>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	223d      	movs	r2, #61	; 0x3d
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8006ada:	230f      	movs	r3, #15
 8006adc:	18fb      	adds	r3, r7, r3
 8006ade:	781b      	ldrb	r3, [r3, #0]
}
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	b004      	add	sp, #16
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	fffffdff 	.word	0xfffffdff
 8006aec:	fffffbff 	.word	0xfffffbff
 8006af0:	fffff7ff 	.word	0xfffff7ff
 8006af4:	ffffefff 	.word	0xffffefff
 8006af8:	00001111 	.word	0x00001111

08006afc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d124      	bne.n	8006b5c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	2202      	movs	r2, #2
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d11d      	bne.n	8006b5c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2203      	movs	r2, #3
 8006b26:	4252      	negs	r2, r2
 8006b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	2203      	movs	r2, #3
 8006b38:	4013      	ands	r3, r2
 8006b3a:	d004      	beq.n	8006b46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	0018      	movs	r0, r3
 8006b40:	f000 fac6 	bl	80070d0 <HAL_TIM_IC_CaptureCallback>
 8006b44:	e007      	b.n	8006b56 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	0018      	movs	r0, r3
 8006b4a:	f000 fab9 	bl	80070c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	0018      	movs	r0, r3
 8006b52:	f7fa f96b 	bl	8000e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	2204      	movs	r2, #4
 8006b64:	4013      	ands	r3, r2
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d125      	bne.n	8006bb6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	2204      	movs	r2, #4
 8006b72:	4013      	ands	r3, r2
 8006b74:	2b04      	cmp	r3, #4
 8006b76:	d11e      	bne.n	8006bb6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2205      	movs	r2, #5
 8006b7e:	4252      	negs	r2, r2
 8006b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2202      	movs	r2, #2
 8006b86:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	699a      	ldr	r2, [r3, #24]
 8006b8e:	23c0      	movs	r3, #192	; 0xc0
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4013      	ands	r3, r2
 8006b94:	d004      	beq.n	8006ba0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	0018      	movs	r0, r3
 8006b9a:	f000 fa99 	bl	80070d0 <HAL_TIM_IC_CaptureCallback>
 8006b9e:	e007      	b.n	8006bb0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	0018      	movs	r0, r3
 8006ba4:	f000 fa8c 	bl	80070c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	0018      	movs	r0, r3
 8006bac:	f7fa f93e 	bl	8000e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	2208      	movs	r2, #8
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	2b08      	cmp	r3, #8
 8006bc2:	d124      	bne.n	8006c0e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	2208      	movs	r2, #8
 8006bcc:	4013      	ands	r3, r2
 8006bce:	2b08      	cmp	r3, #8
 8006bd0:	d11d      	bne.n	8006c0e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2209      	movs	r2, #9
 8006bd8:	4252      	negs	r2, r2
 8006bda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2204      	movs	r2, #4
 8006be0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	2203      	movs	r2, #3
 8006bea:	4013      	ands	r3, r2
 8006bec:	d004      	beq.n	8006bf8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f000 fa6d 	bl	80070d0 <HAL_TIM_IC_CaptureCallback>
 8006bf6:	e007      	b.n	8006c08 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	f000 fa60 	bl	80070c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	0018      	movs	r0, r3
 8006c04:	f7fa f912 	bl	8000e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	2210      	movs	r2, #16
 8006c16:	4013      	ands	r3, r2
 8006c18:	2b10      	cmp	r3, #16
 8006c1a:	d125      	bne.n	8006c68 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	2210      	movs	r2, #16
 8006c24:	4013      	ands	r3, r2
 8006c26:	2b10      	cmp	r3, #16
 8006c28:	d11e      	bne.n	8006c68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2211      	movs	r2, #17
 8006c30:	4252      	negs	r2, r2
 8006c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2208      	movs	r2, #8
 8006c38:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69da      	ldr	r2, [r3, #28]
 8006c40:	23c0      	movs	r3, #192	; 0xc0
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4013      	ands	r3, r2
 8006c46:	d004      	beq.n	8006c52 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	0018      	movs	r0, r3
 8006c4c:	f000 fa40 	bl	80070d0 <HAL_TIM_IC_CaptureCallback>
 8006c50:	e007      	b.n	8006c62 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	0018      	movs	r0, r3
 8006c56:	f000 fa33 	bl	80070c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	f7fa f8e5 	bl	8000e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	4013      	ands	r3, r2
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d10f      	bne.n	8006c96 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	4013      	ands	r3, r2
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d108      	bne.n	8006c96 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2202      	movs	r2, #2
 8006c8a:	4252      	negs	r2, r2
 8006c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	0018      	movs	r0, r3
 8006c92:	f000 fa0d 	bl	80070b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	2240      	movs	r2, #64	; 0x40
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	2b40      	cmp	r3, #64	; 0x40
 8006ca2:	d10f      	bne.n	8006cc4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	2240      	movs	r2, #64	; 0x40
 8006cac:	4013      	ands	r3, r2
 8006cae:	2b40      	cmp	r3, #64	; 0x40
 8006cb0:	d108      	bne.n	8006cc4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2241      	movs	r2, #65	; 0x41
 8006cb8:	4252      	negs	r2, r2
 8006cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	f000 fa16 	bl	80070f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cc4:	46c0      	nop			; (mov r8, r8)
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	b002      	add	sp, #8
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cd8:	2317      	movs	r3, #23
 8006cda:	18fb      	adds	r3, r7, r3
 8006cdc:	2200      	movs	r2, #0
 8006cde:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2238      	movs	r2, #56	; 0x38
 8006ce4:	5c9b      	ldrb	r3, [r3, r2]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d101      	bne.n	8006cee <HAL_TIM_OC_ConfigChannel+0x22>
 8006cea:	2302      	movs	r3, #2
 8006cec:	e042      	b.n	8006d74 <HAL_TIM_OC_ConfigChannel+0xa8>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2238      	movs	r2, #56	; 0x38
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b0c      	cmp	r3, #12
 8006cfa:	d027      	beq.n	8006d4c <HAL_TIM_OC_ConfigChannel+0x80>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b0c      	cmp	r3, #12
 8006d00:	d82c      	bhi.n	8006d5c <HAL_TIM_OC_ConfigChannel+0x90>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d019      	beq.n	8006d3c <HAL_TIM_OC_ConfigChannel+0x70>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b08      	cmp	r3, #8
 8006d0c:	d826      	bhi.n	8006d5c <HAL_TIM_OC_ConfigChannel+0x90>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <HAL_TIM_OC_ConfigChannel+0x50>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b04      	cmp	r3, #4
 8006d18:	d008      	beq.n	8006d2c <HAL_TIM_OC_ConfigChannel+0x60>
 8006d1a:	e01f      	b.n	8006d5c <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	0011      	movs	r1, r2
 8006d24:	0018      	movs	r0, r3
 8006d26:	f000 fb1b 	bl	8007360 <TIM_OC1_SetConfig>
      break;
 8006d2a:	e01c      	b.n	8006d66 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	0011      	movs	r1, r2
 8006d34:	0018      	movs	r0, r3
 8006d36:	f000 fb4f 	bl	80073d8 <TIM_OC2_SetConfig>
      break;
 8006d3a:	e014      	b.n	8006d66 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	0011      	movs	r1, r2
 8006d44:	0018      	movs	r0, r3
 8006d46:	f000 fb89 	bl	800745c <TIM_OC3_SetConfig>
      break;
 8006d4a:	e00c      	b.n	8006d66 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	0011      	movs	r1, r2
 8006d54:	0018      	movs	r0, r3
 8006d56:	f000 fbc1 	bl	80074dc <TIM_OC4_SetConfig>
      break;
 8006d5a:	e004      	b.n	8006d66 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8006d5c:	2317      	movs	r3, #23
 8006d5e:	18fb      	adds	r3, r7, r3
 8006d60:	2201      	movs	r2, #1
 8006d62:	701a      	strb	r2, [r3, #0]
      break;
 8006d64:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2238      	movs	r2, #56	; 0x38
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	5499      	strb	r1, [r3, r2]

  return status;
 8006d6e:	2317      	movs	r3, #23
 8006d70:	18fb      	adds	r3, r7, r3
 8006d72:	781b      	ldrb	r3, [r3, #0]
}
 8006d74:	0018      	movs	r0, r3
 8006d76:	46bd      	mov	sp, r7
 8006d78:	b006      	add	sp, #24
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d88:	2317      	movs	r3, #23
 8006d8a:	18fb      	adds	r3, r7, r3
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2238      	movs	r2, #56	; 0x38
 8006d94:	5c9b      	ldrb	r3, [r3, r2]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d101      	bne.n	8006d9e <HAL_TIM_PWM_ConfigChannel+0x22>
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	e0ad      	b.n	8006efa <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2238      	movs	r2, #56	; 0x38
 8006da2:	2101      	movs	r1, #1
 8006da4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b0c      	cmp	r3, #12
 8006daa:	d100      	bne.n	8006dae <HAL_TIM_PWM_ConfigChannel+0x32>
 8006dac:	e076      	b.n	8006e9c <HAL_TIM_PWM_ConfigChannel+0x120>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b0c      	cmp	r3, #12
 8006db2:	d900      	bls.n	8006db6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006db4:	e095      	b.n	8006ee2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	d04e      	beq.n	8006e5a <HAL_TIM_PWM_ConfigChannel+0xde>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b08      	cmp	r3, #8
 8006dc0:	d900      	bls.n	8006dc4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8006dc2:	e08e      	b.n	8006ee2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b04      	cmp	r3, #4
 8006dce:	d021      	beq.n	8006e14 <HAL_TIM_PWM_ConfigChannel+0x98>
 8006dd0:	e087      	b.n	8006ee2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	0011      	movs	r1, r2
 8006dda:	0018      	movs	r0, r3
 8006ddc:	f000 fac0 	bl	8007360 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699a      	ldr	r2, [r3, #24]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2108      	movs	r1, #8
 8006dec:	430a      	orrs	r2, r1
 8006dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	699a      	ldr	r2, [r3, #24]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2104      	movs	r1, #4
 8006dfc:	438a      	bics	r2, r1
 8006dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6999      	ldr	r1, [r3, #24]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	68da      	ldr	r2, [r3, #12]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	619a      	str	r2, [r3, #24]
      break;
 8006e12:	e06b      	b.n	8006eec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	0011      	movs	r1, r2
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	f000 fadb 	bl	80073d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	699a      	ldr	r2, [r3, #24]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2180      	movs	r1, #128	; 0x80
 8006e2e:	0109      	lsls	r1, r1, #4
 8006e30:	430a      	orrs	r2, r1
 8006e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699a      	ldr	r2, [r3, #24]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4931      	ldr	r1, [pc, #196]	; (8006f04 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006e40:	400a      	ands	r2, r1
 8006e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6999      	ldr	r1, [r3, #24]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	021a      	lsls	r2, r3, #8
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	619a      	str	r2, [r3, #24]
      break;
 8006e58:	e048      	b.n	8006eec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	0011      	movs	r1, r2
 8006e62:	0018      	movs	r0, r3
 8006e64:	f000 fafa 	bl	800745c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	69da      	ldr	r2, [r3, #28]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2108      	movs	r1, #8
 8006e74:	430a      	orrs	r2, r1
 8006e76:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	69da      	ldr	r2, [r3, #28]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2104      	movs	r1, #4
 8006e84:	438a      	bics	r2, r1
 8006e86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	69d9      	ldr	r1, [r3, #28]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	68da      	ldr	r2, [r3, #12]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	61da      	str	r2, [r3, #28]
      break;
 8006e9a:	e027      	b.n	8006eec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	0011      	movs	r1, r2
 8006ea4:	0018      	movs	r0, r3
 8006ea6:	f000 fb19 	bl	80074dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	69da      	ldr	r2, [r3, #28]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2180      	movs	r1, #128	; 0x80
 8006eb6:	0109      	lsls	r1, r1, #4
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	69da      	ldr	r2, [r3, #28]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	490f      	ldr	r1, [pc, #60]	; (8006f04 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006ec8:	400a      	ands	r2, r1
 8006eca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	69d9      	ldr	r1, [r3, #28]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	021a      	lsls	r2, r3, #8
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	61da      	str	r2, [r3, #28]
      break;
 8006ee0:	e004      	b.n	8006eec <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8006ee2:	2317      	movs	r3, #23
 8006ee4:	18fb      	adds	r3, r7, r3
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	701a      	strb	r2, [r3, #0]
      break;
 8006eea:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2238      	movs	r2, #56	; 0x38
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	5499      	strb	r1, [r3, r2]

  return status;
 8006ef4:	2317      	movs	r3, #23
 8006ef6:	18fb      	adds	r3, r7, r3
 8006ef8:	781b      	ldrb	r3, [r3, #0]
}
 8006efa:	0018      	movs	r0, r3
 8006efc:	46bd      	mov	sp, r7
 8006efe:	b006      	add	sp, #24
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	46c0      	nop			; (mov r8, r8)
 8006f04:	fffffbff 	.word	0xfffffbff

08006f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f12:	230f      	movs	r3, #15
 8006f14:	18fb      	adds	r3, r7, r3
 8006f16:	2200      	movs	r2, #0
 8006f18:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2238      	movs	r2, #56	; 0x38
 8006f1e:	5c9b      	ldrb	r3, [r3, r2]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_TIM_ConfigClockSource+0x20>
 8006f24:	2302      	movs	r3, #2
 8006f26:	e0bc      	b.n	80070a2 <HAL_TIM_ConfigClockSource+0x19a>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2238      	movs	r2, #56	; 0x38
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2239      	movs	r2, #57	; 0x39
 8006f34:	2102      	movs	r1, #2
 8006f36:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2277      	movs	r2, #119	; 0x77
 8006f44:	4393      	bics	r3, r2
 8006f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	4a58      	ldr	r2, [pc, #352]	; (80070ac <HAL_TIM_ConfigClockSource+0x1a4>)
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2280      	movs	r2, #128	; 0x80
 8006f5e:	0192      	lsls	r2, r2, #6
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d040      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0xde>
 8006f64:	2280      	movs	r2, #128	; 0x80
 8006f66:	0192      	lsls	r2, r2, #6
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d900      	bls.n	8006f6e <HAL_TIM_ConfigClockSource+0x66>
 8006f6c:	e088      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x178>
 8006f6e:	2280      	movs	r2, #128	; 0x80
 8006f70:	0152      	lsls	r2, r2, #5
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d100      	bne.n	8006f78 <HAL_TIM_ConfigClockSource+0x70>
 8006f76:	e088      	b.n	800708a <HAL_TIM_ConfigClockSource+0x182>
 8006f78:	2280      	movs	r2, #128	; 0x80
 8006f7a:	0152      	lsls	r2, r2, #5
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d900      	bls.n	8006f82 <HAL_TIM_ConfigClockSource+0x7a>
 8006f80:	e07e      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x178>
 8006f82:	2b70      	cmp	r3, #112	; 0x70
 8006f84:	d018      	beq.n	8006fb8 <HAL_TIM_ConfigClockSource+0xb0>
 8006f86:	d900      	bls.n	8006f8a <HAL_TIM_ConfigClockSource+0x82>
 8006f88:	e07a      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x178>
 8006f8a:	2b60      	cmp	r3, #96	; 0x60
 8006f8c:	d04f      	beq.n	800702e <HAL_TIM_ConfigClockSource+0x126>
 8006f8e:	d900      	bls.n	8006f92 <HAL_TIM_ConfigClockSource+0x8a>
 8006f90:	e076      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x178>
 8006f92:	2b50      	cmp	r3, #80	; 0x50
 8006f94:	d03b      	beq.n	800700e <HAL_TIM_ConfigClockSource+0x106>
 8006f96:	d900      	bls.n	8006f9a <HAL_TIM_ConfigClockSource+0x92>
 8006f98:	e072      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x178>
 8006f9a:	2b40      	cmp	r3, #64	; 0x40
 8006f9c:	d057      	beq.n	800704e <HAL_TIM_ConfigClockSource+0x146>
 8006f9e:	d900      	bls.n	8006fa2 <HAL_TIM_ConfigClockSource+0x9a>
 8006fa0:	e06e      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x178>
 8006fa2:	2b30      	cmp	r3, #48	; 0x30
 8006fa4:	d063      	beq.n	800706e <HAL_TIM_ConfigClockSource+0x166>
 8006fa6:	d86b      	bhi.n	8007080 <HAL_TIM_ConfigClockSource+0x178>
 8006fa8:	2b20      	cmp	r3, #32
 8006faa:	d060      	beq.n	800706e <HAL_TIM_ConfigClockSource+0x166>
 8006fac:	d868      	bhi.n	8007080 <HAL_TIM_ConfigClockSource+0x178>
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d05d      	beq.n	800706e <HAL_TIM_ConfigClockSource+0x166>
 8006fb2:	2b10      	cmp	r3, #16
 8006fb4:	d05b      	beq.n	800706e <HAL_TIM_ConfigClockSource+0x166>
 8006fb6:	e063      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6818      	ldr	r0, [r3, #0]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	6899      	ldr	r1, [r3, #8]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f000 fb48 	bl	800765c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2277      	movs	r2, #119	; 0x77
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	609a      	str	r2, [r3, #8]
      break;
 8006fe4:	e052      	b.n	800708c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	6899      	ldr	r1, [r3, #8]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	f000 fb31 	bl	800765c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2180      	movs	r1, #128	; 0x80
 8007006:	01c9      	lsls	r1, r1, #7
 8007008:	430a      	orrs	r2, r1
 800700a:	609a      	str	r2, [r3, #8]
      break;
 800700c:	e03e      	b.n	800708c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	6859      	ldr	r1, [r3, #4]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	001a      	movs	r2, r3
 800701c:	f000 faa4 	bl	8007568 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2150      	movs	r1, #80	; 0x50
 8007026:	0018      	movs	r0, r3
 8007028:	f000 fafe 	bl	8007628 <TIM_ITRx_SetConfig>
      break;
 800702c:	e02e      	b.n	800708c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	6859      	ldr	r1, [r3, #4]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	001a      	movs	r2, r3
 800703c:	f000 fac2 	bl	80075c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2160      	movs	r1, #96	; 0x60
 8007046:	0018      	movs	r0, r3
 8007048:	f000 faee 	bl	8007628 <TIM_ITRx_SetConfig>
      break;
 800704c:	e01e      	b.n	800708c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	6859      	ldr	r1, [r3, #4]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	001a      	movs	r2, r3
 800705c:	f000 fa84 	bl	8007568 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2140      	movs	r1, #64	; 0x40
 8007066:	0018      	movs	r0, r3
 8007068:	f000 fade 	bl	8007628 <TIM_ITRx_SetConfig>
      break;
 800706c:	e00e      	b.n	800708c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	0019      	movs	r1, r3
 8007078:	0010      	movs	r0, r2
 800707a:	f000 fad5 	bl	8007628 <TIM_ITRx_SetConfig>
      break;
 800707e:	e005      	b.n	800708c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007080:	230f      	movs	r3, #15
 8007082:	18fb      	adds	r3, r7, r3
 8007084:	2201      	movs	r2, #1
 8007086:	701a      	strb	r2, [r3, #0]
      break;
 8007088:	e000      	b.n	800708c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800708a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2239      	movs	r2, #57	; 0x39
 8007090:	2101      	movs	r1, #1
 8007092:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2238      	movs	r2, #56	; 0x38
 8007098:	2100      	movs	r1, #0
 800709a:	5499      	strb	r1, [r3, r2]

  return status;
 800709c:	230f      	movs	r3, #15
 800709e:	18fb      	adds	r3, r7, r3
 80070a0:	781b      	ldrb	r3, [r3, #0]
}
 80070a2:	0018      	movs	r0, r3
 80070a4:	46bd      	mov	sp, r7
 80070a6:	b004      	add	sp, #16
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	46c0      	nop			; (mov r8, r8)
 80070ac:	ffff00ff 	.word	0xffff00ff

080070b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80070b8:	46c0      	nop			; (mov r8, r8)
 80070ba:	46bd      	mov	sp, r7
 80070bc:	b002      	add	sp, #8
 80070be:	bd80      	pop	{r7, pc}

080070c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070c8:	46c0      	nop			; (mov r8, r8)
 80070ca:	46bd      	mov	sp, r7
 80070cc:	b002      	add	sp, #8
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070d8:	46c0      	nop			; (mov r8, r8)
 80070da:	46bd      	mov	sp, r7
 80070dc:	b002      	add	sp, #8
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80070e8:	46c0      	nop			; (mov r8, r8)
 80070ea:	46bd      	mov	sp, r7
 80070ec:	b002      	add	sp, #8
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070f8:	46c0      	nop			; (mov r8, r8)
 80070fa:	46bd      	mov	sp, r7
 80070fc:	b002      	add	sp, #8
 80070fe:	bd80      	pop	{r7, pc}

08007100 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007108:	46c0      	nop			; (mov r8, r8)
 800710a:	46bd      	mov	sp, r7
 800710c:	b002      	add	sp, #8
 800710e:	bd80      	pop	{r7, pc}

08007110 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	429a      	cmp	r2, r3
 8007126:	d107      	bne.n	8007138 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2201      	movs	r2, #1
 800712c:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	223a      	movs	r2, #58	; 0x3a
 8007132:	2101      	movs	r1, #1
 8007134:	5499      	strb	r1, [r3, r2]
 8007136:	e02a      	b.n	800718e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	429a      	cmp	r2, r3
 8007140:	d107      	bne.n	8007152 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2202      	movs	r2, #2
 8007146:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	223b      	movs	r2, #59	; 0x3b
 800714c:	2101      	movs	r1, #1
 800714e:	5499      	strb	r1, [r3, r2]
 8007150:	e01d      	b.n	800718e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	429a      	cmp	r2, r3
 800715a:	d107      	bne.n	800716c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2204      	movs	r2, #4
 8007160:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	223c      	movs	r2, #60	; 0x3c
 8007166:	2101      	movs	r1, #1
 8007168:	5499      	strb	r1, [r3, r2]
 800716a:	e010      	b.n	800718e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	429a      	cmp	r2, r3
 8007174:	d107      	bne.n	8007186 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2208      	movs	r2, #8
 800717a:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	223d      	movs	r2, #61	; 0x3d
 8007180:	2101      	movs	r1, #1
 8007182:	5499      	strb	r1, [r3, r2]
 8007184:	e003      	b.n	800718e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2239      	movs	r2, #57	; 0x39
 800718a:	2101      	movs	r1, #1
 800718c:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	0018      	movs	r0, r3
 8007192:	f7ff ffb5 	bl	8007100 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	761a      	strb	r2, [r3, #24]
}
 800719c:	46c0      	nop			; (mov r8, r8)
 800719e:	46bd      	mov	sp, r7
 80071a0:	b004      	add	sp, #16
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d10b      	bne.n	80071d4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2201      	movs	r2, #1
 80071c0:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d136      	bne.n	8007238 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	223a      	movs	r2, #58	; 0x3a
 80071ce:	2101      	movs	r1, #1
 80071d0:	5499      	strb	r1, [r3, r2]
 80071d2:	e031      	b.n	8007238 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d10b      	bne.n	80071f6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2202      	movs	r2, #2
 80071e2:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d125      	bne.n	8007238 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	223b      	movs	r2, #59	; 0x3b
 80071f0:	2101      	movs	r1, #1
 80071f2:	5499      	strb	r1, [r3, r2]
 80071f4:	e020      	b.n	8007238 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d10b      	bne.n	8007218 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2204      	movs	r2, #4
 8007204:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d114      	bne.n	8007238 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	223c      	movs	r2, #60	; 0x3c
 8007212:	2101      	movs	r1, #1
 8007214:	5499      	strb	r1, [r3, r2]
 8007216:	e00f      	b.n	8007238 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	429a      	cmp	r2, r3
 8007220:	d10a      	bne.n	8007238 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2208      	movs	r2, #8
 8007226:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	69db      	ldr	r3, [r3, #28]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d103      	bne.n	8007238 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	223d      	movs	r2, #61	; 0x3d
 8007234:	2101      	movs	r1, #1
 8007236:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	0018      	movs	r0, r3
 800723c:	f7f9 fdf6 	bl	8000e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	761a      	strb	r2, [r3, #24]
}
 8007246:	46c0      	nop			; (mov r8, r8)
 8007248:	46bd      	mov	sp, r7
 800724a:	b004      	add	sp, #16
 800724c:	bd80      	pop	{r7, pc}

0800724e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	429a      	cmp	r2, r3
 8007264:	d103      	bne.n	800726e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2201      	movs	r2, #1
 800726a:	761a      	strb	r2, [r3, #24]
 800726c:	e019      	b.n	80072a2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	429a      	cmp	r2, r3
 8007276:	d103      	bne.n	8007280 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2202      	movs	r2, #2
 800727c:	761a      	strb	r2, [r3, #24]
 800727e:	e010      	b.n	80072a2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	429a      	cmp	r2, r3
 8007288:	d103      	bne.n	8007292 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2204      	movs	r2, #4
 800728e:	761a      	strb	r2, [r3, #24]
 8007290:	e007      	b.n	80072a2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	429a      	cmp	r2, r3
 800729a:	d102      	bne.n	80072a2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2208      	movs	r2, #8
 80072a0:	761a      	strb	r2, [r3, #24]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	0018      	movs	r0, r3
 80072a6:	f7ff ff1b 	bl	80070e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	761a      	strb	r2, [r3, #24]
}
 80072b0:	46c0      	nop			; (mov r8, r8)
 80072b2:	46bd      	mov	sp, r7
 80072b4:	b004      	add	sp, #16
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	2380      	movs	r3, #128	; 0x80
 80072cc:	05db      	lsls	r3, r3, #23
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d007      	beq.n	80072e2 <TIM_Base_SetConfig+0x2a>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a1f      	ldr	r2, [pc, #124]	; (8007354 <TIM_Base_SetConfig+0x9c>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d003      	beq.n	80072e2 <TIM_Base_SetConfig+0x2a>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a1e      	ldr	r2, [pc, #120]	; (8007358 <TIM_Base_SetConfig+0xa0>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d108      	bne.n	80072f4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2270      	movs	r2, #112	; 0x70
 80072e6:	4393      	bics	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	2380      	movs	r3, #128	; 0x80
 80072f8:	05db      	lsls	r3, r3, #23
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d007      	beq.n	800730e <TIM_Base_SetConfig+0x56>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a14      	ldr	r2, [pc, #80]	; (8007354 <TIM_Base_SetConfig+0x9c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d003      	beq.n	800730e <TIM_Base_SetConfig+0x56>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a13      	ldr	r2, [pc, #76]	; (8007358 <TIM_Base_SetConfig+0xa0>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d108      	bne.n	8007320 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4a12      	ldr	r2, [pc, #72]	; (800735c <TIM_Base_SetConfig+0xa4>)
 8007312:	4013      	ands	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	4313      	orrs	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2280      	movs	r2, #128	; 0x80
 8007324:	4393      	bics	r3, r2
 8007326:	001a      	movs	r2, r3
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	4313      	orrs	r3, r2
 800732e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	689a      	ldr	r2, [r3, #8]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	615a      	str	r2, [r3, #20]
}
 800734c:	46c0      	nop			; (mov r8, r8)
 800734e:	46bd      	mov	sp, r7
 8007350:	b004      	add	sp, #16
 8007352:	bd80      	pop	{r7, pc}
 8007354:	40010800 	.word	0x40010800
 8007358:	40011400 	.word	0x40011400
 800735c:	fffffcff 	.word	0xfffffcff

08007360 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	2201      	movs	r2, #1
 8007370:	4393      	bics	r3, r2
 8007372:	001a      	movs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a1b      	ldr	r3, [r3, #32]
 800737c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2270      	movs	r2, #112	; 0x70
 800738e:	4393      	bics	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2203      	movs	r2, #3
 8007396:	4393      	bics	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	2202      	movs	r2, #2
 80073a8:	4393      	bics	r3, r2
 80073aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	621a      	str	r2, [r3, #32]
}
 80073d0:	46c0      	nop			; (mov r8, r8)
 80073d2:	46bd      	mov	sp, r7
 80073d4:	b006      	add	sp, #24
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	2210      	movs	r2, #16
 80073e8:	4393      	bics	r3, r2
 80073ea:	001a      	movs	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	4a13      	ldr	r2, [pc, #76]	; (8007454 <TIM_OC2_SetConfig+0x7c>)
 8007406:	4013      	ands	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	4a12      	ldr	r2, [pc, #72]	; (8007458 <TIM_OC2_SetConfig+0x80>)
 800740e:	4013      	ands	r3, r2
 8007410:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	021b      	lsls	r3, r3, #8
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	4313      	orrs	r3, r2
 800741c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2220      	movs	r2, #32
 8007422:	4393      	bics	r3, r2
 8007424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	011b      	lsls	r3, r3, #4
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	4313      	orrs	r3, r2
 8007430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	621a      	str	r2, [r3, #32]
}
 800744c:	46c0      	nop			; (mov r8, r8)
 800744e:	46bd      	mov	sp, r7
 8007450:	b006      	add	sp, #24
 8007452:	bd80      	pop	{r7, pc}
 8007454:	ffff8fff 	.word	0xffff8fff
 8007458:	fffffcff 	.word	0xfffffcff

0800745c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	4a1a      	ldr	r2, [pc, #104]	; (80074d4 <TIM_OC3_SetConfig+0x78>)
 800746c:	401a      	ands	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2270      	movs	r2, #112	; 0x70
 8007488:	4393      	bics	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2203      	movs	r2, #3
 8007490:	4393      	bics	r3, r2
 8007492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	4313      	orrs	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	4a0d      	ldr	r2, [pc, #52]	; (80074d8 <TIM_OC3_SetConfig+0x7c>)
 80074a2:	4013      	ands	r3, r2
 80074a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	021b      	lsls	r3, r3, #8
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	621a      	str	r2, [r3, #32]
}
 80074cc:	46c0      	nop			; (mov r8, r8)
 80074ce:	46bd      	mov	sp, r7
 80074d0:	b006      	add	sp, #24
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	fffffeff 	.word	0xfffffeff
 80074d8:	fffffdff 	.word	0xfffffdff

080074dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	4a1b      	ldr	r2, [pc, #108]	; (8007558 <TIM_OC4_SetConfig+0x7c>)
 80074ec:	401a      	ands	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	4a15      	ldr	r2, [pc, #84]	; (800755c <TIM_OC4_SetConfig+0x80>)
 8007508:	4013      	ands	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	4a14      	ldr	r2, [pc, #80]	; (8007560 <TIM_OC4_SetConfig+0x84>)
 8007510:	4013      	ands	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	021b      	lsls	r3, r3, #8
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	4a10      	ldr	r2, [pc, #64]	; (8007564 <TIM_OC4_SetConfig+0x88>)
 8007524:	4013      	ands	r3, r2
 8007526:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	031b      	lsls	r3, r3, #12
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	4313      	orrs	r3, r2
 8007532:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	685a      	ldr	r2, [r3, #4]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	621a      	str	r2, [r3, #32]
}
 800754e:	46c0      	nop			; (mov r8, r8)
 8007550:	46bd      	mov	sp, r7
 8007552:	b006      	add	sp, #24
 8007554:	bd80      	pop	{r7, pc}
 8007556:	46c0      	nop			; (mov r8, r8)
 8007558:	ffffefff 	.word	0xffffefff
 800755c:	ffff8fff 	.word	0xffff8fff
 8007560:	fffffcff 	.word	0xfffffcff
 8007564:	ffffdfff 	.word	0xffffdfff

08007568 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6a1b      	ldr	r3, [r3, #32]
 8007578:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	2201      	movs	r2, #1
 8007580:	4393      	bics	r3, r2
 8007582:	001a      	movs	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	22f0      	movs	r2, #240	; 0xf0
 8007592:	4393      	bics	r3, r2
 8007594:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	011b      	lsls	r3, r3, #4
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	4313      	orrs	r3, r2
 800759e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	220a      	movs	r2, #10
 80075a4:	4393      	bics	r3, r2
 80075a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	621a      	str	r2, [r3, #32]
}
 80075bc:	46c0      	nop			; (mov r8, r8)
 80075be:	46bd      	mov	sp, r7
 80075c0:	b006      	add	sp, #24
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	2210      	movs	r2, #16
 80075d6:	4393      	bics	r3, r2
 80075d8:	001a      	movs	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6a1b      	ldr	r3, [r3, #32]
 80075e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	4a0d      	ldr	r2, [pc, #52]	; (8007624 <TIM_TI2_ConfigInputStage+0x60>)
 80075ee:	4013      	ands	r3, r2
 80075f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	031b      	lsls	r3, r3, #12
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	22a0      	movs	r2, #160	; 0xa0
 8007600:	4393      	bics	r3, r2
 8007602:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	4313      	orrs	r3, r2
 800760c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	621a      	str	r2, [r3, #32]
}
 800761a:	46c0      	nop			; (mov r8, r8)
 800761c:	46bd      	mov	sp, r7
 800761e:	b006      	add	sp, #24
 8007620:	bd80      	pop	{r7, pc}
 8007622:	46c0      	nop			; (mov r8, r8)
 8007624:	ffff0fff 	.word	0xffff0fff

08007628 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2270      	movs	r2, #112	; 0x70
 800763c:	4393      	bics	r3, r2
 800763e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4313      	orrs	r3, r2
 8007646:	2207      	movs	r2, #7
 8007648:	4313      	orrs	r3, r2
 800764a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	609a      	str	r2, [r3, #8]
}
 8007652:	46c0      	nop			; (mov r8, r8)
 8007654:	46bd      	mov	sp, r7
 8007656:	b004      	add	sp, #16
 8007658:	bd80      	pop	{r7, pc}
	...

0800765c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
 8007668:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	4a09      	ldr	r2, [pc, #36]	; (8007698 <TIM_ETR_SetConfig+0x3c>)
 8007674:	4013      	ands	r3, r2
 8007676:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	021a      	lsls	r2, r3, #8
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	431a      	orrs	r2, r3
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	4313      	orrs	r3, r2
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	4313      	orrs	r3, r2
 8007688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	609a      	str	r2, [r3, #8]
}
 8007690:	46c0      	nop			; (mov r8, r8)
 8007692:	46bd      	mov	sp, r7
 8007694:	b006      	add	sp, #24
 8007696:	bd80      	pop	{r7, pc}
 8007698:	ffff00ff 	.word	0xffff00ff

0800769c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	221f      	movs	r2, #31
 80076ac:	4013      	ands	r3, r2
 80076ae:	2201      	movs	r2, #1
 80076b0:	409a      	lsls	r2, r3
 80076b2:	0013      	movs	r3, r2
 80076b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	43d2      	mvns	r2, r2
 80076be:	401a      	ands	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6a1a      	ldr	r2, [r3, #32]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	211f      	movs	r1, #31
 80076cc:	400b      	ands	r3, r1
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	4099      	lsls	r1, r3
 80076d2:	000b      	movs	r3, r1
 80076d4:	431a      	orrs	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	621a      	str	r2, [r3, #32]
}
 80076da:	46c0      	nop			; (mov r8, r8)
 80076dc:	46bd      	mov	sp, r7
 80076de:	b006      	add	sp, #24
 80076e0:	bd80      	pop	{r7, pc}
	...

080076e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2238      	movs	r2, #56	; 0x38
 80076f2:	5c9b      	ldrb	r3, [r3, r2]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d101      	bne.n	80076fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076f8:	2302      	movs	r3, #2
 80076fa:	e042      	b.n	8007782 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2238      	movs	r2, #56	; 0x38
 8007700:	2101      	movs	r1, #1
 8007702:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2239      	movs	r2, #57	; 0x39
 8007708:	2102      	movs	r1, #2
 800770a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2270      	movs	r2, #112	; 0x70
 8007720:	4393      	bics	r3, r2
 8007722:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	4313      	orrs	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	2380      	movs	r3, #128	; 0x80
 800773c:	05db      	lsls	r3, r3, #23
 800773e:	429a      	cmp	r2, r3
 8007740:	d009      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a11      	ldr	r2, [pc, #68]	; (800778c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d004      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a0f      	ldr	r2, [pc, #60]	; (8007790 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d10c      	bne.n	8007770 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2280      	movs	r2, #128	; 0x80
 800775a:	4393      	bics	r3, r2
 800775c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	4313      	orrs	r3, r2
 8007766:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2239      	movs	r2, #57	; 0x39
 8007774:	2101      	movs	r1, #1
 8007776:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2238      	movs	r2, #56	; 0x38
 800777c:	2100      	movs	r1, #0
 800777e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	0018      	movs	r0, r3
 8007784:	46bd      	mov	sp, r7
 8007786:	b004      	add	sp, #16
 8007788:	bd80      	pop	{r7, pc}
 800778a:	46c0      	nop			; (mov r8, r8)
 800778c:	40010800 	.word	0x40010800
 8007790:	40011400 	.word	0x40011400

08007794 <__cxa_guard_acquire>:
 8007794:	0003      	movs	r3, r0
 8007796:	2001      	movs	r0, #1
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	4202      	tst	r2, r0
 800779c:	d105      	bne.n	80077aa <__cxa_guard_acquire+0x16>
 800779e:	785a      	ldrb	r2, [r3, #1]
 80077a0:	2a00      	cmp	r2, #0
 80077a2:	d000      	beq.n	80077a6 <__cxa_guard_acquire+0x12>
 80077a4:	deff      	udf	#255	; 0xff
 80077a6:	7058      	strb	r0, [r3, #1]
 80077a8:	4770      	bx	lr
 80077aa:	2000      	movs	r0, #0
 80077ac:	e7fc      	b.n	80077a8 <__cxa_guard_acquire+0x14>

080077ae <__cxa_guard_release>:
 80077ae:	2301      	movs	r3, #1
 80077b0:	6003      	str	r3, [r0, #0]
 80077b2:	4770      	bx	lr

080077b4 <__libc_init_array>:
 80077b4:	b570      	push	{r4, r5, r6, lr}
 80077b6:	2600      	movs	r6, #0
 80077b8:	4d0c      	ldr	r5, [pc, #48]	; (80077ec <__libc_init_array+0x38>)
 80077ba:	4c0d      	ldr	r4, [pc, #52]	; (80077f0 <__libc_init_array+0x3c>)
 80077bc:	1b64      	subs	r4, r4, r5
 80077be:	10a4      	asrs	r4, r4, #2
 80077c0:	42a6      	cmp	r6, r4
 80077c2:	d109      	bne.n	80077d8 <__libc_init_array+0x24>
 80077c4:	2600      	movs	r6, #0
 80077c6:	f000 f821 	bl	800780c <_init>
 80077ca:	4d0a      	ldr	r5, [pc, #40]	; (80077f4 <__libc_init_array+0x40>)
 80077cc:	4c0a      	ldr	r4, [pc, #40]	; (80077f8 <__libc_init_array+0x44>)
 80077ce:	1b64      	subs	r4, r4, r5
 80077d0:	10a4      	asrs	r4, r4, #2
 80077d2:	42a6      	cmp	r6, r4
 80077d4:	d105      	bne.n	80077e2 <__libc_init_array+0x2e>
 80077d6:	bd70      	pop	{r4, r5, r6, pc}
 80077d8:	00b3      	lsls	r3, r6, #2
 80077da:	58eb      	ldr	r3, [r5, r3]
 80077dc:	4798      	blx	r3
 80077de:	3601      	adds	r6, #1
 80077e0:	e7ee      	b.n	80077c0 <__libc_init_array+0xc>
 80077e2:	00b3      	lsls	r3, r6, #2
 80077e4:	58eb      	ldr	r3, [r5, r3]
 80077e6:	4798      	blx	r3
 80077e8:	3601      	adds	r6, #1
 80077ea:	e7f2      	b.n	80077d2 <__libc_init_array+0x1e>
 80077ec:	08007860 	.word	0x08007860
 80077f0:	08007860 	.word	0x08007860
 80077f4:	08007860 	.word	0x08007860
 80077f8:	08007864 	.word	0x08007864

080077fc <memset>:
 80077fc:	0003      	movs	r3, r0
 80077fe:	1882      	adds	r2, r0, r2
 8007800:	4293      	cmp	r3, r2
 8007802:	d100      	bne.n	8007806 <memset+0xa>
 8007804:	4770      	bx	lr
 8007806:	7019      	strb	r1, [r3, #0]
 8007808:	3301      	adds	r3, #1
 800780a:	e7f9      	b.n	8007800 <memset+0x4>

0800780c <_init>:
 800780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780e:	46c0      	nop			; (mov r8, r8)
 8007810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007812:	bc08      	pop	{r3}
 8007814:	469e      	mov	lr, r3
 8007816:	4770      	bx	lr

08007818 <_fini>:
 8007818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781a:	46c0      	nop			; (mov r8, r8)
 800781c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781e:	bc08      	pop	{r3}
 8007820:	469e      	mov	lr, r3
 8007822:	4770      	bx	lr
